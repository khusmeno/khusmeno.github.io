<ManagementPack xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.0"><Manifest><Identity><ID>Microsoft.SystemCenter.ServiceManager.Discovery</ID><Version>7.7.16.19</Version></Identity><Name>Microsoft.SystemCenter.ServiceManager.Discovery</Name><References><Reference Alias="Windows"><ID>Microsoft.Windows.Library</ID><Version>6.1.7221.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="System"><ID>System.Library</ID><Version>6.1.7221.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="SM"><ID>Microsoft.SystemCenter.ServiceManager.Library</ID><Version>7.7.16.19</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference></References></Manifest><Monitoring><Discoveries><Discovery ID="Microsoft.SystemCenter.ServiceManager.Dw2012Database.Discovery" Enabled="true"
Target="SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer.2012" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SM!Microsoft.SystemCenter.ServiceManager.DwDatabase"><Property TypeID="SM!Microsoft.SystemCenter.ServiceManager.DwDatabase" PropertyID="ServerName" /><Property TypeID="SM!Microsoft.SystemCenter.ServiceManager.DwDatabase" PropertyID="DatabaseName" /><Property TypeID="System!System.Entity" PropertyID="DisplayName" /></DiscoveryClass><DiscoveryRelationship TypeID="SM!Microsoft.SystemCenter.ServiceManager.Dw2012HostsDwDatabase" /></DiscoveryTypes><DataSource ID="DS" RunAs="SM!Microsoft.SystemCenter.ServiceManager.DatabaseWriteActionAccount" TypeID="Windows!Microsoft.Windows.TimedScript.DiscoveryProvider"><IntervalSeconds>86400</IntervalSeconds><SyncTime /><ScriptName>Dw2012DatabaseDiscovery.VBS</ScriptName><Arguments>$MPElement$ $Target/Id$
$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$ $Target/Property[Type="SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer"]/StagingDbHostName$ $Target/Property[Type="SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer"]/StagingDbName$</Arguments><ScriptBody>
            'Copyright (c) Microsoft Corporation. All rights reserved.
'*************************************************************************
' $ScriptName:  "GetSqlDriverName" $
'
' Purpose:      This script is used to get SQL Driver name.
'
' $File:        GetSqlDriverName.vbs $
'*************************************************************************
Option Explicit
Function GetSqlDriverName
    Dim oAPI1, oReg 
    Const HKEY_LOCAL_MACHINE = &amp;H80000002
    Dim strComputer, strDriverPath, strKeyPath, intValue, strValueName,arrSubKeys,oSubkey,strNewKeyPath,intDotIndex 
    strComputer = "."
    strDriverPath="SQLOLEDB"
    Set oReg=GetObject("winmgmts:\\" &amp; _ 
        strComputer &amp; "\root\default:StdRegProv")
    strKeyPath = "SOFTWARE\ODBC\ODBCINST.INI"
    oReg.EnumKey HKEY_LOCAL_MACHINE, strKeyPath, arrSubKeys
    For Each oSubkey In arrSubKeys
        intValue = InStr(oSubkey, "SQL Server Native Client")
        if intValue &lt;&gt; 0 Then
            strValueName = "Driver" 
            strNewKeyPath = strKeyPath&amp;"\"&amp;oSubkey
            oReg.GetStringValue HKEY_LOCAL_MACHINE, strNewKeyPath, strValueName , strDriverPath
            strDriverPath = Mid (strDriverPath, InStrRev(strDriverPath, "\")+1)
            intDotIndex = InStr(strDriverPath, ".")
            strDriverPath = Left(strDriverPath , intDotIndex-1)
        end if
    Next
    GetSqlDriverName = strDriverPath
End Function
            '*************************************************************************
' ScriptName: Dw2012DatabaseDiscovery.VBS
'
' Purpose - Discover the Data Warehouse databases in the environment.
'
' Parameters -  0 - discovery id
'               1 - Target managed entity id
'               2 - Host Computer Principal Name
'               3 - Staging DB Server
'               4 - Staging DB Name
'*************************************************************************  
SetLocale("en-us")
Dim sourceId,managedEntityId,oAPI,principalName, oDiscoveryData, StagingDBServer, StagingDBName
Set oAPI = CreateObject("MOM.ScriptAPI")
sourceId = WScript.Arguments(0)
managedEntityId = WScript.Arguments(1)
principalName = WScript.Arguments(2)
StagingDBServer = WScript.Arguments(3)
StagingDBName = WScript.Arguments(4)
Call oAPI.LogScriptEvent("Dw2012DatabaseDiscovery.VBS", 3000, 4, "Starting discovery of Service Manager Data Warehouse Databases")
Set oDiscoveryData = oAPI.CreateDiscoveryData(0, sourceId, managedEntityId)
Dim  connectionString, cnADOConnection, oResults,oQuery,oDwDatabaseInst, ServerName, DwDbName, strDriverName
strDriverName = GetSqlDriverName
connectionString = "Provider=" &amp; strDriverName &amp; ";Server=" &amp; StagingDBServer &amp; ";Integrated Security=SSPI;Initial Catalog=" &amp; StagingDBName
Set cnADOConnection = CreateObject("ADODB.Connection")
cnADOConnection.Open connectionString
cnADOConnection.CommandTimeout = 300
oQuery = "Select Server_48B308F9_CF0E_0F74_83E1_0AEB1B58E2FA AS ServerName, DataService_98B2DDF9_D9FD_9297_85D3_FCF36F1D016B AS DbName FROM MT_Microsoft�SystemCenter�ResourceAccessLayer�ASResourceStore Union " &amp;_
"Select Server_48B308F9_CF0E_0F74_83E1_0AEB1B58E2FA AS ServerName, DataService_98B2DDF9_D9FD_9297_85D3_FCF36F1D016B AS DbName FROM MT_Microsoft�SystemCenter�ResourceAccessLayer�CmdbResourceStore Union " &amp;_
"Select Server_48B308F9_CF0E_0F74_83E1_0AEB1B58E2FA AS ServerName, DataService_98B2DDF9_D9FD_9297_85D3_FCF36F1D016B AS DbName FROM MT_Microsoft�SystemCenter�ResourceAccessLayer�SqlResourceStore where Name_188E1D94_94DB_6A6B_3897_D7C2F6DFDBB6 = 'Ral.SqlResourceStore.Ods' Union " &amp;_
"Select Server_48B308F9_CF0E_0F74_83E1_0AEB1B58E2FA AS ServerName, DataService_98B2DDF9_D9FD_9297_85D3_FCF36F1D016B AS DbName FROM MT_Microsoft�SystemCenter�ResourceAccessLayer�SqlResourceStore where Name_188E1D94_94DB_6A6B_3897_D7C2F6DFDBB6 = 'Ral.SqlResourceStore.Repository' Union " &amp;_
"Select Server_48B308F9_CF0E_0F74_83E1_0AEB1B58E2FA AS ServerName, DataService_98B2DDF9_D9FD_9297_85D3_FCF36F1D016B AS DbName FROM MT_Microsoft�SystemCenter�ResourceAccessLayer�SqlResourceStore where Name_188E1D94_94DB_6A6B_3897_D7C2F6DFDBB6 = 'Ral.SqlResourceStore.Datamart' Union " &amp;_
"Select Server_48B308F9_CF0E_0F74_83E1_0AEB1B58E2FA AS ServerName, DataService_98B2DDF9_D9FD_9297_85D3_FCF36F1D016B AS DbName FROM MT_Microsoft�SystemCenter�ResourceAccessLayer�SqlResourceStore where Name_188E1D94_94DB_6A6B_3897_D7C2F6DFDBB6 like '%ExtractionSource' Union " &amp;_
"Select Server_48B308F9_CF0E_0F74_83E1_0AEB1B58E2FA AS ServerName, DataService_98B2DDF9_D9FD_9297_85D3_FCF36F1D016B AS DbName FROM MT_Microsoft�SystemCenter�ResourceAccessLayer�SrsResourceStore Union " &amp;_
"Select ServerName_3AAF92F8_EBD2_2235_C8E7_8E5DCEFED671 AS ServerName, DatabaseName_DB63F7A4_5275_0BE4_8592_2091384B4C68 AS DbName From MTV_Microsoft�SystemCenter�DataWarehouse�ConfigurationManager�DataSource"
oQuery = Replace(oQuery,"�","$")
oResults = CreateObject("ADODB.Recordset")
Set oResults = cnADOConnection.Execute(oQuery)
If oResults.State &lt;&gt; 0 Then
    Do Until oResults.EOF
        Call oAPI.LogScriptEvent("Dw2012DatabaseDiscovery.VBS", 3000, 4, "Discovered SCSM DataWarehouse Server Properties.")
        Set oDwDatabaseInst = oDiscoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwDatabase']$")
        ServerName = oResults.Fields("ServerName")
        DwDbName = oResults.Fields("DbName")
        Call oDwDatabaseInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwDatabase']/ServerName$", ServerName)
        Call oDwDatabaseInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwDatabase']/DatabaseName$", DwDbName)
        Call oDwDatabaseInst.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", principalName)
        Call oDwDatabaseInst.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", ServerName &amp; "\" &amp; DwDbName)
        Call oDiscoveryData.AddInstance(oDwDatabaseInst)
        oResults.MoveNext
    Loop
End If
If oResults.State &lt;&gt; 0 Then
    oResults.Close
End If
cnADOConnection.Close
' Submit the discovery data to the Operations Manager database.
Call oAPI.Return(oDiscoveryData)
Call oAPI.LogScriptEvent("Dw2012DatabaseDiscovery.VBS", 3000, 4, "Finishing Data Warehouse Database Discovery.")
WScript.Quit
            </ScriptBody><TimeoutSeconds>300</TimeoutSeconds></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.ServiceManager.DwManagementGroup.Discovery" Enabled="true" Target="SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer" /><DiscoveryClass TypeID="SM!Microsoft.SystemCenter.ServiceManager.DwManagementGroup" /><DiscoveryClass TypeID="SM!Microsoft.SystemCenter.ServiceManager.Application" /><DiscoveryRelationship TypeID="SM!Microsoft.SystemCenter.ServiceManager.DwMgtGroupContainsDwMgtServer" /><DiscoveryRelationship TypeID="SM!Microsoft.SystemCenter.ServiceManager.SmContainsMgGroups" /></DiscoveryTypes><DataSource ID="DS"
TypeID="Windows!Microsoft.Windows.TimedScript.DiscoveryProvider"><IntervalSeconds>86400</IntervalSeconds><SyncTime>02:00</SyncTime><ScriptName>DwManagementGroupDiscovery.vbs</ScriptName><Arguments>$MPElement$ $Target/Id$ $Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$ $Target/Property[Type="SM!Microsoft.SystemCenter.ServiceManager.ManagementServer"]/Version$</Arguments><ScriptBody>'*************************************************************************
' ScriptName: DwManagementGroupDiscovery.vbs
'
' Purpose - Populate properties of DW Management Server Group
'
' Parameters -  0 - discovery id
'               1 - Target managed entity id
'               2 - Host Computer Principal Name
'		    3 - Version
'*************************************************************************  
Option Explicit
SetLocale("en-us")
Dim sourceId,managedEntityId,oAPI,strKeyPath,principalName, version, oDiscoveryData
				
Set oAPI = CreateObject("MOM.ScriptAPI")
sourceId = WScript.Arguments(0)
managedEntityId = WScript.Arguments(1)
principalName = WScript.Arguments(2)
version = WScript.Arguments(3)
					
' Fetching Data Warehouse Management Group using WMI
Call oAPI.LogScriptEvent("DwManagementGroupDiscovery.vbs", 3000, 4, "Starting discovery of Service Manager DataWarehouse Management Group.")
Set oDiscoveryData = oAPI.CreateDiscoveryData(0, sourceId, managedEntityId)
Dim oReg, iResult, arrSubKeys, managementGroupName
Set oReg = GetObject("winmgmts:\\" &amp; principalName &amp; "\root\default:StdRegProv")
If Err &lt;&gt; 0 Then
	Call oAPI.LogScriptEvent("SmManagementServerDiscovery.vbs", 3000, 4, "Unable to bind to WMI registry provider on " &amp; principalName &amp; ".  Terminating Discovery.")
        Call oAPI.Return(oDiscoveryData)
	WScript.Quit
End if
Const HKLM = &amp;H80000002
          
	iResult = oReg.Enumkey(HKLM, "SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Server Management Groups", arrSubKeys)
	If iResult = 0 then
		Call oAPI.LogScriptEvent("DwManagementGroupDiscovery.vbs", 3000, 4, "Discovered SCSM " &amp; version &amp;" DataWarehouse Group.")
		Dim dwMgName,oMgtServerInst,oMgGroupInst,oRelMgGroupContainsMgServer,oSmAppInst,oRelSmContainsMg			
		dwMgName = arrSubKeys(0)
		' Instantiate Data Warehouse Management Server instance 
		If version = "2010" then
			Set oMgtServerInst = oDiscoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer.2010']$")
		Else
			Set oMgtServerInst = oDiscoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer.2012']$")
		End If
    
		Call oMgtServerInst.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", principalName)
		Call oDiscoveryData.AddInstance(oMgtServerInst)
		' Management Group Creation
					
		Set oMgGroupInst = oDiscoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwManagementGroup']$")
		Call oMgGroupInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.ManagementGroup']/GroupName$", dwMgName)
		Call oMgGroupInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.ManagementGroup']/Version$", version)
		Call oMgGroupInst.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$",dwMgName)
		Call oDiscoveryData.AddInstance(oMgtServerInst)
		' Management Group Contains Managment Server Relationship Creation
					
		Set oRelMgGroupContainsMgServer = oDiscoveryData.CreateRelationshipInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwMgtGroupContainsDwMgtServer']$")
		oRelMgGroupContainsMgServer.Source = oMgGroupInst
		oRelMgGroupContainsMgServer.Target = oMgtServerInst
		Call oDiscoveryData.AddInstance(oRelMgGroupContainsMgServer)
		' Instantiate SM class
					
		Set oSmAppInst = oDiscoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.Application']$")
		Call oSmAppInst.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", "Service Manager")
		Call oSmAppInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.Application']/InstanceName$", "Microsoft System Center Service Manager")
		Call oDiscoveryData.AddInstance(oSmAppInst)
		' SM contains Management Groups 
					
		Set oRelSmContainsMg = oDiscoveryData.CreateRelationshipInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.SmContainsMgGroups']$")
		oRelSmContainsMg.Source = oSmAppInst
		oRelSmContainsMg.Target = oMgGroupInst
		Call oDiscoveryData.AddInstance(oRelSmContainsMg)
	End If
Call oAPI.LogScriptEvent("DwManagementGroupDiscovery.vbs", 3000, 4, "Ending discovery of Service Manager DataWarehouse Group.")
Call oAPI.Return(oDiscoveryData)
WScript.Quit</ScriptBody><TimeoutSeconds>300</TimeoutSeconds></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.ServiceManager.DwManagementServer.Discovery" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer" /></DiscoveryTypes><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedScript.DiscoveryProvider"><IntervalSeconds>86400</IntervalSeconds><SyncTime /><ScriptName>DWManagementServerDiscovery.vbs</ScriptName><Arguments>$MPElement$ $Target/Id$ $Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$ $Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</Arguments><ScriptBody>
'*************************************************************************
' ScriptName: DWManagementServerDiscovery.vbs
'
' Purpose - Populate properties of DW Management Server
'
' Parameters -  0 - discovery id
'               1 - Target managed entity id
'               2 - Host Computer Principal Name
'		3 - Network Name
'*************************************************************************
Option Explicit
SetLocale("en-us")
On Error Resume Next
Dim oAPI, sourceId, managedEntityId, principalName, networkName
Set oAPI = CreateObject("MOM.ScriptAPI")
sourceId = WScript.Arguments(0)
managedEntityId = WScript.Arguments(1)
principalName = WScript.Arguments(2)
networkName = WScript.Arguments(3)
Call oAPI.LogScriptEvent("DWManagementServerDiscovery.vbs", 3000, 4, "Starting discovery of Service Manager DataWarehouse Server.")
Dim oReg, arrSubKeys, sdkServiceType, iResult, oDiscoveryData, oInst, currentVersion
Set oDiscoveryData = oAPI.CreateDiscoveryData(0, sourceId, managedEntityId)
Set oReg = GetObject("winmgmts:\\" &amp; principalName &amp; "\root\default:StdRegProv")
If Err &lt;&gt; 0 Then
	Call oAPI.LogScriptEvent("DWManagementServerDiscovery.vbs", 3000, 4, "Unable to bind to WMI registry provider on " &amp; principalName &amp; ".  Terminating Discovery.")
        Call oAPI.Return(oDiscoveryData)
	WScript.Quit
End if
Const HKEY_LOCAL_MACHINE = &amp;H80000002
'Begin SCSM Discovery
	iResult = oReg.Enumkey(HKEY_LOCAL_Machine, "SOFTWARE\Microsoft\System Center\2010\Service Manager\Setup", arrSubKeys)
	If iResult = 0 then
		iResult = oReg.Enumkey(HKEY_LOCAL_Machine, "SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Server Management Groups", arrSubKeys)
		If iResult = 0 then
			iResult = oReg.GetDWORDValue(HKEY_LOCAL_Machine, "SOFTWARE\Microsoft\System Center\2010\Common\SDK Service", "SDK Service Type", sdkServiceType)
			If iResult = 0 then
				If sdkServiceType = 2 then
					iResult = oReg.GetStringValue(HKEY_LOCAL_Machine, "SOFTWARE\Microsoft\System Center\2010\Service Manager\Setup", "CurrentVersion", currentVersion)
					If iResult = 0 then
						'Determine SM Version
						Dim  iMajorProductVersion, iMinorProductVersion, iFirstPeriod, iSecondPeriod, Version
						iFirstPeriod = InStr(currentVersion, ".")
						iSecondPeriod = InStr(iFirstPeriod+1, currentVersion,".")
						iMajorProductVersion = Left(currentVersion, iFirstPeriod-1)
						iMinorProductVersion = Mid(currentVersion, iFirstPeriod+1, iSecondPeriod-iFirstPeriod-1)
						If iMajorProductVersion = 7 and iMinorProductVersion = 0 then
							Version = "2010"
							Set oInst = oDiscoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer.2010']$")
						Else
							Version = currentVersion
							Set oInst = oDiscoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer.2012']$")
						End If
            Call oAPI.LogScriptEvent("DWManagementServerDiscovery.vbs", 3000, 4, "Discovered SCSM "&amp; Version &amp; " DataWarehouse Server.")
						Call oInst.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", principalName)
						Call oInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer']/ServerName$", networkName)
						Call oInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.ManagementServer']/Version$", Version)
						Call oInst.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$",  principalName)
						Call oDiscoveryData.AddInstance(oInst)
					End If
				End if
			End If
		End If
	End If
Call oAPI.Return(oDiscoveryData)
Call oAPI.LogScriptEvent("DWManagementServerDiscovery.vbs", 3000, 4, "Ending discovery of Service Manager DataWarehouse Server.")
WScript.Quit
</ScriptBody><TimeoutSeconds>300</TimeoutSeconds></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.ServiceManager.DwManagementServerProperties.Discovery" Enabled="true" Target="SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer.2010" /><DiscoveryClass TypeID="SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer.2012" /></DiscoveryTypes><DataSource ID="DS" RunAs="SM!Microsoft.SystemCenter.ServiceManager.DatabaseWriteActionAccount" TypeID="Windows!Microsoft.Windows.TimedScript.DiscoveryProvider"><IntervalSeconds>86400</IntervalSeconds><SyncTime>01:00</SyncTime><ScriptName>DwMgtServerPropDiscovery.vbs</ScriptName><Arguments>$MPElement$ $Target/Id$ $Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$
$Target/Property[Type="SM!Microsoft.SystemCenter.ServiceManager.ManagementServer"]/Version$</Arguments><ScriptBody>
            'Copyright (c) Microsoft Corporation. All rights reserved.
'*************************************************************************
' $ScriptName:  "GetSqlDriverName" $
'
' Purpose:      This script is used to get SQL Driver name.
'
' $File:        GetSqlDriverName.vbs $
'*************************************************************************
Option Explicit
Function GetSqlDriverName
    Dim oAPI1, oReg 
    Const HKEY_LOCAL_MACHINE = &amp;H80000002
    Dim strComputer, strDriverPath, strKeyPath, intValue, strValueName,arrSubKeys,oSubkey,strNewKeyPath,intDotIndex 
    strComputer = "."
    strDriverPath="SQLOLEDB"
    Set oReg=GetObject("winmgmts:\\" &amp; _ 
        strComputer &amp; "\root\default:StdRegProv")
    strKeyPath = "SOFTWARE\ODBC\ODBCINST.INI"
    oReg.EnumKey HKEY_LOCAL_MACHINE, strKeyPath, arrSubKeys
    For Each oSubkey In arrSubKeys
        intValue = InStr(oSubkey, "SQL Server Native Client")
        if intValue &lt;&gt; 0 Then
            strValueName = "Driver" 
            strNewKeyPath = strKeyPath&amp;"\"&amp;oSubkey
            oReg.GetStringValue HKEY_LOCAL_MACHINE, strNewKeyPath, strValueName , strDriverPath
            strDriverPath = Mid (strDriverPath, InStrRev(strDriverPath, "\")+1)
            intDotIndex = InStr(strDriverPath, ".")
            strDriverPath = Left(strDriverPath , intDotIndex-1)
        end if
    Next
    GetSqlDriverName = strDriverPath
End Function
            '*************************************************************************
' ScriptName: DwMgtServerPropDiscovery.vbs
'
' Purpose - Populate properties of DW Management Server
'
' Parameters -  0 - discovery id
'               1 - Target managed entity id
'               2 - Host Computer Principal Name
'               3 - Version
'*************************************************************************  
SetLocale("en-us")
Dim sourceId,managedEntityId,oAPI,strKeyPath,principalName, version, oDiscoveryData
Set oAPI = CreateObject("MOM.ScriptAPI")
sourceId = WScript.Arguments(0)
managedEntityId = WScript.Arguments(1)
principalName = WScript.Arguments(2)
version = WScript.Arguments(3)
' Fetching Data Warehouse Management Group using WMI
Call oAPI.LogScriptEvent("DwMgtServerPropDiscovery.vbs", 3000, 4, "Starting discovery of Service Manager DataWarehouse Management Server.")
Set oDiscoveryData = oAPI.CreateDiscoveryData(0, sourceId, managedEntityId)
Dim oReg, iResult, arrSubKeys, managementGroupName
Set oReg = GetObject("winmgmts:\\" &amp; principalName &amp; "\root\default:StdRegProv")
If Err &lt;&gt; 0 Then
    Call oAPI.LogScriptEvent("DwMgtServerPropDiscovery.vbs", 3000, 4, "Unable to bind to WMI registry provider on " &amp; principalName &amp; ".  Terminating Discovery.")
        Call oAPI.Return(oDiscoveryData)
    WScript.Quit
End if
Const HKLM = &amp;H80000002
    iResult = oReg.Enumkey(HKLM, "SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Server Management Groups", arrSubKeys)
    If iResult = 0 then
        Call oAPI.LogScriptEvent("DwMgtServerPropDiscovery.vbs", 3000, 4, "Discovered SCSM " &amp; version &amp;" DataWarehouse Server Properties.")
        Dim dwMgName,oMgtServerInst,oMgGroupInst,oRelMgGroupContainsMgServer,oSmAppInst,oRelSmContainsMg, arrRegValues, oRegDictionary, strKeyRoot, queryResult, allQueriesPassed, Value
        dwMgName = arrSubKeys(0)
                
        arrRegValues = Array("DataMartSQLInstance", "DataMartDatabaseName", "RepositorySQLInstance", "RepositoryDatabaseName", "DatabaseServerName", "DatabaseName")
        Set oRegDictionary = CreateObject("Scripting.Dictionary")
        strKeyRoot = "SOFTWARE\Microsoft\System Center\2010\Common\Database"
        allQueriesPassed = True
        For Each Value in arrRegValues
            iResult = oReg.GetStringValue(HKLM, strKeyRoot, Value, queryResult)
            If iResult = 0 then
                oRegDictionary.item(Value) = queryResult
            Else
                allQueriesPassed = False
                Exit For
            End If
        Next
        
        If allQueriesPassed = True then
            'Instantiate Data Warehouse Management Server instance 
            If version = "2010" then
                Set oMgtServerInst = oDiscoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer.2010']$")
            Else
                Set oMgtServerInst = oDiscoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer.2012']$")
            End If
            Call oMgtServerInst.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", principalName)
            Call oMgtServerInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.ManagementServer']/ManagementGroupName$", dwMgName)
            
            Call oMgtServerInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer']/DataMartDbName$", oRegDictionary.item("DataMartDatabaseName"))
            Call oMgtServerInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer']/DataMartDbHostName$", oRegDictionary.item("DataMartSQLInstance"))
            Call oMgtServerInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer']/RepositoryDbName$", oRegDictionary.item("RepositoryDatabaseName"))
            Call oMgtServerInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer']/RepositoryDbHostName$", oRegDictionary.item("RepositorySQLInstance"))
            Call oMgtServerInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer']/StagingDbName$", oRegDictionary.item("DatabaseName"))
            Call oMgtServerInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer']/StagingDbHostName$", oRegDictionary.item("DatabaseServerName"))
            Dim  connectionString, cnADOConnection, oResults,oQuery,sourceName, strDriverName
            strDriverName = GetSqlDriverName
            connectionString = "Provider=" &amp; strDriverName &amp; ";Server=" &amp; oRegDictionary.item("DatabaseServerName") &amp; ";Integrated Security=SSPI;Initial Catalog=" &amp; oRegDictionary.item("DatabaseName")
            Set cnADOConnection = CreateObject("ADODB.Connection")
            cnADOConnection.Open connectionString
            cnADOConnection.CommandTimeout = 300
            oQuery = "select SourceName from etl.source where SourceTypeId ='2'"
            oResults = CreateObject("ADODB.Recordset")
            Set oResults = cnADOConnection.Execute(oQuery)
                    
            If oResults.State &lt;&gt; 0 Then
                Do Until oResults.EOF
                    If oResults.Fields("SourceName") &lt;&gt; dwMgName Then
                        sourceName = sourceName &amp; oResults.Fields("SourceName")&amp; ","
                    End If
                    oResults.MoveNext
                Loop
            End If
            If oResults.State &lt;&gt; 0 Then
                oResults.Close
            End If
            cnADOConnection.Close
                    
            if(isEmpty(sourceName)) Then
                sourceName = ""
                        Else
                sourceName = Left(sourceName,(Len(sourceName)-1))
            End If
                    
            Call oMgtServerInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.DwManagementServer']/SmManagementGroups$", sourceName)
            Call oDiscoveryData.AddInstance(oMgtServerInst)
        End If
    End If
                                            
' Submit the discovery data to the Operations Manager database.
Call oAPI.Return(oDiscoveryData)
Call oAPI.LogScriptEvent("DwMgtServerPropDiscovery.vbs", 3000, 4, "Finishing DataWarehouse properties discovery.")
WScript.Quit
            </ScriptBody><TimeoutSeconds>300</TimeoutSeconds></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.ServiceManager.SmManagementGroup.Discovery" Enabled="true" Target="SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer" /><DiscoveryClass TypeID="SM!Microsoft.SystemCenter.ServiceManager.SmManagementGroup" /><DiscoveryClass TypeID="SM!Microsoft.SystemCenter.ServiceManager.Application" /><DiscoveryRelationship TypeID="SM!Microsoft.SystemCenter.ServiceManager.SmContainsMgGroups" /><DiscoveryRelationship TypeID="SM!Microsoft.SystemCenter.ServiceManager.SmMgtGroupContainsSmMgtServer" /></DiscoveryTypes><DataSource ID="DS"
TypeID="Windows!Microsoft.Windows.TimedScript.DiscoveryProvider"><IntervalSeconds>86400</IntervalSeconds><SyncTime>02:00</SyncTime><ScriptName>SmManagementGroupDiscovery.vbs</ScriptName><Arguments>$MPElement$ $Target/Id$ $Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$ $Target/Property[Type="SM!Microsoft.SystemCenter.ServiceManager.ManagementServer"]/Version$</Arguments><ScriptBody>'*************************************************************************
' ScriptName: SmManagementGroupDiscovery.vbs
'
' Purpose - Populate properties of SM Management Server Group
'
' Parameters -  0 - discovery id
'               1 - Target managed entity id
'               2 - Host Computer Principal Name
'		3 - Version
'*************************************************************************
Option Explicit
SetLocale("en-us")
On Error Resume Next
Dim oAPI, sourceId, managedEntityId, hostCompPrincipalName, version, discoveryData
Set oAPI = CreateObject("Mom.ScriptAPI")
sourceId = WScript.Arguments(0)
managedEntityId = WScript.Arguments(1)
hostCompPrincipalName = WScript.Arguments(2)
version = WScript.Arguments(3)
					
Call oAPI.LogScriptEvent("SmManagementServerGroupDiscovery.vbs", 3000, 4, "Starting discovery of Service Manager Management Server Group.")
Set discoveryData = oAPI.CreateDiscoveryData(0, sourceId, managedEntityId)
Dim oReg, iResult, arrSubKeys, managementGroupName, oMgtServer, oMgtGroup, oMgtGroupContainsMgtServer, oSmApp, oSmContainsMg
Set oReg = GetObject("winmgmts:\\" &amp; hostCompPrincipalName &amp; "\root\default:StdRegProv")
If Err &lt;&gt; 0 Then
	Call oAPI.LogScriptEvent("SmManagementServerDiscovery.vbs", 3000, 4, "Unable to bind to WMI registry provider on " &amp; hostCompPrincipalName &amp; ".  Terminating Discovery.")
        Call oAPI.Return(discoveryData)
	WScript.Quit
End if
Const HKLM = &amp;H80000002
	iResult = oReg.Enumkey(HKLM, "SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Server Management Groups", arrSubKeys)
	If iResult = 0 then
		Call oAPI.LogScriptEvent("SmManagementServerGroupDiscovery.vbs", 3000, 4, "Discovered SCSM " &amp; version &amp;" Management Server Group.")
		managementGroupName = arrSubKeys(0)
		'Instantiate Management Server Class
		If version = "2010" then
			Set oMgtServer = discoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer.2010']$")
		Else
			Set oMgtServer = discoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer.2012']$")
		End If
    
		Call oMgtServer.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$",hostCompPrincipalName)
            Call discoveryData.AddInstance(oMgtServer)
		'Instantiate ManagementGroup Class
		Set oMgtGroup = discoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.SmManagementGroup']$")
		Call oMgtGroup.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.ManagementGroup']/GroupName$", managementGroupName)
		Call oMgtGroup.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.ManagementGroup']/Version$", version)
		Call oMgtGroup.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", managementGroupName)
		Call discoveryData.AddInstance(oMgtGroup)
		'Instantiate SM Management Group Contains SM Management Server Relationship
	  	Set oMgtGroupContainsMgtServer = discoveryData.CreateRelationshipInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.SmMgtGroupContainsSmMgtServer']$")
		oMgtGroupContainsMgtServer.Source = oMgtGroup
		oMgtGroupContainsMgtServer.Target = oMgtServer
		Call discoveryData.AddInstance(oMgtGroupContainsMgtServer)
		'Instantiate Service Manager Class
		Set oSmApp = discoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.Application']$")
		Call oSmApp.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.Application']/InstanceName$", "Microsoft System Center Service Manager")
		Call oSmApp.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", "Service Manager")
		Call discoveryData.AddInstance(oSmApp)
		'Instantiate Service Manager contains Management Groups Relationship
		Set oSmContainsMg = discoveryData.CreateRelationshipInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.SmContainsMgGroups']$")
		oSmContainsMg.Source = oSmApp
		oSmContainsMg.Target = oMgtGroup
		Call discoveryData.AddInstance(oSmContainsMg)
	End If
'End If
Call oAPI.Return(discoveryData)
Call oAPI.LogScriptEvent("SmManagementServerGroupDiscovery.vbs", 3000, 4, "Ending discovery of Service Manager Management Server Group.")
WScript.Quit</ScriptBody><TimeoutSeconds>300</TimeoutSeconds></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.ServiceManager.SmManagementServer.Discovery" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer" /></DiscoveryTypes><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedScript.DiscoveryProvider"><IntervalSeconds>86400</IntervalSeconds><SyncTime /><ScriptName>SmManagementServerDiscovery.vbs</ScriptName><Arguments>$MPElement$ $Target/Id$ $Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$ $Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</Arguments><ScriptBody>
'*************************************************************************
' ScriptName: SmManagementServerDiscovery.vbs
'
' Purpose - Populate properties of SM Management Server
'
' Parameters -  0 - discovery id
'               1 - Target managed entity id
'               2 - Host Computer Principal Name
'		3 - Network Name
'*************************************************************************
Option Explicit
SetLocale("en-us")
On Error Resume Next
Dim oAPI, sourceId, managedEntityId, principalName, networkName
Set oAPI = CreateObject("MOM.ScriptAPI")
sourceId = WScript.Arguments(0)
managedEntityId = WScript.Arguments(1)
principalName = WScript.Arguments(2)
networkName = WScript.Arguments(3)
Call oAPI.LogScriptEvent("SmManagementServerDiscovery.vbs", 3000, 4, "Starting discovery of Service Manager Management Server.")
Dim oReg, arrSubKeys, sdkServiceType, iResult, oDiscoveryData, oInst, currentVersion
Set oDiscoveryData = oAPI.CreateDiscoveryData(0, sourceId, managedEntityId)
Set oReg = GetObject("winmgmts:\\" &amp; principalName &amp; "\root\default:StdRegProv")
If Err &lt;&gt; 0 Then
	Call oAPI.LogScriptEvent("SmManagementServerDiscovery.vbs", 3000, 4, "Unable to bind to WMI registry provider on " &amp; principalName &amp; ".  Terminating Discovery.")
        Call oAPI.Return(oDiscoveryData)
	WScript.Quit
End if
Const HKEY_LOCAL_MACHINE = &amp;H80000002
 
'Begin SCSM 2010 Discovery
	iResult = oReg.Enumkey(HKEY_LOCAL_Machine, "SOFTWARE\Microsoft\System Center\2010\Service Manager\Setup", arrSubKeys)
	If iResult = 0 then
		iResult = oReg.Enumkey(HKEY_LOCAL_Machine, "SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Server Management Groups", arrSubKeys)
		If iResult = 0 then
			iResult = oReg.GetDWORDValue(HKEY_LOCAL_Machine, "SOFTWARE\Microsoft\System Center\2010\Common\SDK Service", "SDK Service Type", sdkServiceType)
			If iResult = 0 then
				If sdkServiceType = 1 then	
					iResult = oReg.GetStringValue(HKEY_LOCAL_Machine, "SOFTWARE\Microsoft\System Center\2010\Service Manager\Setup", "CurrentVersion", currentVersion)
					If iResult = 0 then
						'Determine SM Version
						Dim  iMajorProductVersion, iMinorProductVersion, iFirstPeriod, iSecondPeriod, Version
						iFirstPeriod = InStr(currentVersion, ".")
						iSecondPeriod = InStr(iFirstPeriod+1, currentVersion,".")
						iMajorProductVersion = Left(currentVersion, iFirstPeriod-1)
						iMinorProductVersion = Mid(currentVersion, iFirstPeriod+1, iSecondPeriod-iFirstPeriod-1)
						If iMajorProductVersion = 7 and iMinorProductVersion = 0 then
							Version = "2010"
							Set oInst = oDiscoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer.2010']$")
						Else
							Version = currentVersion
							Set oInst = oDiscoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer.2012']$")
						End If		
						Call oAPI.LogScriptEvent("SmManagementServerDiscovery.vbs", 3000, 4, "Discovered SCSM "&amp; Version &amp;" Management Server.")
						Call oInst.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", principalName)
						Call oInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer']/ServerName$", networkName)
						Call oInst.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.ManagementServer']/Version$", Version)
						Call oInst.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$",  principalName)
						Call oDiscoveryData.AddInstance(oInst)
					End If
				End If
			End If
		End If
	End If
Call oAPI.Return(oDiscoveryData)
Call oAPI.LogScriptEvent("SmManagementServerDiscovery.vbs", 3000, 4, "Ending discovery of Service Manager Management Server.")
WScript.Quit
</ScriptBody><TimeoutSeconds>300</TimeoutSeconds></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.ServiceManager.SmManagementServerProperties.Discovery" Enabled="true" Target="SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer.2010" /><DiscoveryClass TypeID="SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer.2012" /></DiscoveryTypes><DataSource ID="DS" RunAs="SM!Microsoft.SystemCenter.ServiceManager.DatabaseWriteActionAccount" TypeID="Windows!Microsoft.Windows.TimedScript.DiscoveryProvider"><IntervalSeconds>86400</IntervalSeconds><SyncTime>01:00</SyncTime><ScriptName>ManagementServerPropertyDiscovery.vbs</ScriptName><Arguments>$MPElement$ $Target/Id$ $Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$
$Target/Property[Type="SM!Microsoft.SystemCenter.ServiceManager.ManagementServer"]/Version$</Arguments><ScriptBody>
            'Copyright (c) Microsoft Corporation. All rights reserved.
'*************************************************************************
' $ScriptName:  "GetSqlDriverName" $
'
' Purpose:      This script is used to get SQL Driver name.
'
' $File:        GetSqlDriverName.vbs $
'*************************************************************************
Option Explicit
Function GetSqlDriverName
    Dim oAPI1, oReg 
    Const HKEY_LOCAL_MACHINE = &amp;H80000002
    Dim strComputer, strDriverPath, strKeyPath, intValue, strValueName,arrSubKeys,oSubkey,strNewKeyPath,intDotIndex 
    strComputer = "."
    strDriverPath="SQLOLEDB"
    Set oReg=GetObject("winmgmts:\\" &amp; _ 
        strComputer &amp; "\root\default:StdRegProv")
    strKeyPath = "SOFTWARE\ODBC\ODBCINST.INI"
    oReg.EnumKey HKEY_LOCAL_MACHINE, strKeyPath, arrSubKeys
    For Each oSubkey In arrSubKeys
        intValue = InStr(oSubkey, "SQL Server Native Client")
        if intValue &lt;&gt; 0 Then
            strValueName = "Driver" 
            strNewKeyPath = strKeyPath&amp;"\"&amp;oSubkey
            oReg.GetStringValue HKEY_LOCAL_MACHINE, strNewKeyPath, strValueName , strDriverPath
            strDriverPath = Mid (strDriverPath, InStrRev(strDriverPath, "\")+1)
            intDotIndex = InStr(strDriverPath, ".")
            strDriverPath = Left(strDriverPath , intDotIndex-1)
        end if
    Next
    GetSqlDriverName = strDriverPath
End Function
            '*************************************************************************
' ScriptName: ManagementServerPropertyDiscovery.vbs
'
' Purpose - Populate properties of SM Management Server
'
' Parameters -  0 - discovery id
'               1 - Target managed entity id
'               2 - Host Computer Principal Name	
'               3 - Version
'*************************************************************************
SetLocale("en-us")
On Error Resume Next
Dim oAPI, sourceId, managedEntityId, hostCompPrincipalName, discoveryData, serverRunningWorkflows, isRunningWorkflows, version
Set oAPI = CreateObject("Mom.ScriptAPI")
sourceId = WScript.Arguments(0)
managedEntityId = WScript.Arguments(1)
hostCompPrincipalName = WScript.Arguments(2)
version = WScript.Arguments(3)
'Creating discovery data
Call oAPI.LogScriptEvent("ManagementServerPropertyDiscovery.vbs", 3000, 4, "Starting discovery of Service Manager Management Server Properties.")
Set discoveryData = oAPI.CreateDiscoveryData(0, sourceId, managedEntityId)
'Get management group name from registry
Dim oReg, iResult, arrSubKeys, managementGroupName, oMgtServer, smDbHostName, smDbName
Set oReg = GetObject("winmgmts:\\" &amp; hostCompPrincipalName &amp; "\root\default:StdRegProv")
If Err &lt;&gt; 0 Then
    Call oAPI.LogScriptEvent("ManagementServerPropertyDiscovery.vbs", 3000, 4, "Unable to bind to WMI registry provider on " &amp; hostCompPrincipalName &amp; ".  Terminating Discovery.")
        Call oAPI.Return(discoveryData)
    WScript.Quit
End if
Const HKLM = &amp;H80000002
    iResult = oReg.Enumkey(HKLM, "SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Server Management Groups", arrSubKeys)
    If iResult = 0 then						
        managementGroupName = arrSubKeys(0)
        iResult = oReg.GetStringValue(HKLM, "SOFTWARE\Microsoft\System Center\2010\Common\Database", "DatabaseServerName", smDbHostName)
        If iResult = 0 then
            iResult = oReg.GetStringValue(HKLM, "SOFTWARE\Microsoft\System Center\2010\Common\Database", "DatabaseName", smDbName)
            If iResult = 0 then
                'Instantiate Management Server Class
                Call oAPI.LogScriptEvent("ManagementServerPropertyDiscovery.vbs", 3000, 4, "Discovered SCSM " &amp; version &amp; " Management Server Properties.")
                If version = "2010" then
                    Set oMgtServer = discoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer.2010']$")
                Else
                    Set oMgtServer = discoveryData.CreateClassInstance("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer.2012']$")
                End If
                Call oMgtServer.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.ManagementServer']/ManagementGroupName$", managementGroupName)
                Call oMgtServer.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer']/SmDbHostName$", smDbHostName)
                Call oMgtServer.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer']/SMDbName$", smDbName)
                Call oMgtServer.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$",hostCompPrincipalName)
                    Dim  connectionString, cnADOConnection, oResults,oQuery,sourceName, strDriverName
                    strDriverName = GetSqlDriverName
                    connectionString = "Provider=" &amp; strDriverName &amp; "; Data Source=" &amp; smDbHostName &amp; "; Trusted_Connection=Yes; Initial Catalog=" &amp; smDbName &amp; ";"
                    Set cnADOConnection = CreateObject("ADODB.Connection")
                    cnADOConnection.Open connectionString
                    cnADOConnection.CommandTimeout = 300
                    oQuery = "select CONVERT(nvarchar(4000),B.Name) as ServerName from ScopedInstanceTargetClass SCT inner join ManagedType MT on MT.ManagedTypeId = SCT.ManagedTypeId inner join BaseManagedEntity B on B.BaseManagedEntityId = SCT.ScopedInstanceId where MT.TypeName ='Microsoft.SystemCenter.WorkflowTarget'"
                    Set oResults = CreateObject("ADODB.Recordset")
                    oResults.Open oQuery, cnADOConnection, 3, 3
                    If oResults.State &lt;&gt; 0 and oResults.RecordCount &gt; 0 Then
                        Do Until oResults.EOF
                            serverRunningWorkflows = oResults.Fields("ServerName")
                        oResults.MoveNext
                        Loop
                    End If
                    If oResults.State &lt;&gt; 0 Then
                        oResults.Close
                End If
                    cnADOConnection.Close
                    
                    if(isEmpty(serverRunningWorkflows)) Then
                        serverRunningWorkflows = ""
                    End If                
                If LCase(hostCompPrincipalName) = LCase(serverRunningWorkflows) then
                    isRunningWorkflows = true
                Else
                    isRunningWorkflows = false
                End If
                Call oMgtServer.AddProperty("$MPElement[Name='SM!Microsoft.SystemCenter.ServiceManager.SmManagementServer']/isRunningWorkflows$",isRunningWorkflows)
                Call discoveryData.AddInstance(oMgtServer)
            End If
        End If
    End If
Call oAPI.Return(discoveryData)
            Call oAPI.LogScriptEvent("ManagementServerPropertyDiscovery.vbs", 3000, 4, "Finishined Discovering SCSM " &amp; version &amp;" Management Server Properties.")
WScript.Quit
</ScriptBody><TimeoutSeconds>300</TimeoutSeconds></DataSource></Discovery></Discoveries></Monitoring><LanguagePacks><LanguagePack ID="ENU" IsDefault="true"><DisplayStrings><DisplayString ElementID="Microsoft.SystemCenter.ServiceManager.Discovery"><Name>Microsoft System Center Service Manager Discovery</Name><Description>Service Manager Discovery management pack.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ServiceManager.Dw2012Database.Discovery"><Name>Discover Data Warehouse Databases</Name><Description>Discovers Data Warehouse databases and where they are hosted.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ServiceManager.DwManagementGroup.Discovery"><Name>Service Manager Data Warehouse Roll-up Discovery</Name><Description>Discovers properties of Data Warehouse Management Group</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ServiceManager.DwManagementServer.Discovery"><Name>Data
Warehouse Management Server Discovery</Name><Description>Discovers Microsoft System Center Data Warehouse Management Server.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ServiceManager.DwManagementServerProperties.Discovery"><Name>Microsoft System Center Data Warehouse Management Server Properties Discovery</Name><Description>Discovers properties of Microsoft System Center Data Warehouse Management Server</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ServiceManager.SmManagementGroup.Discovery"><Name>Service Manager Roll-up Discovery</Name><Description>Discovers properties of Service Manager Management Group</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ServiceManager.SmManagementServer.Discovery"><Name>Service Manager Management Server Discovery</Name><Description>Discovers Microsoft System Center Service Manager Servers.</Description></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.ServiceManager.SmManagementServerProperties.Discovery"><Name>Service Manager Management Server Properties Discovery</Name><Description>Discovers properties of Microsoft System Center Service Manager.</Description></DisplayString></DisplayStrings><KnowledgeArticles><KnowledgeArticle ElementID="Microsoft.SystemCenter.ServiceManager.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Discovery Management pack for System Center Service Manager.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.ServiceManager.DwManagementGroup.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Disabling this discovery will prevent the instances Service Manager DataWarehouse from being populated in the diagram
view.Discovery runs immedietely after being imported followed by another run at 14:00, time to do initial discovery. Following this it runs at a 24 hour interval. Initial discovery time,Interval Seconds as well as timeout can be changed.Changing arguments is not recommended.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.ServiceManager.DwManagementServer.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Disabling this discovery will prevent Service Manager DataWarehouse Management Server from being discovered.Discovery runs once every day, however it can be changed by overriding the frequency.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.ServiceManager.DwManagementServerProperties.Discovery" Visible="true"><MamlContent><maml:section
xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This discovery populates Service Manager DataWarehouse properties.Discovery runs immedietely after being imported followed by another run at 13:00, the sync time. Following this it runs at a 24 hour interval. Sync time, frequency as well as the timeout can be changed.Changing arguments is not recommended.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.ServiceManager.SmManagementGroup.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Disabling this discovery will prevent the instances of Service Manager from being populated in the diagram view.Discovery runs immedietely after being imported followed by another run at 14:00, time to do initial discovery. Following this it runs at a 24 hour interval. Initial discovery
time,Interval Seconds as well as timeout can be changed.Changing arguments is not recommended.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.ServiceManager.SmManagementServer.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Disabling this discovery will prevent Service Manager from being discovered.Discovery runs once every day, however it can be changed by overriding the frequency.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.ServiceManager.SmManagementServerProperties.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This discovery populates Service Manager properties.Discovery runs immedietely after being imported followed by another run at 13:00, the
sync time. Following this it runs at a 24 hour interval. Sync time,frequency as well as timeout can be changed.Changing arguments is not recommended.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.ServiceManager.Dw2012Database.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This discovery populates Data Warehouse databases.Discovery runs immedietely after being imported.  Following this it runs at a 24 hour interval. Sync time,frequency as well as timeout can be changed.Changing arguments is not recommended.</maml:para></maml:section></MamlContent></KnowledgeArticle></KnowledgeArticles></LanguagePack></LanguagePacks></ManagementPack>
