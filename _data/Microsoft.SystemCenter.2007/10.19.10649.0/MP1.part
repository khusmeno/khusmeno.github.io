<ManagementPack xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.0"><Manifest><Identity><ID>Microsoft.SystemCenter.2007</ID><Version>10.19.10649.0</Version></Identity><Name>Microsoft System Center Core Management Pack</Name><References><Reference Alias="SCDW"><ID>Microsoft.SystemCenter.DataWarehouse.Library</ID><Version>7.0.8443.6</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="SCInternal"><ID>Microsoft.SystemCenter.Internal</ID><Version>7.0.8443.6</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="SCLibrary"><ID>Microsoft.SystemCenter.Library</ID><Version>7.0.8443.6</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="Windows"><ID>Microsoft.Windows.Library</ID><Version>7.5.8500.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference
Alias="Health"><ID>System.Health.Library</ID><Version>7.0.8443.6</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="System"><ID>System.Library</ID><Version>7.5.8500.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="Performance"><ID>System.Performance.Library</ID><Version>7.0.8443.6</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference></References></Manifest><TypeDefinitions><SecureReferences><SecureReference ID="Microsoft.SystemCenter.Tiering.TieredManagementGroupAccount" Accessibility="Public" Context="System!System.Entity" /><SecureReference ID="Microsoft.SystemCenter.AgentHealth.OpsMgrDB.SR" Accessibility="Internal" Context="SCLibrary!Microsoft.SystemCenter.AgentWatcher" /></SecureReferences><ModuleTypes><DataSourceModuleType ID="Microsoft.SystemCenter.SCOM.Certificate.Expiry.DataSourceModule" Accessibility="Internal" Batching="false"><Configuration><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" type="xsd:integer" name="TimeoutSeconds" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" type="xsd:integer" name="AlertBeforeNumDays" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" type="xsd:integer" name="IntervalSeconds" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /><OverrideableParameter ID="AlertBeforeNumDays" Selector="$Config/AlertBeforeNumDays$" ParameterType="int" /><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">$Config/IntervalSeconds$</Interval></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="Probe"
TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe"><ScriptName>ScomCertificateExpiryAlert.ps1</ScriptName><ScriptBody>
                    param($alertBeforeNumDays)
                    if($alertBeforeNumDays -eq $null -or $alertBeforeNumDays -eq "")
                    {
                      $alertBeforeNumDays = 7
                    }
                    $momAPI = new-object -comObject MOM.ScriptAPI
                    $thumbprint = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Machine Settings"
                    $thumbprint = $thumbprint.ChannelCertificateHash
                    $todaysDate = Get-Date
                    $expirationDate = (Get-ChildItem -path cert:\LocalMachine\My | where { $_.Thumbprint -eq $thumbprint }).NotAfter.Date
                    $daysToExpire = (NEW-TIMESPAN –Start $todaysDate –End $expirationDate).Days
                    $doGenerateAlert = "false"
                    if($daysToExpire -ne $null -and $daysToExpire -ne "" -and $daysToExpire -le $alertBeforeNumDays)
                    {
                      $doGenerateAlert = "true"
                    }else{
                      $doGenerateAlert = "false";
                    }
                    $oBag = $momAPI.CreatePropertyBag()
                    $oBag.AddValue("GenerateAlert", $doGenerateAlert)
                    $oBag.AddValue("ExpiryDays", $daysToExpire)
                    $oBag
                  </ScriptBody><Parameters><Parameter><Name>alertBeforeNumDays</Name><Value>$Config/AlertBeforeNumDays$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction></MemberModules><Composition><Node ID="Probe"><Node ID="Scheduler" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.CM.AEM.AlertModule" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="EventNumber" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupName" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Health Service Modules</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>$Config/EventNumber$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Value Type="String">$Config/ManagementGroupName$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery
Type="String">Params/Param[1]</XPathQuery></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></MemberModules><Composition><Node ID="EventDS" /></Composition></Composite></ModuleImplementation><OutputType>Windows!Microsoft.Windows.EventData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.HealthService.AvailabilityDataSource" Accessibility="Internal" Batching="true"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>554890b3-46b9-4d09-984b-13b5a986ccac</ClassID></Native></ModuleImplementation><OutputType>System!System.Availability.StateData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.HealthService.AvailabilityDataSource.Composite" Accessibility="Internal" Batching="true"><Configuration /><ModuleImplementation
Isolation="Any"><Composite><MemberModules><DataSource ID="DS" TypeID="Microsoft.SystemCenter.HealthService.AvailabilityDataSource"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId></DataSource></MemberModules><Composition><Node ID="DS" /></Composition></Composite></ModuleImplementation><OutputType>System!System.Availability.StateData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.HealthService.SCOMpercentageCPUTimeCounterDataSource" Accessibility="Internal" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="0" name="SyncTime" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
minOccurs="1" name="ComputerName" type="xsd:string" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /><OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><SyncTime>$Config/SyncTime$</SyncTime></DataSource><ProbeAction ID="Probe" TypeID="Microsoft.SystemCenter.HealthService.SCOMpercentageCPUTimeCounterProbe"><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><ComputerName>$Config/ComputerName$</ComputerName></ProbeAction></MemberModules><Composition><Node ID="Probe"><Node ID="Scheduler"
/></Node></Composition></Composite></ModuleImplementation><OutputType>Performance!System.Performance.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.HealthService.SyntheticHeartbeatDataSourceBase" Accessibility="Internal" Batching="true"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HeartbeatSourceEntityId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HeartbeatIntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SendToDefaultRoute" type="xsd:boolean" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>6F5A6A67-A183-47C2-9ADC-DBE49C02B1DA</ClassID></Native></ModuleImplementation><OutputType>System!System.BaseData</OutputType></DataSourceModuleType><DataSourceModuleType
ID="Microsoft.SystemCenter.HealthService.SyntheticHeartbeatDataSource" Accessibility="Internal" Batching="true"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HeartbeatSourceEntityId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HeartbeatIntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SendToDefaultRoute" type="xsd:boolean" /></Configuration><OverrideableParameters><OverrideableParameter ID="SendToDefaultRoute" Selector="$Config/SendToDefaultRoute$" ParameterType="bool" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS"
TypeID="Microsoft.SystemCenter.HealthService.SyntheticHeartbeatDataSourceBase"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><HeartbeatSourceEntityId>$Config/HeartbeatSourceEntityId$</HeartbeatSourceEntityId><HeartbeatIntervalSeconds>$Config/HeartbeatIntervalSeconds$</HeartbeatIntervalSeconds><SendToDefaultRoute>$Config/SendToDefaultRoute$</SendToDefaultRoute></DataSource></MemberModules><Composition><Node ID="DS" /></Composition></Composite></ModuleImplementation><OutputType>System!System.BaseData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.Composite.OnDemand.DataSource" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="MonitorId" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS"
TypeID="Microsoft.SystemCenter.HealthServiceWatcher.OnDemand.DataSource"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><MonitorId>$Config/MonitorId$</MonitorId><ManagedEntityTypeId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]$</ManagedEntityTypeId><KeyProperties><KeyProperty><PropertyId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthServiceWatchersGroup"]/WatcherGroupName$</PropertyId><IsCaseSensitive>false</IsCaseSensitive><Value>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatchersGroup"]/WatcherGroupName$</Value></KeyProperty><KeyProperty><PropertyId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceId$</PropertyId><IsCaseSensitive>false</IsCaseSensitive><Value /></KeyProperty></KeyProperties></DataSource><ProbeAction ID="Probe"
TypeID="Microsoft.SystemCenter.HealthServiceWatcher.Availability.Probe"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><InstanceId>$Data/KeyProperties/KeyProperty[2]/Value$</InstanceId></ProbeAction></MemberModules><Composition><Node ID="Probe"><Node ID="DS" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.Availability.StateData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.DataSource" Accessibility="Internal" Batching="true"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>80122ec8-48c4-47f1-8c70-e97b35e0e5e4</ClassID></Native></ModuleImplementation><OutputType>System!System.Availability.StateData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.DataSource.Composite"
Accessibility="Internal" Batching="true"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.DataSource"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId></DataSource></MemberModules><Composition><Node ID="DS" /></Composition></Composite></ModuleImplementation><OutputType>System!System.Availability.StateData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.OnDemand.DataSource" Accessibility="Internal" Batching="true"><Configuration><IncludeSchemaTypes><SchemaType>System!System.ManagedEntityKeysSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MonitorId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagedEntityTypeId"
type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="KeyProperties" type="System.ManagedEntityKeys" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>77ffa5fd-e0a3-4b70-944a-e5e4db353152</ClassID></Native></ModuleImplementation><OutputType>System!System.Typed.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.ManagementServicePoolWatcher.Composite.OnDemand.DataSource" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="MonitorId" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS"
TypeID="Microsoft.SystemCenter.HealthServiceWatcher.OnDemand.DataSource"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><MonitorId>$Config/MonitorId$</MonitorId><ManagedEntityTypeId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementServicePoolWatcher"]$</ManagedEntityTypeId><KeyProperties><KeyProperty><PropertyId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementServicePoolWatcher"]/PoolId$</PropertyId><IsCaseSensitive>false</IsCaseSensitive><Value /></KeyProperty></KeyProperties></DataSource><ProbeAction ID="Probe" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.Availability.Probe"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><InstanceId>$Data/KeyProperties/KeyProperty/Value$</InstanceId></ProbeAction></MemberModules><Composition><Node ID="Probe"><Node ID="DS" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.Availability.StateData</OutputType></DataSourceModuleType><DataSourceModuleType
ID="Microsoft.SystemCenter.OpsMgrDBPercentFreeSpaceProvider" Accessibility="Internal" RunAs="SCLibrary!Microsoft.SystemCenter.DatabaseWriteActionAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatabaseServerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatabaseName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:int" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler"
TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">$Config/IntervalSeconds$</Interval><SyncTime /></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe"><ScriptName>GetOpsMgrDBPercentFreeSpace.ps1</ScriptName><ScriptBody>
                  #Copyright (c) Microsoft Corporation. All rights reserved.
#*************************************************************************
# $ScriptName:  "GetOpsMgrDBPercentFreeSpace" $
#
# Purpose:      This script gets Operations Manager DB Percentage of free space. It returns the exact same value as of SQL MP's "MSSQL on Windows: DB Free Space Total (%)" rule
#
# $File:        GetOpsMgrDBPercentFreeSpace.ps1 $
#
# Parameters that should be passed to this script
# 0 DatabaseServerName
# 1 DatabaseName
&lt;#
-- The 2 GRANTs below are required on target SQL instance:
use master
GRANT VIEW SERVER STATE TO [YOURDOMAIN\SCOM_db_datawriter]
GRANT VIEW ANY DEFINITION TO [YOURDOMAIN\SCOM_db_datawriter]
#&gt;
#*************************************************************************
param($DatabaseServerName, $DatabaseName)
function CalculateGroupFreeSpace($files)
{
    $diskArray = @{}
	[double]$groupAvailableSpaceMB = 0.0
	[double]$groupUsedSpaceMB = 0
	[double]$groupAvailableSpaceNoGrowthMB = 0
	[double]$groupUsedSpaceNoGrowthMB = 0
	[bool]$noUsedSpaceInfo = $false
	[bool]$isTotalAutoGrow = $false
	if ($files -ne $null)
	{
		foreach ($file in $files)
		{
			$noUsedSpaceInfo = $noUsedSpaceInfo -or ($file.FileUsedSpaceMB -eq -1)
			$isTotalAutoGrow = $isTotalAutoGrow -or $file.IsAutoGrowEnabled
			$groupAvailableSpaceNoGrowthMB = $groupAvailableSpaceNoGrowthMB + $file.FileSizeMB
			$groupUsedSpaceNoGrowthMB = $groupUsedSpaceNoGrowthMB + $file.FileUsedSpaceMB
			$groupAvailableSpaceMB = $groupAvailableSpaceMB + $file.FileSizeMB
			$groupUsedSpaceMB = $groupUsedSpaceMB + $file.FileUsedSpaceMB
			$fileSize = $file.FileSizeMB
			if ($file.IsAutoGrowEnabled)
			{
				[double]$growthSpaceDisk = 0
				$growthSpaceMaxSize = [double]::MaxValue
				$fileGrowth = [double]$file.FileGrowth
				$fileMaxSize = $file.FileMaxSizeMB
				if ($file.IsPercentGrowth)
				{
					$fileGrowth = $fileGrowth / 100.0
                    # // when the FileSize approaches the limits of the logical disk, a large FileGrowth 
                    # // value can cause an error if the file tries to grow past the physical limit
                    # // calculate actual growth capacity on disk
					[int]$numberOfGrowths = CastToInt ([Math]::Log(($file.DiskFreeSpaceMB + $fileSize) / $fileSize) / [Math]::Log(1 + $fileGrowth))
					$growthSpaceDisk = $fileSize * [Math]::Pow(1.0 + $fileGrowth,$numberOfGrowths) - $fileSize
					
                    if ( (CastToInt $fileMaxSize) -ne -1) # //FileMaxSize Not Unlimited
					{
                        # // when the FileSize approaches the MaxSize, a large FileGrowth value can cause an error 
                        # // if the file tries to grow past the MaxSize value.
                        # // calculate actual growth capacity
						$numberOfGrowths = CastToInt ([Math]::Log($fileMaxSize / $fileSize)/ [Math]::Log(1 + $fileGrowth))
						$growthSpaceMaxSize = $fileSize * [Math]::Pow(1 + $fileGrowth,$numberOfGrowths) - $fileSize
					}
				}
				else
				{
					$fileGrowth = $fileGrowth / 128.0
					$growthSpaceDisk = (CastToInt ($file.DiskFreeSpaceMB / $fileGrowth))  * $fileGrowth
					if ( (CastToInt $fileMaxSize) -ne -1)
					{
						$growthSpaceMaxSize = ((CastToInt ($fileMaxSize - $fileSize)) / $fileGrowth) * $fileGrowth
					}
				}
				$growthAllowedMB = if ($growthSpaceMaxSize -lt $growthSpaceDisk) {$growthSpaceMaxSize} else {$growthSpaceDisk}
			    
                [string]$storageKey = GetStorageKey $file.PhysicalName $file.VolumeMountPoint $file.VolumeId
				[double]$logicalDriveGrowth = 0
                $logicalDriveGrowth = $diskArray[$storageKey]
                if ($logicalDriveGrowth -ne $null)
				{
					$tempSize = $logicalDriveGrowth + $growthAllowedMB
                    # // Using of DiskFreeSpaceMB may lead to incorrect results in the case 
                    # // when several files are on the same disk and have large file growth
                    # // TODO: Think about whether we can use something better then DiskFreeSpaceMB in this case
					$diskArray[$storageKey] = if ($tempSize -gt $file.DiskFreeSpaceMB) {$file.DiskFreeSpaceMB} else {$tempSize}
				}
				else
				{
                    $tmp_growthAllowedMB = if ($growthAllowedMB -gt $file.DiskFreeSpaceMB) {$file.DiskFreeSpaceMB} else {$growthAllowedMB}
					$diskArray.Add($storageKey, $tmp_growthAllowedMB )
				}
			}
		}
	}
	foreach ($storageGrowth in $diskArray.Values)
	{
		$groupAvailableSpaceMB += $storageGrowth
	}
    $result = (New-Object -TypeName psobject)
    $result | Add-Member -MemberType NoteProperty -Name NoSizeAllocationInfo -Value $noUsedSpaceInfo
    $result | Add-Member -MemberType NoteProperty -Name UsedSpaceMB -Value $groupUsedSpaceMB
    $result | Add-Member -MemberType NoteProperty -Name FreeSpaceMB -Value ($groupAvailableSpaceMB - $groupUsedSpaceMB)
	$result | Add-Member -MemberType NoteProperty -Name FreeSpacePercent -Value 0
    if ($groupAvailableSpaceMB -ne 0.0 -and $result.FreeSpaceMB -gt 0)
	{
		$result.FreeSpacePercent = $result.FreeSpaceMB / $groupAvailableSpaceMB * 100.0
	}
	else
	{
		$result.FreeSpaceMB = 0.0
		$result.FreeSpacePercent = 0.0
	}
    $result | Add-Member -MemberType NoteProperty -Name SizeMB -Value $groupAvailableSpaceNoGrowthMB
    $result | Add-Member -MemberType NoteProperty -Name FreeSpaceAutoGrowMB -Value ($groupAvailableSpaceNoGrowthMB - $groupUsedSpaceNoGrowthMB)
    $result | Add-Member -MemberType NoteProperty -Name FreeSpaceAutoGrowPercent -Value 0
	if ($groupAvailableSpaceNoGrowthMB -ne 0.0 -and $result.FreeSpaceAutoGrowMB -gt 0.0)
	{
		$result.FreeSpaceAutoGrowPercent = $result.FreeSpaceAutoGrowMB / $groupAvailableSpaceNoGrowthMB * 100.0
	}
	else
	{
		$result.FreeSpaceAutoGrowMB = 0.0
		$result.FreeSpaceAutoGrowPercent = 0.0
	}
    $result | Add-Member -MemberType NoteProperty -Name AllocatedFreeSpaceMB -Value ($result.SizeMB - $result.UsedSpaceMB)
	$result.AllocatedFreeSpaceMB = if($result.AllocatedFreeSpaceMB -lt 0.0) { 0.0 } else { $result.AllocatedFreeSpaceMB}
        
    $result | Add-Member -MemberType NoteProperty -Name DiskFreeSpaceMB -Value ($result.FreeSpaceMB - $result.AllocatedFreeSpaceMB)
	$result.DiskFreeSpaceMB = if($result.DiskFreeSpaceMB -lt 0.0) { 0.0 } else { $result.DiskFreeSpaceMB};
    $result | Add-Member -MemberType NoteProperty -Name TotalSpaceMB -Value ($result.DiskFreeSpaceMB + $result.AllocatedFreeSpaceMB + $result.UsedSpaceMB)
    $result | Add-Member -MemberType NoteProperty -Name AllocatedFreeSpacePercent -Value 0
    $result | Add-Member -MemberType NoteProperty -Name DiskFreeSpacePercent -Value 0
    $result | Add-Member -MemberType NoteProperty -Name UsedSpacePercent -Value 0
	if ($result.TotalSpaceMB -ne 0.0)
	{
		$result.AllocatedFreeSpacePercent = $result.AllocatedFreeSpaceMB / $result.TotalSpaceMB * 100.0
		$result.DiskFreeSpacePercent = $result.DiskFreeSpaceMB / $result.TotalSpaceMB * 100.0
		$result.UsedSpacePercent = $result.UsedSpaceMB / $result.TotalSpaceMB * 100.0
	}
	else
	{
		$result.AllocatedFreeSpacePercent = 0.0
		$result.DiskFreeSpacePercent = 0.0
		$result.UsedSpacePercent = 0.0
	}
	return $result
}
function GetStorageKey([string]$physicalName, [string]$volumeMountPoint, [string]$volumeId)
{
    [System.Text.RegularExpressions.Regex]$AzureRegex = (New-Object -TypeName System.Text.RegularExpressions.Regex -ArgumentList '^https?://([\da-z\.-]+)\.(?:[a-z\.]{2,6})(?:[/\w \.-]*)*/?$', ([System.Text.RegularExpressions.RegexOptions]::Compiled -bor [System.Text.RegularExpressions.RegexOptions]::CultureInvariant -bor [System.Text.RegularExpressions.RegexOptions]::IgnoreCase))
    [System.Text.RegularExpressions.Regex]$LocalStorageRegex = (New-Object -TypeName System.Text.RegularExpressions.Regex -ArgumentList '^(?:(?:\\\\\?\\)?(?&lt;drive&gt;(?:[A-Z]\:))|(?:\\\\\?\\(?&lt;drive&gt;Volume\{[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}\})))(?&lt;relpath&gt;(?:[\\/][^\\\:/]+)+(?:\:[^\\\:/]+)?)[\\/]?$', ([System.Text.RegularExpressions.RegexOptions]::Compiled -bor [System.Text.RegularExpressions.RegexOptions]::CultureInvariant -bor [System.Text.RegularExpressions.RegexOptions]::IgnoreCase))
    [System.Text.RegularExpressions.Regex]$RemoteStorageRegex = (New-Object -TypeName System.Text.RegularExpressions.Regex -ArgumentList '^\\\\(?:\?\\(?:UNC\\)?)?(?&lt;host&gt;(?!(?:Volume\{[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}\})|\?)[^\\\/:]+)[\\/](?&lt;relpath&gt;[^\\\/:]+(?:[\\/][^\\\:]+)*(?:\:[^\\\/:]+)?)[\\/]?$', ([System.Text.RegularExpressions.RegexOptions]::Compiled -bor [System.Text.RegularExpressions.RegexOptions]::CultureInvariant -bor [System.Text.RegularExpressions.RegexOptions]::IgnoreCase))
    $match = $AzureRegex.Match($physicalName)
	if ($match.Success)
	{
		return $match.Value
	}
	if (-not [string]::IsNullOrEmpty($volumeId))
	{
		return $volumeId
	}
	$correctedPath = $physicalName.Replace('/','\')
    $match = $RemoteStorageRegex.Match($correctedPath)
	if ($match.Success)
	{
        $subMatch = $RemoteStorageRegex.Match($volumeMountPoint)
		$hostsrv = $subMatch.Groups["host"].Captures[0].Value
        # // Not only Windows can hold SMB share.
        # // SMB share's path on Linux can be either case sensitive or insensitive (configurable)
        # // We don't know which OS holds the target share.
        # // That's why we put to upper case only host name
		$storageKey = [string]::Format('\\{0}\{1}',$hostsrv.ToUpper(),$subMatch.Groups["relpath"].Captures[0].Value)
		return $storageKey
	}
	throw (New-Object -TypeName Exception -ArgumentList "Unsupported path format")
}
function GetMonitoringData([string]$commandText, [string]$_azureMaxFileSizeMB, [string]$databaseServerName, [string]$databaseName)
{
    #  . .\GetSqlNativeClientCommon.ps1 # this should be included by the ModuleImplementation    
    $sqlAuth = GetSqlAuthentication
    $cn = New-Object -TypeName System.Data.SqlClient.SqlConnection    
    $cn.ConnectionString ="Server=" + $databaseServerName + ";" + $sqlAuth  + ";Initial Catalog=" + $databaseName
    $adp = New-Object -TypeName System.Data.SqlClient.SqlDataAdapter -ArgumentList $commandText,$cn
    $azureMaxFileSizeMBPar = (New-Object -TypeName System.Data.SqlClient.SqlParameter -ArgumentList "@azureMaxFileSizeMB",$_azureMaxFileSizeMB)
    $adp.SelectCommand.Parameters.Add($azureMaxFileSizeMBPar) | Out-Null
    $dt = New-Object -TypeName System.Data.DataTable
    $adp.Fill($dt) | out-null 
    $files = @() 
    foreach ($row in $dt.Rows)
    {
        if ([string]::IsNullOrEmpty($databaseName) -eq $false -and $row["DatabaseName"].ToString() -ne $databaseName) { continue }	# we are only interested with the given $databaseName 
        if ($row["FileType"] -ne 1) { continue } # we are only interested with ROWS Data
        $dbData = (New-Object -TypeName psobject)
        
        $dbData | Add-Member -MemberType NoteProperty -Name PhysicalName -Value $row["PhysicalName"]
        $dbData | Add-Member -MemberType NoteProperty -Name FileSizeMB -Value $row["FileSizeMB"]
        $dbData | Add-Member -MemberType NoteProperty -Name FileUsedSpaceMB -Value $row["FileUsedSpaceMB"]
        $dbData | Add-Member -MemberType NoteProperty -Name FileMaxSizeMB -Value $row["FileMaxSizeMB"]
        $dbData | Add-Member -MemberType NoteProperty -Name IsAutoGrowEnabled -Value $row["IsAutoGrowEnabled"]
        $dbData | Add-Member -MemberType NoteProperty -Name IsPercentGrowth -Value $row["IsPercentGrowth"]
        $dbData | Add-Member -MemberType NoteProperty -Name FileGrowth -Value $row["FileGrowth"]        
        $dbData | Add-Member -MemberType NoteProperty -Name Size -Value $row["Size"]
        $dbData | Add-Member -MemberType NoteProperty -Name VolumeMountPoint -Value $row["VolumeMountPoint"]
        $dbData | Add-Member -MemberType NoteProperty -Name VolumeId -Value $row["VolumeId"]
        $dbData | Add-Member -MemberType NoteProperty -Name DiskFreeSpaceMB -Value $row["DiskFreeSpaceMB"]
        $files += $dbData
    }
 
    $rowsCalcData = CalculateGroupFreeSpace $files
    return [System.Math]::Round( $rowsCalcData.FreeSpacePercent, 2 )
}
function CastToInt($valueToCastToInt) {
    # original code in SQL MP is using (int) casting in C# however [int] casting in PS returns different results.
    # E.g.   (int)3.5   in C#   returns 3  , while  [int]3.5   in PS returns 4 !
    # In fact, C# simply truncates, even with negative values.
    # Therefore we directly use Truncate() here in PS.
    [Math]::Truncate($valueToCastToInt)
}
function GetSqlDriverName() {
    # preparing reg drive. It will be removed automatically after exiting from this function. 
    if (-not (Get-PSDrive -PSProvider Registry -Name HKCR -ErrorAction SilentlyContinue)) {
        New-PSDrive -PSProvider Registry -Root HKEY_CLASSES_ROOT -Name HKCR | Out-Null
    }    
    # checking if MSOLEDBSQL is installed
    if (Get-ChildItem -Path HKCR:\MSOLEDBSQL -Include Clsid -Recurse -ErrorAction SilentlyContinue)
    {
        if ( (Get-ItemProperty -Path HKCR:\MSOLEDBSQL\Clsid).'(default)'.ToUpper() -eq '{5A23DE84-1D7B-4A16-8DED-B29C09CB648D}' ) {
            return "MSOLEDBSQL"
        }
    }
    
    # MSOLEDBSQL not found, checking for "SQL Server Native Client"
    $sqlncli_Key = Get-ChildItem -Path "HKLM:\SOFTWARE\ODBC\ODBCINST.INI" -Include "SQL Server Native Client*" -Recurse | Select-Object -First 1 #getting the first one in case there is an RDA Client as well
    if ($sqlncli_Key) {
        $driverFileFullPath = $sqlncli_Key.GetValue("Driver")
        if ($driverFileFullPath) {
            return [System.IO.Path]::GetFileNameWithoutExtension($driverFileFullPath) # returns usually "sqlncli11"
        }
    }
    # SQL Server Native Client not found, directly return SQLOLEDB
    return "SQLOLEDB"    
}
function GetSqlAuthentication() {
    $Aquila_Key = Get-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\Aquila -ErrorAction SilentlyContinue
    if ($Aquila_Key) {
        if ( $Aquila_Key.'SQLAuth' -eq 'AADI' ) {
            return "Authentication=ActiveDirectoryIntegrated"
        }
    }
    return "Integrated Security=SSPI"
}
$sql_GetDBSpaceData = @'
-- The 2 GRANTs below are required on target SQL instance:
--use master
--GRANT VIEW SERVER STATE TO [YOURDOMAIN\SCOM_db_datawriter]
--GRANT VIEW ANY DEFINITION TO [YOURDOMAIN\SCOM_db_datawriter]
DECLARE @dbName sysname, @sql nvarchar(2000), @needsMaster BIT;
IF OBJECT_ID ('tempdb.dbo.#ResultTable') IS NOT NULL DROP TABLE #ResultTable;
CREATE TABLE #ResultTable (
	[DatabaseName] SYSNAME
	,[FileName] SYSNAME
	,[FileType] TINYINT
	,FileSizeMB FLOAT(53)
	,FileUsedSpaceMB FLOAT(53)
	,FileMaxSizeMB FLOAT(53)
	,IsAutoGrowEnabled BIT
	,IsPercentGrowth BIT
	,FileGrowth INT
	,VolumeMountPoint NVARCHAR(256)
	,VolumeId NVARCHAR(256)
	,GroupKey NVARCHAR(22)
	,FilegroupName SYSNAME
	,FilegroupType NVARCHAR(2)
	,DiskFreeSpaceMB FLOAT(53)
	,PhysicalName NVARCHAR(260)
	);
DECLARE fileCursor CURSOR LOCAL STATIC FOR 
SELECT 
	[name]
	,CAST(CASE
		WHEN d.[replica_id] IS NOT NULL OR d.is_in_standby = 1 THEN 1
		ELSE 0
	END AS BIT) AS [needsMaster] 
	FROM sys.databases d
	WHERE HAS_DBACCESS([name]) = 1;
OPEN fileCursor;
FETCH NEXT FROM fileCursor INTO @dbName, @needsMaster;
WHILE @@Fetch_Status=0 BEGIN
	SET @sql = N'USE '+ QUOTENAME(@dbName ,'"') + N';
	SELECT 
		DB_NAME() AS [DatabaseName]
		,N'''' AS [FileName]
		,CASE
			WHEN f.[type] = 1 THEN 0
			WHEN fg.[type] COLLATE DATABASE_DEFAULT = ''FG'' THEN 1
			WHEN fg.[type] COLLATE DATABASE_DEFAULT = ''FD'' THEN 2
			WHEN fg.[type] COLLATE DATABASE_DEFAULT = ''FX'' THEN 3
			END AS [FileType]
		,CONVERT(FLOAT(53), f.size / 128.0) AS [FileSizeMB]
		,CONVERT(FLOAT(53), CASE
			WHEN f.[type] IN (0,1) THEN FILEPROPERTY(f.name, ''SpaceUsed'') / 128.0
			ELSE -1
			END) AS [FileUsedSpaceMB]
		,CONVERT(FLOAT(53), CASE 
			WHEN f.max_size = -1 OR f.max_size = 268435456 THEN -1 
			ELSE f.max_size / 128.0 
			END) as [FileMaxSizeMB]
		,CASE
			WHEN f.growth = 0 THEN 0
			ELSE 1
			END AS IsAutoGrowEnabled
		,f.is_percent_growth as [IsPercentGrowth]
		,f.growth AS [FileGrowth]
		,ovs.volume_mount_point AS [VolumeMountPoint]
		,ovs.volume_id AS [VolumeId]
		,N'''' AS [GroupKey]
		,N'''' AS [FilegroupName]
		,N'''' AS [FilegroupType]';
	IF @needsMaster = 0
	BEGIN
		SET @sql = @sql + N'
		,CONVERT(FLOAT(53), CASE 
			WHEN CharIndex(N''https://'',LTRIM(f.physical_name)) = 1 OR CharIndex(N''http://'',LTRIM(f.physical_name)) = 1 THEN @azureMaxFileSizeMB - f.size / 128.0
			ELSE ovs.available_bytes / 1048576.0 
			END) AS [DiskFreeSpaceMB]
		,f.physical_name AS [PhysicalName]
	FROM sys.database_files AS f WITH (NOLOCK)';
	END;
	ELSE
	BEGIN
		SET @sql = @sql +N'
		,CONVERT(FLOAT(53), CASE 
			WHEN CharIndex(N''https://'',LTRIM(mf.physical_name)) = 1 OR CharIndex(N''http://'',LTRIM(mf.physical_name)) = 1 THEN @azureMaxFileSizeMB - f.size / 128.0
			ELSE ovs.available_bytes / 1048576.0 
			END) AS [DiskFreeSpaceMB]
		,mf.physical_name AS [PhysicalName]
	FROM sys.database_files AS f WITH (NOLOCK)
	JOIN sys.master_files AS mf WITH (NOLOCK) ON f.file_id = mf.file_id AND mf.database_id = DB_ID()';
	END;
	
	SET @sql = @sql + N'
	LEFT JOIN sys.filegroups fg WITH (NOLOCK) ON f.data_space_id = fg.data_space_id
	CROSS APPLY sys.dm_os_volume_stats(DB_ID(), f.file_id) ovs
	WHERE f.is_read_only = 0 AND ((f.[type] = 1 AND fg.data_space_id IS NULL) OR (f.[type] IN (0,2) AND fg.data_space_id IS NOT NULL))';
	
	--BEGIN TRY
		INSERT INTO #ResultTable
		EXEC sp_executesql @sql, N'@azureMaxFileSizeMB INT', @azureMaxFileSizeMB = @azureMaxFileSizeMB
	--END TRY
	--BEGIN CATCH
	--END CATCH;
	FETCH NEXT FROM fileCursor INTO @dbName, @needsMaster;
END
CLOSE fileCursor;
DEALLOCATE fileCursor;
SELECT * FROM #ResultTable
'@
# ....................................................................................
#Create PropertyBag object
$momAPI = New-Object -ComObject MOM.ScriptAPI
$oBag = $momAPI.CreatePropertyBag()
#Define local event constants
$EVENT_TYPE_ERROR = 1 
$EVENT_TYPE_WARNING = 2 
$EVENT_TYPE_INFORMATION = 4 
$error.Clear()
$resultToReturn = 0
try {
    [string]$_azureMaxFileSizeMB = 1048576
    $resultToReturn = GetMonitoringData $sql_GetDBSpaceData $_azureMaxFileSizeMB $databaseServerName $databaseName
    $oBag.AddValue("ErrorFlag", 0)
    $oBag.AddValue("Error", "No error occurred.")
}
catch {
    $strMessage = ($_ | fl) | Out-String
    $momAPI.LogScriptEvent( "GetOpsMgrDBPercentFreeSpace.ps1", 100, $EVENT_TYPE_WARNING, $strMessage )
    $oBag.AddValue("ErrorFlag", 1)
    $oBag.AddValue("Error", $strMessage)
}
$oBag.AddValue("DBPercentFreeSpace", $resultToReturn)
$oBag
                  </ScriptBody><Parameters><Parameter><Name>DatabaseServerName</Name><Value>$Config/DatabaseServerName$</Value></Parameter><Parameter><Name>DatabaseName</Name><Value>$Config/DatabaseName$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction></MemberModules><Composition><Node ID="PA"><Node ID="Scheduler" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.Tiering.ConnectToTieredManagementGroup" Accessibility="Internal" RunAs="Microsoft.SystemCenter.Tiering.TieredManagementGroupAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="LowerTierSDKServerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="TimeoutSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">$Config/IntervalSeconds$</Interval></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="ConnectToLowerTier" TypeID="System!System.CommandExecuterProbe"><ApplicationName>%systemroot%\System32\windowspowershell\v1.0\powershell.exe</ApplicationName><WorkingDirectory>%MOMROOT%</WorkingDirectory><CommandLine>-PSConsoleFile Microsoft.EnterpriseManagement.OperationsManager.ClientShell.Console.psc1  -ExecutionPolicy Unrestricted -Command "&amp; '$File/TieringSynTx.ps1$'"
$Config/LowerTierSDKServerName$</CommandLine><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><RequireOutput>true</RequireOutput><Files><File><Name>TieringSynTx.ps1</Name><Contents>
                      
                      Set-Location "OperationsManagerMonitoring::";
                      
                      $connection = $null;
                      $LowerTierSDKServer = $Args[0];
                      $connection = New-Item $LowerTierSDKServer -errorAction:SilentlyContinue;
                      if ($connection -eq $null)
                      {
                      Write-Host "ERROR: Could not connect to" $LowerTierSDKServer;
                      }
                      else
                      {
                      Write-Host "SUCCESS - Connected to:";
                      dir;
                      
                      }
                      
                    </Contents><Unicode>false</Unicode></File></Files></ProbeAction></MemberModules><Composition><Node ID="ConnectToLowerTier"><Node ID="Scheduler" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.CommandOutput</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.Performance.FilteredDataProvider" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="0" maxOccurs="1" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="CounterName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ObjectName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="0" maxOccurs="1" name="InstanceName"
type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="0" maxOccurs="1" name="AllInstances" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Frequency" type="xsd:unsignedInt" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="0" maxOccurs="1" name="ScaleBy" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Expression" type="ExpressionType" /></Configuration><OverrideableParameters><OverrideableParameter ID="Frequency" Selector="$Config/Frequency$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS"
TypeID="Performance!System.Performance.DataProvider"><ComputerName>$Config/ComputerName$</ComputerName><CounterName>$Config/CounterName$</CounterName><ObjectName>$Config/ObjectName$</ObjectName><InstanceName>$Config/InstanceName$</InstanceName><AllInstances>$Config/AllInstances$</AllInstances><Frequency>$Config/Frequency$</Frequency><ScaleBy>$Config/ScaleBy$</ScaleBy></DataSource><ConditionDetection ID="CD" TypeID="System!System.ExpressionFilter"><Expression>$Config/Expression$</Expression></ConditionDetection></MemberModules><Composition><Node ID="CD"><Node ID="DS" /></Node></Composition></Composite></ModuleImplementation><OutputType>Performance!System.Performance.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.AgentHealth.LastEvent.DS" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="QueryTimeout" type="xsd:integer" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="WatchPeriodHr" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Interval" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SyncTime" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="MaxEventAgeHr" type="xsd:integer" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Sched" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/Interval$</Interval><SyncTime>$Config/SyncTime$</SyncTime></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="OLEDB"
TypeID="Microsoft.SystemCenter.AgentHealth.LastEvent.ProbeType"><QueryTimeout>$Config/QueryTimeout$</QueryTimeout><WatchPeriodHr>$Config/WatchPeriodHr$</WatchPeriodHr><OneRowPerItem>true</OneRowPerItem><MaxEventAgeHr>$Config/MaxEventAgeHr$</MaxEventAgeHr></ProbeAction></MemberModules><Composition><Node ID="OLEDB"><Node ID="Sched" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.OleDbData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.AgentHealth.LastPerf.DS" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="QueryTimeout" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="WatchPeriodHr" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Interval" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1"
name="SyncTime" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="MaxPerfAgeHr" type="xsd:integer" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Sched" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/Interval$</Interval><SyncTime>$Config/SyncTime$</SyncTime></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="OLEDB" TypeID="Microsoft.SystemCenter.AgentHealth.LastPerf.ProbeType"><QueryTimeout>$Config/QueryTimeout$</QueryTimeout><WatchPeriodHr>$Config/WatchPeriodHr$</WatchPeriodHr><OneRowPerItem>true</OneRowPerItem><MaxPerfAgeHr>$Config/MaxPerfAgeHr$</MaxPerfAgeHr></ProbeAction></MemberModules><Composition><Node ID="OLEDB"><Node ID="Sched" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.OleDbData</OutputType></DataSourceModuleType><DataSourceModuleType
ID="Microsoft.SystemCenter.MaintenanceMode.Powershell.DataSourceModule" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Windows!Microsoft.Windows.PowerShellSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ScriptName" type="NonNullString" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ScriptBody" type="NonNullString" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Parameters" type="NamedParametersType" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutInSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalInSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SyncTime" type="xsd:string" /></Configuration><OverrideableParameters><OverrideableParameter
ID="IntervalInSeconds" Selector="$Config/IntervalInSeconds$" ParameterType="int" /><OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler"><IntervalSeconds>$Config/IntervalInSeconds$</IntervalSeconds><SyncTime>$Config/SyncTime$</SyncTime></DataSource><ProbeAction ID="PowershellProbe" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe"><ScriptName>$Config/ScriptName$</ScriptName><ScriptBody>$Config/ScriptBody$</ScriptBody><Parameters>$Config/Parameters$</Parameters><TimeoutSeconds>$Config/TimeoutInSeconds$</TimeoutSeconds></ProbeAction></MemberModules><Composition><Node ID="PowershellProbe"><Node ID="Scheduler" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType></DataSourceModuleType><ProbeActionModuleType
ID="Microsoft.SystemCenter.2007.OpsMgrDB.Generic.DS" Accessibility="Internal" RunAs="SCLibrary!Microsoft.SystemCenter.DatabaseWriteActionAccount" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ScriptName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ScriptBody" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatabaseServerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatabaseName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Threshold" type="xsd:double" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation
Isolation="Any"><Composite><MemberModules><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /><ProbeAction ID="Script" TypeID="Windows!Microsoft.Windows.ScriptPropertyBagProbe"><ScriptName>$Config/ScriptName$</ScriptName><Arguments>"$Config/DatabaseServerName$" "$Config/DatabaseName$" "$Config/Threshold$"</Arguments><ScriptBody>$Config/ScriptBody$</ScriptBody><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction></MemberModules><Composition><Node ID="Script"><Node ID="PassThrough" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType><TriggerOnly>true</TriggerOnly></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.HealthService.SCOMpercentageCPUTimeCounterProbe" Accessibility="Internal" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:integer" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerName" type="xsd:string" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="Probe" TypeID="Microsoft.SystemCenter.HealthService.SCOMpercentageCPUTimeScriptProbe"><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><ComputerName>$Config/ComputerName$</ComputerName><RunAsDiagnostic>false</RunAsDiagnostic><ProcessIterationCount>3</ProcessIterationCount></ProbeAction><ConditionDetection ID="CD" TypeID="Performance!System.Performance.DataGenericMapper"><ObjectName>Health Service</ObjectName><CounterName>agent processor utilization</CounterName><InstanceName /><Value>$Data/Property[@Name='SCOMpercentageCPUTime']$</Value></ConditionDetection></MemberModules><Composition><Node ID="CD"><Node ID="Probe"
/></Node></Composition></Composite></ModuleImplementation><OutputType>Performance!System.Performance.Data</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.HealthService.SCOMpercentageCPUTimeScriptProbe" Accessibility="Internal" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="RunAsDiagnostic" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ProcessIterationCount" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /><OverrideableParameter
ID="ProcessIterationCount" Selector="$Config/ProcessIterationCount$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="Probe" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe"><ScriptName>SCOMpercentageCPUTimeCounter.ps1</ScriptName><ScriptBody>
Param([string]$ComputerName, [string]$ConfigForRun, [int]$ProcessIterationCount) 
#Process Arguments:
# 0 - ComputerIdentity
# 1 - RunAsDiagnostic
# 2 - ProcessIterationCount
#Event log variables
$SCRIPT_EVENT_ID     = 3000
$CN_SCOM_SUCCESS     = 0
$CN_SCOM_ERROR       = 1
$CN_SCOM_WARNING     = 2
$CN_SCOM_INFORMATION = 4
$SCRIPT_NAME		 = "SCOMPercentageCPUTimeCounter.ps1"
#OS version for Win 2012
$WIN_OS_2012_Ver = "6.2"
$OSRegistryKey = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\"
#******************************************************************************
#   FUNCTION:       CheckMinOSVer
#   DESCRIPTION:    Returns True if the Registry Key for CurrentVersion
#                   is equal or Higher than the Minimum OS Versions Number.
#   PARAMETER:      DblMinVer Minimum Version Number to use
#   RETURNS:        Boolean: True, if build is greater or equal than the given number
#******************************************************************************
function CheckByOSCurrentVersion() #As Boolean
{ 
    $strCurrentOSVer = Get-ItemProperty $OSRegistryKey
    $strCurrentOSVer = $strCurrentOSVer.CurrentVersion
    if($strCurrentOSVer -ge $WIN_OS_2012_Ver)
	{	
		return $true;
	}
    return $false;
}
            
Function Load-CimModules
{
	$error.Clear()
	$CimModule = Get-Module CimCmdlets
	if ($null -eq $CimModule)
	{
			Import-Module CimCmdlets
			$error.Clear()
	}
}
function GetProcessorTime ($procId, $ComputerName)
{
        
$N1 = 0
$D1 = 0
$N2 = 0
$D2 = 0
$Nd = 0
$Dd = 0
$PercentProcessorTime   = 0 
    $query = "Select * from Win32_PerfRawData_PerfProc_Process where IDProcess = ""$procId"""
    if($isHigherThanWin08 -eq $true)
    {
        Load-CimModules
		try
        {
		    $cimSessionOption = New-CimSessionOption -Protocol DCOM
		    $cimsession = New-CimSession -ComputerName $ComputerName -SessionOption $cimSessionOption 
            $objService1 = Get-CimInstance -CimSession $cimsession -Namespace "root\cimv2" -Query $query -ErrorAction Stop
        }
        catch
        {
             $objService1 = Get-WMIObject -Namespace "root\cimv2" -ComputerName $ComputerName -Query $query -ErrorAction Stop 
        }
        Finally
        {
            Get-CimSession | Remove-CimSession
		    $cimsession =$null
		    $cimSessionOption = $null 
        }
    }
	else
	{
        $objService1 = Get-WMIObject -Namespace "root\cimv2" -ComputerName $ComputerName -Query $query
    }
    ForEach($objInstance1 in $objService1)
{
        $N1 = $objInstance1.PercentProcessorTime          
        $D1 = $objInstance1.TimeStamp_Sys100NS                  
 }
          
  Start-Sleep 1     
   if($isHigherThanWin08 -eq $true)
    {
	    Load-CimModules
     	try
        {
		    $cimSessionOption = New-CimSessionOption -Protocol DCOM
		    $cimsession = New-CimSession -ComputerName $ComputerName -SessionOption $cimSessionOption 
            $objService2 = Get-CimInstance -CimSession $cimsession -Namespace "root\cimv2" -Query $query -ErrorAction Stop
        }
        catch
        {
             $objService2 = Get-WMIObject -Namespace "root\cimv2" -ComputerName $ComputerName -Query $query -ErrorAction Stop 
        }
        Finally
        {
            Get-CimSession | Remove-CimSession
		    $cimsession =$null
		    $cimSessionOption = $null 
        }
    }
	else
	{
        $objService2 = Get-WMIObject -Namespace "root\cimv2" -ComputerName $ComputerName -Query $query
    }
    ForEach($objInstance2 in $objService2)
{
        $N2 = $objInstance2.PercentProcessorTime           
        $D2 = $objInstance2.TimeStamp_Sys100NS                 
 }
           
    $Nd = $N2-$N1        
    $Dd = $D2-$D1         
    $PercentProcessorTime = $($($Nd/$Dd) * 100)   
   return $PercentProcessorTime
}
#Check the OS version
$isHigherThanWin08 = CheckByOSCurrentVersion
#Create PropertyBag object
$oAPI = new-object -comObject "MOM.ScriptAPI" 
$oPropertyBag = $oAPI.CreatePropertyBag()
#Set the retry attempts for WMI and other counters
$retryAttempts = 2
$dataCount = 0
#Get WMI object
$finalPercentProcessorTime = 0
$procCount = 0
$checker = $null
if($isHigherThanWin08 -eq $true)
{
	  Load-CimModules
	  try
        {
		    $cimSessionOption = New-CimSessionOption -Protocol DCOM
		    $cimsession = New-CimSession -ComputerName $ComputerName -SessionOption $cimSessionOption 
            $checker = Get-CimInstance -CimSession $cimsession -Namespace "root\cimv2" -Class "Win32_Process" -ErrorAction Stop
        }
        catch
        {
             $checker = Get-WMIObject -Namespace "root\cimv2" -ComputerName $ComputerName -Class "Win32_Process" -ErrorAction Stop 
        }
        Finally
        {
            Get-CimSession | Remove-CimSession
		    $cimsession =$null
		    $cimSessionOption = $null 
        }
}
else
{
    $checker = Get-WMIObject -Namespace "root\cimv2" -ComputerName $ComputerName -Class "Win32_Process"
}
if($checker -ne $null)
{
    for($counter=0;$counter -lt $retryAttempts;$counter++)
    {
        # Get the number of cores in the system
        if($isHigherThanWin08 -eq $true)
        {
		    Load-CimModules
            try
			{
				$cimSessionOption = New-CimSessionOption -Protocol DCOM
				$cimsession = New-CimSession -ComputerName $ComputerName -SessionOption $cimSessionOption 
				$processorList = Get-CimInstance -CimSession $cimsession -Namespace "root\cimv2" -Query "SELECT NumberOfCores FROM Win32_Processor" -ErrorAction Stop
			}
			catch
			{
				$processorList = Get-WMIObject -Namespace "root\cimv2" -ComputerName $ComputerName -Query "SELECT NumberOfCores FROM Win32_Processor" -ErrorAction stop 
			}
			Finally
			{
				Get-CimSession | Remove-CimSession
				$cimsession =$null
				$cimSessionOption = $null 
			}
        }
        else
        {
            $processorList = Get-WMIObject -Namespace "root\cimv2" -ComputerName $ComputerName -Query "SELECT NumberOfCores FROM Win32_Processor" -ErrorAction stop
        }
        if($processorList -ne $null)
        {
            foreach($processor in $processorList)
            {
                $procCount = $procCount + $processor.NumberOfCores
            }
            break
        }
    }
    if($procCount -lt 1)
    {
        $procCount = 1
    }
    
    #Set the variables for detailed analysis
    $min = 32767
    $max = 0
    $sampleCount = 0
    $totalCount = 0
    $procTime = 0
    #Process id of current script is $pid
    # Get the total processor time count ProcessIterationCount number of times, to get the average   
    for($loopCounter=0; $loopCounter -lt $ProcessIterationCount; $loopCounter++)
    {
        $agentProcIDs = "|"
        # Step 1: Get all SCOM Processes
        for($counter=0; $counter -lt $retryAttempts; $counter++)
        {
            if($isHigherThanWin08 -eq $true)
            {
                Load-CimModules
				try
				{
					$cimSessionOption = New-CimSessionOption -Protocol DCOM
					$cimsession = New-CimSession -ComputerName $ComputerName -SessionOption $cimSessionOption 
					$processes = Get-CimInstance -CimSession $cimsession -Namespace "root\cimv2" -Query "SELECT ProcessId, ParentProcessId, Name FROM Win32_Process" -ErrorAction Stop
				}
				catch
				{
					$processes = Get-WMIObject -Namespace "root\cimv2" -ComputerName $ComputerName -Query "SELECT ProcessId, ParentProcessId, Name FROM Win32_Process" -ErrorAction stop
				}
				Finally
				{
					Get-CimSession | Remove-CimSession
					$cimsession =$null
					$cimSessionOption = $null 
				}
            }
            else
            {
                $processes = Get-WMIObject -Namespace "root\cimv2" -ComputerName $ComputerName -Query "SELECT ProcessId, ParentProcessId, Name FROM Win32_Process" -ErrorAction stop
            }
            if($processes -ne $null)
            {                                                                                                                                                                                                                                                                                                    
                # Step 2: Get the Health Service and Monitoring Host objects
                foreach($process in $processes)
                {
                    if(($process -ne $null) -and ($process.GetType().Name -ne "Nothing"))
                    {
                        if(($process.Name.contains("HealthService") -Or $process.Name.contains("MonitoringHost")) -And (-Not($agentProcIDs.contains($("|" + $process.ProcessId + "|")))))
                        {
                            $agentProcIDs = $($agentProcIDs + $process.ProcessId + "|")
                        }
                    }
                }
                # Step 3: Get all the child processes
                $childFound = $true
                # While a new child is found, re-iterate the list to find its child
                DO
                {
                    $childFound = $false
                    foreach($process in $processes)
                    {
                        if(($process -ne $null) -and ($process.GetType().Name -ne "Nothing"))
                        {
                            # If parent process is in the agentProcIDs list but the process itself is not, its a new child
							
						    # Filter out myself
                            if($process.ProcessId -ne $pid)
                            {
                                if($agentProcIDs.contains($("|" + $process.ParentProcessId + "|")) -And (-Not($agentProcIDs.contains($("|" + $process.ProcessId + "|")))))
                                {
                                    $agentProcIDs = $($agentProcIDs + $process.ProcessId + "|")
                                    $childFound = $true
                                }
                            }
                        }
                    }
                }While($childFound -eq $true)
                # Step 4: Get the total cpu percentage used for all the SCOM processes
                if($isHigherThanWin08 -eq $true)
                {
                    Load-CimModules
					try
					{
						$cimSessionOption = New-CimSessionOption -Protocol DCOM
						$cimsession = New-CimSession -ComputerName $ComputerName -SessionOption $cimSessionOption 
						$wmiService = Get-CimInstance -CimSession $cimsession -Namespace "root\cimv2" -Class Win32_PerfFormattedData_PerfProc_Process -ErrorAction Stop
					}
					catch
					{
						 $wmiService =  Get-WMIObject -Namespace "root\cimv2" -ComputerName $ComputerName -Class Win32_PerfFormattedData_PerfProc_Process -ErrorAction stop
					}
					Finally
					{
						Get-CimSession | Remove-CimSession
						$cimsession =$null
						$cimSessionOption = $null 
					}
                }
                else
                {
                    $wmiService =  Get-WMIObject -Namespace "root\cimv2" -ComputerName $ComputerName -Class Win32_PerfFormattedData_PerfProc_Process
                }
                $totalPercentProcessorTime = 0
                # Iterate each process to add the percent processor time to the to
                foreach($process in $wmiService)
                {
                    if($agentProcIDs.Contains($("|" + $process.IDProcess + "|")))
                    {
                        $x = $(GetProcessorTime $process.IDProcess $ComputerName)
                        $totalPercentProcessorTime = $totalPercentProcessorTime + $x
                        if($ConfigForRun -eq $true)
                        {
                            $procTime = $x
                            $sampleCount = $sampleCount + 1
                            $procTime = [double]$procTime
                            $totalCount = $totalCount + $procTime
                            # Check for min value
                            if($procTime -lt $min)
                            {
                                $min = $procTime
                            }
                            # Check for max value
                            if($procTime -gt $max)
                            {
                                $max = $procTime
                            }
                        }
                    }
                }
                # Add the total percentage time to the final percentage time for averaging in the end
                $finalPercentProcessorTime = $finalPercentProcessorTime + $totalPercentProcessorTime
                $dataCount = $dataCount + 1
                break
            }
        }
            
        # Delaying each iteration by 3 seconds
        Start-Sleep 3
    }
    # Add the detailed analysis to the property bag
    if($ConfigForRun -eq $true)
    {
        $oPropertyBag.AddValue("SamplesTaken", $ProcessIterationCount)
	    $oPropertyBag.AddValue("Average", [double]($totalCount/$sampleCount))
	    $oPropertyBag.AddValue("Maximum", $max)
	    $oPropertyBag.AddValue("Minimum", $min)
    }
    # Calculate the final percentage processor time for all the SCOM processes
    if($dataCount -lt 1)
    {
        $dataCount = 1
    }
    $finalPercentProcessorTime = ($finalPercentProcessorTime/$dataCount)/$procCount
}
else
{
    $message = $("Can't initialize the com object")
    $oAPI.LogScriptEvent($SCRIPT_NAME, $SCRIPT_EVENT_ID, $CN_SCOM_ERROR, $message)
}
if($ConfigForRun -eq $false)
{
    $oPropertyBag.AddValue("SCOMpercentageCPUTime", $finalPercentProcessorTime)
}
$oPropertyBag
                  </ScriptBody><Parameters><Parameter><Name>ComputerName</Name><Value>$Config/ComputerName$</Value></Parameter><Parameter><Name>ConfigForRun</Name><Value>$Config/RunAsDiagnostic$</Value></Parameter><Parameter><Name>ProcessIterationCount</Name><Value>$Config/ProcessIterationCount$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction></MemberModules><Composition><Node ID="Probe" /></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.Availability.Probe" Accessibility="Internal" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" minOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InstanceId" type="xsd:string"
minOccurs="1" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>39bb1531-0667-4ae1-b41c-9c4aef1d6ba2</ClassID></Native></ModuleImplementation><OutputType>System!System.Availability.StateData</OutputType><InputType>System!System.Typed.Data</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.WMIFunctionalCheck.Probe" Accessibility="Internal" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="Probe"
TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe"><ScriptName>WMIFunctionalCheck.ps1</ScriptName><ScriptBody>
                    #Copyright (c) Microsoft Corporation. All rights reserved.
#*************************************************************************
# $ScriptName:  "WMIFunctionalCheck" $
#
# Purpose:      This script runs a WMI functional check. 
#
# $File:        WMIFunctionalCheck.ps1 $
#*************************************************************************
Param([string]$ComputerName)
#OS version for Win 2012
$WIN_OS_2012_Ver = "6.2"
$OSRegistryKey = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\"
#******************************************************************************
#   FUNCTION:       CheckMinOSVer
#   DESCRIPTION:    Returns True if the Registry Key for CurrentVersion
#                   is equal or Higher than the Minimum OS Versions Number.
#   PARAMETER:      DblMinVer Minimum Version Number to use
#   RETURNS:        Boolean: True, if build is greater or equal than the given number
#******************************************************************************
function CheckByOSCurrentVersion() #As Boolean
{ 
    $strCurrentOSVer = Get-ItemProperty $OSRegistryKey
    $strCurrentOSVer = $strCurrentOSVer.CurrentVersion
    if($strCurrentOSVer -ge $WIN_OS_2012_Ver)
	{	
		return $true;
	}
    return $false;
}
#---------------------------------------------------------------------------
# Retrieves the script output.
#---------------------------------------------------------------------------
function ReturnResponse($boolErrorFlag, $strMessage)
{
    if($boolErrorFlag -eq $true)
    {
        $propertyBag.AddValue("Status", "FAIL")
        $propertyBag.AddValue("ErrorMessage", $strMessage)
    }
    else
    {
        $propertyBag.AddValue("Status", "OK")
    }
    $api.LogScriptEvent("WMIFunctionalCheck.ps1", 100, $EVENT_TYPE_INFORMATION, $strMessage)
    $propertyBag
}
#---------------------------------------------------------------------------
# Execute a WMI Query.
#---------------------------------------------------------------------------
function ExecuteWMIQuery($targetComputer, $strBaseClass, $strQuery, $strPropertyName)
{
	if($isHigherThanWin08)
	{
		Load-CimModules
		try
        {
		    $cimSessionOption = New-CimSessionOption -Protocol DCOM
		    $cimsession = New-CimSession -ComputerName $targetComputer -SessionOption $cimSessionOption 
            $wbemObjectSet = Get-CimInstance -CimSession $cimsession -Namespace $("root\" + $strBaseClass) -Query $strQuery -ErrorAction Stop
        }
        catch
        {
            $wbemObjectSet = Get-WMIObject -Namespace $("root\" + $strBaseClass) -ComputerName $targetComputer -Query $strQuery -ErrorAction Stop 
        }
        Finally
        {
            Get-CimSession | Remove-CimSession
		    $cimsession =$null
		    $cimSessionOption = $null 
        }
	}
	else
	{
     	 $wbemObjectSet = Get-WMIObject -Namespace $("root\" + $strBaseClass) -ComputerName $targetComputer -Query $strQuery
	} 
    foreach($objItem in $wbemObjectSet)
    {
        $temp = $objItem.$strPropertyName
    }
    return $temp
}
Function Load-CimModules
{
	$error.Clear()
	$CimModule = Get-Module CimCmdlets
	if ($null -eq $CimModule)
	{
			Import-Module CimCmdlets
			$error.Clear()
	}
}
#---------------------------------------------------------------------------
# Gets WMI Status.
#---------------------------------------------------------------------------
function GetWMIStatus($strComputerName)
{
    $status = ExecuteWMIQuery $strComputerName "cimv2" "select Status from win32_operatingsystem" "Status"
    if($status -eq "OK")
    {
        return "OK"
    }
    else
    {
        return "FAIL"
    }
}
#Check the OS version
$isHigherThanWin08 = CheckByOSCurrentVersion 
#Define local event constants
$EVENT_TYPE_ERROR = 1 
$EVENT_TYPE_WARNING = 2 
$EVENT_TYPE_INFORMATION = 4 
#Create PropertyBag object
$api = new-object -comObject "MOM.ScriptAPI"
$propertyBag = $api.CreatePropertyBag()
$error.Clear()
#Set variables 
$strWMIStatus = GetWMIStatus $ComputerName
if($error.Count -ne 0)
{
    $strMessageToUse = "Error Details: " + $error[0]
    ReturnResponse $true $strMessageToUse
}
else
{
    $strMessageToUse = "Script WMIFunctionalCheck executed Successfully"
    ReturnResponse $false $strMessageToUse
}
                  </ScriptBody><Parameters><Parameter><Name>ComputerName</Name><Value>$Config/ComputerName$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction></MemberModules><Composition><Node ID="Probe" /></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.WebInterfaceWatcher.Probe" Accessibility="Internal" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="UrlToCheck" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1"
name="DebugFlag" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SetProxyDirect" type="xsd:boolean" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /><OverrideableParameter ID="DebugFlag" Selector="$Config/DebugFlag$" ParameterType="bool" /><OverrideableParameter ID="SetProxyDirect" Selector="$Config/SetProxyDirect$" ParameterType="bool" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /><ProbeAction ID="Script" TypeID="Windows!Microsoft.Windows.ScriptPropertyBagProbe"><ScriptName>Microsoft.SystemCenter.WebInterfaceWatcherMonitoring.vbs</ScriptName><Arguments>"$Config/ComputerName$" "$Config/UrlToCheck$" "$Config/DebugFlag$" "$Config/SetProxyDirect$"</Arguments><ScriptBody>
                     'Copyright (c) Microsoft Corporation. All rights reserved.
'*************************************************************************
' $ScriptName:  "Microsoft.SystemCenter.WebInterfaceWatcherMonitoring" $
'
' Purpose:      This script runs a url checks to validate if a website is up and running.
'
' $File:        Microsoft.SystemCenter.WebInterfaceWatcherMonitoring.vbs $
'*************************************************************************
Option Explicit
SetLocale("en-us")
'Event Constants
Const EVENT_TYPE_SUCCESS = 0
Const EVENT_TYPE_ERROR = 1
Const EVENT_TYPE_WARNING = 2
Const EVENT_TYPE_INFORMATION = 4
'Other constants
Const SCRIPT_NAME = "Microsoft.SystemCenter.WebInterfaceWatcherMonitoring"
' Event ID Constants
Const EVENTID_SUCCESS = 99
Const EVENTID_SCRIPT_ERROR = 1000
Const APP_DISCOVERY_CONNECT_FAILURE = -1
Const APP_DISCOVERY_QUERY_FAILURE = -2
Const REGISTRY_CONNECT_FAILURE = -3
Const REGISTRY_READ_FAILURE = -4
Const HKEY_CLASSES_ROOT 	= &amp;H80000000
Const HKEY_CURRENT_USER 	= &amp;H80000001
Const HKEY_LOCAL_MACHINE 	= &amp;H80000002
Const HKEY_USERS 		= &amp;H80000003
Const HKEY_CURRENT_CONFIG 	= &amp;H80000005
Const StateDataType       = 3
Const HTTPREQUEST_SETCREDENTIALS_FOR_SERVER = 0
Const HTTPREQUEST_SETCREDENTIALS_FOR_PROXY = 1
Const HTTPREQUEST_USERAGENTSTRING = "http_requester/0.1"
Const HTTPREQUEST_SSLERRORIGNOREFLAGS = 13056
Const HTTPREQUEST_ENABLEREDIRECTS = True
Const HTTPREQUEST_ENABLEHTTPSTOHTTPREDIRECT = True
Const WinHttpRequestOption_UserAgentString = 0
Const WinHttpRequestOption_URL = 1
Const WinHttpRequestOption_URLCodePage = 2
Const WinHttpRequestOption_EscapePercentInURL = 3
Const WinHttpRequestOption_SslErrorIgnoreFlags = 4
Const WinHttpRequestOption_SelectCertificate = 5
Const WinHttpRequestOption_EnableRedirects = 6
Const WinHttpRequestOption_UrlEscapeDisable = 7
Const WinHttpRequestOption_UrlEscapeDisableQuery = 8
Const WinHttpRequestOption_SecureProtocols = 9
Const WinHttpRequestOption_EnableTracing = 10
Const WinHttpRequestOption_RevertImpersonationOverSsl = 11
Const WinHttpRequestOption_EnableHttpsToHttpRedirects = 12
Const WinHttpRequestOption_EnablePassportAuthentication = 13
Const WinHttpRequestOption_MaxAutomaticRedirects = 14
Const WinHttpRequestOption_MaxResponseHeaderSize = 15
Const WinHttpRequestOption_MaxResponseDrainSize = 16
Const WinHttpRequestOption_EnableHttp1_1 = 17
Const WinHttpRequestOption_EnableCertificateRevocationCheck = 18
Const WinHttpTimeOut_ResolveTimeout = 5000
Const WinHttpTimeOut_ConnectTimeout = 10000
Const WinHttpTimeOut_SendTimeout = 10000
Const WinHttpTimeOut_ReceiveTimeout = 10000
Dim oAPI, oBagState
Dim oParams, bLogSuccessEvent
Dim strMonitorStatus, strErrorDetail, strMessage
Dim  dtStart
Dim TargetServer, TargetSite, strStatus, intStatus, UserName, UserPassword, SetProxyDirectValue
Dim objIIS, objWMIService, colItems, objItem
Dim strWebsite, strStatusText
dtStart = Now
Set oAPI = MomCreateObject("Mom.ScriptAPI") 
Set oParams = WScript.Arguments
if oParams.Count &lt; 4 then
      strMessage = "The script '" &amp; SCRIPT_NAME &amp; "' didn't execute successfully because some parameters were missing: Param Count(" &amp; CStr(oParams.Count) &amp; ")"
      CreateEvent EVENTID_SUCCESS, EVENT_TYPE_INFORMATION, strMessage
	  Wscript.Quit -1
End if
strMonitorStatus = "0"	
TargetServer = oParams(0)
TargetSite = oParams(1)
bLogSuccessEvent = CBool(oParams(2))
SetProxyDirectValue = CBool(oParams(3))
Set oBagState = oAPI.CreateTypedPropertyBag(StateDataType)
GetMonitorStatus
Sub GetMonitorStatus()
	Dim e
    Dim sWBState, ObjWebSite
    Dim boolStatus
	Set e = New Error
    e.Clear
    On Error Resume Next
    boolStatus = PingSite(TargetSite,SetProxyDirectValue)
    
    If boolStatus = true Then
        call ReturnResponse(false, "")
    Else
        strErrorDetail = SCRIPT_NAME &amp; ": - WebSite " &amp; TargetSite &amp; " Failure on Server " &amp; TargetServer &amp; " Error Detail: " &amp; strStatusText
        call ReturnResponse(true, strErrorDetail)
    End If
End Sub
'---------------------------------------------------------------------------
' Retrieves the script output.
'---------------------------------------------------------------------------
Sub ReturnResponse(boolErrorFlag, strMessage)
    If boolErrorFlag = true Then
       oBagState.AddValue "State", "0"
       oBagState.AddValue "ErrorDetail", strMessage
    Else
       strMessage = "The script '" &amp; SCRIPT_NAME &amp; "' completed successfully in " &amp; _
                  DateDiff("s", dtStart, Now) &amp; " seconds."    
       oBagState.AddValue "State", "1"
       oBagState.AddValue "ErrorDetail", ""
    End If
    If bLogSuccessEvent Then
       CreateEvent EVENTID_SUCCESS, EVENT_TYPE_INFORMATION, strMessage
    End If
       
    oAPI.AddItem oBagState
    Call oAPI.ReturnItems
    WScript.Quit 
End Sub
Sub CreateEvent(lEventID, lEventType, strMessage)
 oAPI.LogScriptEvent SCRIPT_NAME,lEventID, lEventType, strMessage
End Sub
Function MomCreateObject(ByVal sProgramId)
    Dim oError, strErrorMsg
    Set oError = New Error
    
	On Error Resume Next
	Set MomCreateObject = CreateObject(sProgramId)
	oError.Save
	On Error Goto 0
	
	If oError.Number &lt;&gt; 0 Then 
	   strErrorMsg = "Unable to create automation object '" &amp; sProgramId &amp; "' " &amp; oError.Description
       call ReturnResponse(true, strErrorMsg)
	End If    
End Function
Function PingSite( myWebsite , SetProxyDirectValue )
    Dim intStatus, objHTTP
    Dim oError
    Set oError = New Error
    On Error Resume Next
    Set objHTTP = MomCreateObject( "WinHttp.WinHttpRequest.5.1" )
    objHTTP.Open "GET", myWebsite, False
    objHTTP.SetRequestHeader "User-Agent", "Mozilla/4.0 (compatible; MyApp 1.0; Windows NT 5.1)"
    If SetProxyDirectValue Then
        objHTTP.SetProxy(1)
    End If
    objHTTP.SetTimeouts WinHttpTimeOut_ResolveTimeout, WinHttpTimeOut_ConnectTimeout, WinHttpTimeOut_SendTimeout, WinHttpTimeOut_ReceiveTimeout 
    objHTTP.Option(WinHttpRequestOption_UserAgentString) = HTTPREQUEST_USERAGENTSTRING
    objHTTP.Option(WinHttpRequestOption_SslErrorIgnoreFlags) = HTTPREQUEST_SSLERRORIGNOREFLAGS
    objHTTP.Option(WinHttpRequestOption_EnableRedirects) = HTTPREQUEST_ENABLEREDIRECTS
    objHTTP.Option(WinHttpRequestOption_EnableHttpsToHttpRedirects) = HTTPREQUEST_ENABLEHTTPSTOHTTPREDIRECT
    objHTTP.Send
    intStatus = objHTTP.Status
    If bLogSuccessEvent Then
      strMessage = "Return Status " &amp; CStr(intStatus)
      CreateEvent EVENTID_SUCCESS, EVENT_TYPE_INFORMATION, strMessage
    End If  
    On Error Goto 0
    If oError.Number &lt;&gt; 0 Then 
      strMessage = "Error "  &amp; CStr(oError.Number)
      call ReturnResponse(true, strMessage)
    End If
    If intStatus = 200 Or intStatus = 401 Or intStatus = 403 Or intStatus = 407 Then
        PingSite = True
    Else
        If IsEmpty(intStatus) = true Then
           strStatusText = "IIS Down or unavailable"    
        else   
           strStatusText = objHTTP.StatusText
        End If   
        PingSite = False
    End If
    Set objHTTP = Nothing
End Function
Class Error
    Private m_lNumber
    Private m_sSource
    Private m_sDescription
    Private m_sHelpContext
    Private m_sHelpFile
    Public Sub Save()
        m_lNumber = Err.number
        m_sSource = Err.Source
        m_sDescription = Err.Description
        m_sHelpContext = Err.HelpContext
        m_sHelpFile = Err.helpfile
    End Sub
    Public Sub Raise()
        Err.Raise m_lNumber, m_sSource, m_sDescription, m_sHelpFile, m_sHelpContext
    End Sub
    Public Sub Clear()
        m_lNumber = 0
        m_sSource = ""
        m_sDescription = ""
        m_sHelpContext = ""
        m_sHelpFile = ""
    End Sub
    Public Default Property Get Number()
        Number = m_lNumber
    End Property
    Public Property Get Source()
        Source = m_sSource
    End Property
    Public Property Get Description()
        Description = m_sDescription
    End Property
    Public Property Get HelpContext()
        HelpContext = m_sHelpContext
    End Property
    Public Property Get HelpFile()
        HelpFile = m_sHelpFile
    End Property    
End Class
                  </ScriptBody><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction></MemberModules><Composition><Node ID="Script"><Node ID="PassThrough" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType><TriggerOnly>true</TriggerOnly></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.AgentHealth.LastEvent.ProbeType" Accessibility="Internal" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="QueryTimeout" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="WatchPeriodHr" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="OneRowPerItem" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="MaxEventAgeHr" type="xsd:integer" /></Configuration><ModuleImplementation
Isolation="Any"><Composite><MemberModules><ProbeAction ID="OLEDB" TypeID="Microsoft.SystemCenter.AgentHealth.OleDBRMS.ProbeType"><QueryTimeout>$Config/QueryTimeout$</QueryTimeout><Query>
select	#T.Path, 
		CAST(MAX(LastTime) as nvarchar(50)) As 'LastEvent', 
CASE 
  WHEN Isnull(MAX(LastTime),'01-01-80') &lt; DateAdd(hh,-$Config/MaxEventAgeHr$,getutcdate()) 
  Then 'KO' 
  Else 'OK' 
  END As 'Status' 
From 
(
	Select CAST(ME.Path as nvarchar(255)) As [Path], 
	CASE 
	  WHEN IsNull([Path], '')='' THEN ''
	  WHEN CHARINDEX('.', [Path]) = 0 Then [Path]
	  ELSE SUBSTRING(Path,1,CHARINDEX('.', Path)-1)
	END As 'Netbios'
	From dbo.ManagedEntityGenericView ME 
	Inner join dbo.ManagedTypeView MT 
	on ME.MonitoringClassId=MT.Id 
	AND MT.Name = 'Microsoft.SystemCenter.HealthService'
	where IsDeleted=0 
) As #T
left join  
( 
	select distinct LoggingComputer, 
			MAX(TimeGenerated) As 'LastTime'
	from dbo.EventView 
	where TimeGenerated &gt; dateadd(hh,-$Config/WatchPeriodHr$,getutcdate()) 
	group by LoggingComputer
) As #E 
on #E.LoggingComputer = #T.Path 
or #E.LoggingComputer=#T.[Netbios] 
group by Path                  
                  </Query><OneRowPerItem>$Config/OneRowPerItem$</OneRowPerItem></ProbeAction></MemberModules><Composition><Node ID="OLEDB" /></Composition></Composite></ModuleImplementation><OutputType>System!System.OleDbData</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.AgentHealth.LastPerf.ProbeType" Accessibility="Internal" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="QueryTimeout" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="WatchPeriodHr" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="OneRowPerItem" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="MaxPerfAgeHr" type="xsd:integer" /></Configuration><ModuleImplementation
Isolation="Any"><Composite><MemberModules><ProbeAction ID="OLEDB" TypeID="Microsoft.SystemCenter.AgentHealth.OleDBRMS.ProbeType"><QueryTimeout>$Config/QueryTimeout$</QueryTimeout><Query>
select	CAST(ME.Path as nvarchar(255)), 
		CAST(Max(TimeSampled) As nvarchar(50)) As 'LastSample', 
		CASE 
			WHEN Isnull(MAX(TimeSampled),'01-01-80') &lt; DateAdd(hh,-$Config/MaxPerfAgeHr$,getutcdate()) Then 'KO' 
			Else 'OK' 
		END
from dbo.ManagedEntityGenericView ME 
inner join dbo.ManagedTypeView MT 
on ME.MonitoringClassId=MT.Id 
AND MT.Name = 'Microsoft.SystemCenter.HealthService'
left join dbo.PerformanceCounterView C 
on ME.Id = C.ManagedEntityId
left join dbo.PerformanceDataAllView P 
on C.PerformanceSourceInternalId=P.PerformanceSourceInternalId 
and P.TimeSampled &gt; dateadd(hh,-$Config/WatchPeriodHr$,getutcdate())
where ME.IsDeleted=0
group by ME.Path
                </Query><OneRowPerItem>$Config/OneRowPerItem$</OneRowPerItem></ProbeAction></MemberModules><Composition><Node ID="OLEDB" /></Composition></Composite></ModuleImplementation><OutputType>System!System.OleDbData</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.AgentHealth.LastEvent.Trigger" Accessibility="Internal" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="QueryTimeout" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="WatchPeriodHr" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="OneRowPerItem" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="MaxEventAgeHr" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="QueryTimeout"
Selector="$Config/QueryTimeout$" ParameterType="int" /><OverrideableParameter ID="WatchPeriodHr" Selector="$Config/WatchPeriodHr$" ParameterType="int" /><OverrideableParameter ID="OneRowPerItem" Selector="$Config/OneRowPerItem$" ParameterType="bool" /><OverrideableParameter ID="MaxEventAgeHr" Selector="$Config/MaxEventAgeHr$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="OLEDB" TypeID="Microsoft.SystemCenter.AgentHealth.LastEvent.ProbeType"><QueryTimeout>$Config/QueryTimeout$</QueryTimeout><WatchPeriodHr>$Config/WatchPeriodHr$</WatchPeriodHr><OneRowPerItem>$Config/OneRowPerItem$</OneRowPerItem><MaxEventAgeHr>$Config/MaxEventAgeHr$</MaxEventAgeHr></ProbeAction><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /></MemberModules><Composition><Node ID="OLEDB"><Node ID="PassThrough"
/></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.OleDbData</OutputType><TriggerOnly>true</TriggerOnly></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.AgentHealth.LastPerf.Trigger" Accessibility="Internal" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="QueryTimeout" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="WatchPeriodHr" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="OneRowPerItem" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="MaxPerfAgeHr" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="QueryTimeout" Selector="$Config/QueryTimeout$" ParameterType="int" /><OverrideableParameter ID="WatchPeriodHr" Selector="$Config/WatchPeriodHr$"
ParameterType="int" /><OverrideableParameter ID="OneRowPerItem" Selector="$Config/OneRowPerItem$" ParameterType="bool" /><OverrideableParameter ID="MaxPerfAgeHr" Selector="$Config/MaxPerfAgeHr$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="OLEDB" TypeID="Microsoft.SystemCenter.AgentHealth.LastPerf.ProbeType"><QueryTimeout>$Config/QueryTimeout$</QueryTimeout><WatchPeriodHr>$Config/WatchPeriodHr$</WatchPeriodHr><OneRowPerItem>$Config/OneRowPerItem$</OneRowPerItem><MaxPerfAgeHr>$Config/MaxPerfAgeHr$</MaxPerfAgeHr></ProbeAction><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /></MemberModules><Composition><Node ID="OLEDB"><Node ID="PassThrough" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.OleDbData</OutputType><TriggerOnly>true</TriggerOnly></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.AgentHealth.OleDBRMS.ProbeType"
Accessibility="Internal" RunAs="Microsoft.SystemCenter.AgentHealth.OpsMgrDB.SR" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="QueryTimeout" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Query" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="OneRowPerItem" type="xsd:boolean" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="OLEDB" TypeID="System!System.OleDbProbe"><ConnectionString>Provider=SQLOLEDB;Integrated Security=SSPI</ConnectionString><Query>$Config/Query$</Query><GetValue>true</GetValue><IncludeOriginalItem>false</IncludeOriginalItem><OneRowPerItem>$Config/OneRowPerItem$</OneRowPerItem><DatabaseNameRegLocation>SOFTWARE\Microsoft\Microsoft Operations
Manager\3.0\Setup\DatabaseName</DatabaseNameRegLocation><DatabaseServerNameRegLocation>SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup\DatabaseServerName</DatabaseServerNameRegLocation><QueryTimeout>$Config/QueryTimeout$</QueryTimeout><GetFetchTime>false</GetFetchTime></ProbeAction></MemberModules><Composition><Node ID="OLEDB" /></Composition></Composite></ModuleImplementation><OutputType>System!System.OleDbData</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ConditionDetectionModuleType ID="Microsoft.SystemCenter.Overridable.ConsolidatorCondition" Accessibility="Internal" Batching="false" Stateful="true" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ConsolidationProperties"><xsd:complexType><xsd:sequence><xsd:element name="PropertyXPathQuery" type="xsd:string" minOccurs="0" maxOccurs="unbounded" /></xsd:sequence></xsd:complexType></xsd:element><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Count" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="Count" Selector="$Config/Count$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="OverridableConsolidator"
TypeID="System!System.ConsolidatorCondition"><Consolidator><ConsolidationProperties>$Config/ConsolidationProperties$</ConsolidationProperties><TimeControl><WithinTimeSchedule><Interval>$Config/IntervalSeconds$</Interval></WithinTimeSchedule></TimeControl><CountingCondition><Count>$Config/Count$</Count><CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode></CountingCondition></Consolidator></ConditionDetection></MemberModules><Composition><Node ID="OverridableConsolidator" /></Composition></Composite></ModuleImplementation><OutputType>System!System.ConsolidatorData</OutputType><InputTypes><InputType>System!System.BaseData</InputType></InputTypes></ConditionDetectionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.2007.OpsMgrDB.FixDuplicateAgntToSrvRel" Accessibility="Internal" RunAs="SCLibrary!Microsoft.SystemCenter.DatabaseWriteActionAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1"
name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="DatabaseServerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="DatabaseName" type="xsd:string" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="RunScript" TypeID="System!System.CommandExecuter"><ApplicationName>%windir%\system32\cscript.exe</ApplicationName><WorkingDirectory /><CommandLine>//NoLogo "FixDupRelAgsToSrvrsTask.vbs" "$Config/DatabaseServerName$" "$Config/DatabaseName$"</CommandLine><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><RequireOutput>true</RequireOutput><Files><File><Name>FixDupRelAgsToSrvrsTask.vbs</Name><Contents>
                    'Copyright (c) Microsoft Corporation. All rights reserved.
'*************************************************************************
' $ScriptName:  "GetSqlNativeClientComman" $
'
' Purpose:      This script is used to get SQL native client Driver name.
'
' $File:        GetSqlNativeClientComman.vbs $
'*************************************************************************
Option Explicit 
Function GetSqlDriverName
    Dim oReg
    Const HKEY_LOCAL_MACHINE = &amp;H80000002
    Const HKEY_CLASSES_ROOT = &amp;H80000000
    Dim strComputer, strDriverPath, strKeyPath, intValue, strValueName,arrSubKeys,oSubkey,strNewKeyPath,intDotIndex, strDriverPathFromHKeyClassRoot
    strComputer = "."
    strDriverPath="SQLOLEDB"
    Set oReg=GetObject("winmgmts:\\" &amp; _ 
        strComputer &amp; "\root\default:StdRegProv")
        
    strKeyPath = "CLSID\{5A23DE84-1D7B-4A16-8DED-B29C09CB648D}"
    'strDriverPathFromHKeyClassRoot is used to check driver MSOLEDBSQL is installed or not. If found MSOLEDBSQL will be returned from function else  strDriverPath="SQLOLEDB" will be used for further checking.
    oReg.GetStringValue HKEY_CLASSES_ROOT, strKeyPath, "", strDriverPathFromHKeyClassRoot
    If strDriverPathFromHKeyClassRoot = "MSOLEDBSQL" Then
        GetSqlDriverName = strDriverPathFromHKeyClassRoot
        Exit Function
    End If
    strKeyPath = "SOFTWARE\ODBC\ODBCINST.INI"
    oReg.EnumKey HKEY_LOCAL_MACHINE, strKeyPath, arrSubKeys
	For Each oSubkey In arrSubKeys
        intValue = InStr(oSubkey, "SQL Server Native Client")
        if intValue &lt;&gt; 0 Then
	        strValueName = "Driver" 
            strNewKeyPath = strKeyPath&amp;"\"&amp;oSubkey
            oReg.GetStringValue HKEY_LOCAL_MACHINE, strNewKeyPath, strValueName , strDriverPath
	        strDriverPath = Mid (strDriverPath, InStrRev(strDriverPath, "\")+1)
            intDotIndex = InStr(strDriverPath, ".")
	        strDriverPath = Left(strDriverPath , intDotIndex-1)
        end if
    Next
    GetSqlDriverName = strDriverPath
End Function
                    'Copyright (c) Microsoft Corporation. All rights reserved.
'*************************************************************************
' $ScriptName:  "FixDupRelAgsToSrvrsTask" $
'
' Purpose:      This script fix duplicates relationship between agents and servers.
'
' $File:        FixDupRelAgsToSrvrsTask.vbs $
'*************************************************************************
'Declarations 
Dim objCN,objRS,objRS2, strQuery, intRecordsCount 
Dim oArgs,oAPI,oBag 
Dim strDBServer,strDatabase, strDriverName 
Dim strRelationshipId, strDiscoverySourceId 
'Define local event constants 
Const EVENT_TYPE_ERROR = 1 
Const EVENT_TYPE_WARNING = 2 
Const EVENT_TYPE_INFORMATION = 4 
SetLocale("en-us")
'Create objects 
Set oAPI = CreateObject("MOM.ScriptAPI") 
Set oArgs = WScript.Arguments 
'Define parameters 
strDBServer             = oArgs(0) 
strDatabase             = oArgs(1) 
Dim ObjError
Set ObjError = New Error
On Error Resume Next
'Set DB connection 
Set objCN = CreateObject("ADODB.Connection") 
strDriverName = GetSqlDriverName
objCN.Open "Provider=" &amp; strDriverName &amp; ";Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=" &amp; _ 
strDatabase &amp; ";Data Source=" &amp; strDBServer &amp; "" 
ObjError.Save
On Error Goto 0
If  ObjError.Number &lt;&gt; 0 Then 
    WScript.Echo "Task Fail - Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description 
    oAPI.LogScriptEvent "FixDupRelAgsToSrvrsTask.vbs",100,EVENT_TYPE_ERROR,"Script executed with Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description   
    WScript.Quit
End If
intRecordsCount = 0
strQuery = "SELECT	R.RelationshipId, DS.DiscoverySourceId " &amp; _
"FROM  Relationship R (NoLock)  " &amp; _
"JOIN RelationshipType RT (NoLock)  ON  RT.RelationshipTypeId = R.RelationshipTypeId   " &amp; _
"JOIN DiscoverySourceToRelationship DSR (NoLock) ON DSR.RelationshipId = R.RelationshipId " &amp; _
"Left Outer Join DiscoverySource DS (NoLock) ON DS.DiscoverySourceId = DSR.DiscoverySourceId " &amp; _
"Left Outer Join Discovery D (NoLock) ON D.Discoveryid = DS.DiscoveryRuleId " &amp; _
"where R.IsDeleted = 0 " &amp; _
"And RT.RelationshipTypeName in ('Microsoft.SystemCenter.HealthServiceCommunication','Microsoft.SystemCenter.HealthServiceSecondaryCommunication') " &amp; _
"And R.RelationshipId NOT IN " &amp; _
"( " &amp; _
"	SELECT RO.RelationshipId " &amp; _
"    FROM " &amp; _
"	(	" &amp; _
"		SELECT RANK() OVER(PARTITION BY R1.SourceEntityId, R1.TargetEntityId ORDER BY R1.TimeAdded asc) as RowNumber, " &amp; _
"			   R1.RelationshipId " &amp; _
"		FROM  Relationship R1 (NoLock) " &amp; _
"		JOIN RelationshipType RT1 (NoLock) " &amp; _
"		ON  RT1.RelationshipTypeId = R1.RelationshipTypeId " &amp; _
"		WHERE RT1.RelationshipTypeName In ('Microsoft.SystemCenter.HealthServiceCommunication','Microsoft.SystemCenter.HealthServiceSecondaryCommunication')  " &amp; _
"		AND R1.IsDeleted = 0  " &amp; _
"		Group By R1.RelationshipId,R1.SourceEntityId, R1.TargetEntityId, R1.TimeAdded  " &amp; _
"	) As RO " &amp; _
"	Where RO.RowNumber = 1	" &amp; _
") " &amp; _
"Order By R.LastModified Desc"
'Query DB 
Set objRS = objCN.Execute(strQuery)
ObjError.Save
On Error Goto 0
If  ObjError.Number &lt;&gt; 0 Then 
    WScript.Echo "Task Fail - Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description 
    oAPI.LogScriptEvent "FixDupRelAgsToSrvrsTask.vbs",100,EVENT_TYPE_ERROR,"Script executed with Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description   
    WScript.Quit
End If
Do While objRS.EOF = false
    intRecordsCount = intRecordsCount + 1
    strRelationshipId = objRS.Fields(0).Value
    strDiscoverySourceId  = objRS.Fields(1).Value
    strQuery = "declare @RelationshipId uniqueidentifier;" &amp; _
    "declare @DiscoverySourceId uniqueidentifier;" &amp; _
    "declare @TimeGenerated datetime;" &amp; _
    "set @RelationshipId = '" &amp; strRelationshipId &amp;  "'; " &amp; _
    "set @DiscoverySourceId = '" &amp; strDiscoverySourceId &amp; "';" &amp; _
    "set @TimeGenerated = getutcdate();" &amp; _
    "begin transaction " &amp; _
    "exec p_RemoveRelationshipFromDiscoverySourceScope @RelationshipId, @DiscoverySourceId, @TimeGenerated " &amp;_
    "commit transaction"
    On Error Resume Next
    Set objRS2 = objCN.Execute(strQuery)
    ObjError.Save
    On Error Goto 0
   
    If  ObjError.Number &lt;&gt; 0 Then 
        WScript.Echo "Task Fail - Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description
        oAPI.LogScriptEvent "FixDupRelAgsToSrvrsTask.vbs",100,EVENT_TYPE_ERROR,"Script executed with Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description    
        WScript.Quit
    End If
    
    objRS.MoveNext()   
Loop
'Check for error condition before continuing.
If  ObjError.Number &lt;&gt; 0 Then 
    WScript.Echo "Task Fail - Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description 
    oAPI.LogScriptEvent "FixDupRelAgsToSrvrsTask.vbs",100,EVENT_TYPE_ERROR,"Script executed with Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description   
    WScript.Quit
End If
Set objRS  = Nothing
Set objRS2 = Nothing
Set objCN  = Nothing
oAPI.LogScriptEvent "FixDupRelAgsToSrvrsTask.vbs",100,EVENT_TYPE_INFORMATION,"Script executed to fix Duplicate Records"   
WScript.Echo "Task completed successfully."
Class Error
    Private m_lNumber
    Private m_sSource
    Private m_sDescription
    Private m_sHelpContext
    Private m_sHelpFile
    
    Public Sub Save()
        m_lNumber = Err.number
        m_sSource = Err.Source
        m_sDescription = Err.Description
        m_sHelpContext = Err.HelpContext
        m_sHelpFile = Err.helpfile
    End Sub
    
    Public Sub Raise()
        Err.Raise m_lNumber, m_sSource, m_sDescription, m_sHelpFile, m_sHelpContext
    End Sub
    Public Sub Clear()
        m_lNumber = 0
        m_sSource = ""
        m_sDescription = ""
        m_sHelpContext = ""
        m_sHelpFile = ""
    End Sub
    Public Default Property Get Number()
        Number = m_lNumber
    End Property
    Public Property Get Source()
        Source = m_sSource
    End Property
    Public Property Get Description()
        Description = m_sDescription
    End Property
    Public Property Get HelpContext()
        HelpContext = m_sHelpContext
    End Property
    
    Public Property Get HelpFile()
        HelpFile = m_sHelpFile
    End Property    
End Class
                    </Contents><Unicode>true</Unicode></File></Files></WriteAction></MemberModules><Composition><Node ID="RunScript" /></Composition></Composite></ModuleImplementation><InputType>System!System.TriggerData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.AgentManagement.LogEvent" Accessibility="Internal" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="LogEvent" TypeID="System!System.CommandExecuter"><ApplicationName>%windir%\system32\windowspowershell\v1.0\powershell.exe</ApplicationName><WorkingDirectory /><CommandLine>-ExecutionPolicy Unrestricted -Command
"&amp; '$File/LogEndToEndEvent.ps1$'"</CommandLine><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><RequireOutput>true</RequireOutput><Files><File><Name>LogEndToEndEvent.ps1</Name><Contents>
$oAPI = new-object -comobject "MOM.ScriptAPI"
$SCRIPT_NAME = "LogEndToEndEvent.ps1"; 
$ENU_MESSAGE = "This event is logged to the Windows Event Log periodically to test a event collection."; 
$EVENTLOG_SUCCESS =              0x0000;       #Information event     
$EVENTLOG_AUDIT_FAILURE =        0x0010;       #Failure Audit event   
$EVENTLOG_AUDIT_SUCCESS =        0x0008;       #Success Audit event   
$EVENTLOG_ERROR_TYPE =           0x0001;       #Error event           
$EVENTLOG_INFORMATION_TYPE =     0x0004;       #Information event     
$EVENTLOG_WARNING_TYPE =         0x0002;       #Warning event         
$oAPI.LogScriptEvent($SCRIPT_NAME, 6022, $EVENTLOG_INFORMATION_TYPE, $ENU_MESSAGE); 
                                        </Contents><Unicode>true</Unicode></File></Files></WriteAction></MemberModules><Composition><Node ID="LogEvent" /></Composition></Composite></ModuleImplementation><InputType>System!System.TriggerData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.AgentManagement.RestartHealthServiceAction" Accessibility="Internal" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Windows!Microsoft.Windows.WindowsEventLogEventTypeSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="EventId" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="EventType" type="WindowsEventLogEventType" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="RestartReason" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="RestartAttempts" type="xsd:integer"
/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Timeout" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="RestartAttempts" Selector="$Config/RestartAttempts$" ParameterType="int" /><OverrideableParameter ID="Timeout" Selector="$Config/Timeout$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="RestartHealthService" TypeID="System!System.CommandExecuter"><ApplicationName>%windir%\system32\windowspowershell\v1.0\powershell.exe</ApplicationName><WorkingDirectory /><CommandLine>-ExecutionPolicy Unrestricted -Command "&amp; '$File/LaunchRestartHealthService.ps1$'" $Config/EventId$ $Config/EventType$ $Config/RestartAttempts$ $Config/Timeout$ "'$Config/RestartReason$'"</CommandLine><TimeoutSeconds>300</TimeoutSeconds><RequireOutput>true</RequireOutput><Files><File><Name>LaunchRestartHealthService.ps1</Name><Contents>
Param($EventId, $EventType, $RestartAttempts, $Timeout, $RestartReason)
$WIN_OS_2012_Ver = "6.2"
function CheckByOSCurrentVersion($strComputerDNS) #As Boolean
{ 
    $reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $strComputerDNS)
    $regKey = $reg.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion")
    $strCurrentOSVer = $regKey.GetValue("CurrentVersion")
    if($strCurrentOSVer -ge $WIN_OS_2012_Ver)
	{	
		return $true;
	}
    return $false;
}
$strDNSComputerName = $env:computername
$Is_OS_More_Than_2012 = CheckByOSCurrentVersion $strDNSComputerName
$oAPI = new-object -comObject "MOM.ScriptAPI"
$SCRIPT_NAME = "LaunchRestartHealthService.ps1"
$ENU_MESSAGE_BASE = "Launching Restart Health Service. "
$SW_HIDE = 0;
$CREATE_BREAKAWAY_FROM_JOB = 0x1000000;
# Process Arguments:
#      0 - EventId
#      1 - EventType
#      2 - RestartAttempts
#      3 - Timeout
#      4 - RestartReason
$EVENTLOG_SUCCESS =              0x0000;     #  Information event    
$EVENTLOG_AUDIT_FAILURE =        0x0010;     #  Failure Audit event  
$EVENTLOG_AUDIT_SUCCESS =        0x0008;     #  Success Audit event  
$EVENTLOG_ERROR_TYPE =           0x0001;     #  Error event          
$EVENTLOG_INFORMATION_TYPE =     0x0004;     #  Information event    
$EVENTLOG_WARNING_TYPE =         0x0002;     #  Warning event        
switch($EventType)
{
    "Success" {$EventType = $EVENTLOG_SUCCESS}
    "AuditFailure" {$EventType = $EVENTLOG_AUDIT_FAILURE}
    "AuditSuccess" {$EventType = $EVENTLOG_AUDIT_SUCCESS}
    "Error" {$EventType = $EVENTLOG_ERROR_TYPE}
    "Information" {$EventType = $EVENTLOG_INFORMATION_TYPE}
    "Warning" {$EventType = $EVENTLOG_WARNING_TYPE}
}
$RestartReason = $($ENU_MESSAGE_BASE + $RestartReason)
$oAPI.LogScriptEvent($SCRIPT_NAME, $EventId, $EventType, $RestartReason)
$location = Get-Location
if(Test-Path $($location.Path + "\RestartHealthService.ps1"))
{
Copy-Item $($location.Path + "\RestartHealthService.ps1") $env:temp\RestartHealthService.ps1
}
else
{
$Newlocation = Split-Path $MyInvocation.MyCommand.Path -Parent
Copy-Item $($Newlocation + "\RestartHealthService.ps1") $env:temp\RestartHealthService.ps1
}
if($Is_OS_More_Than_2012)
{
  Import-Module CimCmdlets
  $startup = Get-CimClass -ClassName Win32_ProcessStartup -Namespace root/cimv2
  $processInfo = New-CimInstance -CimClass $startup -Property @{"ShowWindow"=0;"CreateFlags"=16777216} -ClientOnly
  $Arguments = @{
      CommandLine = "powershell.exe  -ExecutionPolicy Unrestricted $env:temp\RestartHealthService.ps1 $RestartAttempts $Timeout"
      CurrentDirectory = $null;
      ProcessStartupInformation = $processInfo;
  };
  Invoke-CimMethod -ClassName Win32_Process -MethodName "Create" -Arguments $Arguments
}else
{
   $processInfo = ([wmiclass]"root\cimv2:Win32_ProcessStartup").CreateInstance()
   $processInfo.ShowWindow = 0
   $processInfo.CreateFlags = 16777216
   ([wmiclass]"root\cimv2:Win32_Process").Create("powershell.exe -ExecutionPolicy Unrestricted $env:temp\RestartHealthService.ps1 $RestartAttempts $Timeout", $null, $processInfo);
}
$oAPI.LogScriptEvent($SCRIPT_NAME, $EventId, $EventType, "Attempted Health Service Restart.")
                                </Contents><Unicode>false</Unicode></File><File><Name>RestartHealthService.ps1</Name><Contents>
Param($RestartAttempts, $TimeOut)
$oAPI = New-Object -ComObject MOM.ScriptAPI
$TimeOut = ([int]$TimeOut) * 1000
$ScriptName = "RestartHealthService.ps1"
$ENU_MESSAGE_BASE = "Restarting Health Service. "
$EVENTLOG_SUCCESS      = 0x0000; # Information event
$EVENTLOG_ERROR_TYPE   = 0x0001; # Error event
$EVENTLOG_WARNING_TYPE = 0x0002; # Warning event
$eventIdWarning  = 6060;
$eventIdError    = 6061;
$eventIdSuccess  = 6062;
$successful = $false;
for($i=0;$i -lt $RestartAttempts; $i++)
{
    try
    {
        # Stop service
        Stop-Service "healthservice"
        $healthService = Get-Service -Name "healthservice"
        if($healthService.Status -ne "Stopped")
            {
            Start-Sleep -m $TimeOut
            $healthService = Get-Service -Name "healthservice"
            if($healthService.Status -ne "Stopped")
                {
                # Terminate in case service failed to stop
                $terminated = $false
                $counter = 0
                while($counter -lt $RestartAttempts)
                    {
                    Stop-Service "healthservice" -Force
                    $healthService = Get-Service -Name "healthservice"
                    if($healthService.Status -eq "Stopped")
                        {
                        $terminated = $true
                            break;
                        }
                    $counter++
                }
                
                if($terminated -eq $false)
                {
                    throw "Failed to terminate Health Service"
                }
            }
        }
        for($j=0;$j -lt 3;$j++)
        {
            #Start service
            Start-Service "healthservice"
            Start-Sleep -m $TimeOut
            $healthService = Get-Service -Name "healthservice"
            if($healthService.Status -eq "Running")
            {
                $successful = $true
                break;
            }
        }
        if($successful)
        {
            break
        }
    }
    catch
        {
        $errorMessage = $ENU_MESSAGE_BASE + "Error: " + $_.Exception.Message
        $oAPI.LogScriptEvent($SCRIPT_NAME, $eventIdWarning, $EVENTLOG_WARNING_TYPE, $errorMessage);
    }
}
if($successful -eq $true)
{
    $message = $($ENU_MESSAGE_BASE + "Service successfully restarted")    
    $oAPI.LogScriptEvent($SCRIPT_NAME, $eventIdSuccess, $EVENTLOG_SUCCESS, $message)
}
else
{
    $errorMessage = $($ENU_MESSAGE_BASE + "Failed to restart service.")
    $oAPI.LogScriptEvent($SCRIPT_NAME, $eventIdError, $EVENTLOG_ERROR_TYPE, $errorMessage);
}
                                </Contents><Unicode>false</Unicode></File></Files></WriteAction></MemberModules><Composition><Node ID="RestartHealthService" /></Composition></Composite></ModuleImplementation><OutputType>System!System.CommandOutput</OutputType><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthService.AvailabilityPost" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Expression" type="ExpressionType" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>C6410789-C1BB-4AF1-B818-D01A5367781D</ClassID></Native></ModuleImplementation><OutputType>System!System.BaseData</OutputType><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType
ID="Microsoft.SystemCenter.HealthService.AvailabilityPost.Composite" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.HealthService.AvailabilityPost"><Expression /></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><OutputType>System!System.BaseData</OutputType><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.Health.SetStateAction" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Health!System.Health.AlertSchema</SchemaType><SchemaType>System!System.ManagedEntityKeysSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MonitorId" type="xsd:string"
/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagedEntityTypeId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="KeyProperties" type="System.ManagedEntityKeys" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthState" type="System.Health.AlertHealthState" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>44cbc334-8b5f-4cb6-bee0-6bdcbc80e8d5</ClassID></Native></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthService.ConnectorHealth.SetEventLogMonitorStates" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Health!System.Health.AlertSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthState" type="System.Health.AlertHealthState" minOccurs="1" /></Configuration><ModuleImplementation
Isolation="Any"><Composite><MemberModules><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetStateAction"><MonitorId>$MPElement[Name="Microsoft.SystemCenter.HealthService.ConnectorHealth"]$</MonitorId><HealthState>$Config/HealthState$</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction" /></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthService.ConnectorHealth.SetEventLogMonitorStates.Success" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Health.FilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="Integer">Reachability/State</XPathQuery></ValueExpression><Operator>NotEqual</Operator><ValueExpression><Value Type="Integer">-1</Value></ValueExpression></SimpleExpression></Expression><Expression><Not><Expression><Exists><ValueExpression><XPathQuery Type="Integer">Reachability/Reasons/Reason[.=97]</XPathQuery></ValueExpression></Exists></Expression></Not></Expression></And></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.HealthService.ConnectorHealth.SetEventLogMonitorStates"><HealthState>Success</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Health.FilterCondition" /></Node></Composition></Composite></ModuleImplementation><InputType>System!System.Availability.StateData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthService.ConnectorHealth.SetEventLogMonitorStates.Warning" Accessibility="Internal"
Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Health.FilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Reachability/State</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">1</Value></ValueExpression></SimpleExpression></Expression><Expression><Exists><ValueExpression><XPathQuery Type="Integer">Reachability/Reasons/Reason[.=97]</XPathQuery></ValueExpression></Exists></Expression></And></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.HealthService.ConnectorHealth.SetEventLogMonitorStates"><HealthState>Warning</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Health.FilterCondition"
/></Node></Composition></Composite></ModuleImplementation><InputType>System!System.Availability.StateData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetActionAccountConfiguredStateAction" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Health!System.Health.AlertSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthState" type="System.Health.AlertHealthState" minOccurs="1" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetStateAction"><MonitorId>$MPElement[Name="Microsoft.SystemCenter.HealthService.ActionAccountConfigured"]$</MonitorId><HealthState>$Config/HealthState$</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"
/></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetActionAccountConfiguredStateAction.Error" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Health.FilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Reachability/State</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">1</Value></ValueExpression></SimpleExpression></Expression><Expression><Exists><ValueExpression><XPathQuery Type="Integer">Reachability/Reasons/Reason[.=25]</XPathQuery></ValueExpression></Exists></Expression></And></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction"
TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetActionAccountConfiguredStateAction"><HealthState>Error</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Health.FilterCondition" /></Node></Composition></Composite></ModuleImplementation><InputType>System!System.Availability.StateData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetActionAccountConfiguredStateAction.Success" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Health.FilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Reachability/State</XPathQuery></ValueExpression><Operator>NotEqual</Operator><ValueExpression><Value
Type="Integer">-1</Value></ValueExpression></SimpleExpression></Expression><Expression><Not><Expression><Exists><ValueExpression><XPathQuery Type="Integer">Reachability/Reasons/Reason[.=25]</XPathQuery></ValueExpression></Exists></Expression></Not></Expression></And></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetActionAccountConfiguredStateAction"><HealthState>Success</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Health.FilterCondition" /></Node></Composition></Composite></ModuleImplementation><InputType>System!System.Availability.StateData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetComputerDownStateAction" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Health!System.Health.AlertSchema</SchemaType></IncludeSchemaTypes><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthState" type="System.Health.AlertHealthState" minOccurs="1" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetStateAction"><MonitorId>$MPElement[Name="Microsoft.SystemCenter.HealthService.ComputerDown"]$</MonitorId><HealthState>$Config/HealthState$</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction" /></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetComputerDownStateAction.Success" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Health.FilterCondition"
TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Reachability/State</XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value Type="Integer">0</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetComputerDownStateAction"><HealthState>Success</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Health.FilterCondition" /></Node></Composition></Composite></ModuleImplementation><InputType>System!System.Availability.StateData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetConfigProcessedStateAction" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Health!System.Health.AlertSchema</SchemaType></IncludeSchemaTypes><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthState" type="System.Health.AlertHealthState" minOccurs="1" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetStateAction"><MonitorId>$MPElement[Name="Microsoft.SystemCenter.HealthService.ConfigProcessed"]$</MonitorId><HealthState>$Config/HealthState$</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction" /></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetConfigProcessedStateAction.Error" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Health.FilterCondition"
TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Reachability/State</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">1</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><Exists><ValueExpression><XPathQuery Type="Integer">Reachability/Reasons/Reason[.=41]</XPathQuery></ValueExpression></Exists></Expression><Expression><Exists><ValueExpression><XPathQuery Type="Integer">Reachability/Reasons/Reason[.=42]</XPathQuery></ValueExpression></Exists></Expression><Expression><Exists><ValueExpression><XPathQuery Type="Integer">Reachability/Reasons/Reason[.=98]</XPathQuery></ValueExpression></Exists></Expression></Or></Expression></And></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction"
TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetConfigProcessedStateAction"><HealthState>Error</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Health.FilterCondition" /></Node></Composition></Composite></ModuleImplementation><InputType>System!System.Availability.StateData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetConfigProcessedStateAction.Success" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Health.FilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Reachability/State</XPathQuery></ValueExpression><Operator>NotEqual</Operator><ValueExpression><Value
Type="Integer">-1</Value></ValueExpression></SimpleExpression></Expression><Expression><And><Expression><Not><Expression><Exists><ValueExpression><XPathQuery Type="Integer">Reachability/Reasons/Reason[.=41]</XPathQuery></ValueExpression></Exists></Expression></Not></Expression><Expression><Not><Expression><Exists><ValueExpression><XPathQuery Type="Integer">Reachability/Reasons/Reason[.=42]</XPathQuery></ValueExpression></Exists></Expression></Not></Expression><Expression><Not><Expression><Exists><ValueExpression><XPathQuery Type="Integer">Reachability/Reasons/Reason[.=98]</XPathQuery></ValueExpression></Exists></Expression></Not></Expression></And></Expression></And></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetConfigProcessedStateAction"><HealthState>Success</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Health.FilterCondition"
/></Node></Composition></Composite></ModuleImplementation><InputType>System!System.Availability.StateData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetHeartbeatStateAction" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Health!System.Health.AlertSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthState" type="System.Health.AlertHealthState" minOccurs="1" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetStateAction"><MonitorId>$MPElement[Name="Microsoft.SystemCenter.HealthService.Heartbeat"]$</MonitorId><HealthState>$Config/HealthState$</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"
/></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetHeartbeatStateAction.Error" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Health.FilterCondition" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Reachability/State</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">0</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetHeartbeatStateAction"><HealthState>Error</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Health.FilterCondition"
/></Node></Composition></Composite></ModuleImplementation><InputType>System!System.Availability.StateData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetHeartbeatStateAction.Success" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Health.FilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Reachability/State</XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value Type="Integer">0</Value></ValueExpression></SimpleExpression></Expression><Expression><Not><Expression><Exists><ValueExpression><XPathQuery Type="Integer">Reachability/Reasons/Reason[.=17]</XPathQuery></ValueExpression></Exists></Expression></Not></Expression></And></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction"
TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetHeartbeatStateAction"><HealthState>Success</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Health.FilterCondition" /></Node></Composition></Composite></ModuleImplementation><InputType>System!System.Availability.StateData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetHeartbeatStateAction.Warning" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Health.FilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Reachability/State</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">1</Value></ValueExpression></SimpleExpression></Expression><Expression><Exists><ValueExpression><XPathQuery
Type="Integer">Reachability/Reasons/Reason[.=17]</XPathQuery></ValueExpression></Exists></Expression></And></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetHeartbeatStateAction"><HealthState>Warning</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Health.FilterCondition" /></Node></Composition></Composite></ModuleImplementation><InputType>System!System.Availability.StateData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetStateAction" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Health!System.Health.AlertSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MonitorId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthState" type="System.Health.AlertHealthState"
/></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><Value Type="String">$Target/ManagementGroup/Id$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery Type="String">ManagementGroupId</XPathQuery></ValueExpression></SimpleExpression></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction"
TypeID="Microsoft.SystemCenter.Health.SetStateAction"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><MonitorId>$Config/MonitorId$</MonitorId><ManagedEntityTypeId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]$</ManagedEntityTypeId><KeyProperties><KeyProperty><PropertyId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthServiceWatchersGroup"]/WatcherGroupName$</PropertyId><IsCaseSensitive>false</IsCaseSensitive><Value>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatchersGroup"]/WatcherGroupName$</Value></KeyProperty><KeyProperty><PropertyId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceId$</PropertyId><IsCaseSensitive>false</IsCaseSensitive><Value>$Data/HealthServiceId$</Value></KeyProperty></KeyProperties><HealthState>$Config/HealthState$</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Filter"
/></Node></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetSystemRulesLoadedStateAction" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Health!System.Health.AlertSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthState" type="System.Health.AlertHealthState" minOccurs="1" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetStateAction"><MonitorId>$MPElement[Name="Microsoft.SystemCenter.HealthService.SystemRulesLoaded"]$</MonitorId><HealthState>$Config/HealthState$</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"
/></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetSystemRulesLoadedStateAction.Error" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Health.FilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Reachability/State</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">1</Value></ValueExpression></SimpleExpression></Expression><Expression><Exists><ValueExpression><XPathQuery Type="Integer">Reachability/Reasons/Reason[.=43]</XPathQuery></ValueExpression></Exists></Expression></And></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction"
TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetSystemRulesLoadedStateAction"><HealthState>Error</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Health.FilterCondition" /></Node></Composition></Composite></ModuleImplementation><InputType>System!System.Availability.StateData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetSystemRulesLoadedStateAction.Success" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Health.FilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Reachability/State</XPathQuery></ValueExpression><Operator>NotEqual</Operator><ValueExpression><Value
Type="Integer">-1</Value></ValueExpression></SimpleExpression></Expression><Expression><Not><Expression><Exists><ValueExpression><XPathQuery Type="Integer">Reachability/Reasons/Reason[.=43]</XPathQuery></ValueExpression></Exists></Expression></Not></Expression></And></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetSystemRulesLoadedStateAction"><HealthState>Success</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Health.FilterCondition" /></Node></Composition></Composite></ModuleImplementation><InputType>System!System.Availability.StateData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.ManagementServicePoolWatcher.SetHeartbeatStateAction" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Health!System.Health.AlertSchema</SchemaType></IncludeSchemaTypes><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthState" type="System.Health.AlertHealthState" minOccurs="1" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.ManagementServicePoolWatcher.SetStateAction"><MonitorId>$MPElement[Name="Microsoft.SystemCenter.ManagementServicePoolWatcher.Heartbeat"]$</MonitorId><HealthState>$Config/HealthState$</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction" /></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.ManagementServicePoolWatcher.SetHeartbeatStateAction.Error" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Health.FilterCondition"
TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Reachability/State</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">0</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.ManagementServicePoolWatcher.SetHeartbeatStateAction"><HealthState>Error</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Health.FilterCondition" /></Node></Composition></Composite></ModuleImplementation><InputType>System!System.Availability.StateData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.ManagementServicePoolWatcher.SetHeartbeatStateAction.Success" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Health.FilterCondition"
TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Reachability/State</XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value Type="Integer">0</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.ManagementServicePoolWatcher.SetHeartbeatStateAction"><HealthState>Success</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Health.FilterCondition" /></Node></Composition></Composite></ModuleImplementation><InputType>System!System.Availability.StateData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.ManagementServicePoolWatcher.SetStateAction" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Health!System.Health.AlertSchema</SchemaType></IncludeSchemaTypes><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MonitorId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthState" type="System.Health.AlertHealthState" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><Value Type="String">$Target/ManagementGroup/Id$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery Type="String">ManagementGroupId</XPathQuery></ValueExpression></SimpleExpression></Expression></ConditionDetection><WriteAction ID="Health.SetStateAction"
TypeID="Microsoft.SystemCenter.Health.SetStateAction"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><MonitorId>$Config/MonitorId$</MonitorId><ManagedEntityTypeId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementServicePoolWatcher"]$</ManagedEntityTypeId><KeyProperties><KeyProperty><PropertyId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementServicePoolWatcher"]/PoolId$</PropertyId><IsCaseSensitive>false</IsCaseSensitive><Value>$Data/HealthServiceId$</Value></KeyProperty></KeyProperties><HealthState>$Config/HealthState$</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"><Node ID="Filter" /></Node></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.OleDbWriteAction" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="ConnectionString" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Query" type="xsd:string" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="GetValue" type="xsd:boolean" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IncludeOriginalItem" type="xsd:boolean" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="OneRowPerItem" type="xsd:boolean" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatabaseNameRegLocation" type="xsd:string" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatabaseServerNameRegLocation" type="xsd:string" minOccurs="0" maxOccurs="1" /></Configuration><ModuleImplementation
Isolation="Any"><Native><ClassID>B5A35748-86F5-46A3-9BC2-F9A494E36B25</ClassID></Native></ModuleImplementation><OutputType>System!System.OleDbData</OutputType><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.StopWMI.WriteAction" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TaskKillFilter" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="RunScript" TypeID="System!System.CommandExecuter"><ApplicationName>%comspec%</ApplicationName><WorkingDirectory /><CommandLine>/C TaskKill.exe /F /IM WmiPrvSE.exe /FI
"$Config/TaskKillFilter$"</CommandLine><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><RequireOutput>true</RequireOutput></WriteAction></MemberModules><Composition><Node ID="RunScript" /></Composition></Composite></ModuleImplementation><InputType>System!System.TriggerData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.ShowGrayAgentConnectivityData.WA" Accessibility="Internal" RunAs="SCLibrary!Microsoft.SystemCenter.DatabaseWriteActionAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="AgentName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="AgentName" Selector="$Config/AgentName$" ParameterType="string" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int"
/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="RunScript" TypeID="System!System.CommandExecuter"><ApplicationName>%windir%\system32\cscript.exe</ApplicationName><WorkingDirectory /><CommandLine>//NoLogo "GetGrayAgentConnectivityData.vbs" "$Config/AgentName$"</CommandLine><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><RequireOutput>true</RequireOutput><Files><File><Name>GetGrayAgentConnectivityData.vbs</Name><Contents>
                    'Copyright (c) Microsoft Corporation. All rights reserved.
'*************************************************************************
' $ScriptName:  "GetSqlNativeClientComman" $
'
' Purpose:      This script is used to get SQL native client Driver name.
'
' $File:        GetSqlNativeClientComman.vbs $
'*************************************************************************
Option Explicit 
Function GetSqlDriverName
    Dim oReg
    Const HKEY_LOCAL_MACHINE = &amp;H80000002
    Const HKEY_CLASSES_ROOT = &amp;H80000000
    Dim strComputer, strDriverPath, strKeyPath, intValue, strValueName,arrSubKeys,oSubkey,strNewKeyPath,intDotIndex, strDriverPathFromHKeyClassRoot
    strComputer = "."
    strDriverPath="SQLOLEDB"
    Set oReg=GetObject("winmgmts:\\" &amp; _ 
        strComputer &amp; "\root\default:StdRegProv")
        
    strKeyPath = "CLSID\{5A23DE84-1D7B-4A16-8DED-B29C09CB648D}"
    'strDriverPathFromHKeyClassRoot is used to check driver MSOLEDBSQL is installed or not. If found MSOLEDBSQL will be returned from function else  strDriverPath="SQLOLEDB" will be used for further checking.
    oReg.GetStringValue HKEY_CLASSES_ROOT, strKeyPath, "", strDriverPathFromHKeyClassRoot
    If strDriverPathFromHKeyClassRoot = "MSOLEDBSQL" Then
        GetSqlDriverName = strDriverPathFromHKeyClassRoot
        Exit Function
    End If
    strKeyPath = "SOFTWARE\ODBC\ODBCINST.INI"
    oReg.EnumKey HKEY_LOCAL_MACHINE, strKeyPath, arrSubKeys
	For Each oSubkey In arrSubKeys
        intValue = InStr(oSubkey, "SQL Server Native Client")
        if intValue &lt;&gt; 0 Then
	        strValueName = "Driver" 
            strNewKeyPath = strKeyPath&amp;"\"&amp;oSubkey
            oReg.GetStringValue HKEY_LOCAL_MACHINE, strNewKeyPath, strValueName , strDriverPath
	        strDriverPath = Mid (strDriverPath, InStrRev(strDriverPath, "\")+1)
            intDotIndex = InStr(strDriverPath, ".")
	        strDriverPath = Left(strDriverPath , intDotIndex-1)
        end if
    Next
    GetSqlDriverName = strDriverPath
End Function
                    'Copyright (c) Microsoft Corporation. All rights reserved.
'*************************************************************************
' $ScriptName:  "GetGrayAgentConnectivityData" $
'
' Purpose:      This script gets Gray agent Connectivity Data.
'
' $File:        GetGrayAgentConnectivityData.vbs $
'*************************************************************************
 
'Declarations 
Dim objCN,objRS,strQuery 
Dim oArgs,oAPI, oReg 
Dim strCNString 
Dim strComputerName, strAgentName, strMessageToUse
Dim strAvailabilityLastModified, strLastSubmittedConfigurationDateTime, strReasonCode, strServerName, strPingStatus, strHealthServiceState
Dim stroffsetMin
'Define local event constants 
Const EVENT_TYPE_ERROR = 1 
Const EVENT_TYPE_WARNING = 2 
Const EVENT_TYPE_INFORMATION = 4 
'constants needed for registry access
Const HKEY_LOCAL_MACHINE = &amp;H80000002
Const SCOM_SETUP_BASE_KEY = "SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
Const SCOM_DB_NAME_VALUE = "DatabaseName"
Const SCOM_DB_SERVER_VALUE = "DatabaseServerName"
Const WINDOWS_TIMEZONE_KEY = "SYSTEM\CurrentControlSet\Control\TimeZoneInformation"
Const WINDOWS_TIMEZONE_VALUE = "Bias"
SetLocale("en-us")
'Create objects 
Set oAPI = CreateObject("MOM.ScriptAPI") 
Set oArgs = WScript.Arguments 
'Define parameters 
strComputerName	 = oArgs(0) 
Dim ObjError
Set ObjError = New Error
On Error Resume Next
set oReg = GetRegistryObject(".")
strCNString = GetOpsMgrDBConnectionString(oReg)
stroffsetMin = GetBias(oReg)
If  ObjError.Number &lt;&gt; 0 Then 
    strMessageToUse = "Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description 
    call GetResponse(true, strMessageToUse, strComputerName, "", "", "", "", "", "")
End If
'Set DB connection 
Set objCN = CreateObject("ADODB.Connection") 
objCN.Open strCNString
ObjError.Save
On Error Goto 0
If  ObjError.Number &lt;&gt; 0 Then 
    strMessageToUse = "Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description
    call GetResponse(true, strMessageToUse, strComputerName, "", "", "", "", "", "")
End If
strQuery = "SELECT MEG.DisplayName As AgentName, MEG.AvailabilityLastModified , AGN.LastSubmittedConfigurationDateTimeUtc, AVL.ReasonCode, MEV.DisplayName As ServerName " &amp; _ 
" FROM        ManagedEntityGenericView MEG " &amp; _
" INNER JOIN  ManagedTypeView MTV ON MEG.MonitoringClassId = MTV.Id " &amp; _
" INNER JOIN  CS.Agent AGN ON AGN.NetworkName = MEG.DisplayName " &amp; _
" INNER JOIN  Availability AVL ON AVL.BaseManagedEntityId = MEG.BaseManagedEntityId " &amp; _
" INNER JOIN  Relationship REL ON REL.SourceEntityId = MEG.Id " &amp; _
" INNER JOIN  RelationshipType RET ON REL.RelationshipTypeId = RET.RelationshipTypeId And RET.RelationshipTypeName = 'Microsoft.SystemCenter.HealthServiceCommunication' " &amp; _
" INNER JOIN  ManagedEntityGenericView MEV ON MEV.Id = REL.TargetEntityId AND MEV.MonitoringClassId = RET.TargetManagedTypeId " &amp; _
" WHERE       MTV.Name = 'microsoft.systemCenter.agent' " &amp; _ 
" AND         MEG.IsAvailable = 0 " &amp; _
" And         MEG.DisplayName = '" &amp;  strComputerName &amp; "'" &amp; _
" ORDER BY    MEG.DisplayName"
On Error Resume Next
'Query DB 
Set objRS = objCN.Execute(strQuery)
ObjError.Save
On Error Goto 0
If  ObjError.Number &lt;&gt; 0 Then 
    strMessageToUse = "Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description
    call GetResponse(true, strMessageToUse, strComputerName, "", "", "", "", "", "")
End If
On Error Resume Next
'Set variables 
strAgentName = objRS("AgentName") 
strAvailabilityLastModified = objRS("AvailabilityLastModified") 
If ISNULL(strAvailabilityLastModified) = false Then
   strAvailabilityLastModified = LocalDateString(strAvailabilityLastModified, stroffsetMin)
End If
strLastSubmittedConfigurationDateTime = objRS("LastSubmittedConfigurationDateTimeUtc") 
If ISNULL(strLastSubmittedConfigurationDateTime) = false Then
   strLastSubmittedConfigurationDateTime = LocalDateString(strLastSubmittedConfigurationDateTime, stroffsetMin)
End If
strReasonCode = GetReasonDescText(objRS("ReasonCode")) 
strServerName = objRS("ServerName") 
strPingStatus = GetPingStatus(strComputerName)
strHealthServiceState = GetHealthServiceState(strComputerName)
ObjError.Save
On Error Goto 0
If  ObjError.Number &lt;&gt; 0 Then 
    strMessageToUse = "Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description
    call GetResponse(true, strMessageToUse, strComputerName, "", "", "", "", "", "")
Else
    strMessageToUse = "Script GetGrayAgentConnectivityData executed Successfully"
    call GetResponse(false, strMessageToUse, strComputerName, strAvailabilityLastModified, strLastSubmittedConfigurationDateTime, strReasonCode, strServerName, strPingStatus, strHealthServiceState)
End If
'---------------------------------------------------------------------------
' Retrieves the script output.
'---------------------------------------------------------------------------
Sub GetResponse(boolErrorFlag, strMessage, strComputerName, strAvailabilityLastModified, strLastSubmittedConfigurationDateTime, strReasonCode, strServerName, strPingStatus, strHealthServiceState)
    If boolErrorFlag = true Then
       WScript.Echo strMessage 
    Else
        WScript.Echo "Agent Name: " &amp; strComputerName 
        WScript.Echo "Last Time Agent Heartbeat Was Received: " &amp; strAvailabilityLastModified 
        WScript.Echo "Is Health Service Running On Agent: " &amp; strHealthServiceState 
        WScript.Echo "Is Agent Responding To Ping: " &amp; strPingStatus 
        WScript.Echo "Last Time Configuration Was Updated On Agent: " &amp; strLastSubmittedConfigurationDateTime 
        WScript.Echo "Reason the agent is unavailable: " &amp;  strReasonCode 
        WScript.Echo "Management Server That The Agent Reports To: " &amp; strServerName 
    End If
    oAPI.LogScriptEvent "GetGrayAgentConnectivityData.vbs",100,EVENT_TYPE_INFORMATION, strMessage
    WScript.Quit 
End Sub
'---------------------------------------------------------------------------
' Gets Ping Status.
'---------------------------------------------------------------------------
Function GetPingStatus(strComputerName)
     Dim Status
     Status = ExecuteWMIQuery(strComputerName, "cimv2", "SELECT StatusCode, ResponseTime FROM Win32_PingStatus WHERE Address = '" + strComputerName + "'", "StatusCode")
     If Status = "0" Then
        GetPingStatus = "Yes"
     Else
        GetPingStatus = "No"
     End If
End Function
'---------------------------------------------------------------------------
' Gets The Health Service State.
'---------------------------------------------------------------------------
Function GetHealthServiceState(strComputerName)
     Dim State
     State = ExecuteWMIQuery(strComputerName, "cimv2", "SELECT State FROM Win32_Service WHERE name = 'HealthService'", "State")
     If State = "Running" Then
        GetHealthServiceState = "Running"
     Else
        GetHealthServiceState = "Not Running"
     End If
End Function
'---------------------------------------------------------------------------
' Retrieves a WMI object from the specified namespace.
'---------------------------------------------------------------------------
Function GetWMIObject(ByVal sNamespace)
	dim oWMI
	
	'get the object
	on error resume next
	set oWMI = GetObject(sNamespace)
	ObjError.Save
	on error goto 0
	
	'did it work?
	if IsEmpty(oWMI) then
		'no
        strMessageToUse = "Error Number: " &amp; ObjError.number &amp; " Unable to open WMI Namespace '" &amp; sNamespace &amp; "'. Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists."
        call GetResponse(true, strMessageToUse, strComputerName, "", "", "", "", "", "")
	end if
	
	set GetWMIObject = oWMI
End Function
'---------------------------------------------------------------------------
' Retrieves a WMI registry object
'---------------------------------------------------------------------------
Function GetRegistryObject(ByVal sComputerName)
	set GetRegistryObject = GetWMIObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp; sComputerName &amp; "\root\default:StdRegProv")
End Function
'---------------------------------------------------------------------------
' Execute a WMI Query.
'---------------------------------------------------------------------------
Function ExecuteWMIQuery(TargetComputer, strBaseClass, strQuery, strPropertyName)
    Dim WbemSrv, WbemObjectSet, objItem
    Set WbemSrv = GetWMIObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp; TargetComputer &amp; "\root\" &amp; strBaseClass)
    Set WbemObjectSet = WbemSrv.ExecQuery(strQuery)
    For Each objItem in WbemObjectSet
        ExecuteWMIQuery = objItem.Properties_(strPropertyName).value
    Next
End Function
'---------------------------------------------------------------------------
' Retrieves a Ops Manager DB Connection String.
'---------------------------------------------------------------------------
Function GetOpsMgrDBConnectionString(reg)
    Dim sDBName, sDBServerName, strDriverName
    'get db name
    on error resume next
    reg.GetStringValue HKEY_LOCAL_MACHINE, SCOM_SETUP_BASE_KEY, SCOM_DB_NAME_VALUE, sDBName
    ObjError.Save
    on error goto 0
    if ObjError.Number &lt;&gt; 0 then
        strMessageToUse = "Error Number: " &amp; ObjError.number &amp; " Unable to determine SCOM Database name. Please verify that Operations Manager is installed on this computer."
        call GetResponse(true, strMessageToUse, strComputerName, "", "", "", "", "", "")
    end if
    
    'get db server name
    on error resume next
    reg.GetStringValue HKEY_LOCAL_MACHINE, SCOM_SETUP_BASE_KEY, SCOM_DB_SERVER_VALUE, sDBServerName
    ObjError.Save
    on error goto 0
    if ObjError.Number &lt;&gt; 0 then
        strMessageToUse = "Error Number: " &amp; ObjError.number &amp; " Unable to determine SCOM Database Server name. Please verify that Operations Manager is installed on this computer."
        call GetResponse(true, strMessageToUse, strComputerName, "", "", "", "", "", "")
    end if
    
    'generate connection string and return
    strDriverName = GetSqlDriverName
    GetOpsMgrDBConnectionString = "Provider=" &amp; strDriverName &amp;";Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=" &amp; sDBName &amp; ";Data Source=" &amp; sDBServerName &amp; "" 
End Function
'---------------------------------------------------------------------------
' Retuns Reason Description
'---------------------------------------------------------------------------
Function GetReasonDescText(strReasonCode)
Select Case strReasonCode
   Case 0
     GetReasonDescText = "UnKnown"
   Case 1
     GetReasonDescText = "Unavailable- No heartbeat"
   Case 17
     GetReasonDescText = "Connector Service Paused"
   Case 25
     GetReasonDescText = "Action Account Issue"
   Case 41
     GetReasonDescText = "Config Data Handling Issue"
   Case 42
     GetReasonDescText = "Config Data Loading Issue"
   Case 43
     GetReasonDescText = "System Workflows Unloaded"
   Case 49
     GetReasonDescText = "Entity State Collection Stalled"
   Case 50
     GetReasonDescText = "Monitor State Collection Stalled"
   Case 51
     GetReasonDescText = "Alert Collection Stalled"
   Case 97
     GetReasonDescText = "Solution Event Source Not Open"
 End Select
End Function
'------------------------------------------------------------------------------
' Retrieves a Windows Time Zone Setting (Bias) from Registry.
' Function to obtain Windows TimeZone setting to convert from UTC to Local Time
'------------------------------------------------------------------------------
Function GetBias(reg)
    Dim strBiasValue 
    on error resume next
    reg.GetDWORDValue HKEY_LOCAL_MACHINE, WINDOWS_TIMEZONE_KEY, WINDOWS_TIMEZONE_VALUE, strBiasValue
    ObjError.Save
    on error goto 0
    if ObjError.Number &lt;&gt; 0 then
        strMessageToUse = "Error Number: " &amp; ObjError.number &amp; " Unable to get BIAS value."
        call GetResponse(true, strMessageToUse, strComputerName, "", "", "", "", "", "")
    end if
    
    GetBias = -(strBiasValue) 
End Function
'---------------------------------------------------------------------------
' Gets Local Date String
'---------------------------------------------------------------------------
Function LocalDateString(dtmInstallDate, offsetMin)
 Dim od, ad
 
 on error resume next
 od = CDate(dtmInstallDate)
 on error goto 0
 if ObjError.Number &lt;&gt; 0 then
    strMessageToUse = "Error Number: " &amp; ObjError.number &amp; " Unable to Set Date time."
    call GetResponse(true, strMessageToUse, strComputerName, "", "", "", "", "", "")
 end if
 
 ' OffSetMin Formula: UTC = local time + bias.
 ad = dateadd("n", offsetMin, od) 
 on error goto 0
 if ObjError.Number &lt;&gt; 0 then
    strMessageToUse = "Error Number: " &amp; ObjError.number &amp; " Unable to Convert To Local Date time."
    call GetResponse(true, strMessageToUse, strComputerName, "", "", "", "", "", "")
 end if
 
 LocalDateString = ad
End Function
'---------------------------------------------------------------------------
' Error Handling Class
'---------------------------------------------------------------------------
Class Error
    Private m_lNumber
    Private m_sSource
    Private m_sDescription
    Private m_sHelpContext
    Private m_sHelpFile
    
    Public Sub Save()
        m_lNumber = Hex(Err.number)
        m_sSource = Err.Source
        m_sDescription = Err.Description
        m_sHelpContext = Err.HelpContext
        m_sHelpFile = Err.helpfile
    End Sub
    
    Public Sub Raise()
        Err.Raise m_lNumber, m_sSource, m_sDescription, m_sHelpFile, m_sHelpContext
    End Sub
    Public Sub Clear()
        m_lNumber = 0
        m_sSource = ""
        m_sDescription = ""
        m_sHelpContext = ""
        m_sHelpFile = ""
    End Sub
    Public Default Property Get Number()
        Number = m_lNumber
    End Property
    Public Property Get Source()
        Source = m_sSource
    End Property
    Public Property Get Description()
        Description = m_sDescription
    End Property
    Public Property Get HelpContext()
        HelpContext = m_sHelpContext
    End Property
    
    Public Property Get HelpFile()
        HelpFile = m_sHelpFile
    End Property    
End Class
                    </Contents><Unicode>true</Unicode></File></Files></WriteAction></MemberModules><Composition><Node ID="RunScript" /></Composition></Composite></ModuleImplementation><InputType>System!System.TriggerData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.2007.StartService" Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ServiceName" type="xsd:string" /></Configuration><OverrideableParameters><OverrideableParameter ID="ComputerName" Selector="$Config/ComputerName$" ParameterType="string" /><OverrideableParameter ID="ServiceName" Selector="$Config/ServiceName$" ParameterType="string" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="EnableService"
TypeID="System!System.CommandExecuter"><ApplicationName>%WINDIR%\System32\sc.exe</ApplicationName><WorkingDirectory /><CommandLine>\\$Config/ComputerName$ config $Config/ServiceName$ start= auto</CommandLine><TimeoutSeconds>60</TimeoutSeconds><RequireOutput>true</RequireOutput></WriteAction><WriteAction ID="ResumeService" TypeID="System!System.CommandExecuter"><ApplicationName>%WINDIR%\System32\sc.exe</ApplicationName><WorkingDirectory /><CommandLine>\\$Config/ComputerName$ continue $Config/ServiceName$</CommandLine><TimeoutSeconds>60</TimeoutSeconds><RequireOutput>true</RequireOutput></WriteAction><WriteAction ID="StartService" TypeID="System!System.CommandExecuter"><ApplicationName>%WINDIR%\System32\sc.exe</ApplicationName><WorkingDirectory /><CommandLine>\\$Config/ComputerName$ start $Config/ServiceName$</CommandLine><TimeoutSeconds>60</TimeoutSeconds><RequireOutput>false</RequireOutput></WriteAction></MemberModules><Composition><Node ID="StartService"><Node
ID="ResumeService"><Node ID="EnableService" /></Node></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.CommandOutput</OutputType><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.Agent.MaintenanceMode.Trigger.Rule.WriteActionModuleType" Accessibility="Public" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Logging" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="EventQueryIntervalInSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /><OverrideableParameter ID="Logging" Selector="$Config/Logging$"
ParameterType="string" /><OverrideableParameter ID="EventQueryIntervalInSeconds" Selector="$Config/EventQueryIntervalInSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction"><ScriptName>ReadAgentMaintenanceModeSystemEvents.ps1</ScriptName><ScriptBody>
                  Param($Logging, $EventQueryIntervalInSeconds)
                  # Variables
                  ################################################################
                  $EventLogPrefix = ""
                  $RuleName = "Microsoft.SystemCenter.Agent.MaintenanceMode"
                  $ScriptName = "ReadAgentMaintenanceModeSystemEvents.ps1"
                  $LoggingEventID = 2222
                  $LoggingEventInfomational = 0
                  $LoggingEventError = 1
                  ################################################################
                  $api = New-Object -ComObject 'MOM.ScriptAPI'
                  #Logging function
                  Function Log-Event ($Message, $LoggingEventSeverity)
                  {
                  $api.LogScriptEvent($EventLogPrefix+ " [" + $ScriptName + "]", $LoggingEventID, $LoggingEventSeverity, $Message)
                  }
                  $ErrorActionPreference = "SilentlyContinue"
                  try
                  {
                  #Import SCOM Module
                  $setupKey = Get-Item -Path "HKLM:\Software\Microsoft\Microsoft Operations Manager\3.0\Setup"
                  $installDirectory = $setupKey.GetValue("InstallDirectory") | Split-Path
                  $psmPath = $installdirectory + ‘\Powershell\OperationsManager\OperationsManager.psm1’
                  Import-Module $psmPath
                  $rule = Get-SCOMRule -Name $RuleName
                  $Events = Get-SCOMEvent -Rule $rule | Sort-Object -Descending TimeAdded | Where {$_.TimeAdded -gt (Get-Date).ToUniversalTime().AddSeconds(-$EventQueryIntervalInSeconds)} | Sort-Object TimeAdded
                  if($Logging -eq "true"){Log-Event "Number of Events to process: $($events.Count)" $LoggingEventInfomational }
                  $computerClass = $null;
                  $computerClass = Get-SCOMClass -Name "System.Computer"
                  Foreach ($Event in $Events)
                  {
                  $computerInstance = $null;
                  $LoggingComputer = $Event.LoggingComputer
                  $EventData = [xml]$Event.EventData
                  [double]$Duration = $EventData.DataItem.EventData.Data[0]
                  $Reason = $EventData.DataItem.EventData.Data[1]
                  $UserString = $EventData.DataItem.EventData.Data[2]
                  $Comment = $EventData.DataItem.EventData.Data[3]
                  if($Reason -eq "PlannedOther" -or $Reason -eq "UnplannedOther" -or $Reason -eq "PlannedHardwareMaintenance" -or $Reason -eq "UnplannedHardwareMaintenance" -or $Reason -eq "PlannedHardwareInstallation" -or $Reason -eq "UnplannedHardwareInstallation" -or $Reason -eq "PlannedOperatingSystemReconfiguration" -or $Reason -eq "UnplannedOperatingSystemReconfiguration" -or $Reason -eq "PlannedApplicationMaintenance" -or $Reason -eq "UnplannedApplicationMaintenance" -or $Reason -eq "ApplicationInstallation" -or $Reason -eq "ApplicationUnresponsive" -or $Reason -eq "ApplicationUnstable" -or $Reason -eq "SecurityIssue" -or $Reason -eq "LossOfNetworkConnectivity")
                  {
                  Log-Event "Processing: EventID: $($Event.Number) `nSource: $($Event.PublisherName) `nLoggingComputer: $LoggingComputer `nEventData:  [$($Event.EventData)]" $LoggingEventInfomational
                  $computerInstance = Get-SCOMClassInstance -Class $computerClass | ? {$_.Name -eq $LoggingComputer}
                  if($computerInstance -ne $null)
                  {
                  [datetime]$CurTime=Get-Date;
                  if(5.0001 -gt $Duration -and 5.0 -le $Duration)
                  {
                  $Duration = 5.0001;
                  }
                  [datetime]$EndDatetime = ($CurTime.AddMinutes($Duration));
                  if ($computerInstance.InMaintenanceMode -eq $true)
                  {
                  {Log-Event "computerInstance.InMaintenanceMode true" $LoggingEventInfomational }
                  [datetime]$EndDatetimeUTC = $EndDatetime.ToUniversalTime()
                  $computerInstance.UpdateMaintenanceMode($EndDatetimeUTC, [Microsoft.EnterpriseManagement.Monitoring.MaintenanceModeReason]::$Reason, $Comment, [Microsoft.EnterpriseManagement.Common.TraversalDepth]::Recursive)
                  #Log-Event "Maintenance Mode updated for $LoggingComputer to $EndDatetime" $LoggingEventInfomational
                  $api.LogScriptEvent($EventLogPrefix+ " [" + $ScriptName + "]", 2223, $LoggingEventInfomational,  "Maintenance Mode updated for $LoggingComputer to $EndDatetime")
                  }
                  else
                  {
                  Start-SCOMMaintenanceMode -Instance $computerInstance -EndTime $EndDatetime -Reason $Reason -Comment $Comment -ErrorAction SilentlyContinue;
                  #Log-Event "Maintenance Mode set for $LoggingComputer to $EndDatetime" $LoggingEventInfomational
                  $api.LogScriptEvent($EventLogPrefix+ " [" + $ScriptName + "]", 2223, $LoggingEventInfomational, "Maintenance Mode set for $LoggingComputer to $EndDatetime $Reason $Comment")
                  }
                  } #if($computerInstance -ne $null)
                  } #if($Reason
                  } #for loop
                  } # try
                  Catch
                  {
                  $ErrorMessage = $_.Exception.Message
                  Log-Event $ErrorMessage $LoggingEventError
                  }
                </ScriptBody><Parameters><Parameter><Name>Logging</Name><Value>$Config/Logging$</Value></Parameter><Parameter><Name>EventQueryIntervalInSeconds</Name><Value>$Config/EventQueryIntervalInSeconds$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType></ModuleTypes><MonitorTypes><UnitMonitorType ID="Microsoft.SystemCenter.2007.OpsMgrDB.DetectDuplicateRelationshipsforAgentsToServers.MonitorType" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="Healthy" NoDetection="false" /><MonitorTypeState ID="Critical" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Synctime"
type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatabaseServerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatabaseName" type="xsd:string" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="Synctime" Selector="$Config/Synctime$" ParameterType="string" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/IntervalSeconds$</Interval><SyncTime>$Config/Synctime$</SyncTime></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="Probe"
TypeID="Microsoft.SystemCenter.2007.OpsMgrDB.Generic.DS"><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><ScriptName>DetectDuplicateRelAgnToSrvMonitor.vbs</ScriptName><ScriptBody>
                  'Copyright (c) Microsoft Corporation. All rights reserved.
'*************************************************************************
' $ScriptName:  "GetSqlNativeClientComman" $
'
' Purpose:      This script is used to get SQL native client Driver name.
'
' $File:        GetSqlNativeClientComman.vbs $
'*************************************************************************
Option Explicit 
Function GetSqlDriverName
    Dim oReg
    Const HKEY_LOCAL_MACHINE = &amp;H80000002
    Const HKEY_CLASSES_ROOT = &amp;H80000000
    Dim strComputer, strDriverPath, strKeyPath, intValue, strValueName,arrSubKeys,oSubkey,strNewKeyPath,intDotIndex, strDriverPathFromHKeyClassRoot
    strComputer = "."
    strDriverPath="SQLOLEDB"
    Set oReg=GetObject("winmgmts:\\" &amp; _ 
        strComputer &amp; "\root\default:StdRegProv")
        
    strKeyPath = "CLSID\{5A23DE84-1D7B-4A16-8DED-B29C09CB648D}"
    'strDriverPathFromHKeyClassRoot is used to check driver MSOLEDBSQL is installed or not. If found MSOLEDBSQL will be returned from function else  strDriverPath="SQLOLEDB" will be used for further checking.
    oReg.GetStringValue HKEY_CLASSES_ROOT, strKeyPath, "", strDriverPathFromHKeyClassRoot
    If strDriverPathFromHKeyClassRoot = "MSOLEDBSQL" Then
        GetSqlDriverName = strDriverPathFromHKeyClassRoot
        Exit Function
    End If
    strKeyPath = "SOFTWARE\ODBC\ODBCINST.INI"
    oReg.EnumKey HKEY_LOCAL_MACHINE, strKeyPath, arrSubKeys
	For Each oSubkey In arrSubKeys
        intValue = InStr(oSubkey, "SQL Server Native Client")
        if intValue &lt;&gt; 0 Then
	        strValueName = "Driver" 
            strNewKeyPath = strKeyPath&amp;"\"&amp;oSubkey
            oReg.GetStringValue HKEY_LOCAL_MACHINE, strNewKeyPath, strValueName , strDriverPath
	        strDriverPath = Mid (strDriverPath, InStrRev(strDriverPath, "\")+1)
            intDotIndex = InStr(strDriverPath, ".")
	        strDriverPath = Left(strDriverPath , intDotIndex-1)
        end if
    Next
    GetSqlDriverName = strDriverPath
End Function
                  'Copyright (c) Microsoft Corporation. All rights reserved.
'*************************************************************************
' $ScriptName:  "DetectDuplicateRelAgnToSrvMonitor" $
'
' Purpose:      This script checks for duplicate relationships between agents and servers.
'
' $File:        DetectDuplicateRelAgnToSrvMonitor.vbs $
'*************************************************************************
'Declarations 
Dim objCN,objRS,strQuery, strRecordsCount 
Dim oArgs,oAPI,oBag 
Dim strDBServer,strDatabase, strDriverName 
'Define local event constants 
Const EVENT_TYPE_ERROR = 1 
Const EVENT_TYPE_WARNING = 2 
Const EVENT_TYPE_INFORMATION = 4 
SetLocale("en-us")
'Create objects 
Set oAPI = CreateObject("MOM.ScriptAPI") 
Set oArgs = WScript.Arguments 
Set oBag = oAPI.CreatePropertyBag() 
'Define parameters 
strDBServer             = oArgs(0) 
strDatabase             = oArgs(1) 
Dim ObjError
Set ObjError = New Error
On Error Resume Next
  
'Set DB connection 
Set objCN = CreateObject("ADODB.Connection") 
strDriverName = GetSqlDriverName
objCN.Open "Provider="&amp; strDriverName &amp;";Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=" &amp; _ 
strDatabase &amp; ";Data Source=" &amp; strDBServer &amp; "" 
ObjError.Save
On Error Goto 0
If  ObjError.Number &lt;&gt; 0 Then 
    Set oBag = oAPI.CreatePropertyBag() 
    Call oBag.AddValue("Error", "Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description)
    Call oBag.AddValue("RecordsCount", "0")  
    Call oAPI.Return(oBag)
    oAPI.LogScriptEvent "DetectDuplicateRelAgnToSrvMonitor.vbs",100,EVENT_TYPE_ERROR,"Script executed with Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description   
    WScript.Quit
End If
strQuery = "SELECT Count(TT.RecordsCount) As RecordsCount From (SELECT Count(*) AS RecordsCount FROM  Relationship R (NoLock) " &amp; _ 
"JOIN RelationshipType RT (NoLock) " &amp; _
"ON  RT.RelationshipTypeId = R.RelationshipTypeId " &amp; _
"JOIN BaseManagedEntity BE1 (NoLock)  " &amp; _
"ON  R.SourceEntityId = BE1.BaseManagedEntityId  " &amp; _
"JOIN BaseManagedEntity BE2 (NoLock)  " &amp; _
"ON  R.TargetEntityId = BE2.BaseManagedEntityId  " &amp; _
"WHERE (RT.RelationshipTypeName = 'Microsoft.SystemCenter.HealthServiceCommunication'  " &amp; _
"OR RT.RelationshipTypeName = 'Microsoft.SystemCenter.HealthServiceSecondaryCommunication')  " &amp; _
"AND R.IsDeleted = 0  " &amp; _
"group by R.SourceEntityId, R.TargetEntityId, BE1.FullName, BE2.FullName " &amp; _
"having count(*) &gt; 1 ) As TT" 
'Query DB 
Set objRS = objCN.Execute(strQuery)
ObjError.Save
On Error Goto 0
If  ObjError.Number &lt;&gt; 0 Then 
    Set oBag = oAPI.CreatePropertyBag() 
    Call oBag.AddValue("Error", "Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description)
    Call oBag.AddValue("RecordsCount", "0")  
    Call oAPI.Return(oBag)
    oAPI.LogScriptEvent "DetectDuplicateRelAgnToSrvMonitor.vbs",100,EVENT_TYPE_ERROR,"Script executed with Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description   
    WScript.Quit
End If
'Set variables 
strRecordsCount = objRS("RecordsCount") 
Call oBag.AddValue("RecordsCount", strRecordsCount) 
oAPI.LogScriptEvent "DetectDuplicateRelAgnToSrvMonitor.vbs",100,EVENT_TYPE_INFORMATION,"Script executed with Duplicate Records Count " &amp; strRecordsCount   
'Return property values 
Call oAPI.Return(oBag)
Class Error
    Private m_lNumber
    Private m_sSource
    Private m_sDescription
    Private m_sHelpContext
    Private m_sHelpFile
    
    Public Sub Save()
        m_lNumber = Err.number
        m_sSource = Err.Source
        m_sDescription = Err.Description
        m_sHelpContext = Err.HelpContext
        m_sHelpFile = Err.helpfile
    End Sub
    
    Public Sub Raise()
        Err.Raise m_lNumber, m_sSource, m_sDescription, m_sHelpFile, m_sHelpContext
    End Sub
    Public Sub Clear()
        m_lNumber = 0
        m_sSource = ""
        m_sDescription = ""
        m_sHelpContext = ""
        m_sHelpFile = ""
    End Sub
    Public Default Property Get Number()
        Number = m_lNumber
    End Property
    Public Property Get Source()
        Source = m_sSource
    End Property
    Public Property Get Description()
        Description = m_sDescription
    End Property
    Public Property Get HelpContext()
        HelpContext = m_sHelpContext
    End Property
    
    Public Property Get HelpFile()
        HelpFile = m_sHelpFile
    End Property    
End Class
              </ScriptBody><DatabaseServerName>$Config/DatabaseServerName$</DatabaseServerName><DatabaseName>$Config/DatabaseName$</DatabaseName><Threshold>0</Threshold></ProbeAction><ConditionDetection ID="CDHealthy" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">
                      Property[@Name='RecordsCount']
                    </XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Double">0</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="CDCritical" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">
                      Property[@Name='RecordsCount']
                    </XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value Type="Double">0</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="Healthy"><Node ID="CDHealthy"><Node ID="Probe"><Node ID="DS" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="Critical"><Node ID="CDCritical"><Node ID="Probe"><Node ID="DS" /></Node></Node></RegularDetection></RegularDetections><OnDemandDetections><OnDemandDetection MonitorTypeStateID="Healthy"><Node ID="CDHealthy"><Node ID="Probe" /></Node></OnDemandDetection><OnDemandDetection MonitorTypeStateID="Critical"><Node ID="CDCritical"><Node ID="Probe" /></Node></OnDemandDetection></OnDemandDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.2007.OpsMgrDB.PartitioningAndGroomingMonitorType" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState
ID="UnderThreshold" NoDetection="false" /><MonitorTypeState ID="WarningThreshold" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Synctime" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatabaseServerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatabaseName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Threshold" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimesBeforeAlert" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter
ID="Synctime" Selector="$Config/Synctime$" ParameterType="string" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /><OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="int" /><OverrideableParameter ID="TimesBeforeAlert" Selector="$Config/TimesBeforeAlert$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/IntervalSeconds$</Interval><SyncTime>$Config/Synctime$</SyncTime></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="Probe" TypeID="Microsoft.SystemCenter.2007.OpsMgrDB.Generic.DS"><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><ScriptName>PartitioningAndGroomingMonitor.vbs</ScriptName><ScriptBody>
              'Copyright (c) Microsoft Corporation. All rights reserved.
'*************************************************************************
' $ScriptName:  "GetSqlNativeClientComman" $
'
' Purpose:      This script is used to get SQL native client Driver name.
'
' $File:        GetSqlNativeClientComman.vbs $
'*************************************************************************
Option Explicit 
Function GetSqlDriverName
    Dim oReg
    Const HKEY_LOCAL_MACHINE = &amp;H80000002
    Const HKEY_CLASSES_ROOT = &amp;H80000000
    Dim strComputer, strDriverPath, strKeyPath, intValue, strValueName,arrSubKeys,oSubkey,strNewKeyPath,intDotIndex, strDriverPathFromHKeyClassRoot
    strComputer = "."
    strDriverPath="SQLOLEDB"
    Set oReg=GetObject("winmgmts:\\" &amp; _ 
        strComputer &amp; "\root\default:StdRegProv")
        
    strKeyPath = "CLSID\{5A23DE84-1D7B-4A16-8DED-B29C09CB648D}"
    'strDriverPathFromHKeyClassRoot is used to check driver MSOLEDBSQL is installed or not. If found MSOLEDBSQL will be returned from function else  strDriverPath="SQLOLEDB" will be used for further checking.
    oReg.GetStringValue HKEY_CLASSES_ROOT, strKeyPath, "", strDriverPathFromHKeyClassRoot
    If strDriverPathFromHKeyClassRoot = "MSOLEDBSQL" Then
        GetSqlDriverName = strDriverPathFromHKeyClassRoot
        Exit Function
    End If
    strKeyPath = "SOFTWARE\ODBC\ODBCINST.INI"
    oReg.EnumKey HKEY_LOCAL_MACHINE, strKeyPath, arrSubKeys
	For Each oSubkey In arrSubKeys
        intValue = InStr(oSubkey, "SQL Server Native Client")
        if intValue &lt;&gt; 0 Then
	        strValueName = "Driver" 
            strNewKeyPath = strKeyPath&amp;"\"&amp;oSubkey
            oReg.GetStringValue HKEY_LOCAL_MACHINE, strNewKeyPath, strValueName , strDriverPath
	        strDriverPath = Mid (strDriverPath, InStrRev(strDriverPath, "\")+1)
            intDotIndex = InStr(strDriverPath, ".")
	        strDriverPath = Left(strDriverPath , intDotIndex-1)
        end if
    Next
    GetSqlDriverName = strDriverPath
End Function
              'Copyright (c) Microsoft Corporation. All rights reserved.
'*************************************************************************
' $ScriptName:  "PartitioningAndGroomingMonitor" $
'
' Purpose:      This script checks for grooming and partiting processes.
'
' $File:        PartitioningAndGroomingMonitor.vbs $
'*************************************************************************
 
'Declarations 
Dim objCN,objRS,strQuery, strCountOfJobsSucceeded, strCountOfJobs 
Dim oArgs,oAPI,oBag 
Dim strDBServer,strDatabase 
Dim strDaysLimitThreshold
'Define local event constants 
Const EVENT_TYPE_ERROR = 1 
Const EVENT_TYPE_WARNING = 2 
Const EVENT_TYPE_INFORMATION = 4 
SetLocale("en-us")
'Create objects 
Set oAPI = CreateObject("MOM.ScriptAPI") 
Set oArgs = WScript.Arguments 
Set oBag = oAPI.CreatePropertyBag() 
'Define parameters 
strDBServer             = oArgs(0) 
strDatabase             = oArgs(1) 
strDaysLimitThreshold	= oArgs(2) 
Dim ObjError, strMessageToUse, strDriverName
Set ObjError = New Error
On Error Resume Next
'Set DB connection 
Set objCN = CreateObject("ADODB.Connection") 
strDriverName = GetSqlDriverName
objCN.Open "Provider=" &amp; strDriverName &amp; ";Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=" &amp; _ 
strDatabase &amp; ";Data Source=" &amp; strDBServer &amp; "" 
ObjError.Save
On Error Goto 0
If  ObjError.Number &lt;&gt; 0 Then 
    strMessageToUse = "Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description
    call GetState(true, strMessageToUse, "0", "0", strDaysLimitThreshold)
    WScript.Quit
End If
strQuery = "SELECT Count(StatusCode) AS TotalCount " &amp; _ 
"FROM  InternalJobHistory " &amp; _ 
"WHERE Command = 'Exec dbo.p_GroomPartitionedObjects and dbo.p_Grooming' "
'Query DB 
Set objRS = objCN.Execute(strQuery)
ObjError.Save
On Error Goto 0
If  ObjError.Number &lt;&gt; 0 Then 
    strMessageToUse = "Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description
    call GetState(true, strMessageToUse, "0", "0", strDaysLimitThreshold)
    WScript.Quit
End If
'Set variables 
strCountOfJobs = objRS("TotalCount") 
strQuery = "SELECT Count(StatusCode) AS CountOfJobsSucceeded " &amp; _ 
"FROM  InternalJobHistory " &amp; _ 
"WHERE TimeStarted  BETWEEN " &amp; _ 
"DATEADD(day, -"  &amp;  strDaysLimitThreshold &amp; ", GETUTCDATE()) " &amp; _ 
"AND GETUTCDATE() " &amp; _ 
"AND Command = 'Exec dbo.p_GroomPartitionedObjects and dbo.p_Grooming' " &amp; _
"AND StatusCode = 1 "
'Query DB 
Set objRS = objCN.Execute(strQuery)
ObjError.Save
On Error Goto 0
If  ObjError.Number &lt;&gt; 0 Then 
    strMessageToUse = "Error Number: " &amp; ObjError.number &amp; " Error Details: " &amp; ObjError.Description
    call GetState(true, strMessageToUse, "0", "0", strDaysLimitThreshold)
    WScript.Quit
End If
'Set variables 
strCountOfJobsSucceeded = objRS("CountOfJobsSucceeded") 
strMessageToUse = "Script executed with Process Succeed Count " &amp; strCountOfJobsSucceeded &amp; " from Total Process Count " &amp; strCountOfJobs
call GetState(false, strMessageToUse, strCountOfJobs, strCountOfJobsSucceeded, strDaysLimitThreshold)
WScript.Quit
Sub GetState(strErrorFlag, strMessage, strCountOfJobs, strCountOfJobsSucceeded, strDaysLimitThreshold)
    Set oBag = oAPI.CreatePropertyBag()
    
    If strErrorFlag = true Then
       Call oBag.AddValue("Error", strMessage)
    End If
    Call oBag.AddValue("DatabaseMonitor", "DatabaseMonitor") 
    Call oBag.AddValue("PartitioningAndGrooming", "PartitioningAndGrooming") 
    Call oBag.AddValue("ALL", "ALL") 
    Call oBag.AddValue("Value", "1") 
    Call oBag.AddValue("CountOfJobs", strCountOfJobs) 
    Call oBag.AddValue("CountOfJobsSucceeded", strCountOfJobsSucceeded) 
    Call oBag.AddValue("DaysLimitThreshold", strDaysLimitThreshold)  
    oAPI.LogScriptEvent "PartitioningAndGroomingMonitor.vbs",100,EVENT_TYPE_INFORMATION, strMessage 
    Call oAPI.Return(oBag) 
End Sub
Class Error
    Private m_lNumber
    Private m_sSource
    Private m_sDescription
    Private m_sHelpContext
    Private m_sHelpFile
    
    Public Sub Save()
        m_lNumber = Err.number
        m_sSource = Err.Source
        m_sDescription = Err.Description
        m_sHelpContext = Err.HelpContext
        m_sHelpFile = Err.helpfile
    End Sub
    
    Public Sub Raise()
        Err.Raise m_lNumber, m_sSource, m_sDescription, m_sHelpFile, m_sHelpContext
    End Sub
    Public Sub Clear()
        m_lNumber = 0
        m_sSource = ""
        m_sDescription = ""
        m_sHelpContext = ""
        m_sHelpFile = ""
    End Sub
    Public Default Property Get Number()
        Number = m_lNumber
    End Property
    Public Property Get Source()
        Source = m_sSource
    End Property
    Public Property Get Description()
        Description = m_sDescription
    End Property
    Public Property Get HelpContext()
        HelpContext = m_sHelpContext
    End Property
    
    Public Property Get HelpFile()
        HelpFile = m_sHelpFile
    End Property    
End Class
              </ScriptBody><DatabaseServerName>$Config/DatabaseServerName$</DatabaseServerName><DatabaseName>$Config/DatabaseName$</DatabaseName><Threshold>$Config/Threshold$</Threshold></ProbeAction><ConditionDetection ID="CDUnderThreshold" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">
                          Property[@Name='CountOfJobs']
                        </XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value Type="Double">1</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">
                          Property[@Name='CountOfJobsSucceeded']
                        </XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value Type="Double">1</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="CDWarningThreshold" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">
                          Property[@Name='CountOfJobs']
                        </XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value Type="Double">1</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">
                          Property[@Name='CountOfJobsSucceeded']
                        </XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">1</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="Mapper" TypeID="Performance!System.Performance.DataGenericMapper"><ObjectName>DatabaseMonitor</ObjectName><CounterName>PartitioningAndGrooming</CounterName><InstanceName>ALL</InstanceName><Value>1</Value></ConditionDetection><ConditionDetection ID="CD1" TypeID="Performance!System.Performance.ConsecutiveSamplesCondition"><Threshold>1</Threshold><Direction>greaterequal</Direction></ConditionDetection><ConditionDetection ID="CDSufficientSamples" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value
Type="Double">$Config/TimesBeforeAlert$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="CDInSufficientSamples" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/TimesBeforeAlert$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="UnderThreshold"><Node ID="CDInSufficientSamples"><Node ID="CD1"><Node ID="Mapper"><Node ID="CDUnderThreshold"><Node ID="Probe"><Node ID="DS" /></Node></Node></Node></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="WarningThreshold"><Node ID="CDSufficientSamples"><Node ID="CD1"><Node ID="Mapper"><Node ID="CDWarningThreshold"><Node ID="Probe"><Node ID="DS"
/></Node></Node></Node></Node></Node></RegularDetection></RegularDetections><OnDemandDetections><OnDemandDetection MonitorTypeStateID="UnderThreshold"><Node ID="CDUnderThreshold"><Node ID="Probe" /></Node></OnDemandDetection><OnDemandDetection MonitorTypeStateID="WarningThreshold"><Node ID="CDWarningThreshold"><Node ID="Probe" /></Node></OnDemandDetection></OnDemandDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.Agent.Configuration.ArchitectureMismatchMonitorType" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="ArchitectureMatch" NoDetection="false" /><MonitorTypeState ID="ArchitectureMismatch" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" maxOccurs="1" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" maxOccurs="1" name="IntervalSeconds" type="xsd:integer"
/></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="SchedulerDS" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/IntervalSeconds$</Interval></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="Agent32On64Probe" TypeID="Windows!Microsoft.Windows.RegistryProbe"><ComputerName>$Config/ComputerName$</ComputerName><RegistryAttributeDefinitions><RegistryAttributeDefinition><AttributeName>SCOMSetup</AttributeName><Path>SOFTWARE\Wow6432Node\Microsoft\Microsoft Operations Manager\3.0\Setup</Path><PathType>0</PathType><AttributeType>0</AttributeType></RegistryAttributeDefinition></RegistryAttributeDefinitions></ProbeAction><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /><ConditionDetection ID="Agent32On64Present"
TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">//DataItem/Values/SCOMSetup</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">true</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="Agent32On64Absent" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">//DataItem/Values/SCOMSetup</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">false</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="ArchitectureMismatch"><Node ID="Agent32On64Present"><Node ID="Agent32On64Probe"><Node ID="SchedulerDS" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="ArchitectureMatch"><Node ID="Agent32On64Absent"><Node
ID="Agent32On64Probe"><Node ID="SchedulerDS" /></Node></Node></RegularDetection></RegularDetections><OnDemandDetections><OnDemandDetection MonitorTypeStateID="ArchitectureMatch"><Node ID="Agent32On64Absent"><Node ID="Agent32On64Probe"><Node ID="PassThrough" /></Node></Node></OnDemandDetection><OnDemandDetection MonitorTypeStateID="ArchitectureMismatch"><Node ID="Agent32On64Present"><Node ID="Agent32On64Probe"><Node ID="PassThrough" /></Node></Node></OnDemandDetection></OnDemandDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.Agent.Configuration.MinRequiredVersionCheckMonitorType" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="UpgradeNotRequired" NoDetection="false" /><MonitorTypeState ID="UpgradeRequired" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" maxOccurs="1" name="RequiredVersion" type="xsd:string" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" maxOccurs="1" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" maxOccurs="1" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" maxOccurs="1" name="TimeoutSeconds" type="xsd:int" /></Configuration><OverrideableParameters><OverrideableParameter ID="RequiredVersion" Selector="$Config/RequiredVersion$" ParameterType="string" /><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="SchedulerDS" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/IntervalSeconds$</Interval></SimpleReccuringSchedule><ExcludeDates
/></Scheduler></DataSource><ProbeAction ID="ScriptProbe" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe"><ScriptName>AgentMinRequiredVersionCheck.ps1</ScriptName><ScriptBody>
Param($ComputerName, $RequiredVersion)
#Event log variables
$SCRIPT_EVENT_ID     = 3000
$CN_SCOM_SUCCESS     = 0
$CN_SCOM_ERROR       = 1
$CN_SCOM_WARNING     = 2
$CN_SCOM_INFORMATION = 4
$oAPI = New-Object -ComObject "MOM.ScriptAPI"
$key = "hklm:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup\"
$agentVersion = Get-ItemProperty $key -ErrorAction SilentlyContinue | Get-ItemProperty
$agentVersion = $agentVersion.AgentVersion
if($agentVersion -eq $null)
{
    $key = "hklm:\Wow6432Node\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup\"
    $agentVersion = Get-ItemProperty $key -ErrorAction SilentlyContinue | Get-ItemProperty 
    $agentVersion = $agentVersion.AgentVersion
    if($agentVersion -eq $null)
    {
        $key = "hklm:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup\"
        $agentVersion = Get-ItemProperty $key -ErrorAction SilentlyContinue | Get-ItemProperty
        $agentVersion = $agentVersion.ServerVersion
        if($agentVersion -eq $null)
        {
            $message = $("An error occurred while reading the registry: " + $key + "ServerVersion")
            $oAPI.LogScriptEvent("AgentMinRequiredVersionCheck.ps1", $SCRIPT_EVENT_ID, $CN_SCOM_ERROR, $message)
        }
    }
}
if($agentVersion -ne $null -and $agentVersion -ne "")
{
    $oPropertyBag = $oAPI.CreatePropertyBag()
    if($oPropertyBag -ne $null)
    {
        $agentVersionParts = $agentVersion.Split(".")
        $requiredVersionParts = $RequiredVersion.Split(".")
        $agentVersionLength = $agentVersionParts.Count
        $requiredVersionLength = $requiredVersionParts.Count
        if($requiredVersionLength -lt $agentVersionLength)
        {
            $RequiredVersion = CompleteVersionString $RequiredVersion, $agentVersionLength - $requiredVersionLength   
            $requiredVersionParts = $RequiredVersion.Split(".")
        }
        elseIf($requiredVersionLength -gt $agentVersionLength)
        {
            $agentVersion = CompleteVersionString $agentVersion, $requiredVersionLength - $agentVersionLength
            $agentVersionParts = $agentVersion.Split(".")
        }
        $agentVersionLength = $agentVersionParts.Count
        $requiresUpgrade = $false
        for($i=0;$i -lt $agentVersionLength;$i++)
        {
            $agentPart = [int]$agentVersionParts[$i]
            if($agentPart -eq $null)
            {
                $agentPart = 0
            }
            $requiredPart = [int]$requiredVersionParts[$i]
            if($requiredPart -eq $null)
            {
                $requiredPart = 0
            }
            if($agentPart -lt $requiredPart)
            {
                # Requires upgrade
                $requiresUpgrade = $true
                break
            }
            elseif($agentPart -gt $requiredPart)
            {
                # Does not require upgrade
                break
            }
        }
        # exit with property bag
		$oPropertyBag.AddValue("UpgradeRequired", $requiresUpgrade)
		$oPropertyBag.AddValue("CurrentVersion", $agentVersion)
		$oPropertyBag.AddValue("RequiredVersion", $RequiredVersion)
		$oPropertyBag
    }
    else
    {
        $message = "Unable to create propertybag in script."
        $oAPI.LogScriptEvent("AgentMinRequiredVersionCheck.ps1", $SCRIPT_EVENT_ID, $CN_SCOM_ERROR, $message)
    }
}
else
{
    $message = "Agent Version not found in Registry."
    $oAPI.LogScriptEvent("AgentMinRequiredVersionCheck.ps1", $SCRIPT_EVENT_ID, $CN_SCOM_ERROR, $message)
}
              </ScriptBody><Parameters><Parameter><Name>ComputerName</Name><Value>$Config/ComputerName$</Value></Parameter><Parameter><Name>RequiredVersion</Name><Value>$Config/RequiredVersion$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /><ConditionDetection ID="FilterUpgradeRequired" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">//DataItem/Property[@Name="UpgradeRequired"]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">true</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="FilterUpgradeNotRequired" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="Boolean">//DataItem/Property[@Name="UpgradeRequired"]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">false</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="UpgradeNotRequired"><Node ID="FilterUpgradeNotRequired"><Node ID="ScriptProbe"><Node ID="SchedulerDS" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="UpgradeRequired"><Node ID="FilterUpgradeRequired"><Node ID="ScriptProbe"><Node ID="SchedulerDS" /></Node></Node></RegularDetection></RegularDetections><OnDemandDetections><OnDemandDetection MonitorTypeStateID="UpgradeNotRequired"><Node ID="FilterUpgradeNotRequired"><Node ID="ScriptProbe"><Node ID="PassThrough" /></Node></Node></OnDemandDetection><OnDemandDetection MonitorTypeStateID="UpgradeRequired"><Node ID="FilterUpgradeRequired"><Node ID="ScriptProbe"><Node ID="PassThrough"
/></Node></Node></OnDemandDetection></OnDemandDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.Agent.Performance.AveragerThresholdWithSingleSampleSuccessState" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="UnderThreshold" NoDetection="false" /><MonitorTypeState ID="OverThreshold" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ObjectName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CounterName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InstanceName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Frequency" type="xsd:unsignedInt" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" maxOccurs="1" name="NumSamples" type="xsd:unsignedInt" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1"
maxOccurs="1" name="Threshold" type="xsd:double" /></Configuration><OverrideableParameters><OverrideableParameter ID="Frequency" Selector="$Config/Frequency$" ParameterType="int" /><OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="double" /><OverrideableParameter ID="NumSamples" Selector="$Config/NumSamples$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DataSource" TypeID="Performance!System.Performance.DataProvider"><CounterName>$Config/CounterName$</CounterName><ObjectName>$Config/ObjectName$</ObjectName><InstanceName>$Config/InstanceName$</InstanceName><Frequency>$Config/Frequency$</Frequency></DataSource><ProbeAction ID="OnDemandReset" TypeID="System!System.PassThroughProbe" /><ConditionDetection ID="CDAverageThreshold" TypeID="Performance!System.Performance.AveragerCondition"><NumSamples>$Config/NumSamples$</NumSamples></ConditionDetection><ConditionDetection ID="CDOverThreshold"
TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value Type="Double">$Config/Threshold$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="CDUnderThreshold" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>LessEqual</Operator><ValueExpression><Value Type="Double">$Config/Threshold$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="UnderThreshold"><Node ID="CDUnderThreshold"><Node ID="DataSource" /></Node></RegularDetection><RegularDetection MonitorTypeStateID="OverThreshold"><Node ID="CDOverThreshold"><Node ID="CDAverageThreshold"><Node ID="DataSource"
/></Node></Node></RegularDetection></RegularDetections><OnDemandDetections><OnDemandDetection MonitorTypeStateID="UnderThreshold"><Node ID="OnDemandReset" /></OnDemandDetection></OnDemandDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.Agent.Performance.ConsecutiveSamplesThreshold.MonitorType" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="OverThreshold" NoDetection="false" /><MonitorTypeState ID="UnderThreshold" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="0" maxOccurs="1" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ObjectName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="CounterName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="0" maxOccurs="1" name="InstanceName"
type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="0" maxOccurs="1" name="AllInstances" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Frequency" type="xsd:unsignedInt" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" maxOccurs="1" name="NumSamples" type="xsd:unsignedInt" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" maxOccurs="1" name="Threshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" maxOccurs="1" name="Direction" type="xsd:string" /></Configuration><OverrideableParameters><OverrideableParameter ID="Frequency" Selector="$Config/Frequency$" ParameterType="int" /><OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="double" /><OverrideableParameter ID="NumSamples" Selector="$Config/NumSamples$" ParameterType="int"
/></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS" TypeID="Performance!System.Performance.DataProvider"><ComputerName>$Config/ComputerName$</ComputerName><CounterName>$Config/CounterName$</CounterName><ObjectName>$Config/ObjectName$</ObjectName><InstanceName>$Config/InstanceName$</InstanceName><AllInstances>$Config/AllInstances$</AllInstances><Frequency>$Config/Frequency$</Frequency></DataSource><ProbeAction ID="OnDemandReset" TypeID="System!System.PassThroughProbe" /><ConditionDetection ID="CD" TypeID="Performance!System.Performance.ConsecutiveSamplesCondition"><Threshold>$Config/Threshold$</Threshold><Direction>$Config/Direction$</Direction></ConditionDetection><ConditionDetection ID="SufficientSamplesCD" TypeID="System!System.LogicalSet.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value
Type="Double">$Config/NumSamples$</Value></ValueExpression></SimpleExpression></Expression><EmptySet>Block</EmptySet><SetEvaluation>Any</SetEvaluation></ConditionDetection><ConditionDetection ID="InSufficientSamplesCD" TypeID="System!System.LogicalSet.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/NumSamples$</Value></ValueExpression></SimpleExpression></Expression><EmptySet>Block</EmptySet><SetEvaluation>All</SetEvaluation></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="OverThreshold"><Node ID="SufficientSamplesCD"><Node ID="CD"><Node ID="DS" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="UnderThreshold"><Node ID="InSufficientSamplesCD"><Node ID="CD"><Node ID="DS" /></Node></Node></RegularDetection></RegularDetections><OnDemandDetections><OnDemandDetection
MonitorTypeStateID="UnderThreshold"><Node ID="OnDemandReset" /></OnDemandDetection></OnDemandDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.AgentManager.AgentManagerFailureMonitor" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="AgentInstallationFailure" NoDetection="false" /><MonitorTypeState ID="AgentInstallationSuccess" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="EventId" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TaskStartTime" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TaskEndTime" type="xsd:string" /></Configuration><MonitorImplementation><MemberModules><DataSource ID="WmiQueryDS" TypeID="Windows!Microsoft.Windows.WmiProvider"><NameSpace>\\$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$\Root\CIMv2</NameSpace><Query>
SELECT SourceName, EventCode, InsertionStrings, Message FROM Win32_NTLogEvent
WHERE (LogFile = 'Operations Manager') 
    AND (SourceName = 'Health Service Modules') 
    AND (
        (EventCode = '10601') OR
        (EventCode = '10602') OR
        (EventCode = '10603') OR
        (EventCode = '10606') OR
        (EventCode = '10607') OR
        (EventCode = '10608') OR
        (EventCode = '10609') OR
        (EventCode = '10610') OR
        (EventCode = '10611') OR
        (EventCode = '10612') OR
        (EventCode = '10614') OR
        (EventCode = '10615') OR
        (EventCode = '10617') OR
        (EventCode = '10618') OR
        (EventCode = '10619') OR
        (EventCode = '10620') OR
        (EventCode = '10621') OR
        (EventCode = '10622') OR
        (EventCode = '10623') OR
        (EventCode = '10624') OR
        (EventCode = '10625') OR
        (EventCode = '10626') OR
        (EventCode = '10627') OR
        (EventCode = '10629')
    )
    AND (TimeGenerated &gt;= '$Config/TaskStartTime$' AND TimeGenerated &lt;= '$Config/TaskEndTime$')
    
                            </Query><Frequency>602214</Frequency></DataSource><ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery>Property[@Name='EventCode']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">$Config/EventId$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="AgentInstallationFailure"><Node ID="Filter"><Node ID="WmiQueryDS" /></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.ConfigurationProcessingMonitorType" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="ConfigurationSuccessfullyLoaded" NoDetection="false" /><MonitorTypeState ID="ConfigurationNotLoaded" NoDetection="false" /><MonitorTypeState ID="ConfigurationPartiallyLoaded" NoDetection="false"
/></MonitorTypeStates><Configuration><IncludeSchemaTypes><SchemaType>Windows!Microsoft.Windows.ComputerNameSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="ComputerNameType" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupName" type="xsd:string" /></Configuration><MonitorImplementation><MemberModules><DataSource ID="FailedConfigEventDataSource" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Config/ComputerName$</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">21027</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">OpsMgr Connector</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Value Type="String">$Config/ManagementGroupName$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource><DataSource ID="PartialConfigEventDataSource" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Config/ComputerName$</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">20060</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">OpsMgr Connector</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Value Type="String">$Config/ManagementGroupName$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource><DataSource ID="SuccessfulConfigEventDataSource" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Config/ComputerName$</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">21025</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">OpsMgr Connector</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Value Type="String">$Config/ManagementGroupName$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource><ConditionDetection ID="PartialConfigCondition" TypeID="System!System.CorrelatorAutoCondition"><Correlator><CorrelationExpression><Expression
/></CorrelationExpression><Count>1</Count><Interval>30</Interval><CorrelationOrder>InSequence</CorrelationOrder><CorrelationItemPolicy>Last</CorrelationItemPolicy></Correlator></ConditionDetection><ConditionDetection ID="SuccessfulConfigCondition" TypeID="System!System.CorrelatorCondition"><Correlator><CorrelationExpression><Expression /></CorrelationExpression><Count>1</Count><Interval>30</Interval><CorrelationOrder>AnyOrder</CorrelationOrder><CorrelationItemPolicy>Last</CorrelationItemPolicy></Correlator><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">Item0Count</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">1</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">Item1Count</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">0</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="ConfigurationSuccessfullyLoaded"><Node ID="SuccessfulConfigCondition"><Node ID="SuccessfulConfigEventDataSource" /><Node ID="PartialConfigEventDataSource" /></Node></RegularDetection><RegularDetection MonitorTypeStateID="ConfigurationNotLoaded"><Node ID="FailedConfigEventDataSource" /></RegularDetection><RegularDetection MonitorTypeStateID="ConfigurationPartiallyLoaded"><Node ID="PartialConfigCondition"><Node ID="PartialConfigEventDataSource" /><Node ID="SuccessfulConfigEventDataSource" /></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.HealthService.SCOMpercentageCPUTimeCounterMonitorType" Accessibility="Internal" RunAs="System!System.PrivilegedMonitoringAccount"><MonitorTypeStates><MonitorTypeState
ID="OverThreshold" NoDetection="false" /><MonitorTypeState ID="UnderThreshold" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="0" name="SyncTime" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Threshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ConsecutiveSampleCountCritical" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ConsecutiveSampleCountHealthy" type="xsd:double"
/></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /><OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" /><OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="double" /><OverrideableParameter ID="ConsecutiveSampleCountCritical" Selector="$Config/ConsecutiveSampleCountCritical$" ParameterType="double" /><OverrideableParameter ID="ConsecutiveSampleCountHealthy" Selector="$Config/ConsecutiveSampleCountHealthy$" ParameterType="double" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS"
TypeID="Microsoft.SystemCenter.HealthService.SCOMpercentageCPUTimeCounterDataSource"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><SyncTime>$Config/SyncTime$</SyncTime><ComputerName>$Config/ComputerName$</ComputerName></DataSource><ProbeAction ID="Probe" TypeID="Microsoft.SystemCenter.HealthService.SCOMpercentageCPUTimeCounterProbe"><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><ComputerName>$Config/ComputerName$</ComputerName></ProbeAction><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /><ConditionDetection ID="ConsecutiveMoreThanThresholdSamples" TypeID="Performance!System.Performance.ConsecutiveSamplesCondition"><Threshold>$Config/Threshold$</Threshold><Direction>greater</Direction></ConditionDetection><ConditionDetection ID="ConsecutiveLessThanThresholdSamples"
TypeID="Performance!System.Performance.ConsecutiveSamplesCondition"><Threshold>$Config/Threshold$</Threshold><Direction>less</Direction></ConditionDetection><ConditionDetection ID="SufficientCriticalSamplesCD" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value Type="Double">$Config/ConsecutiveSampleCountCritical$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="SufficientHealthySamplesCD" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value Type="Double">$Config/ConsecutiveSampleCountHealthy$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection
MonitorTypeStateID="OverThreshold"><Node ID="SufficientCriticalSamplesCD"><Node ID="ConsecutiveMoreThanThresholdSamples"><Node ID="DS" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="UnderThreshold"><Node ID="SufficientHealthySamplesCD"><Node ID="ConsecutiveLessThanThresholdSamples"><Node ID="DS" /></Node></Node></RegularDetection></RegularDetections><OnDemandDetections><OnDemandDetection MonitorTypeStateID="OverThreshold"><Node ID="SufficientCriticalSamplesCD"><Node ID="ConsecutiveMoreThanThresholdSamples"><Node ID="Probe"><Node ID="PassThrough" /></Node></Node></Node></OnDemandDetection><OnDemandDetection MonitorTypeStateID="UnderThreshold"><Node ID="SufficientHealthySamplesCD"><Node ID="ConsecutiveLessThanThresholdSamples"><Node ID="Probe"><Node ID="PassThrough" /></Node></Node></Node></OnDemandDetection></OnDemandDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType
ID="Microsoft.SystemCenter.HealthServiceModules.CorrelatedEventAndMissingEvent" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="SuccessEventRaised" NoDetection="false" /><MonitorTypeState ID="CorrelatedMissingEventWarningRaised" NoDetection="false" /><MonitorTypeState ID="CorrelatedMissingEventErrorRaised" NoDetection="false" /></MonitorTypeStates><Configuration><IncludeSchemaTypes><SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="LogName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Expression" type="ExpressionType" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="FirstCorrelatedMissingEventWarningComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="FirstCorrelatedMissingEventWarningLogName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="FirstCorrelatedMissingEventWarningExpression" type="ExpressionType" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SecondCorrelatedMissingEventWarningComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SecondCorrelatedMissingEventWarningLogName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SecondCorrelatedMissingEventWarningExpression" type="ExpressionType" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CorrelatorWarning" type="CorrelatorType" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="FirstCorrelatedMissingEventErrorComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="FirstCorrelatedMissingEventErrorLogName" type="xsd:string" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="FirstCorrelatedMissingEventErrorExpression" type="ExpressionType" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SecondCorrelatedMissingEventErrorComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SecondCorrelatedMissingEventErrorLogName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SecondCorrelatedMissingEventErrorExpression" type="ExpressionType" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CorrelatorError" type="CorrelatorType" /></Configuration><MonitorImplementation><MemberModules><DataSource ID="DataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>$Config/ComputerName$</ComputerName><LogName>$Config/LogName$</LogName></DataSource><DataSource ID="FirstCorrelatedMissingEventWarningDataSource"
TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>$Config/FirstCorrelatedMissingEventWarningComputerName$</ComputerName><LogName>$Config/FirstCorrelatedMissingEventWarningLogName$</LogName></DataSource><DataSource ID="SecondCorrelatedMissingEventWarningDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>$Config/SecondCorrelatedMissingEventWarningComputerName$</ComputerName><LogName>$Config/SecondCorrelatedMissingEventWarningLogName$</LogName></DataSource><DataSource ID="FirstCorrelatedMissingEventErrorDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>$Config/FirstCorrelatedMissingEventErrorComputerName$</ComputerName><LogName>$Config/FirstCorrelatedMissingEventErrorLogName$</LogName></DataSource><DataSource ID="SecondCorrelatedMissingEventErrorDataSource"
TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>$Config/SecondCorrelatedMissingEventErrorComputerName$</ComputerName><LogName>$Config/SecondCorrelatedMissingEventErrorLogName$</LogName></DataSource><ConditionDetection ID="FilterCondition" TypeID="System!System.ExpressionFilter"><Expression>$Config/Expression$</Expression></ConditionDetection><ConditionDetection ID="FirstCorrelatedMissingEventFilterWarningCondition" TypeID="System!System.ExpressionFilter"><Expression>$Config/FirstCorrelatedMissingEventWarningExpression$</Expression></ConditionDetection><ConditionDetection ID="SecondCorrelatedMissingEventFilterWarningCondition" TypeID="System!System.ExpressionFilter"><Expression>$Config/SecondCorrelatedMissingEventWarningExpression$</Expression></ConditionDetection><ConditionDetection ID="FirstCorrelatedMissingEventFilterErrorCondition"
TypeID="System!System.ExpressionFilter"><Expression>$Config/FirstCorrelatedMissingEventErrorExpression$</Expression></ConditionDetection><ConditionDetection ID="SecondCorrelatedMissingEventFilterErrorCondition" TypeID="System!System.ExpressionFilter"><Expression>$Config/SecondCorrelatedMissingEventErrorExpression$</Expression></ConditionDetection><ConditionDetection ID="MissingCorrelatedDataWarningCondition" TypeID="System!System.CorrelatorAutoMissingCondition"><Correlator>$Config/CorrelatorWarning$</Correlator></ConditionDetection><ConditionDetection ID="MissingCorrelatedDataErrorCondition" TypeID="System!System.CorrelatorAutoMissingCondition"><Correlator>$Config/CorrelatorError$</Correlator></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="CorrelatedMissingEventErrorRaised"><Node ID="MissingCorrelatedDataErrorCondition"><Node ID="FirstCorrelatedMissingEventFilterErrorCondition"><Node ID="FirstCorrelatedMissingEventErrorDataSource"
/></Node><Node ID="SecondCorrelatedMissingEventFilterErrorCondition"><Node ID="SecondCorrelatedMissingEventErrorDataSource" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="CorrelatedMissingEventWarningRaised"><Node ID="MissingCorrelatedDataWarningCondition"><Node ID="FirstCorrelatedMissingEventFilterWarningCondition"><Node ID="FirstCorrelatedMissingEventWarningDataSource" /></Node><Node ID="SecondCorrelatedMissingEventFilterWarningCondition"><Node ID="SecondCorrelatedMissingEventWarningDataSource" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="SuccessEventRaised"><Node ID="FilterCondition"><Node ID="DataSource" /></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.OpsMgrDBPercentFreeSpaceMonitorType" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="UnderErrorThreshold" NoDetection="false" /><MonitorTypeState
ID="OverErrorThresholdUnderWarningThreshold" NoDetection="false" /><MonitorTypeState ID="OverWarningThreshold" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatabaseServerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatabaseName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ErrorThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="WarningThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:int" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="ErrorThreshold" Selector="$Config/ErrorThreshold$"
ParameterType="double" /><OverrideableParameter ID="WarningThreshold" Selector="$Config/WarningThreshold$" ParameterType="double" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS" TypeID="Microsoft.SystemCenter.OpsMgrDBPercentFreeSpaceProvider"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><DatabaseServerName>$Config/DatabaseServerName$</DatabaseServerName><DatabaseName>$Config/DatabaseName$</DatabaseName><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></DataSource><ConditionDetection ID="CDUnderErrorThreshold" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Property[@Name='ErrorFlag']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="Integer">0</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='DBPercentFreeSpace']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/ErrorThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="CDOverErrorThresholdUnderWarningThreshold" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Property[@Name='ErrorFlag']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">0</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='DBPercentFreeSpace']</XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value
Type="Double">$Config/ErrorThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='DBPercentFreeSpace']</XPathQuery></ValueExpression><Operator>LessEqual</Operator><ValueExpression><Value Type="Double">$Config/WarningThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="CDOverWarningThreshold" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Property[@Name='ErrorFlag']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">0</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='DBPercentFreeSpace']</XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value
Type="Double">$Config/WarningThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="UnderErrorThreshold"><Node ID="CDUnderErrorThreshold"><Node ID="DS" /></Node></RegularDetection><RegularDetection MonitorTypeStateID="OverErrorThresholdUnderWarningThreshold"><Node ID="CDOverErrorThresholdUnderWarningThreshold"><Node ID="DS" /></Node></RegularDetection><RegularDetection MonitorTypeStateID="OverWarningThreshold"><Node ID="CDOverWarningThreshold"><Node ID="DS" /></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.SqlBrokerAvailabilityMonitorType" Accessibility="Internal" RunAs="SCLibrary!Microsoft.SystemCenter.DatabaseWriteActionAccount"><MonitorTypeStates><MonitorTypeState ID="SqlBrokerEnabled" NoDetection="false" /><MonitorTypeState ID="SqlBrokerDisabled" NoDetection="false"
/></MonitorTypeStates><Configuration /><MonitorImplementation><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">3600</Interval></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="OleDbProbe" TypeID="System!System.OleDbTriggerProbe"><ConnectionString>Provider=SQLOLEDB;Integrated Security=SSPI</ConnectionString><Query>SELECT cast(is_broker_enabled as int) FROM sys.databases WHERE name = DB_Name()</Query><GetValue>true</GetValue><OneRowPerItem>true</OneRowPerItem><DatabaseNameRegLocation>SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup\DatabaseName</DatabaseNameRegLocation><DatabaseServerNameRegLocation>SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup\DatabaseServerName</DatabaseServerNameRegLocation></ProbeAction><ConditionDetection ID="CDEnabled" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="Integer">Columns[1]/Column[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">1</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="CDDisabled" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Columns[1]/Column[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">0</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="SqlBrokerEnabled"><Node ID="CDEnabled"><Node ID="OleDbProbe"><Node ID="Scheduler" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="SqlBrokerDisabled"><Node ID="CDDisabled"><Node ID="OleDbProbe"><Node ID="Scheduler" /></Node></Node></RegularDetection></RegularDetections><OnDemandDetections><OnDemandDetection
MonitorTypeStateID="SqlBrokerEnabled"><Node ID="CDEnabled"><Node ID="OleDbProbe" /></Node></OnDemandDetection><OnDemandDetection MonitorTypeStateID="SqlBrokerDisabled"><Node ID="CDDisabled"><Node ID="OleDbProbe" /></Node></OnDemandDetection></OnDemandDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.Tiering.TieredManagementGroupTest" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="FailedConnectionToTieredManagementGroup" NoDetection="false" /><MonitorTypeState ID="SuccessfulConnectionToTieredManagementGroup" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TieredManagementGroupSDKServerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer"
/></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TieredManagementGroupSDKServerName" Selector="$Config/TieredManagementGroupSDKServerName$" ParameterType="string" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="TestTieredManagementGroup" TypeID="Microsoft.SystemCenter.Tiering.ConnectToTieredManagementGroup"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><LowerTierSDKServerName>$Config/TieredManagementGroupSDKServerName$</LowerTierSDKServerName><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></DataSource><ConditionDetection ID="FailedConnection"
TypeID="System!System.ExpressionFilter"><Expression><RegExExpression><ValueExpression><XPathQuery>StdOut</XPathQuery></ValueExpression><Operator>ContainsSubstring</Operator><Pattern>ERROR</Pattern></RegExExpression></Expression></ConditionDetection><ConditionDetection ID="SuccessConnection" TypeID="System!System.ExpressionFilter"><Expression><RegExExpression><ValueExpression><XPathQuery>StdOut</XPathQuery></ValueExpression><Operator>ContainsSubstring</Operator><Pattern>SUCCESS</Pattern></RegExExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="FailedConnectionToTieredManagementGroup"><Node ID="FailedConnection"><Node ID="TestTieredManagementGroup" /></Node></RegularDetection><RegularDetection MonitorTypeStateID="SuccessfulConnectionToTieredManagementGroup"><Node ID="SuccessConnection"><Node ID="TestTieredManagementGroup"
/></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.OperationsManager.WMIFunctional.MonitorType" Accessibility="Internal" RunAs="System!System.PrivilegedMonitoringAccount"><MonitorTypeStates><MonitorTypeState ID="WMIError" NoDetection="false" /><MonitorTypeState ID="WMISuccess" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:unsignedInt" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="Scheduler"
TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">$Config/IntervalSeconds$</Interval></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="Probe" TypeID="Microsoft.SystemCenter.WMIFunctionalCheck.Probe"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /><ConditionDetection ID="ErrorFilter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery>Property[@Name='Status']</XPathQuery></ValueExpression><Operator>NotEqual</Operator><ValueExpression><Value Type="String">OK</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="SuccessFilter"
TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery>Property[@Name='Status']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">OK</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="WMIError"><Node ID="ErrorFilter"><Node ID="Probe"><Node ID="Scheduler" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="WMISuccess"><Node ID="SuccessFilter"><Node ID="Probe"><Node ID="Scheduler" /></Node></Node></RegularDetection></RegularDetections><OnDemandDetections><OnDemandDetection MonitorTypeStateID="WMIError"><Node ID="ErrorFilter"><Node ID="Probe"><Node ID="PassThrough" /></Node></Node></OnDemandDetection><OnDemandDetection MonitorTypeStateID="WMISuccess"><Node ID="SuccessFilter"><Node ID="Probe"><Node ID="PassThrough"
/></Node></Node></OnDemandDetection></OnDemandDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.HealthService.ConsecutiveSampleDoubleThreshold" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="UnderWarningThreshold" NoDetection="false" /><MonitorTypeState ID="OverWarningThresholdUnderErrorThreshold" NoDetection="false" /><MonitorTypeState ID="OverErrorThreshold" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CounterName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ObjectName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InstanceName" type="xsd:string" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="AllInstances" type="xsd:boolean" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Frequency" type="xsd:unsignedInt" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="PercentFull" type="xsd:double" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="NumSamples" type="xsd:unsignedInt" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="WarningThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ErrorThreshold" type="xsd:double" /></Configuration><OverrideableParameters><OverrideableParameter ID="Frequency" Selector="$Config/Frequency$" ParameterType="int" /><OverrideableParameter ID="NumSamples" Selector="$Config/NumSamples$" ParameterType="int" /><OverrideableParameter ID="WarningThreshold" Selector="$Config/WarningThreshold$" ParameterType="double" /><OverrideableParameter ID="ErrorThreshold"
Selector="$Config/ErrorThreshold$" ParameterType="double" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS1" TypeID="Performance!System.Performance.DataProvider"><ComputerName>$Config/ComputerName$</ComputerName><CounterName>$Config/CounterName$</CounterName><ObjectName>$Config/ObjectName$</ObjectName><InstanceName>$Config/InstanceName$</InstanceName><AllInstances>$Config/AllInstances$</AllInstances><Frequency>$Config/Frequency$</Frequency><ScaleBy>$Config/PercentFull$</ScaleBy></DataSource><ConditionDetection ID="CD1" TypeID="Performance!System.Performance.ConsecutiveSamplesCondition"><Threshold>$Config/NumSamples$</Threshold><Direction>greaterequal</Direction></ConditionDetection><ConditionDetection ID="CDSufficientSamples" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value
Type="Double">$Config/NumSamples$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="CDInSufficientSamples" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/NumSamples$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="CDUnderWarningThreshold" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/WarningThreshold$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="CDOverWarningThresholdUnderErrorThreshold"
TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value Type="Double">$Config/WarningThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>LessEqual</Operator><ValueExpression><Value Type="Double">$Config/ErrorThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="CDOverErrorThreshold" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value
Type="Double">$Config/ErrorThreshold$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="UnderWarningThreshold"><Node ID="CDInSufficientSamples"><Node ID="CD1"><Node ID="CDUnderWarningThreshold"><Node ID="DS1" /></Node></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="OverWarningThresholdUnderErrorThreshold"><Node ID="CDSufficientSamples"><Node ID="CD1"><Node ID="CDOverWarningThresholdUnderErrorThreshold"><Node ID="DS1" /></Node></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="OverErrorThreshold"><Node ID="CDSufficientSamples"><Node ID="CD1"><Node ID="CDOverErrorThreshold"><Node ID="DS1" /></Node></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.2007.WindowsServiceNotRunningState.ConsecutiveSamplesThreshold.MonitorType"
Accessibility="Public"><MonitorTypeStates><MonitorTypeState ID="NotRunning" NoDetection="false" /><MonitorTypeState ID="Running" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ServiceName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Threshold" type="xsd:double" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="double" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS"
TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/IntervalSeconds$</Interval><SyncTime /></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="Probe" TypeID="Windows!Microsoft.Windows.Win32ServiceInformationProbe"><ComputerName>$Config/ComputerName$</ComputerName><ServiceName>$Config/ServiceName$</ServiceName></ProbeAction><ConditionDetection ID="ServiceRunning" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Property[@Name='State']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">4</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="ServiceNotRunning" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="Integer">Property[@Name='State']</XPathQuery></ValueExpression><Operator>NotEqual</Operator><ValueExpression><Value Type="Integer">4</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="Mapper" TypeID="Performance!System.Performance.DataGenericMapper"><ObjectName>WindowsService</ObjectName><CounterName>ServiceState</CounterName><InstanceName>$Config/ServiceName$</InstanceName><Value>1</Value></ConditionDetection><ConditionDetection ID="CD1" TypeID="Performance!System.Performance.ConsecutiveSamplesCondition"><Threshold>1</Threshold><Direction>greaterequal</Direction></ConditionDetection><ConditionDetection ID="CDSufficientSamples" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value
Type="Double">$Config/Threshold$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="Running"><Node ID="ServiceRunning"><Node ID="Probe"><Node ID="DS" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="NotRunning"><Node ID="CDSufficientSamples"><Node ID="CD1"><Node ID="Mapper"><Node ID="ServiceNotRunning"><Node ID="Probe"><Node ID="DS" /></Node></Node></Node></Node></Node></RegularDetection></RegularDetections><OnDemandDetections><OnDemandDetection MonitorTypeStateID="Running"><Node ID="ServiceRunning"><Node ID="Probe" /></Node></OnDemandDetection><OnDemandDetection MonitorTypeStateID="NotRunning"><Node ID="ServiceNotRunning"><Node ID="Probe" /></Node></OnDemandDetection></OnDemandDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.OperationsManager.WebInterfaceWatcher.MonitorType"
Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="Healthy" NoDetection="false" /><MonitorTypeState ID="Critical" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="UrlToCheck" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SyncTime" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DebugFlag" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Threshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SetProxyDirect" type="xsd:boolean"
/></Configuration><OverrideableParameters><OverrideableParameter ID="UrlToCheck" Selector="$Config/UrlToCheck$" ParameterType="string" /><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /><OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" /><OverrideableParameter ID="DebugFlag" Selector="$Config/DebugFlag$" ParameterType="bool" /><OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="double" /><OverrideableParameter ID="SetProxyDirect" Selector="$Config/SetProxyDirect$" ParameterType="bool" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/IntervalSeconds$</Interval><SyncTime>$Config/SyncTime$</SyncTime></SimpleReccuringSchedule><ExcludeDates
/></Scheduler></DataSource><ProbeAction ID="Probe" TypeID="Microsoft.SystemCenter.WebInterfaceWatcher.Probe"><ComputerName>$Config/ComputerName$</ComputerName><UrlToCheck>$Config/UrlToCheck$</UrlToCheck><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><DebugFlag>$Config/DebugFlag$</DebugFlag><SetProxyDirect>$Config/SetProxyDirect$</SetProxyDirect></ProbeAction><ConditionDetection ID="CDHealthy" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">
                      Property[@Name='State']
                    </XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Double">1</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="CDCritical" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">
                      Property[@Name='State']
                    </XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Double">0</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="Mapper" TypeID="Performance!System.Performance.DataGenericMapper"><ObjectName>WebInterface</ObjectName><CounterName>ServiceState</CounterName><InstanceName>$Config/UrlToCheck$</InstanceName><Value>1</Value></ConditionDetection><ConditionDetection ID="CD1" TypeID="Performance!System.Performance.ConsecutiveSamplesCondition"><Threshold>1</Threshold><Direction>greaterequal</Direction></ConditionDetection><ConditionDetection ID="CDSufficientSamples" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value
Type="Double">$Config/Threshold$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="Healthy"><Node ID="CDHealthy"><Node ID="Probe"><Node ID="DS" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="Critical"><Node ID="CDSufficientSamples"><Node ID="CD1"><Node ID="Mapper"><Node ID="CDCritical"><Node ID="Probe"><Node ID="DS" /></Node></Node></Node></Node></Node></RegularDetection></RegularDetections><OnDemandDetections><OnDemandDetection MonitorTypeStateID="Healthy"><Node ID="CDHealthy"><Node ID="Probe" /></Node></OnDemandDetection><OnDemandDetection MonitorTypeStateID="Critical"><Node ID="CDCritical"><Node ID="Probe" /></Node></OnDemandDetection></OnDemandDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.ManagementServicePool.AvailabilityMonitorType" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState
ID="Healthy" NoDetection="false" /><MonitorTypeState ID="Critical" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AlwaysHealthy" type="xsd:boolean" /></Configuration><MonitorImplementation><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">$Config/IntervalSeconds$</Interval></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /><ConditionDetection ID="SuccessState" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><Value Type="Boolean">$Config/AlwaysHealthy$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="Boolean">true</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="ErrorState" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><Value Type="Boolean">$Config/AlwaysHealthy$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">false</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="Healthy"><Node ID="SuccessState"><Node ID="PassThrough"><Node ID="Scheduler" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="Critical"><Node ID="ErrorState"><Node ID="PassThrough"><Node ID="Scheduler" /></Node></Node></RegularDetection></RegularDetections><OnDemandDetections><OnDemandDetection MonitorTypeStateID="Healthy"><Node ID="SuccessState"><Node ID="PassThrough" /></Node></OnDemandDetection><OnDemandDetection MonitorTypeStateID="Critical"><Node
ID="ErrorState"><Node ID="PassThrough" /></Node></OnDemandDetection></OnDemandDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.Performance.FilteredDoubleThreshold.MonitorType" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="UnderThreshold1" NoDetection="false" /><MonitorTypeState ID="OverThreshold1UnderThreshold2" NoDetection="false" /><MonitorTypeState ID="OverThreshold2" NoDetection="false" /></MonitorTypeStates><Configuration><IncludeSchemaTypes><SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CounterName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ObjectName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="InstanceName" type="xsd:string" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AllInstances" type="xsd:boolean" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Frequency" type="xsd:unsignedInt" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ScaleBy" type="xsd:double" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Expression" type="ExpressionType" minOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Threshold1" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Threshold2" type="xsd:double" /></Configuration><OverrideableParameters><OverrideableParameter ID="Frequency" Selector="$Config/Frequency$" ParameterType="int" /><OverrideableParameter ID="Threshold1" Selector="$Config/Threshold1$" ParameterType="double" /><OverrideableParameter ID="Threshold2"
Selector="$Config/Threshold2$" ParameterType="double" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS1" TypeID="Microsoft.SystemCenter.Performance.FilteredDataProvider"><ComputerName>$Config/ComputerName$</ComputerName><CounterName>$Config/CounterName$</CounterName><ObjectName>$Config/ObjectName$</ObjectName><InstanceName>$Config/InstanceName$</InstanceName><AllInstances>$Config/AllInstances$</AllInstances><Frequency>$Config/Frequency$</Frequency><ScaleBy>$Config/ScaleBy$</ScaleBy><Expression>$Config/Expression$</Expression></DataSource><ConditionDetection ID="CDUnderThreshold1" TypeID="System!System.LogicalSet.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value
Type="Double">$Config/Threshold1$</Value></ValueExpression></SimpleExpression></Expression><EmptySet>Block</EmptySet><SetEvaluation>All</SetEvaluation></ConditionDetection><ConditionDetection ID="CDOverThreshold1UnderThreshold2" TypeID="System!System.LogicalSet.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value Type="Double">$Config/Threshold1$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>LessEqual</Operator><ValueExpression><Value Type="Double">$Config/Threshold2$</Value></ValueExpression></SimpleExpression></Expression></And></Expression><EmptySet>Block</EmptySet><SetEvaluation>Any</SetEvaluation></ConditionDetection><ConditionDetection ID="CDOverThreshold2"
TypeID="System!System.LogicalSet.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value Type="Double">$Config/Threshold2$</Value></ValueExpression></SimpleExpression></Expression><EmptySet>Block</EmptySet><SetEvaluation>Any</SetEvaluation></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="UnderThreshold1"><Node ID="CDUnderThreshold1"><Node ID="DS1" /></Node></RegularDetection><RegularDetection MonitorTypeStateID="OverThreshold1UnderThreshold2"><Node ID="CDOverThreshold1UnderThreshold2"><Node ID="DS1" /></Node></RegularDetection><RegularDetection MonitorTypeStateID="OverThreshold2"><Node ID="CDOverThreshold2"><Node ID="DS1" /></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.AgentHealth.LastEvent.MonitorType"
Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="LastEventOK" NoDetection="false" /><MonitorTypeState ID="LastEventTooOld" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="QueryTimeout" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Interval" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SyncTime" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="WatchPeriodHr" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="MaxEventAgeHr" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="QueryTimeout" Selector="$Config/QueryTimeout$" ParameterType="int" /><OverrideableParameter ID="Interval" Selector="$Config/Interval$" ParameterType="int"
/><OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" /><OverrideableParameter ID="WatchPeriodHr" Selector="$Config/WatchPeriodHr$" ParameterType="int" /><OverrideableParameter ID="MaxEventAgeHr" Selector="$Config/MaxEventAgeHr$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS" TypeID="Microsoft.SystemCenter.AgentHealth.LastEvent.DS"><QueryTimeout>$Config/QueryTimeout$</QueryTimeout><WatchPeriodHr>$Config/WatchPeriodHr$</WatchPeriodHr><Interval>$Config/Interval$</Interval><SyncTime>$Config/SyncTime$</SyncTime><MaxEventAgeHr>$Config/MaxEventAgeHr$</MaxEventAgeHr></DataSource><ConditionDetection ID="PreFilter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Columns/Column[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceName$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="LastEventOKCD" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Columns/Column[3]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">OK</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="LastEventKOCD" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Columns/Column[3]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">KO</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="LastEventOK"><Node ID="LastEventOKCD"><Node
ID="PreFilter"><Node ID="DS" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="LastEventTooOld"><Node ID="LastEventKOCD"><Node ID="PreFilter"><Node ID="DS" /></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.AgentHealth.LastPerf.MonitorType" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="LastPerfOK" NoDetection="false" /><MonitorTypeState ID="LastPerfTooOld" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="QueryTimeout" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Interval" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SyncTime" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="WatchPeriodHr" type="xsd:integer"
/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="MaxPerfAgeHr" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="QueryTimeout" Selector="$Config/QueryTimeout$" ParameterType="int" /><OverrideableParameter ID="Interval" Selector="$Config/Interval$" ParameterType="int" /><OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" /><OverrideableParameter ID="WatchPeriodHr" Selector="$Config/WatchPeriodHr$" ParameterType="int" /><OverrideableParameter ID="MaxPerfAgeHr" Selector="$Config/MaxPerfAgeHr$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS"
TypeID="Microsoft.SystemCenter.AgentHealth.LastPerf.DS"><QueryTimeout>$Config/QueryTimeout$</QueryTimeout><WatchPeriodHr>$Config/WatchPeriodHr$</WatchPeriodHr><Interval>$Config/Interval$</Interval><SyncTime>$Config/SyncTime$</SyncTime><MaxPerfAgeHr>$Config/MaxPerfAgeHr$</MaxPerfAgeHr></DataSource><ConditionDetection ID="PreFilter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Columns/Column[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceName$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="LastPerfOKCD" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Columns/Column[3]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">OK</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="LastPerfKOCD" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Columns/Column[3]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">KO</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="LastPerfOK"><Node ID="LastPerfOKCD"><Node ID="PreFilter"><Node ID="DS" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="LastPerfTooOld"><Node ID="LastPerfKOCD"><Node ID="PreFilter"><Node ID="DS" /></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.NetworkManagement.IsExperiencingExcessiveTimeouts.MonitorType" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState
ID="RepeatedEventRaised" NoDetection="false" /><MonitorTypeState ID="ManualResetEventRaised" NoDetection="true" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Count" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="Count" Selector="$Config/Count$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="RepeatedDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><ConditionDetection ID="RepeatedFilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">11013</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Health Service Modules</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="RepeatedDataCondition"
TypeID="System!System.ConsolidatorCondition"><Consolidator><ConsolidationProperties><PropertyXPathQuery>Params/Param[1]</PropertyXPathQuery></ConsolidationProperties><TimeControl><WithinTimeSchedule><Interval>$Config/IntervalSeconds$</Interval></WithinTimeSchedule></TimeControl><CountingCondition><Count>$Config/Count$</Count><CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode></CountingCondition></Consolidator></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="RepeatedEventRaised"><Node ID="RepeatedDataCondition"><Node ID="RepeatedFilterCondition"><Node ID="RepeatedDataSource" /></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType></MonitorTypes></TypeDefinitions><Categories><Category ID="Cat.Microsoft.SystemCenter.HealthService.Compmgmt" Target="Microsoft.SystemCenter.HealthService.Compmgmt" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category
ID="Cat.Microsoft.SystemCenter.HealthService.MSTSC" Target="Microsoft.SystemCenter.HealthService.MSTSC" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.SystemCenter.HealthService.MSTSCAdmin" Target="Microsoft.SystemCenter.HealthService.MSTSCAdmin" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.SystemCenter.HealthService.MSTSCConsole" Target="Microsoft.SystemCenter.HealthService.MSTSCConsole" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.SystemCenter.HealthService.PingContinuously" Target="Microsoft.SystemCenter.HealthService.PingContinuously" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.SystemCenter.HealthService.PingDefault" Target="Microsoft.SystemCenter.HealthService.PingDefault"
Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.SystemCenter.HealthService.PingWithRoute" Target="Microsoft.SystemCenter.HealthService.PingWithRoute" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.SystemCenter.HealthServiceWatcher.Compmgmt" Target="Microsoft.SystemCenter.HealthServiceWatcher.Compmgmt" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.SystemCenter.HealthServiceWatcher.MSTSC" Target="Microsoft.SystemCenter.HealthServiceWatcher.MSTSC" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.SystemCenter.HealthServiceWatcher.MSTSCConsole" Target="Microsoft.SystemCenter.HealthServiceWatcher.MSTSCConsole" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category
ID="Cat.Microsoft.SystemCenter.HealthServiceWatcher.PingContinuously" Target="Microsoft.SystemCenter.HealthServiceWatcher.PingContinuously" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.SystemCenter.HealthServiceWatcher.PingDefault" Target="Microsoft.SystemCenter.HealthServiceWatcher.PingDefault" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.SystemCenter.HealthServiceWatcher.PingWithRoute" Target="Microsoft.SystemCenter.HealthServiceWatcher.PingWithRoute" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.Windows.Computer.PingContinuously" Target="Microsoft.Windows.Computer.PingContinuously" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.Windows.Computer.PingDefault" Target="Microsoft.Windows.Computer.PingDefault"
Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.Windows.Computer.PingWithRoute" Target="Microsoft.Windows.Computer.PingWithRoute" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.Windows.OperatingSystem.Compmgmt" Target="Microsoft.Windows.OperatingSystem.Compmgmt" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.Windows.OperatingSystem.MSTSC" Target="Microsoft.Windows.OperatingSystem.MSTSC" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.Windows.OperatingSystem.MSTSCConsole" Target="Microsoft.Windows.OperatingSystem.MSTSCConsole" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.Windows.OperatingSystem.PingContinuously" Target="Microsoft.Windows.OperatingSystem.PingContinuously"
Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.Windows.OperatingSystem.PingDefault" Target="Microsoft.Windows.OperatingSystem.PingDefault" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.Windows.OperatingSystem.PingWithRoute" Target="Microsoft.Windows.OperatingSystem.PingWithRoute" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /></Categories><Monitoring><Rules><Rule ID="Microsoft.SystemCenter.SCOM.Certificate.Expiry" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="true" Remotable="false" Priority="Normal" DiscardLevel="100"><Category>Alert</Category><DataSources><DataSource ID="DataSource"
TypeID="Microsoft.SystemCenter.SCOM.Certificate.Expiry.DataSourceModule"><TimeoutSeconds>600</TimeoutSeconds><AlertBeforeNumDays>7</AlertBeforeNumDays><IntervalSeconds>86400</IntervalSeconds></DataSource></DataSources><ConditionDetection ID="CD" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='GenerateAlert']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">true</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><WriteActions><WriteAction ID="GenerateAlert" TypeID="Health!System.Health.GenerateAlert"><Priority>2</Priority><Severity>2</Severity><AlertName /><AlertDescription /><AlertOwner
/><AlertMessageId>$MPElement[Name="Microsoft.SystemCenter.SCOM.Certificate.Expiry.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/Property[@Name="ExpiryDays"]$</AlertParameter1></AlertParameters></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.2007.GeneratePoolHeartbeat" Comment="this rule generates synthetic heartbeats for management service pools" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ManagementServicePool" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.SystemCenter.HealthService.SyntheticHeartbeatDataSource"><HeartbeatSourceEntityId>$Target/Id$</HeartbeatSourceEntityId><HeartbeatIntervalSeconds>60</HeartbeatIntervalSeconds><SendToDefaultRoute>false</SendToDefaultRoute></DataSource></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.HealthService.AvailabilityPost.Composite"
/></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.2007.NotifyAvailabilityState" Comment="this rule notifies about availability state changes" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.AgentWatchersGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="50"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.SystemCenter.HealthService.AvailabilityDataSource.Composite" /></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.HealthService.AvailabilityPost.Composite" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.2007.SdkSpnRegistration" Enabled="false" Target="SCLibrary!Microsoft.SystemCenter.CollectionManagementServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Alert</Category><DataSources><DataSource ID="DS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">26371</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">OpsMgr SDK Service</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert"><Priority>2</Priority><Severity>2</Severity><AlertName /><AlertDescription /><AlertOwner
/><AlertMessageId>$MPElement[Name="Microsoft.SystemCenter.2007.SdkSpnRegistration.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue>$Data/EventDisplayNumber$</SuppressionValue><SuppressionValue>$Data/PublisherName$</SuppressionValue></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.ADAssignment.AccessDenied.Alert" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ADAssignmentResourcePool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Operations</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Health
Service Modules</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">11461</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">11462</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="Alert"
TypeID="Health!System.Health.GenerateAlert"><Priority>1</Priority><Severity>2</Severity><AlertName /><AlertDescription /><AlertOwner /><AlertMessageId>$MPElement[Name="Microsoft.SystemCenter.ADAssignment.AccessDenied.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue>$Data/EventDisplayNumber$</SuppressionValue><SuppressionValue>$Data/PublisherName$</SuppressionValue><SuppressionValue>$Data/Params/Param[1]$</SuppressionValue></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.ADAssignment.EventCollection" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ADAssignmentResourcePool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>.</ComputerName><LogName>Operations
Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Health Service Modules</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression></SimpleExpression></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value Type="UnsignedInteger">11459</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="UnsignedInteger">11477</Value></ValueExpression></SimpleExpression></Expression></And></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SCLibrary!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.ADAssignment.MomADAdmin_NotRun.Alert" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ADAssignmentResourcePool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Operations</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Health Service Modules</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">11463</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">11464</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert"><Priority>1</Priority><Severity>2</Severity><AlertName /><AlertDescription /><AlertOwner /><AlertMessageId>$MPElement[Name="Microsoft.SystemCenter.ADAssignment.MomADAdmin_NotRun.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue>$Data/EventDisplayNumber$</SuppressionValue><SuppressionValue>$Data/PublisherName$</SuppressionValue><SuppressionValue>$Data/Params/Param[1]$</SuppressionValue></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.ADAssignment.NeedsDomainAccount.Alert" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ADAssignmentResourcePool" ConfirmDelivery="true" Remotable="true" Priority="Normal"
DiscardLevel="100"><Category>Operations</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Health Service Modules</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">11467</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert"><Priority>1</Priority><Severity>2</Severity><AlertName /><AlertDescription /><AlertOwner /><AlertMessageId>$MPElement[Name="Microsoft.SystemCenter.ADAssignment.NeedsDomainAccount.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue>$Data/EventDisplayNumber$</SuppressionValue><SuppressionValue>$Data/PublisherName$</SuppressionValue><SuppressionValue>$Data/Params/Param[1]$</SuppressionValue></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.ADAssignment.UnabledToBindToDomain.Alert" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ADAssignmentResourcePool" ConfirmDelivery="true" Remotable="true" Priority="Normal"
DiscardLevel="100"><Category>Operations</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Health Service Modules</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">11465</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">11701</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert"><Priority>1</Priority><Severity>2</Severity><AlertName /><AlertDescription /><AlertOwner
/><AlertMessageId>$MPElement[Name="Microsoft.SystemCenter.ADAssignment.UnabledToBindToDomain.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue>$Data/EventDisplayNumber$</SuppressionValue><SuppressionValue>$Data/PublisherName$</SuppressionValue><SuppressionValue>$Data/Params/Param[1]$</SuppressionValue></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.ADAssignment.UnknownError.Alert" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ADAssignmentResourcePool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Operations</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Health Service Modules</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">11460</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><ConditionDetection ID="Consolidator"
TypeID="Microsoft.SystemCenter.Overridable.ConsolidatorCondition"><ConsolidationProperties><PropertyXPathQuery>Params/Param[5]</PropertyXPathQuery><PropertyXPathQuery>Params/Param[7]</PropertyXPathQuery></ConsolidationProperties><IntervalSeconds>3600</IntervalSeconds><Count>3</Count></ConditionDetection><WriteActions><WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert"><Priority>1</Priority><Severity>2</Severity><AlertName /><AlertDescription /><AlertOwner /><AlertMessageId>$MPElement[Name="Microsoft.SystemCenter.ADAssignment.UnknownError.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/Context/DataItem/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue>$Data/Context/DataItem/Params/Param[5]$</SuppressionValue><SuppressionValue>$Data/Context/DataItem/Params/Param[7]$</SuppressionValue></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.AgentManagement.CollectEndToEndEvent"
Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ManagementServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="ScriptEventProvider" TypeID="Windows!Microsoft.Windows.ScriptGenerated.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName><ScriptName>LogEndToEndEvent.ps1</ScriptName><EventNumber>6022</EventNumber></DataSource></DataSources><WriteActions><WriteAction ID="CollectEvent" TypeID="SCLibrary!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.AgentManagement.CollectPerfCounter" Comment="Collect System Uptime perf counter (E2E perf)" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal"
DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerfDS" TypeID="Performance!System.Performance.DataProvider"><CounterName>System Up Time</CounterName><ObjectName>System</ObjectName><Frequency>21600</Frequency></DataSource></DataSources><WriteActions><WriteAction ID="PerfWriteAction" TypeID="SCLibrary!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.AgentManagement.CollectRestartHealthServiceEvent" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="ScriptEventProvider"
TypeID="Windows!Microsoft.Windows.ScriptGenerated.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName><ScriptName>RestartHealthService.js</ScriptName></DataSource></DataSources><WriteActions><WriteAction ID="CollectEvent" TypeID="SCLibrary!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.AgentManagement.LogEndToEndEvent" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>System</Category><DataSources><DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler"><IntervalSeconds>900</IntervalSeconds><SyncTime>01:00</SyncTime></DataSource></DataSources><WriteActions><WriteAction ID="LogE2EEvent"
TypeID="Microsoft.SystemCenter.AgentManagement.LogEvent"><TimeoutSeconds>300</TimeoutSeconds></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.AgentRecovery.FailedToStart" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">7000</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">7001</Value></ValueExpression></SimpleExpression></Expression></Or></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Service Control Manager</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">System Center Management</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">OpsMgr Health
Service</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SCLibrary!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.AgentRecovery.Running" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">7036</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Service Control Manager</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">System Center Management</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">OpsMgr Health Service</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB"
TypeID="SCLibrary!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.AgentRecovery.Terminated" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">7031</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">7034</Value></ValueExpression></SimpleExpression></Expression></Or></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Service Control Manager</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">System Center Management</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">OpsMgr Health
Service</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SCLibrary!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.Alert.InvalidOverrideValue" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Alert</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">HealthService</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">5404</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">5405</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction
ID="Alert" TypeID="Health!System.Health.GenerateAlert"><Priority>1</Priority><Severity>2</Severity><AlertName /><AlertDescription /><AlertOwner /><AlertMessageId>$MPElement[Name="Microsoft.SystemCenter.Alert.InvalidOverrideValue.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue>$Data/EventDescription$</SuppressionValue></Suppression><Custom1 /><Custom2 /><Custom3 /><Custom4 /><Custom5 /><Custom6 /><Custom7 /><Custom8 /><Custom9 /><Custom10 /></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.Alert.ParamReplacementFailure" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Alert</Category><DataSources><DataSource ID="DS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Operations Manager</LogName><Expression><Or><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">HealthService</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">5400</Value></ValueExpression></SimpleExpression></Expression></And></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">HealthService</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Id$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">5401</Value></ValueExpression></SimpleExpression></Expression></And></Expression></Or></Expression></DataSource></DataSources><WriteActions><WriteAction
ID="Alert" TypeID="Health!System.Health.GenerateAlert"><Priority>0</Priority><Severity>1</Severity><AlertName /><AlertDescription /><AlertOwner /><AlertMessageId>$MPElement[Name="Microsoft.SystemCenter.Alert.ParamReplacementFailure.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue>$Data/EventDescription$</SuppressionValue></Suppression><Custom1 /><Custom2 /><Custom3 /><Custom4 /><Custom5 /><Custom6 /><Custom7 /><Custom8 /><Custom9 /><Custom10 /></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.Alert.ParamReplacementFailure.Critical" Enabled="false" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Alert</Category><DataSources><DataSource ID="DS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">HealthService</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">5408</Value></ValueExpression></SimpleExpression></Expression></And></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Id$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">5409</Value></ValueExpression></SimpleExpression></Expression></And></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert"><Priority>1</Priority><Severity>2</Severity><AlertName /><AlertDescription /><AlertOwner
/><AlertMessageId>$MPElement[Name="Microsoft.SystemCenter.Alert.ParamReplacementFailure.Critical.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue>$Data/EventDescription$</SuppressionValue></Suppression><Custom1 /><Custom2 /><Custom3 /><Custom4 /><Custom5 /><Custom6 /><Custom7 /><Custom8 /><Custom9 /><Custom10 /></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.Alert.ParamReplacementFailure.EventCollection" Enabled="false" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Operations
Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">HealthService</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">5400</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">5401</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">5402</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">5404</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">5405</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">5500</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SCLibrary!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.Alert.SuppressionReplacementFailure" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Alert</Category><DataSources><DataSource ID="DS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">HealthService</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">5402</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert"><Priority>1</Priority><Severity>2</Severity><AlertName /><AlertDescription /><AlertOwner /><AlertMessageId>$MPElement[Name="Microsoft.SystemCenter.Alert.SuppressionReplacementFailure.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue>$Data/EventDescription$</SuppressionValue></Suppression><Custom1 /><Custom2 /><Custom3 /><Custom4 /><Custom5 /><Custom6 /><Custom7 /><Custom8 /><Custom9 /><Custom10 /></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.Alert.Suspended" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal"
DiscardLevel="100"><Category>Alert</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">HealthService</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">5399</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert"><Priority>1</Priority><Severity>1</Severity><AlertName /><AlertDescription /><AlertOwner /><AlertMessageId>$MPElement[Name="Microsoft.SystemCenter.Alert.Suspended.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue>$Data/Params/Param[2]$</SuppressionValue><SuppressionValue>$Data/Params/Param[4]$</SuppressionValue></Suppression><Custom1 /><Custom2 /><Custom3 /><Custom4 /><Custom5 /><Custom6 /><Custom7 /><Custom8 /><Custom9 /><Custom10 /></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.AlertSubscriptionModule.EventCollection" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal"
DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Health Service Modules</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">11401</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">11451</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">11452</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SCLibrary!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW"
TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.ApplicationLog.Syslog.ModuleError.Alert" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ManagementServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Alert</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Health Service Modules</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Value
Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">11601</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="GenerateAlert" TypeID="Health!System.Health.GenerateAlert"><Priority>1</Priority><Severity>1</Severity><AlertName /><AlertDescription /><AlertMessageId>$MPElement[Name='Microsoft.SystemCenter.ApplicationLog.Syslog.ModuleError.Alert.AlertMessage']$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue
/></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.ApplicationLog.Syslog.Modules.EventCollection" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Health Service Modules</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery
Type="String">Params/Param[1]</XPathQuery></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">11601</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SCLibrary!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.AppLogModule.EventCollection" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="DS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Health Service Modules</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">31701</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31702</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31703</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31704</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31705</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31706</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31707</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">31708</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31709</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31710</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31711</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31712</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31713</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31714</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">31715</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31716</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31717</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31718</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31719</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31720</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31721</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">31722</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31731</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31732</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31733</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31734</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31741</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31751</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">31752</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31753</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SCLibrary!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.AppLogModule.FailedExecution.Alert" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Alert</Category><DataSources><DataSource ID="DS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Health Service Modules</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">31705</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[6]</XPathQuery></ValueExpression><Operator>NotEqual</Operator><ValueExpression><Value Type="String">0x80070002</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[6]</XPathQuery></ValueExpression><Operator>NotEqual</Operator><ValueExpression><Value Type="String">0x80070003</Value></ValueExpression></SimpleExpression></Expression></And></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31707</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="String">Params/Param[6]</XPathQuery></ValueExpression><Operator>NotEqual</Operator><ValueExpression><Value Type="String">0x80070002</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[6]</XPathQuery></ValueExpression><Operator>NotEqual</Operator><ValueExpression><Value Type="String">0x80070003</Value></ValueExpression></SimpleExpression></Expression></And></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31709</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">31711</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31712</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31713</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31714</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31715</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31716</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">31717</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">31718</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><ConditionDetection ID="Consolidator" TypeID="Microsoft.SystemCenter.Overridable.ConsolidatorCondition"><ConsolidationProperties><PropertyXPathQuery>Params/Param[1]</PropertyXPathQuery></ConsolidationProperties><IntervalSeconds>3600</IntervalSeconds><Count>3</Count></ConditionDetection><WriteActions><WriteAction ID="GenerateAlert" TypeID="Health!System.Health.GenerateAlert"><Priority>1</Priority><Severity>1</Severity><AlertMessageId>$MPElement[Name="Microsoft.SystemCenter.AppLogModule.FailedExecution.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/Context/DataItem/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue>$Data/Context/DataItem/Params/Param[2]$</SuppressionValue></Suppression></WriteAction></WriteActions></Rule><Rule
