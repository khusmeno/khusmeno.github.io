<ManagementPack xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.0"><Manifest><Identity><ID>Microsoft.Windows.Server.Library</ID><Version>10.1.1.0</Version></Identity><Name>Microsoft Windows Server Base OS Common Library</Name><References><Reference Alias="SCIG"><ID>Microsoft.SystemCenter.InstanceGroup.Library</ID><Version>6.0.5000.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="SC"><ID>Microsoft.SystemCenter.Library</ID><Version>6.0.5000.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="Windows"><ID>Microsoft.Windows.Library</ID><Version>6.0.5000.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="SystemHealth"><ID>System.Health.Library</ID><Version>6.0.5000.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="System"><ID>System.Library</ID><Version>6.0.5000.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference></References></Manifest><TypeDefinitions><EntityTypes><ClassTypes><ClassType ID="Microsoft.Windows.Server.ComputerGroup" Accessibility="Public" Abstract="false" Base="SC!Microsoft.SystemCenter.ComputerGroup" Hosted="false" Singleton="true" Extension="false"/><ClassType ID="Microsoft.Windows.Server.DiskPartition" Accessibility="Public" Abstract="true" Base="Windows!Microsoft.Windows.DiskPartition" Hosted="true" Singleton="false" Extension="false"><Property ID="DiskIndex" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="BlockSize" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="PrimaryPartition" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="Bootable" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="Size" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/></ClassType><ClassType ID="Microsoft.Windows.Server.InstanceGroup" Accessibility="Public" Abstract="false" Base="SCIG!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/><ClassType ID="Microsoft.Windows.Server.InstanceGroupOnly" Accessibility="Public" Abstract="false" Base="SCIG!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/><ClassType ID="Microsoft.Windows.Server.LogicalDisk" Accessibility="Public" Abstract="true" Base="Windows!Microsoft.Windows.LogicalDisk" Hosted="true" Singleton="false" Extension="false"><Property ID="FileSystem" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="Compressed" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="Size" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="SizeNumeric" Type="int" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="SizeInMBs" Type="double" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="DriveType" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="SupportsDiskQuota" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="QuotasDisabled" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="SupportsFileBasedCompression" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/></ClassType><ClassType ID="Microsoft.Windows.Server.NetworkAdapter" Accessibility="Public" Abstract="true" Base="Windows!Microsoft.Windows.NetworkAdapter" Hosted="true" Singleton="false" Extension="false"><Property ID="AdapterType" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="Index" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="Manufacturer" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="MACAddress" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="ServiceName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="PerfmonInstance" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="DHCPEnabled" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="DHCPServer" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="DNSDomain" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="IPAddress" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="IPSubnet" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/></ClassType><ClassType ID="Microsoft.Windows.Server.PhysicalDisk" Accessibility="Public" Abstract="true" Base="Windows!Microsoft.Windows.PhysicalDisk" Hosted="true" Singleton="false" Extension="false"><Property ID="Caption" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="Index" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="InterfaceType" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="Manufacturer" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="Model" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="SCSIBus" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="SCSILogicalUnit" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="SCSIPort" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="SCSITargetID" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="Size" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="TotalCylinders" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="TotalHeads" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="TotalSectors" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="TotalTracks" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="TracksPerCylinder" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="PerfmonInstance" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/></ClassType><ClassType ID="Microsoft.Windows.Server.Processor" Accessibility="Public" Abstract="true" Base="Windows!Microsoft.Windows.Processor" Hosted="true" Singleton="false" Extension="false"><Property ID="Manufacturer" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="Speed" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="DataWidth" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="Revision" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="Version" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="PerfmonInstance" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/></ClassType><ClassType ID="Microsoft.Windows.Server.6.2.Computer" Accessibility="Public" Abstract="false" Base="Windows!Microsoft.Windows.Server.Computer" Hosted="false" Singleton="false" Extension="false"><Property ID="InstallType" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/></ClassType><ClassType ID="Microsoft.Windows.Server.6.2.Core.Computer" Accessibility="Public" Abstract="false" Base="Microsoft.Windows.Server.6.2.Computer" Hosted="false" Singleton="false" Extension="false"/><ClassType ID="Microsoft.Windows.Server.6.2.Full.Computer" Accessibility="Public" Abstract="false" Base="Microsoft.Windows.Server.6.2.Computer" Hosted="false" Singleton="false" Extension="false"/><ClassType ID="Microsoft.Windows.Server.6.2.OperatingSystem" Accessibility="Public" Abstract="false" Base="Windows!Microsoft.Windows.Server.OperatingSystem" Hosted="true" Singleton="false" Extension="false"><Property ID="InstallType" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="PowerPlan" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/></ClassType><ClassType ID="Microsoft.Windows.Server.6.2.Core.OperatingSystem" Accessibility="Public" Abstract="false" Base="Microsoft.Windows.Server.6.2.OperatingSystem" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="Microsoft.Windows.Server.6.2.Full.OperatingSystem" Accessibility="Public" Abstract="false" Base="Microsoft.Windows.Server.6.2.OperatingSystem" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="Microsoft.Windows.Server.6.2.ComputerGroup" Accessibility="Public" Abstract="false" Base="SC!Microsoft.SystemCenter.ComputerGroup" Hosted="false" Singleton="true" Extension="false"/><ClassType ID="Microsoft.Windows.Server.6.2.Core.ComputerGroup" Accessibility="Public" Abstract="false" Base="SC!Microsoft.SystemCenter.ComputerGroup" Hosted="false" Singleton="true" Extension="false"/><ClassType ID="Microsoft.Windows.Server.6.2.Full.ComputerGroup" Accessibility="Public" Abstract="false" Base="SC!Microsoft.SystemCenter.ComputerGroup" Hosted="false" Singleton="true" Extension="false"/><ClassType ID="Microsoft.Windows.Server.6.2.DiskPartition" Accessibility="Public" Abstract="false" Base="Microsoft.Windows.Server.DiskPartition" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="Microsoft.Windows.Server.6.2.LogicalDisk" Accessibility="Public" Abstract="false" Base="Microsoft.Windows.Server.LogicalDisk" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="Microsoft.Windows.Server.6.2.NetworkAdapter" Accessibility="Public" Abstract="false" Base="Microsoft.Windows.Server.NetworkAdapter" Hosted="true" Singleton="false" Extension="false"><Property ID="SlotNumber" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/></ClassType><ClassType ID="Microsoft.Windows.Server.6.2.PhysicalDisk" Accessibility="Public" Abstract="false" Base="Microsoft.Windows.Server.PhysicalDisk" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="Microsoft.Windows.Server.6.2.Processor" Accessibility="Public" Abstract="false" Base="Microsoft.Windows.Server.Processor" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="Microsoft.Windows.Server.ProcessSeed" Accessibility="Public" Abstract="true" Base="System!System.Entity" Hosted="true" Singleton="false" Extension="false"><Property ID="PortMonitoringEnabled" Type="bool" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="ProcessMonitoringEnabled" Type="bool" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="ThresholdsByProcess" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="65535" MinLength="0" Required="false" Scale="0"/></ClassType></ClassTypes><RelationshipTypes><RelationshipType ID="Microsoft.Windows.Server.ComputerHostsProcessSeed" Accessibility="Public" Abstract="false" Base="System!System.Hosting"><Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Server.Computer"/><Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Microsoft.Windows.Server.ProcessSeed"/></RelationshipType></RelationshipTypes></EntityTypes><ModuleTypes><ProbeActionModuleType ID="Microsoft.Windows.Server.IsFeatureInstalled.Probe.PowerShell" Accessibility="Public" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:int"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TargetComputerName" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ServerFeature" type="xsd:string"/></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe"><ScriptName>IsFeatureInstalled.ps1</ScriptName><ScriptBody>
                                    
param ([string] $TargetComputerName, [string] $ServerFeature)
$SCRIPT_NAME = "IsFeatureInstalled"
$ErrorActionPreference = "Stop"

# Event type constants
$EVENT_TYPE_LOG = 0
$EVENT_TYPE_ERROR = 1
$EVENT_TYPE_WARNING = 2
$EVENT_TYPE_INFORMATION = 4

# Typed property bag constants
$PROPERTY_TYPE_ALERT = 0
$PROPERTY_TYPE_EVENT = 1
$PROPERTY_TYPE_PERFORMANCE = 2
$PROPERTY_TYPE_STATE = 3

# State type constants
$STATE_SUCCESS = "Success"
$STATE_WARNING = "Warning"
$STATE_ERROR = "Error"

$momAPI = new-object -comObject MOM.ScriptAPI
Import-Module CimCmdlets -ErrorAction SilentlyContinue

$ErrAction_None               = 0
$ErrAction_Trace              = 1
$ErrAction_ThrowError         = 16
$ErrAction_Abort              = 32
$ErrAction_ThrowErrorAndAbort = 48

$DISKSIZE_BYTES_IN_MB = 1048576

$g_ErrorEventNumber = 4001
$g_TraceEventNumber = 4002
$g_DebugFlag = $false

$WIN_SRV_2012_OSVer = "6.2"
#******************************************************************************
#   FUNCTION:       CheckByOSCurrentVersion
#   DESCRIPTION:    Returns True if the Registry Key for CurrentVersion
#                   is equal the target OS Versions Number.
#   RETURNS:        Boolean: True, if build is greater or equal than the given number
#******************************************************************************
function CheckByOSCurrentVersion()
{ 
    $strCurrentOSVer = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\"
    $strCurrentOSVer = $strCurrentOSVer.CurrentVersion
    $CheckByOSCurrentVersion = $false
	if($strCurrentOSVer -ge $WIN_SRV_2012_OSVer){
       $CheckByOSCurrentVersion = $true
    }else{
       $CheckByOSCurrentVersion = $false
    }
    return $CheckByOSCurrentVersion;
}

$useCIM = CheckByOSCurrentVersion

#---------------------------------------------------------------------------
# Returns WMI Instance requested. Tries to execute WMI query a N times.
#---------------------------------------------------------------------------
Function WMIGetInstanceExTryN
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery, 
           [int]$N)

    for ($i = 0; $i -lt $N; $i++)
    {
        $error.Clear();
		if($useCIM){
			Load-CimModules
			try
			{
				$cimSessionOption = New-CimSessionOption -Protocol DCOM
				$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
				$oInstance = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
			}
			catch
			{
				$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue 
			}
			Finally
			{
				Get-CimSession | Remove-CimSession
				$cimsession =$null
				$cimSessionOption = $null 
			}
		}else{
			$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
		}
        if ($error.Count -gt 0)
        {
            if ($i -eq ($N-1))
            {
                ThrowScriptError ("The class name '" + $sInstanceQuery + "' returned no instances.  Please check to see if this is a valid WMI class name.") $error[0]
            }
        }
        else
        {
            break;
        }
        sleep -m 1000
    }

    return $oInstance
}

#---------------------------------------------------------------------------
# Returns WMI Instance requested.
#---------------------------------------------------------------------------
Function WMIGetInstanceEx
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery)

    $error.Clear();
	if($useCIM){

		Load-CimModules
		try
		{
			$cimSessionOption = New-CimSessionOption -Protocol DCOM
			$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
			$oInstance = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
		}
		catch
		{
			$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
		}
		Finally
		{
			Get-CimSession | Remove-CimSession
			$cimsession =$null
			$cimSessionOption = $null 
		}
	}else{
		$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
	}
    if ($error.Count -gt 0)
    {
        ThrowScriptError ("The class name '" + $sInstanceQuery + "' returned no instances.  Please check to see if this is a valid WMI class name.") $error[0]
    }

    return $oInstance
}

#---------------------------------------------------------------------------
# Connect to WMI.
#---------------------------------------------------------------------------
Function WMIConnect
{
    param ([string]$sTargetComputer,
           [string]$sNamespace, $sInstanceQuery)

    $error.Clear()

    # !!! Refactoring comment: 
    # Original VBScript only tries to connect to the namespace. Piping to get only the first one saves time. 
	if($useCIM)
	{
	    Load-CimModules
		try
		{
		 $cimSessionOption = New-CimSessionOption -Protocol DCOM
		 $cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
		 $oWMI = Get-CimClass -CimSession $cimsession  -Namespace $sNamespace -ErrorAction SilentlyContinue | select -First 1
		}
		Finally
		{
		 Get-CimSession | Remove-CimSession
		 $cimsession =$null
		 $cimSessionOption = $null 
		}
	}else{
		$oWMI = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue | select -First 1
	}
    if ($error.Count -gt 0)
    {
        $msg = "Unable to open WMI Namespace 'winmgmts:\\" + $sTargetComputer + "\" + $sNamespace + "'. Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists."
        ThrowScriptError $msg $error[0]
    }
}

#---------------------------------------------------------------------------
# Returns WMI Instance requested.
#---------------------------------------------------------------------------
Function WMIGetInstance
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery)

    WMIConnect $sTargetComputer $sNamespace $sInstanceQuery
    $oInstance = WMIGetInstanceEx $sTargetComputer $sNamespace $sInstanceQuery
    return $oInstance
}

#---------------------------------------------------------------------------
# Returns WMI Instance requested.
#---------------------------------------------------------------------------
Function WMIGetInstanceNoAbort
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery)
	if($useCIM){
		Load-CimModules
		try
		{
			$cimSessionOption = New-CimSessionOption -Protocol DCOM
			$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
			$oInstance = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
		}
		catch
		{
			$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue 
		}
		Finally
		{
			Get-CimSession | Remove-CimSession
			$cimsession =$null
			$cimSessionOption = $null 
		}
	}else{
		$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
	}
    return $oInstance
}

#---------------------------------------------------------------------------
# Executes the WMI query and returns the result set.
#---------------------------------------------------------------------------
Function WMIExecQuery
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sQuery)

    $error.Clear()

	if($useCIM){

		Load-CimModules
		try
		{
			$cimSessionOption = New-CimSessionOption -Protocol DCOM
			$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
			$oQuery = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
		}
		catch
		{
			$oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
		}
		Finally
		{
			Get-CimSession | Remove-CimSession
			$cimsession =$null
			$cimSessionOption = $null 
		}
	}else{
		$oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
	}
    if ($error.Count -gt 0)
    {
        ThrowScriptError ("The Query '" + $sQuery + "' returned an invalid result set.  Please check to see if this is a valid WMI Query.") $error[0]
    }

    return $oQuery
}

#---------------------------------------------------------------------------
# Executes the WMI query and returns the result set, no abort version.
#---------------------------------------------------------------------------
Function WMIExecQueryNoAbort
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sQuery)    
    if($useCIM){
		Load-CimModules
		try
		{
			$cimSessionOption = New-CimSessionOption -Protocol DCOM
			$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
			$oQuery = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
		}
		catch
		{
			$oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue 
		}
		Finally
		{
			Get-CimSession | Remove-CimSession
			$cimsession =$null
			$cimSessionOption = $null 
		}
	}else{
		$oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
	}

    return $oQuery
}

#---------------------------------------------------------------------------
# Creates an event and sends it back to the mom server.
#---------------------------------------------------------------------------
Function ThrowScriptErrorNoAbort
{
    param ([string]$sMessage, 
           [System.Management.Automation.ErrorRecord]$oErr)
    # Retrieve the name of this (running) script
    $ScriptFileName = $MyInvocation.ScriptName
    
    if ($oErr -ne $null)
    {
        $sMessage = $sMessage + ". " + $oErr.ErrorDetails
    }
    
    $momAPI.LogScriptEvent($ScriptFileName, $g_ErrorEventNumber, $EVENT_TYPE_ERROR, $sMessage)
    
    Write-Host $sMessage
}

#---------------------------------------------------------------------------
# Creates an event and sends it back to the mom server.
#---------------------------------------------------------------------------
Function ThrowScriptError
{
    param ([string]$sMessage, 
           [System.Management.Automation.ErrorRecord]$oErr)
    ThrowScriptErrorNoAbort $sMessage $oErr
    exit
}

#---------------------------------------------------------------------------
# Outputs to file and echo for debugging purposes
#---------------------------------------------------------------------------
Function TraceLogMessage
{
    param ([string]$sMessage)

    Write-Host $sMessage
    
    If ($g_DebugFlag -eq $true)
    {
        # Retrieve the name of this (running) script
        $ScriptFileName = $MyInvocation.ScriptName
        
        $momAPI.LogScriptEvent($ScriptFileName, $g_TraceEventNumber, $EVENT_TYPE_INFORMATION, $sMessage)
    }
}

#---------------------------------------------------------------------------
# Verifies the expression. If equals to False then generates an error and quits the script
#   Usage:
#     Verify Not WMISet Is Nothing, "WMISet is invalid!"
#     Verify WMISet.Count = 1, "Invalid quantity of services with name 'Server' (qty = " &amp; WMISet.Count &amp; ")."
#---------------------------------------------------------------------------
Function Verify
{
    param ([bool]$bBool, 
           [string]$sMessage)

    If ($bBool -eq $false)
    {
        ThrowScriptError $sMessage $null
    }
}

Function GetRegistryKeyValue
{
    param ([string]$keyPath, 
           [string]$key)

    $error.Clear()

    $strKeyValue = Get-ItemProperty -Path $keyPath -Name $key -ErrorAction SilentlyContinue
    if ($error.Count -gt 0)
    {
        ThrowScriptError ("An error occurred while reading the registry: '" + $keyPath + $key + "'") $error[0]
    }
    return $strKeyValue.$key
}


#---------------------------------------------------------------------------
# Function: ExpressedInMB
#   Usage:
#     Parameter (SizeInBytes) 
#     Returns the Size Expressed in MBytes
#---------------------------------------------------------------------------
Function ExpressedInMB
{
    param ($SizeInBytes)

    $NumberSizeExpInMB = [math]::Round($SizeInBytes / $DISKSIZE_BYTES_IN_MB, 0)
    return $NumberSizeExpInMB
}

Function Load-CimModules
{
	$error.Clear()

	$CimModule = Get-Module CimCmdlets

	if ($null -eq $CimModule)
	{
			Import-Module CimCmdlets
			$error.Clear()
	}
}#Copyright (c) Microsoft Corporation. All rights reserved.
                      
# Parameters that should be passed to this script
# 0 Computer (FQDN)
# 1 Server Feature ID or Name

Write-Host "$SCRIPT_NAME - Executing Windows Server Is Feature Installed Probe Powershell Script"

Function Main()
{
    
    $numId = 0
    if ([int32]::TryParse($ServerFeature, [ref]$numId))
    {
        $WMISet = WMIGetInstanceExTryN $TargetComputerName "root\cimv2" ("Win32_ServerFeature where ID='" + $ServerFeature + "'") 5
    }
    else
    {
        $WMISet = WMIGetInstanceExTryN $TargetComputerName "root\cimv2" ("Win32_ServerFeature where Name='" + $ServerFeature + "'") 5
    }

    foreach ($owObj in $WMISet)
    {
        ReturnResults "TRUE"
        return
    }

    ReturnResults "FALSE"
}

Function ReturnResults
{
    param ($IsFeatureInstalled)
    $oBag = $momAPI.CreatePropertyBag()
    $oBag.AddValue("IsFeatureInstalled", $IsFeatureInstalled)
    $oBag
}

Main
</ScriptBody><Parameters><Parameter><Name>TargetComputerName</Name><Value>$Config/TargetComputerName$</Value></Parameter><Parameter><Name>ServerFeature</Name><Value>"$Config/ServerFeature$"</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction><ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter"><Expression><RegExExpression><ValueExpression><XPathQuery>Property[@Name='IsFeatureInstalled']</XPathQuery></ValueExpression><Operator>ContainsSubstring</Operator><Pattern>TRUE</Pattern></RegExExpression></Expression></ConditionDetection></MemberModules><Composition><Node ID="Filter"><Node ID="PA"/></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.Windows.Server.TopCPUUsage.ProbeAction.PowerShell" Accessibility="Public" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalMilliseconds" type="xsd:int"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="NumSamples" type="xsd:int"/></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalMilliseconds" Selector="$Config/IntervalMilliseconds$" ParameterType="int"/><OverrideableParameter ID="NumSamples" Selector="$Config/NumSamples$" ParameterType="int"/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="TopCPUUsageProbe" TypeID="System!System.CommandExecuterProbe"><ApplicationName>%windir%\system32\windowspowershell\v1.0\powershell.exe</ApplicationName><WorkingDirectory/><CommandLine>-command "&amp; '$File/Microsoft.Windows.Server.TopCPUUsage.ps1$' $Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$ $Config/IntervalMilliseconds$ $Config/NumSamples$"</CommandLine><TimeoutSeconds>300</TimeoutSeconds><RequireOutput>true</RequireOutput><Files><File><Name>Microsoft.Windows.Server.TopCPUUsage.ps1</Name><Contents>
                                
param ([string] $TargetComputer, [Int] $SleepTime, [Int] $NumberOfSamples)

$ErrAction_None               = 0
$ErrAction_Trace              = 1
$ErrAction_ThrowError         = 16
$ErrAction_Abort              = 32
$ErrAction_ThrowErrorAndAbort = 48

$DISKSIZE_BYTES_IN_MB = 1048576

$g_ErrorEventNumber = 4001
$g_TraceEventNumber = 4002
$g_DebugFlag = $false

$WIN_SRV_2012_OSVer = "6.2"
#******************************************************************************
#   FUNCTION:       CheckByOSCurrentVersion
#   DESCRIPTION:    Returns True if the Registry Key for CurrentVersion
#                   is equal the target OS Versions Number.
#   RETURNS:        Boolean: True, if build is greater or equal than the given number
#******************************************************************************
function CheckByOSCurrentVersion()
{ 
    $strCurrentOSVer = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\"
    $strCurrentOSVer = $strCurrentOSVer.CurrentVersion
    $CheckByOSCurrentVersion = $false
	if($strCurrentOSVer -ge $WIN_SRV_2012_OSVer){
       $CheckByOSCurrentVersion = $true
    }else{
       $CheckByOSCurrentVersion = $false
    }
    return $CheckByOSCurrentVersion;
}

$useCIM = CheckByOSCurrentVersion

#---------------------------------------------------------------------------
# Returns WMI Instance requested. Tries to execute WMI query a N times.
#---------------------------------------------------------------------------
Function WMIGetInstanceExTryN
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery, 
           [int]$N)

    for ($i = 0; $i -lt $N; $i++)
    {
        $error.Clear();
		if($useCIM){
			Load-CimModules
			try
			{
				$cimSessionOption = New-CimSessionOption -Protocol DCOM
				$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
				$oInstance = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
			}
			catch
			{
				$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue 
			}
			Finally
			{
				Get-CimSession | Remove-CimSession
				$cimsession =$null
				$cimSessionOption = $null 
			}
		}else{
			$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
		}
        if ($error.Count -gt 0)
        {
            if ($i -eq ($N-1))
            {
                ThrowScriptError ("The class name '" + $sInstanceQuery + "' returned no instances.  Please check to see if this is a valid WMI class name.") $error[0]
            }
        }
        else
        {
            break;
        }
        sleep -m 1000
    }

    return $oInstance
}

#---------------------------------------------------------------------------
# Returns WMI Instance requested.
#---------------------------------------------------------------------------
Function WMIGetInstanceEx
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery)

    $error.Clear();
	if($useCIM){

		Load-CimModules
		try
		{
			$cimSessionOption = New-CimSessionOption -Protocol DCOM
			$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
			$oInstance = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
		}
		catch
		{
			$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
		}
		Finally
		{
			Get-CimSession | Remove-CimSession
			$cimsession =$null
			$cimSessionOption = $null 
		}
	}else{
		$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
	}
    if ($error.Count -gt 0)
    {
        ThrowScriptError ("The class name '" + $sInstanceQuery + "' returned no instances.  Please check to see if this is a valid WMI class name.") $error[0]
    }

    return $oInstance
}

#---------------------------------------------------------------------------
# Connect to WMI.
#---------------------------------------------------------------------------
Function WMIConnect
{
    param ([string]$sTargetComputer,
           [string]$sNamespace, $sInstanceQuery)

    $error.Clear()

    # !!! Refactoring comment: 
    # Original VBScript only tries to connect to the namespace. Piping to get only the first one saves time. 
	if($useCIM)
	{
	    Load-CimModules
		try
		{
		 $cimSessionOption = New-CimSessionOption -Protocol DCOM
		 $cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
		 $oWMI = Get-CimClass -CimSession $cimsession  -Namespace $sNamespace -ErrorAction SilentlyContinue | select -First 1
		}
		Finally
		{
		 Get-CimSession | Remove-CimSession
		 $cimsession =$null
		 $cimSessionOption = $null 
		}
	}else{
		$oWMI = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue | select -First 1
	}
    if ($error.Count -gt 0)
    {
        $msg = "Unable to open WMI Namespace 'winmgmts:\\" + $sTargetComputer + "\" + $sNamespace + "'. Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists."
        ThrowScriptError $msg $error[0]
    }
}

#---------------------------------------------------------------------------
# Returns WMI Instance requested.
#---------------------------------------------------------------------------
Function WMIGetInstance
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery)

    WMIConnect $sTargetComputer $sNamespace $sInstanceQuery
    $oInstance = WMIGetInstanceEx $sTargetComputer $sNamespace $sInstanceQuery
    return $oInstance
}

#---------------------------------------------------------------------------
# Returns WMI Instance requested.
#---------------------------------------------------------------------------
Function WMIGetInstanceNoAbort
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery)
	if($useCIM){
		Load-CimModules
		try
		{
			$cimSessionOption = New-CimSessionOption -Protocol DCOM
			$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
			$oInstance = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
		}
		catch
		{
			$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue 
		}
		Finally
		{
			Get-CimSession | Remove-CimSession
			$cimsession =$null
			$cimSessionOption = $null 
		}
	}else{
		$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
	}
    return $oInstance
}

#---------------------------------------------------------------------------
# Executes the WMI query and returns the result set.
#---------------------------------------------------------------------------
Function WMIExecQuery
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sQuery)

    $error.Clear()

	if($useCIM){

		Load-CimModules
		try
		{
			$cimSessionOption = New-CimSessionOption -Protocol DCOM
			$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
			$oQuery = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
		}
		catch
		{
			$oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
		}
		Finally
		{
			Get-CimSession | Remove-CimSession
			$cimsession =$null
			$cimSessionOption = $null 
		}
	}else{
		$oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
	}
    if ($error.Count -gt 0)
    {
        ThrowScriptError ("The Query '" + $sQuery + "' returned an invalid result set.  Please check to see if this is a valid WMI Query.") $error[0]
    }

    return $oQuery
}

#---------------------------------------------------------------------------
# Executes the WMI query and returns the result set, no abort version.
#---------------------------------------------------------------------------
Function WMIExecQueryNoAbort
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sQuery)    
    if($useCIM){
		Load-CimModules
		try
		{
			$cimSessionOption = New-CimSessionOption -Protocol DCOM
			$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
			$oQuery = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
		}
		catch
		{
			$oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue 
		}
		Finally
		{
			Get-CimSession | Remove-CimSession
			$cimsession =$null
			$cimSessionOption = $null 
		}
	}else{
		$oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
	}

    return $oQuery
}

#---------------------------------------------------------------------------
# Creates an event and sends it back to the mom server.
#---------------------------------------------------------------------------
Function ThrowScriptErrorNoAbort
{
    param ([string]$sMessage, 
           [System.Management.Automation.ErrorRecord]$oErr)
    # Retrieve the name of this (running) script
    $ScriptFileName = $MyInvocation.ScriptName
    
    if ($oErr -ne $null)
    {
        $sMessage = $sMessage + ". " + $oErr.ErrorDetails
    }
    
    $momAPI.LogScriptEvent($ScriptFileName, $g_ErrorEventNumber, $EVENT_TYPE_ERROR, $sMessage)
    
    Write-Host $sMessage
}

#---------------------------------------------------------------------------
# Creates an event and sends it back to the mom server.
#---------------------------------------------------------------------------
Function ThrowScriptError
{
    param ([string]$sMessage, 
           [System.Management.Automation.ErrorRecord]$oErr)
    ThrowScriptErrorNoAbort $sMessage $oErr
    exit
}

#---------------------------------------------------------------------------
# Outputs to file and echo for debugging purposes
#---------------------------------------------------------------------------
Function TraceLogMessage
{
    param ([string]$sMessage)

    Write-Host $sMessage
    
    If ($g_DebugFlag -eq $true)
    {
        # Retrieve the name of this (running) script
        $ScriptFileName = $MyInvocation.ScriptName
        
        $momAPI.LogScriptEvent($ScriptFileName, $g_TraceEventNumber, $EVENT_TYPE_INFORMATION, $sMessage)
    }
}

#---------------------------------------------------------------------------
# Verifies the expression. If equals to False then generates an error and quits the script
#   Usage:
#     Verify Not WMISet Is Nothing, "WMISet is invalid!"
#     Verify WMISet.Count = 1, "Invalid quantity of services with name 'Server' (qty = " &amp; WMISet.Count &amp; ")."
#---------------------------------------------------------------------------
Function Verify
{
    param ([bool]$bBool, 
           [string]$sMessage)

    If ($bBool -eq $false)
    {
        ThrowScriptError $sMessage $null
    }
}

Function GetRegistryKeyValue
{
    param ([string]$keyPath, 
           [string]$key)

    $error.Clear()

    $strKeyValue = Get-ItemProperty -Path $keyPath -Name $key -ErrorAction SilentlyContinue
    if ($error.Count -gt 0)
    {
        ThrowScriptError ("An error occurred while reading the registry: '" + $keyPath + $key + "'") $error[0]
    }
    return $strKeyValue.$key
}


#---------------------------------------------------------------------------
# Function: ExpressedInMB
#   Usage:
#     Parameter (SizeInBytes) 
#     Returns the Size Expressed in MBytes
#---------------------------------------------------------------------------
Function ExpressedInMB
{
    param ($SizeInBytes)

    $NumberSizeExpInMB = [math]::Round($SizeInBytes / $DISKSIZE_BYTES_IN_MB, 0)
    return $NumberSizeExpInMB
}

Function Load-CimModules
{
	$error.Clear()

	$CimModule = Get-Module CimCmdlets

	if ($null -eq $CimModule)
	{
			Import-Module CimCmdlets
			$error.Clear()
	}
}#Copyright (c) Microsoft Corporation. All rights reserved.
                      
# Parameters that should be passed to this script
# 0 Computer (FQDN)
# 1 SleepTime - interval (in milliseconds) between samples
# 2 NumberOfSamples

Function Main()
{      
    $lNumProcessors = GetNumProcessors $TargetComputer 
  
    # List processes using more than 1% of processor time (take into account the number of CPU).
    # Sample &lt;NumberOfSamples&gt; times waiting &lt;SleepTime&gt; milliseconds between samples.
    
    $processDictionary = @{}
    for ($i = 1; $i -le $NumberOfSamples; $i++)
    {
        sleep -m $SleepTime

        $PerfProc_Process = WMIGetInstanceEx $TargetComputer "root\cimv2" "Win32_PerfFormattedData_PerfProc_Process"

        foreach ($process in $PerfProc_Process)
        {
            if ($process.Name -ne "_Total" -and $process.Name -ne "Idle") #-and $process.PercentProcessorTime -gt $lNumProcessors)
            {
                $key = $process.Name + "::" + $process.IDProcess
                if ($processDictionary.ContainsKey($key))
                {
                    $processDictionary[$key] = [double]$processDictionary[$key] + [double]$process.PercentProcessorTime
                }
                else
                {
                    $processDictionary[$key] = [double]$process.PercentProcessorTime
                }
            }
        }
    }

    
    # Collected Samples
    
    # Get the keys
    foreach ($key in $($processDictionary.Keys))
    {
        $processDictionary[$key] = [double]$processDictionary[$key] / [double]$NumberOfSamples / [double]$lNumProcessors
    }
    
    # Sort the array
    $sortedProcessDictionary = $processDictionary.GetEnumerator() | Sort-Object -Property Value -Descending
    
    Write-Host "% CPU Time(Avg)	    PID 	     Binary Name	"
    Write-Host "==============================================================================="
    
    for ($i = 0; $i -lt $sortedProcessDictionary.Count; $i++)
    {
        if ($sortedProcessDictionary[$i].Value -le 0)
        {
            break
        }
        $pValue = ([math]::Truncate($sortedProcessDictionary[$i].Value*10) / 10).ToString()
        $pName = ($sortedProcessDictionary[$i].Key -split "::")[0]
        $processid = ($sortedProcessDictionary[$i].Key -split "::")[1]
        $OutPutString = "       " + $pValue + "%"
        for ($j = 0; $j -le (5-$pValue.Length); $j++) { $OutPutString += " " }
        $OutPutString += "          " + $processid
        for ($j = 0; $j -le (8-$processid.Length); $j++) { $OutPutString += " " }
        $OutPutString += "          " + $pName
        Write-Host $OutPutString
    }
}

# Windows Server 2003, Windows XP, and Windows 2000: Because the NumberOfLogicalProcessors property
# is not available, NumberOfProcessors indicates the number of logical processors available in the
# system. In the case of a computer system that has two physical processors each containing two
# logical processors, the value of NumberOfProcessors is 4.
# For more information see "http://msdn2.microsoft.com/en-us/library/aa394102(VS.85).aspx"
Function GetNumProcessors{
    param ([string]$sTargetComputer)

    $WMISet = WMIGetInstanceEx $sTargetComputer "root\cimv2" "Win32_ComputerSystem"
    foreach ($owObj in $WMISet)
    {
        $error.Clear()
        $NumProcessors = $owObj.NumberOfLogicalProcessors
        if ($error.Count -ne 0)
        {
            $NumProcessors = $owObj.NumberOfProcessors
        }
        return $NumProcessors
    }
}

Main
</Contents></File></Files></ProbeAction></MemberModules><Composition><Node ID="TopCPUUsageProbe"/></Composition></Composite></ModuleImplementation><OutputType>System!System.CommandOutput</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.Windows.Server.IsFeatureInstalled.Probe" Accessibility="Public" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:int"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TargetComputerName" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ServerFeature" type="xsd:string"/></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.ScriptPropertyBagProbe"><ScriptName>Microsoft.Windows.Server.IsFeatureInstalled.Probe.vbs</ScriptName><Arguments>$Config/TargetComputerName$ "$Config/ServerFeature$"</Arguments><ScriptBody>'Copyright (c) Microsoft Corporation. All rights reserved.

'*************************************************************************
' $ScriptName: "Microsoft.Windows.Server.Common"$
'
' Purpose: To have one place for common stuff across various BaseOS VBScripts
'
' $File: Microsoft.Windows.Server.Common.vbs$
'*************************************************************************

Option Explicit

SetLocale("en-us")

' LogScripEvent Constants
Const lsEventError                 = 1
Const lsEventWarning               = 2
Const lsEventInformation           = 3

' WMI Constants
Const wbemCimtypeUseDefault        = 0   'Use Default Type CIM type - Custom
Const wbemCimtypeSint16            = 2   'Signed 16-bit integer 
Const wbemCimtypeSint32            = 3   'Signed 32-bit integer 
Const wbemCimtypeReal32            = 4   '32-bit real number 
Const wbemCimtypeReal64            = 5   '64-bit real number 
Const wbemCimtypeString            = 8   'String 
Const wbemCimtypeBoolean           = 11  'Boolean value 
Const wbemCimtypeObject            = 13  'CIM object 
Const wbemCimtypeSint8             = 16  'Signed 8-bit integer 
Const wbemCimtypeUint8             = 17  'Unsigned 8-bit integer 
Const wbemCimtypeUint16            = 18  'Unsigned 16-bit integer 
Const wbemCimtypeUint32            = 19  'Unsigned 32-bit integer 
Const wbemCimtypeSint64            = 20  'Signed 64-bit integer  
Const wbemCimtypeUint64            = 21  'Unsigned 64-bit integer 
Const wbemCimtypeDatetime          = 101 'Date/time value 
Const wbemCimtypeReference         = 102 'Reference to a CIM object 
Const wbemCimtypeChar16            = 103 '16-bit character 

Const ErrAction_None               = 0
Const ErrAction_Trace              = 1
Const ErrAction_ThrowError         = 16
Const ErrAction_Abort              = 32
Const ErrAction_ThrowErrorAndAbort = 48

Const DISKSIZE_BYTES_IN_MB = 1048576

Dim g_ErrorEventNumber, g_TraceEventNumber, g_DebugFlag
g_ErrorEventNumber = 4001
g_TraceEventNumber = 4002
g_DebugFlag = False

'---------------------------------------------------------------------------
' Returns WMI Instance requested. Tries to execute WMI query a N times.
'---------------------------------------------------------------------------
Function WMIGetInstanceExTryN(oWMI, ByVal sInstance, ByVal N)
    Dim oInstance, nInstanceCount
    Dim e, i
    Set e = New Error

    For i = 0 To i &lt; N
        On Error Resume Next
        Set oInstance = oWMI.InstancesOf(sInstance)
        e.Save
        On Error Goto 0
        If IsEmpty(oInstance) Or e.Number &lt;&gt; 0 Then
            If i = N - 1 Then
                ThrowScriptError "The class name '" &amp; sInstance &amp; "' returned no instances.  Please check to see if this is a valid WMI class name.", e
            End If
        Else
            On Error Resume Next
            nInstanceCount = oInstance.Count
            e.Save
            On Error Goto 0
            If e.Number &lt;&gt; 0 Then
                If i = N - 1 Then
                    ThrowScriptError "The class name '" &amp; sInstance &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI class name.", e
                End If
            Else
                Exit For
            End If
        End If
        WScript.Sleep(1000)
    Next

    Set WMIGetInstanceExTryN = oInstance
End Function

'---------------------------------------------------------------------------
' Returns WMI Instance requested.
'---------------------------------------------------------------------------
Function WMIGetInstanceEx(oWMI, ByVal sInstance)
    Dim oInstance, nInstanceCount
    Dim e
    Set e = New Error

    On Error Resume Next
    Set oInstance = oWMI.InstancesOf(sInstance)
    e.Save
    On Error Goto 0
    If IsEmpty(oInstance) Or e.Number &lt;&gt; 0 Then
        ThrowScriptError "The class name '" &amp; sInstance &amp; "' returned no instances.  Please check to see if this is a valid WMI class name.", e
    End If

    'Determine if we queried a valid WMI class - Count will return 0 or empty
    On Error Resume Next
    nInstanceCount = oInstance.Count
    e.Save
    On Error Goto 0
    If e.Number &lt;&gt; 0 Then
        ThrowScriptError "The class name '" &amp; sInstance &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI class name.", e
    End If

    Set WMIGetInstanceEx = oInstance
End Function

'---------------------------------------------------------------------------
' Connect to WMI.
'---------------------------------------------------------------------------
Function WMIConnect(ByVal sNamespace)
    Dim oWMI
    Dim e
    Set e = New Error
    On Error Resume Next
    Set oWMI = GetObject(sNamespace)
    e.Save
    On Error Goto 0
    If IsEmpty(oWMI) Then
        ThrowScriptError "Unable to open WMI Namespace '" &amp; sNamespace &amp; "'. Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists.", e
    End If
    Set WMIConnect = oWMI
End Function

'---------------------------------------------------------------------------
' Returns WMI Instance requested.
'---------------------------------------------------------------------------
Function WMIGetInstance(ByVal sNamespace, ByVal sInstance)
    Dim oWMI, oInstance
    Set oWMI = WMIConnect(sNamespace)
    Set oInstance = WMIGetInstanceEx(oWMI, sInstance)
    Set WMIGetInstance = oInstance
End Function

'---------------------------------------------------------------------------
' Returns WMI Instance requested.
'---------------------------------------------------------------------------
Function WMIGetInstanceNoAbort(ByVal sNamespace, ByVal sInstance)
    Dim oWMI, oInstance, nInstanceCount
    
    On Error Resume Next
    Set oWMI = GetObject(sNamespace)
    If Not IsEmpty(oWMI) Then
        Set oInstance = oWMI.InstancesOf(sInstance)
        If Not IsEmpty(oInstance) And Err.Number = 0 Then
            'Determine if we queried a valid WMI class - Count will return 0 or empty
            nInstanceCount = oInstance.Count
            If Err.Number = 0 Then
                Set WMIGetInstanceNoAbort = oInstance
                On Error Goto 0
                Exit Function
            End If
        End If
    End If
    
    On Error Goto 0
    Set WMIGetInstanceNoAbort = Nothing
End Function

'---------------------------------------------------------------------------
' Executes the WMI query and returns the result set.
'---------------------------------------------------------------------------
Function WMIExecQuery(ByVal sNamespace, ByVal sQuery)
    Dim oWMI, oQuery, nInstanceCount
    Dim e
    Set e = New Error
    On Error Resume Next
    Set oWMI = GetObject(sNamespace)
    e.Save
    On Error Goto 0
    If IsEmpty(oWMI) Then
        ThrowScriptError "Unable to open WMI Namespace '" &amp; sNamespace &amp; "'.  Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists.", e
    End If

    On Error Resume Next
    Set oQuery = oWMI.ExecQuery(sQuery)
    e.Save
    On Error Goto 0
    If IsEmpty(oQuery) Or e.Number &lt;&gt; 0 Then
        ThrowScriptError "The Query '" &amp; sQuery &amp; "' returned an invalid result set.  Please check to see if this is a valid WMI Query.", e
    End If

    'Determine if we queried a valid WMI class - Count will return 0 or empty
    On Error Resume Next
    nInstanceCount = oQuery.Count
    e.Save
    On Error Goto 0
    If e.Number &lt;&gt; 0 Then
        ThrowScriptError "The Query '" &amp; sQuery &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI Query.", e
    End If

    Set WMIExecQuery = oQuery
End Function

'---------------------------------------------------------------------------
' Executes the WMI query and returns the result set, no abort version.
'---------------------------------------------------------------------------
Function WMIExecQueryNoAbort(ByVal sNamespace, ByVal sQuery)
    Dim oWMI, oQuery
    Set oWMI = GetObject(sNamespace)
    Set oQuery = oWMI.ExecQuery(sQuery)
    Set WMIExecQueryNoAbort = oQuery
End Function

'---------------------------------------------------------------------------
' Retrieves WMI property.
'---------------------------------------------------------------------------
Function GetWMIProperty(oWmi, sPropName, nCIMType, ErrAction)
    Dim sValue, oWmiProp, oError
    Set oError = New Error
    
    ' Check that object is valid.
    If Not IsValidObject(oWmi) Then
        If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
            ThrowScriptErrorNoAbort "Accessing property on invalid WMI object.", oError
        If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
            Quit()
        
        GetWMIProperty = ""
        Exit Function
    End If
    
    ' Get properties...
    On Error Resume Next
    Set oWmiProp = oWmi.Properties_.Item(sPropName)
    oError.Save
    If oError.Number &lt;&gt; 0 Then
        If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
            ThrowScriptErrorNoAbort "An error occurred while accessing WMI property: '" &amp; sPropName &amp; "'.", oError
        If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
            Quit()
    End If
    On Error Goto 0
    
    If IsValidObject(oWmiProp) Then
        sValue = oWmiProp.Value
        
        If IsNull(sValue) Then ' If value is null, return blank to avoid any issues
            GetWMIProperty = ""
        Else
            Select Case (oWmiProp.CIMType)
                Case wbemCimtypeString, wbemCimtypeSint16, wbemCimtypeSint32, wbemCimtypeReal32, wbemCimtypeReal64, wbemCimtypeSint8, wbemCimtypeUint8, wbemCimtypeUint16, wbemCimtypeUint32, wbemCimtypeSint64, wbemCimtypeUint64:
                    If Not oWmiProp.IsArray Then
                        GetWMIProperty = Trim(CStr(sValue))
                    Else
                        GetWMIProperty = Join(sValue, ", ")
                    End If
                Case wbemCimtypeBoolean:
                    If sValue = 1 Or UCase(sValue) = "TRUE" Then
                        GetWMIProperty = "True"
                    Else
                        GetWMIProperty = "False"
                    End If	
                Case wbemCimtypeDatetime:
                    Dim sTmpStrDate
                    
                    ' First attempt to convert the whole wmi date string
                    sTmpStrDate = Mid(sValue, 5, 2) &amp; "/" &amp; _
                            Mid(sValue, 7, 2) &amp; "/" &amp; _
                            Left(sValue, 4) &amp; " " &amp; _
                            Mid (sValue, 9, 2) &amp; ":" &amp; _
                            Mid(sValue, 11, 2) &amp; ":" &amp; _
                            Mid(sValue, 13, 2)
                    If IsDate(sTmpStrDate) Then
                        GetWMIProperty = CDate(sTmpStrDate)
                    Else
                        ' Second, attempt just to convert the YYYYMMDD 
                        sTmpStrDate = Mid(sValue, 5, 2) &amp; "/" &amp; _
                                Mid(sValue, 7, 2) &amp; "/" &amp; _
                                Left(sValue, 4)
                        If IsDate(sTmpStrDate) Then
                            GetWMIProperty = CDate(sTmpStrDate)
                        Else
                            ' Nothing works - return passed in string 
                            GetWMIProperty = sValue
                        End If
                    End If
                Case Else:
                    GetWMIProperty = ""
            End Select
        End If
    Else
        If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
            ThrowScriptErrorNoAbort "An error occurred while accessing WMI property: '" &amp; sPropName &amp; "'.", oError
        If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
            Quit()
        
        GetWMIProperty = ""
    End If
    
    If (ErrAction And ErrAction_Trace) = ErrAction_Trace Then _
        WScript.Echo "  + " &amp; sPropName &amp; " :: '" &amp; GetWMIProperty &amp; "'"
End Function

'---------------------------------------------------------------------------
' Class for error handling.
'---------------------------------------------------------------------------
Class Error
    Private m_lNumber
    Private m_sSource
    Private m_sDescription
    Private m_sHelpContext
    Private m_sHelpFile
    Public Sub Save()
        m_lNumber = Err.number
        m_sSource = Err.Source
        m_sDescription = Err.Description
        m_sHelpContext = Err.HelpContext
        m_sHelpFile = Err.helpfile
    End Sub
    Public Sub Raise()
        Err.Raise m_lNumber, m_sSource, m_sDescription, m_sHelpFile, m_sHelpContext
    End Sub
    Public Sub Clear()
        m_lNumber = 0
        m_sSource = ""
        m_sDescription = ""
        m_sHelpContext = ""
        m_sHelpFile = ""
    End Sub
    Public Default Property Get Number()
        Number = m_lNumber
    End Property
    Public Property Get Source()
        Source = m_sSource
    End Property
    Public Property Get Description()
        Description = m_sDescription
    End Property
    Public Property Get HelpContext()
        HelpContext = m_sHelpContext
    End Property
    Public Property Get HelpFile()
        HelpFile = m_sHelpFile
    End Property    
End Class

'---------------------------------------------------------------------------
' Creates an event and sends it back to the mom server.
'---------------------------------------------------------------------------
Function ThrowScriptErrorNoAbort(ByVal sMessage, ByVal oErr)
    ' Retrieve the name of this (running) script
    Dim FSO, ScriptFileName
    Set FSO = CreateObject("Scripting.FileSystemObject")
    ScriptFileName = FSO.GetFile(WScript.ScriptFullName).Name
    Set FSO = Nothing
    
    If Not IsNull(oErr) Then _
        sMessage = sMessage &amp; ". " &amp; oErr.Description
    
    On Error Resume Next
    Dim oAPITemp
    Set oAPITemp = CreateObject("MOM.ScriptAPI")
    oAPITemp.LogScriptEvent ScriptFileName, g_ErrorEventNumber, lsEventError, sMessage
    On Error Goto 0
    
    WScript.Echo sMessage
End Function

'---------------------------------------------------------------------------
' Creates an event and sends it back to the mom server.
'---------------------------------------------------------------------------
Function ThrowScriptError(Byval sMessage, ByVal oErr)
    On Error Resume Next
    ThrowScriptErrorNoAbort sMessage, oErr
    Quit()
End Function

'---------------------------------------------------------------------------
' Creates automation objects and returns it.
'---------------------------------------------------------------------------
Function MomCreateObject(ByVal sProgramId)
    Dim oError
    Set oError = New Error
    
    On Error Resume Next
    Set MomCreateObject = CreateObject(sProgramId)
    oError.Save
    On Error Goto 0
    
    If oError.Number &lt;&gt; 0 Then
        ThrowScriptError "Unable to create automation object '" &amp; sProgramId &amp; "'", oError
    End If
End Function

'---------------------------------------------------------------------------
' Quits the script.
'---------------------------------------------------------------------------
Function Quit()
    WScript.Quit()
End Function

'---------------------------------------------------------------------------
' Checks whether oObject is valid.
'---------------------------------------------------------------------------
Function IsValidObject(ByVal oObject)
    IsValidObject = False
    If IsObject(oObject) Then
        If Not oObject Is Nothing Then
            IsValidObject = True
        End If
    End If
End Function

'---------------------------------------------------------------------------
' Outputs arguments for debugging purposes
'---------------------------------------------------------------------------
Function TraceLogArguments
    Dim oArgs
    Set oArgs = WScript.Arguments
    Dim i, sArgs
    For i = 0 To oArgs.Count - 1
        sArgs = sArgs &amp; " {" &amp; oArgs(i) &amp; "}"
    Next
    TraceLogMessage "Arguments:" &amp; sArgs
End Function

'---------------------------------------------------------------------------
' Verifies that number of arguments is correct
'---------------------------------------------------------------------------
Function VerifyNumberOfArguments(ByVal NumberOfArguments)
    Dim oArgs
    Set oArgs = WScript.Arguments
    If oArgs.Count &lt;&gt; NumberOfArguments Then
       Dim i, sArgs
       For i = 0 To oArgs.Count - 1
           sArgs = sArgs &amp; " {" &amp; oArgs(i) &amp; "}"
       Next
       ThrowScriptError "Invalid number of arguments (" &amp; oArgs.Count &amp; " instead of " &amp; NumberOfArguments &amp; "). Arguments:" &amp; sArgs, Null
    End If
End Function

'---------------------------------------------------------------------------
' Outputs to file and echo for debugging purposes
'---------------------------------------------------------------------------
Function TraceLogMessage(ByVal sMessage)
    WScript.Echo sMessage
    
    If g_DebugFlag = True Then
        ' Retrieve the name of this (running) script
        Dim FSO, ScriptFileName
        Set FSO = CreateObject("Scripting.FileSystemObject")
        ScriptFileName = FSO.GetFile(WScript.ScriptFullName).Name
        Set FSO = Nothing
        
        On Error Resume Next
        Dim oAPITemp
        Set oAPITemp = MOMCreateObject("MOM.ScriptAPI")
        oAPITemp.LogScriptEvent ScriptFileName, g_TraceEventNumber, lsEventInformation, sMessage
        On Error Goto 0
    End If
End Function

'---------------------------------------------------------------------------
' Verifies the expression. If equals to False then generates an error and quits the script
'   Usage:
'     Verify Not WMISet Is Nothing, "WMISet is invalid!"
'     Verify WMISet.Count = 1, "Invalid quantity of services with name 'Server' (qty = " &amp; WMISet.Count &amp; ")."
'---------------------------------------------------------------------------
Function Verify(ByVal bBool, ByVal sMessage)
    If bBool = False Then
        ThrowScriptError sMessage, Null
    End If
End Function


Function GetRegistryKeyValue(ByVal keyPath, ByVal key)
Dim oReg, strKeyValue

Set oReg = MOMCreateObject("WScript.Shell")
On Error Resume Next

strKeyValue = oReg.RegRead(keyPath &amp; key)
If Err.Number &lt;&gt; 0 Then
	ThrowScriptError "An error occurred while reading the registry: '" &amp; keyPath &amp; key &amp; "'", Err.Description 
    strKeyValue = ""
End If

' resume error
On Error Goto 0

GetRegistryKeyValue = strKeyValue
End Function

'---------------------------------------------------------------------------
' Function: ExpressedInMB
'   Usage:
'     Parameter (SizeInBytes) 
'     Returns the Size Expressed in MBytes
'---------------------------------------------------------------------------
Function ExpressedInMB(byref SizeInBytes)
   Dim NumberSizeExpInMB
   NumberSizeExpInMB = Round(SizeInBytes / DISKSIZE_BYTES_IN_MB, 0)
   ExpressedInMB = NumberSizeExpInMB
End Function
'Copyright (c) Microsoft Corporation. All rights reserved.
                      
' Parameters that should be passed to this script
' 0 Computer (FQDN)
' 1 Server Feature ID or Name

Call Main()

Sub Main()
    VerifyNumberOfArguments(2)
    
    Dim TargetComputer, ServerFeature
    Dim oArgs
    Set oArgs = WScript.Arguments
    TargetComputer = oArgs(0)
    ServerFeature = oArgs(1)
    
    Dim oWMI
    Set oWMI = WMIConnect("winmgmts:\\" &amp; TargetComputer &amp; "\root\cimv2")
    
    Dim WMISet, owObj
    If IsValidInteger(ServerFeature) Then
        Set WMISet = WMIGetInstanceExTryN(oWMI, "Win32_ServerFeature where ID='" &amp; ServerFeature &amp; "'", 5)
    Else
        Set WMISet = WMIGetInstanceExTryN(oWMI, "Win32_ServerFeature where Name='" &amp; ServerFeature &amp; "'", 5)
    End If
    For Each owObj In WMISet
        ReturnResults "TRUE"
        Exit Sub
    Next

    ReturnResults "FALSE"
End Sub

Sub ReturnResults(ByVal IsFeatureInstalled)
    Dim oAPI, oBag
    Set oAPI = MOMCreateObject("MOM.ScriptAPI")
    Set oBag = oAPI.CreatePropertyBag()
    oBag.AddValue "IsFeatureInstalled", IsFeatureInstalled
    oAPI.AddItem oBag
    oAPI.ReturnItems
End Sub

Function IsValidInteger(ByVal str)
    Dim i, length,c
    length = Len(str)
    For i = 1 to length
        c = Mid(str, i, 1)
        Select Case c
            case "0"
            case "1"
            case "2"
            case "3"
            case "4"
            case "5"
            case "6"
            case "7"
            case "8"
            case "9"
            case else
                IsValidInteger = false
                Exit Function
        End Select
    Next
    IsValidInteger = true
End Function
</ScriptBody><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction><ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter"><Expression><RegExExpression><ValueExpression><XPathQuery>Property[@Name='IsFeatureInstalled']</XPathQuery></ValueExpression><Operator>ContainsSubstring</Operator><Pattern>TRUE</Pattern></RegExExpression></Expression></ConditionDetection></MemberModules><Composition><Node ID="Filter"><Node ID="PA"/></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.Windows.Server.TopCPUUsage.ProbeAction" Accessibility="Public" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalMilliseconds" type="xsd:int"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="NumSamples" type="xsd:int"/></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalMilliseconds" Selector="$Config/IntervalMilliseconds$" ParameterType="int"/><OverrideableParameter ID="NumSamples" Selector="$Config/NumSamples$" ParameterType="int"/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.ScriptProbeAction"><ScriptName>Microsoft.Windows.Server.TopCPUUsage.vbs</ScriptName><Arguments>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$ $Config/IntervalMilliseconds$ $Config/NumSamples$</Arguments><ScriptBody>'Copyright (c) Microsoft Corporation. All rights reserved.

'*************************************************************************
' $ScriptName: "Microsoft.Windows.Server.Common"$
'
' Purpose: To have one place for common stuff across various BaseOS VBScripts
'
' $File: Microsoft.Windows.Server.Common.vbs$
'*************************************************************************

Option Explicit

SetLocale("en-us")

' LogScripEvent Constants
Const lsEventError                 = 1
Const lsEventWarning               = 2
Const lsEventInformation           = 3

' WMI Constants
Const wbemCimtypeUseDefault        = 0   'Use Default Type CIM type - Custom
Const wbemCimtypeSint16            = 2   'Signed 16-bit integer 
Const wbemCimtypeSint32            = 3   'Signed 32-bit integer 
Const wbemCimtypeReal32            = 4   '32-bit real number 
Const wbemCimtypeReal64            = 5   '64-bit real number 
Const wbemCimtypeString            = 8   'String 
Const wbemCimtypeBoolean           = 11  'Boolean value 
Const wbemCimtypeObject            = 13  'CIM object 
Const wbemCimtypeSint8             = 16  'Signed 8-bit integer 
Const wbemCimtypeUint8             = 17  'Unsigned 8-bit integer 
Const wbemCimtypeUint16            = 18  'Unsigned 16-bit integer 
Const wbemCimtypeUint32            = 19  'Unsigned 32-bit integer 
Const wbemCimtypeSint64            = 20  'Signed 64-bit integer  
Const wbemCimtypeUint64            = 21  'Unsigned 64-bit integer 
Const wbemCimtypeDatetime          = 101 'Date/time value 
Const wbemCimtypeReference         = 102 'Reference to a CIM object 
Const wbemCimtypeChar16            = 103 '16-bit character 

Const ErrAction_None               = 0
Const ErrAction_Trace              = 1
Const ErrAction_ThrowError         = 16
Const ErrAction_Abort              = 32
Const ErrAction_ThrowErrorAndAbort = 48

Const DISKSIZE_BYTES_IN_MB = 1048576

Dim g_ErrorEventNumber, g_TraceEventNumber, g_DebugFlag
g_ErrorEventNumber = 4001
g_TraceEventNumber = 4002
g_DebugFlag = False

'---------------------------------------------------------------------------
' Returns WMI Instance requested. Tries to execute WMI query a N times.
'---------------------------------------------------------------------------
Function WMIGetInstanceExTryN(oWMI, ByVal sInstance, ByVal N)
    Dim oInstance, nInstanceCount
    Dim e, i
    Set e = New Error

    For i = 0 To i &lt; N
        On Error Resume Next
        Set oInstance = oWMI.InstancesOf(sInstance)
        e.Save
        On Error Goto 0
        If IsEmpty(oInstance) Or e.Number &lt;&gt; 0 Then
            If i = N - 1 Then
                ThrowScriptError "The class name '" &amp; sInstance &amp; "' returned no instances.  Please check to see if this is a valid WMI class name.", e
            End If
        Else
            On Error Resume Next
            nInstanceCount = oInstance.Count
            e.Save
            On Error Goto 0
            If e.Number &lt;&gt; 0 Then
                If i = N - 1 Then
                    ThrowScriptError "The class name '" &amp; sInstance &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI class name.", e
                End If
            Else
                Exit For
            End If
        End If
        WScript.Sleep(1000)
    Next

    Set WMIGetInstanceExTryN = oInstance
End Function

'---------------------------------------------------------------------------
' Returns WMI Instance requested.
'---------------------------------------------------------------------------
Function WMIGetInstanceEx(oWMI, ByVal sInstance)
    Dim oInstance, nInstanceCount
    Dim e
    Set e = New Error

    On Error Resume Next
    Set oInstance = oWMI.InstancesOf(sInstance)
    e.Save
    On Error Goto 0
    If IsEmpty(oInstance) Or e.Number &lt;&gt; 0 Then
        ThrowScriptError "The class name '" &amp; sInstance &amp; "' returned no instances.  Please check to see if this is a valid WMI class name.", e
    End If

    'Determine if we queried a valid WMI class - Count will return 0 or empty
    On Error Resume Next
    nInstanceCount = oInstance.Count
    e.Save
    On Error Goto 0
    If e.Number &lt;&gt; 0 Then
        ThrowScriptError "The class name '" &amp; sInstance &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI class name.", e
    End If

    Set WMIGetInstanceEx = oInstance
End Function

'---------------------------------------------------------------------------
' Connect to WMI.
'---------------------------------------------------------------------------
Function WMIConnect(ByVal sNamespace)
    Dim oWMI
    Dim e
    Set e = New Error
    On Error Resume Next
    Set oWMI = GetObject(sNamespace)
    e.Save
    On Error Goto 0
    If IsEmpty(oWMI) Then
        ThrowScriptError "Unable to open WMI Namespace '" &amp; sNamespace &amp; "'. Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists.", e
    End If
    Set WMIConnect = oWMI
End Function

'---------------------------------------------------------------------------
' Returns WMI Instance requested.
'---------------------------------------------------------------------------
Function WMIGetInstance(ByVal sNamespace, ByVal sInstance)
    Dim oWMI, oInstance
    Set oWMI = WMIConnect(sNamespace)
    Set oInstance = WMIGetInstanceEx(oWMI, sInstance)
    Set WMIGetInstance = oInstance
End Function

'---------------------------------------------------------------------------
' Returns WMI Instance requested.
'---------------------------------------------------------------------------
Function WMIGetInstanceNoAbort(ByVal sNamespace, ByVal sInstance)
    Dim oWMI, oInstance, nInstanceCount
    
    On Error Resume Next
    Set oWMI = GetObject(sNamespace)
    If Not IsEmpty(oWMI) Then
        Set oInstance = oWMI.InstancesOf(sInstance)
        If Not IsEmpty(oInstance) And Err.Number = 0 Then
            'Determine if we queried a valid WMI class - Count will return 0 or empty
            nInstanceCount = oInstance.Count
            If Err.Number = 0 Then
                Set WMIGetInstanceNoAbort = oInstance
                On Error Goto 0
                Exit Function
            End If
        End If
    End If
    
    On Error Goto 0
    Set WMIGetInstanceNoAbort = Nothing
End Function

'---------------------------------------------------------------------------
' Executes the WMI query and returns the result set.
'---------------------------------------------------------------------------
Function WMIExecQuery(ByVal sNamespace, ByVal sQuery)
    Dim oWMI, oQuery, nInstanceCount
    Dim e
    Set e = New Error
    On Error Resume Next
    Set oWMI = GetObject(sNamespace)
    e.Save
    On Error Goto 0
    If IsEmpty(oWMI) Then
        ThrowScriptError "Unable to open WMI Namespace '" &amp; sNamespace &amp; "'.  Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists.", e
    End If

    On Error Resume Next
    Set oQuery = oWMI.ExecQuery(sQuery)
    e.Save
    On Error Goto 0
    If IsEmpty(oQuery) Or e.Number &lt;&gt; 0 Then
        ThrowScriptError "The Query '" &amp; sQuery &amp; "' returned an invalid result set.  Please check to see if this is a valid WMI Query.", e
    End If

    'Determine if we queried a valid WMI class - Count will return 0 or empty
    On Error Resume Next
    nInstanceCount = oQuery.Count
    e.Save
    On Error Goto 0
    If e.Number &lt;&gt; 0 Then
        ThrowScriptError "The Query '" &amp; sQuery &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI Query.", e
    End If

    Set WMIExecQuery = oQuery
End Function

'---------------------------------------------------------------------------
' Executes the WMI query and returns the result set, no abort version.
'---------------------------------------------------------------------------
Function WMIExecQueryNoAbort(ByVal sNamespace, ByVal sQuery)
    Dim oWMI, oQuery
    Set oWMI = GetObject(sNamespace)
    Set oQuery = oWMI.ExecQuery(sQuery)
    Set WMIExecQueryNoAbort = oQuery
End Function

'---------------------------------------------------------------------------
' Retrieves WMI property.
'---------------------------------------------------------------------------
Function GetWMIProperty(oWmi, sPropName, nCIMType, ErrAction)
    Dim sValue, oWmiProp, oError
    Set oError = New Error
    
    ' Check that object is valid.
    If Not IsValidObject(oWmi) Then
        If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
            ThrowScriptErrorNoAbort "Accessing property on invalid WMI object.", oError
        If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
            Quit()
        
        GetWMIProperty = ""
        Exit Function
    End If
    
    ' Get properties...
    On Error Resume Next
    Set oWmiProp = oWmi.Properties_.Item(sPropName)
    oError.Save
    If oError.Number &lt;&gt; 0 Then
        If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
            ThrowScriptErrorNoAbort "An error occurred while accessing WMI property: '" &amp; sPropName &amp; "'.", oError
        If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
            Quit()
    End If
    On Error Goto 0
    
    If IsValidObject(oWmiProp) Then
        sValue = oWmiProp.Value
        
        If IsNull(sValue) Then ' If value is null, return blank to avoid any issues
            GetWMIProperty = ""
        Else
            Select Case (oWmiProp.CIMType)
                Case wbemCimtypeString, wbemCimtypeSint16, wbemCimtypeSint32, wbemCimtypeReal32, wbemCimtypeReal64, wbemCimtypeSint8, wbemCimtypeUint8, wbemCimtypeUint16, wbemCimtypeUint32, wbemCimtypeSint64, wbemCimtypeUint64:
                    If Not oWmiProp.IsArray Then
                        GetWMIProperty = Trim(CStr(sValue))
                    Else
                        GetWMIProperty = Join(sValue, ", ")
                    End If
                Case wbemCimtypeBoolean:
                    If sValue = 1 Or UCase(sValue) = "TRUE" Then
                        GetWMIProperty = "True"
                    Else
                        GetWMIProperty = "False"
                    End If	
                Case wbemCimtypeDatetime:
                    Dim sTmpStrDate
                    
                    ' First attempt to convert the whole wmi date string
                    sTmpStrDate = Mid(sValue, 5, 2) &amp; "/" &amp; _
                            Mid(sValue, 7, 2) &amp; "/" &amp; _
                            Left(sValue, 4) &amp; " " &amp; _
                            Mid (sValue, 9, 2) &amp; ":" &amp; _
                            Mid(sValue, 11, 2) &amp; ":" &amp; _
                            Mid(sValue, 13, 2)
                    If IsDate(sTmpStrDate) Then
                        GetWMIProperty = CDate(sTmpStrDate)
                    Else
                        ' Second, attempt just to convert the YYYYMMDD 
                        sTmpStrDate = Mid(sValue, 5, 2) &amp; "/" &amp; _
                                Mid(sValue, 7, 2) &amp; "/" &amp; _
                                Left(sValue, 4)
                        If IsDate(sTmpStrDate) Then
                            GetWMIProperty = CDate(sTmpStrDate)
                        Else
                            ' Nothing works - return passed in string 
                            GetWMIProperty = sValue
                        End If
                    End If
                Case Else:
                    GetWMIProperty = ""
            End Select
        End If
    Else
        If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
            ThrowScriptErrorNoAbort "An error occurred while accessing WMI property: '" &amp; sPropName &amp; "'.", oError
        If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
            Quit()
        
        GetWMIProperty = ""
    End If
    
    If (ErrAction And ErrAction_Trace) = ErrAction_Trace Then _
        WScript.Echo "  + " &amp; sPropName &amp; " :: '" &amp; GetWMIProperty &amp; "'"
End Function

'---------------------------------------------------------------------------
' Class for error handling.
'---------------------------------------------------------------------------
Class Error
    Private m_lNumber
    Private m_sSource
    Private m_sDescription
    Private m_sHelpContext
    Private m_sHelpFile
    Public Sub Save()
        m_lNumber = Err.number
        m_sSource = Err.Source
        m_sDescription = Err.Description
        m_sHelpContext = Err.HelpContext
        m_sHelpFile = Err.helpfile
    End Sub
    Public Sub Raise()
        Err.Raise m_lNumber, m_sSource, m_sDescription, m_sHelpFile, m_sHelpContext
    End Sub
    Public Sub Clear()
        m_lNumber = 0
        m_sSource = ""
        m_sDescription = ""
        m_sHelpContext = ""
        m_sHelpFile = ""
    End Sub
    Public Default Property Get Number()
        Number = m_lNumber
    End Property
    Public Property Get Source()
        Source = m_sSource
    End Property
    Public Property Get Description()
        Description = m_sDescription
    End Property
    Public Property Get HelpContext()
        HelpContext = m_sHelpContext
    End Property
    Public Property Get HelpFile()
        HelpFile = m_sHelpFile
    End Property    
End Class

'---------------------------------------------------------------------------
' Creates an event and sends it back to the mom server.
'---------------------------------------------------------------------------
Function ThrowScriptErrorNoAbort(ByVal sMessage, ByVal oErr)
    ' Retrieve the name of this (running) script
    Dim FSO, ScriptFileName
    Set FSO = CreateObject("Scripting.FileSystemObject")
    ScriptFileName = FSO.GetFile(WScript.ScriptFullName).Name
    Set FSO = Nothing
    
    If Not IsNull(oErr) Then _
        sMessage = sMessage &amp; ". " &amp; oErr.Description
    
    On Error Resume Next
    Dim oAPITemp
    Set oAPITemp = CreateObject("MOM.ScriptAPI")
    oAPITemp.LogScriptEvent ScriptFileName, g_ErrorEventNumber, lsEventError, sMessage
    On Error Goto 0
    
    WScript.Echo sMessage
End Function

'---------------------------------------------------------------------------
' Creates an event and sends it back to the mom server.
'---------------------------------------------------------------------------
Function ThrowScriptError(Byval sMessage, ByVal oErr)
    On Error Resume Next
    ThrowScriptErrorNoAbort sMessage, oErr
    Quit()
End Function

'---------------------------------------------------------------------------
' Creates automation objects and returns it.
'---------------------------------------------------------------------------
Function MomCreateObject(ByVal sProgramId)
    Dim oError
    Set oError = New Error
    
    On Error Resume Next
    Set MomCreateObject = CreateObject(sProgramId)
    oError.Save
    On Error Goto 0
    
    If oError.Number &lt;&gt; 0 Then
        ThrowScriptError "Unable to create automation object '" &amp; sProgramId &amp; "'", oError
    End If
End Function

'---------------------------------------------------------------------------
' Quits the script.
'---------------------------------------------------------------------------
Function Quit()
    WScript.Quit()
End Function

'---------------------------------------------------------------------------
' Checks whether oObject is valid.
'---------------------------------------------------------------------------
Function IsValidObject(ByVal oObject)
    IsValidObject = False
    If IsObject(oObject) Then
        If Not oObject Is Nothing Then
            IsValidObject = True
        End If
    End If
End Function

'---------------------------------------------------------------------------
' Outputs arguments for debugging purposes
'---------------------------------------------------------------------------
Function TraceLogArguments
    Dim oArgs
    Set oArgs = WScript.Arguments
    Dim i, sArgs
    For i = 0 To oArgs.Count - 1
        sArgs = sArgs &amp; " {" &amp; oArgs(i) &amp; "}"
    Next
    TraceLogMessage "Arguments:" &amp; sArgs
End Function

'---------------------------------------------------------------------------
' Verifies that number of arguments is correct
'---------------------------------------------------------------------------
Function VerifyNumberOfArguments(ByVal NumberOfArguments)
    Dim oArgs
    Set oArgs = WScript.Arguments
    If oArgs.Count &lt;&gt; NumberOfArguments Then
       Dim i, sArgs
       For i = 0 To oArgs.Count - 1
           sArgs = sArgs &amp; " {" &amp; oArgs(i) &amp; "}"
       Next
       ThrowScriptError "Invalid number of arguments (" &amp; oArgs.Count &amp; " instead of " &amp; NumberOfArguments &amp; "). Arguments:" &amp; sArgs, Null
    End If
End Function

'---------------------------------------------------------------------------
' Outputs to file and echo for debugging purposes
'---------------------------------------------------------------------------
Function TraceLogMessage(ByVal sMessage)
    WScript.Echo sMessage
    
    If g_DebugFlag = True Then
        ' Retrieve the name of this (running) script
        Dim FSO, ScriptFileName
        Set FSO = CreateObject("Scripting.FileSystemObject")
        ScriptFileName = FSO.GetFile(WScript.ScriptFullName).Name
        Set FSO = Nothing
        
        On Error Resume Next
        Dim oAPITemp
        Set oAPITemp = MOMCreateObject("MOM.ScriptAPI")
        oAPITemp.LogScriptEvent ScriptFileName, g_TraceEventNumber, lsEventInformation, sMessage
        On Error Goto 0
    End If
End Function

'---------------------------------------------------------------------------
' Verifies the expression. If equals to False then generates an error and quits the script
'   Usage:
'     Verify Not WMISet Is Nothing, "WMISet is invalid!"
'     Verify WMISet.Count = 1, "Invalid quantity of services with name 'Server' (qty = " &amp; WMISet.Count &amp; ")."
'---------------------------------------------------------------------------
Function Verify(ByVal bBool, ByVal sMessage)
    If bBool = False Then
        ThrowScriptError sMessage, Null
    End If
End Function


Function GetRegistryKeyValue(ByVal keyPath, ByVal key)
Dim oReg, strKeyValue

Set oReg = MOMCreateObject("WScript.Shell")
On Error Resume Next

strKeyValue = oReg.RegRead(keyPath &amp; key)
If Err.Number &lt;&gt; 0 Then
	ThrowScriptError "An error occurred while reading the registry: '" &amp; keyPath &amp; key &amp; "'", Err.Description 
    strKeyValue = ""
End If

' resume error
On Error Goto 0

GetRegistryKeyValue = strKeyValue
End Function

'---------------------------------------------------------------------------
' Function: ExpressedInMB
'   Usage:
'     Parameter (SizeInBytes) 
'     Returns the Size Expressed in MBytes
'---------------------------------------------------------------------------
Function ExpressedInMB(byref SizeInBytes)
   Dim NumberSizeExpInMB
   NumberSizeExpInMB = Round(SizeInBytes / DISKSIZE_BYTES_IN_MB, 0)
   ExpressedInMB = NumberSizeExpInMB
End Function
'Copyright (c) Microsoft Corporation. All rights reserved.
                      
' Parameters that should be passed to this script
' 0 Computer (FQDN)
' 1 SleepTime - interval (in milliseconds) between samples
' 2 NumberOfSamples

SetLocale("en-us")

Call Main()

Sub Main()
    VerifyNumberOfArguments(3)
    
    Dim oArgs
    Set oArgs = WScript.Arguments
    Dim TargetComputer, SleepTime, NumberOfSamples
    TargetComputer = oArgs(0)
    SleepTime = oArgs(1)
    NumberOfSamples = oArgs(2)
    
    Dim objRefresher, oWMI, objRefreshableItem
    Set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
    
    Set oWMI = WMIConnect("winmgmts:\\" &amp; TargetComputer &amp; "\root\cimv2")
    
    Dim lNumProcessors
    lNumProcessors = GetNumProcessors(oWMI)
    
    Set objRefreshableItem = objRefresher.AddEnum(oWMI,"Win32_PerfFormattedData_PerfProc_Process")
    
    objRefresher.Refresh
    
    ' List processes using more than 1% of processor time (take into account the number of CPU).
    ' Sample &lt;NumberOfSamples&gt; times waiting &lt;SleepTime&gt; milliseconds between samples.
    
    Dim processDictionary, key
    Set processDictionary = WScript.CreateObject("Scripting.Dictionary")
    For i = 1 to NumberOfSamples
        Wscript.Sleep SleepTime
        
        objRefresher.Refresh
        
        Dim Process
        For Each Process in objRefreshableItem.ObjectSet
            If Process.Name  &lt;&gt; "_Total" and Process.Name  &lt;&gt; "Idle" and Process.PercentProcessorTime &gt; lNumProcessors Then
                key = Process.Name&amp;"::"&amp;Process.IDProcess
                If processDictionary.Exists(key) = true Then
                    processDictionary.Item(key) = CDbl(processDictionary.Item(key)) + CDbl(Process.PercentProcessorTime)
                Else
                    processDictionary.Add key, CDbl(Process.PercentProcessorTime)
                End If
            End If
        Next
    Next
    
    ' Collected Samples
    
    ' Get the keys
    Dim processKeys
    processKeys = processDictionary.keys
    
    Dim processName()
    Dim processValue()
    
    ReDim processName(processDictionary.Count)
    ReDim processValue(processDictionary.Count)
    
    Dim iterCount
    iterCount = 0
    
    Dim i,j,k, maxProcessName
    maxProcessName = 12
    
    'Iterate over all the process for five times
    For i = 0 To processDictionary.Count -1
        If processDictionary.Exists(processKeys(i)) = true Then
            processName(i) = processKeys(i)
            If Len(processName(i)) &gt; maxProcessName Then
                maxProcessName = Len(processName(i))
            End If
            processValue(i) = CDbl(CDbl(processDictionary.Item(processKeys(i))) / CDbl(NumberOfSamples) / CDbl(lNumProcessors))
        End If
    Next
    
    ' Sort the array using bubble sort
    For i = 0 To processDictionary.Count -1
        For j = i+1 To processDictionary.Count -1
            If processValue(i)  &lt; processValue(j) Then
                Dim swap, swap1
                swap = processValue(i)
                processValue(i) = processValue(j)
                processValue(j) = swap
                swap1 = processName(i)
                processName(i) = processName(j)
                processName(j) = swap1
            End If
        Next
    Next
    
    Wscript.Echo "% CPU Time(Avg)	    PID 	     Binary Name	"
    Wscript.Echo "==============================================================================="
    
    For i = 0 To processDictionary.Count -1
        If processValue(i) &lt;= 0 Then
            Exit For
        End If
        Dim pValue
        pValue = Fix(processValue(i)*10) /10
        Dim pidPos
        pidPos = InStr(processName(i), "::")
        If IsNull(pidPos) Or pidPos = 0 Then
            err.Clear
        Else
            Dim pidLength
            pidLength = Len(Right(processName(i),Len(processName(i)) - pidPos-2))
            Dim valueLength
            valueLength= Len(pValue)
            Dim OutPutString
            OutPutString = "       " &amp; pValue &amp; "%"
            For j = 0 To 5 - valueLength
                OutPutString = OutPutString &amp; " "
            Next
            OutPutString = OutPutString &amp;"          " &amp; Right(processName(i),Len(processName(i)) - pidPos-1)
            For j = 0 To 8 - pidLength
                OutPutString = OutPutString &amp; " "
            Next
            OutPutString = OutPutString &amp; "        "&amp; Left(processName(i),pidPos-1)
            Wscript.echo OutPutString
        End If
    Next
End Sub

' Windows Server 2003, Windows XP, and Windows 2000: Because the NumberOfLogicalProcessors property
' is not available, NumberOfProcessors indicates the number of logical processors available in the
' system. In the case of a computer system that has two physical processors each containing two
' logical processors, the value of NumberOfProcessors is 4.
' For more information see "http://msdn2.microsoft.com/en-us/library/aa394102(VS.85).aspx"
Function GetNumProcessors(oWMI)
    Dim WMISet, owObj
    Set WMISet = WMIGetInstanceEx(oWMI, "Win32_ComputerSystem")
    For Each owObj In WMISet
        On Error Resume Next
        GetNumProcessors = owObj.NumberOfLogicalProcessors
        If Err.number &lt;&gt; 0 Then
            GetNumProcessors = owObj.NumberOfProcessors
        End If
        On Error GoTo 0
    Next
End Function
</ScriptBody><SecureInput/><TimeoutSeconds>300</TimeoutSeconds></ProbeAction></MemberModules><Composition><Node ID="PA"/></Composition></Composite></ModuleImplementation><OutputType>System!System.CommandOutput</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.Windows.Server.MaxConcurrentAPI.Probe" Accessibility="Public" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DiagnosticMode" type="xsd:integer"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ThresholdWaiters" type="xsd:integer" minOccurs="0"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ThresholdTimeouts" type="xsd:integer" minOccurs="0"/></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int"/><OverrideableParameter ID="ThresholdWaiters" Selector="$Config/ThresholdWaiters$" ParameterType="int"/><OverrideableParameter ID="ThresholdTimeouts" Selector="$Config/ThresholdTimeouts$" ParameterType="int"/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="Probe" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe"><ScriptName>CheckMaxConcurrentAPI.ps1</ScriptName><ScriptBody>
                      
param([Int] $DiagnosticMode, [Int] $ThresholdWaiters, [Int] $ThresholdTimeouts)
$SCRIPT_NAME = "CheckMaxConcurrentAPI"
$ErrorActionPreference = "Stop"

# Event type constants
$EVENT_TYPE_LOG = 0
$EVENT_TYPE_ERROR = 1
$EVENT_TYPE_WARNING = 2
$EVENT_TYPE_INFORMATION = 4

# Typed property bag constants
$PROPERTY_TYPE_ALERT = 0
$PROPERTY_TYPE_EVENT = 1
$PROPERTY_TYPE_PERFORMANCE = 2
$PROPERTY_TYPE_STATE = 3

# State type constants
$STATE_SUCCESS = "Success"
$STATE_WARNING = "Warning"
$STATE_ERROR = "Error"

$momAPI = new-object -comObject MOM.ScriptAPI
Import-Module CimCmdlets -ErrorAction SilentlyContinue
Write-Host "$SCRIPT_NAME - Executing Windows Server Max Concurrent API Probe Powershell Script"

$SemWaitersDefaultThreshold = 50
$SemTimeoutsDefaultThreshold = 2000

$WIN_SRV_2012_OSVer = "6.2"
#******************************************************************************
#   FUNCTION:       CheckByOSCurrentVersion
#   DESCRIPTION:    Returns True if the Registry Key for CurrentVersion
#                   is equal the target OS Versions Number.
#   RETURNS:        Boolean: True, if build is greater or equal than the given number
#******************************************************************************
function CheckByOSCurrentVersion()
{ 
    $strCurrentOSVer = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\"
    $strCurrentOSVer = $strCurrentOSVer.CurrentVersion
    $CheckByOSCurrentVersion = $false
	if($strCurrentOSVer -ge $WIN_SRV_2012_OSVer){
       $CheckByOSCurrentVersion = $true
    }else{
       $CheckByOSCurrentVersion = $false
    }
    return $CheckByOSCurrentVersion;
}
function MCAProblemCheckLite 
{ 
        param([string] $InstanceName)

   	    #Returns PS Object with performance data related to the Netlogon being used to determine if Max Concurrent API Scenario is present. (Used by CSS)
		$DetectionTime = Get-Date
		$ProblemDetected = $False

        if($IsCategoryTypeEmpty -eq $true)
        {
            $SemAcquiresCounter = "\\.\Netlogon(" + $InstanceName +  ")\Semaphore Acquires"
            $SemTimeoutsCounter = "\\.\Netlogon(" + $InstanceName +  ")\Semaphore Timeouts"
            $SemWaitersCounter = "\\.\Netlogon(" + $InstanceName +  ")\Semaphore Waiters"
            $SemHoldersCounter = "\\.\Netlogon(" + $InstanceName +  ")\Semaphore Holders"
            $SemHoldTimeCounter = "\\.\Netlogon(" + $InstanceName +  ")\Average Semaphore Hold Time"

            $SemAcquiresData = Get-Counter -Counter $SemAcquiresCounter -ComputerName . -SampleInterval 1 -MaxSamples 1
            $SemTimeoutsData = Get-Counter -Counter $SemTimeoutsCounter -ComputerName . -SampleInterval 1 -MaxSamples 1
            $SemWaitersData = Get-Counter -Counter $SemWaitersCounter -ComputerName . -SampleInterval 1 -MaxSamples 1
            $SemHoldersData = Get-Counter -Counter $SemHoldersCounter -ComputerName . -SampleInterval 1 -MaxSamples 1
            $SemHoldTimeData = Get-Counter -Counter $SemHoldTimeCounter -ComputerName . -SampleInterval 1 -MaxSamples 1

            $SemAcquires = $SemAcquiresData.CounterSamples[0].CookedValue
            $SemTimeouts = $SemTimeoutsData.CounterSamples[0].CookedValue
            $SemWaiters = $SemWaitersData.CounterSamples[0].CookedValue
            $SemHolders = $SemHoldersData.CounterSamples[0].CookedValue
            $SemHoldTime = $SemHoldTimeData.CounterSamples[0].CookedValue 
        }
        else
        {
            $SA = New-Object System.Diagnostics.PerformanceCounter("Netlogon", "Semaphore Acquires", $InstanceName)
            $ST = New-Object System.Diagnostics.PerformanceCounter("Netlogon", "Semaphore Timeouts", $InstanceName)
            $SW = New-Object System.Diagnostics.PerformanceCounter("Netlogon", "Semaphore Waiters", $InstanceName)
            $SH = New-Object System.Diagnostics.PerformanceCounter("Netlogon", "Semaphore Holders", $InstanceName)
            $ASHT = New-Object System.Diagnostics.PerformanceCounter("Netlogon", "Average Semaphore Hold Time", $InstanceName)

            $SemAcquires = $SA.NextValue()
            $SemTimeouts = $ST.NextValue()
            $SemWaiters = $SW.NextValue()
            $SemHolders = $SH.NextValue()
            $SemHoldTime = $ASHT.NextValue() 
        }

		#Detect problems.  Exclude false positives if the counter has seen the buffer overrun bug from KB2685888.
		if ((($SemWaiters -gt $ThresholdWaiters) -and (-not($SemWaiters -gt 4GB))) -or (($SemTimeouts -gt $ThresholdTimeouts) -and (-not($SemTimeouts -gt 4GB))))
		{
			$ProblemDetected = $true
		}
		
		$ReturnValues = new-object PSObject
		$InstanceName = $InstanceName.replace('\','')

		add-member -inputobject $ReturnValues -membertype noteproperty -name "DetectionTime" -value $DetectionTime 
		add-member -inputobject $ReturnValues -membertype noteproperty -name "SecureChannel" -value $InstanceName
		add-member -inputobject $ReturnValues -membertype noteproperty -name "SemaphoreTimeouts" -value $SemTimeouts
		add-member -inputobject $ReturnValues -membertype noteproperty -name "SemaphoreWaiters" -value $SemWaiters
		add-member -inputobject $ReturnValues -membertype noteproperty -name "SemaphoreAcquires" -value $SemAcquires
		add-member -inputobject $ReturnValues -membertype noteproperty -name "SemaphoreHolders" -value $SemHolders
		add-member -inputobject $ReturnValues -membertype noteproperty -name "AverageSemaphoreHoldTime" -value $SemHoldTime
		add-member -inputobject $ReturnValues -membertype noteproperty -name "ProblemDetected" -value $ProblemDetected
		
		if (($SemWaiters -gt 4GB) -or ($SemHolders -gt 4GB) -or ($SemTimeouts -gt 4GB))
		{
			add-member -inputobject $ReturnValues -membertype noteproperty -name "BufferOverFlowDetected" -value $true
		}
		else 
		{
			add-member -inputobject $ReturnValues -membertype noteproperty -name "BufferOverFlowDetected" -value $false
		}
		
		return $ReturnValues
}

# System.Diagnostics.PerformanceCounterCategory is not available 
function NetlogonPerfCounterNanoServer
{
	$useCIM = CheckByOSCurrentVersion
	$query = "Select * From Win32_PerfFormattedData_Counters_Netlogon"
	if($useCIM){

		Load-CimModules
		try
		{
			$cimSessionOption = New-CimSessionOption -Protocol DCOM
			$cimsession = New-CimSession -SessionOption $cimSessionOption 
			$Instances = Get-CimInstance -CimSession $cimsession -Query $query
		}
		catch
		{
			$Instances = Get-WMIObject -Query $query
		}
		Finally
		{
			Get-CimSession | Remove-CimSession
			$cimsession =$null
			$cimSessionOption = $null 
		}
	}else{
		$Instances = Get-WMIObject -Query $query
	}
	foreach ($Instance in $Instances)
	{
		if (($DiagnosticMode -ne 0) -or (($Instance.Name -match "_Total") -eq $true))
		{
			$DetectionTime = Get-Date
			$State = 1
			if ((($Instance.SemaphoreWaiters -gt $ThresholdWaiters) -and (-not($Instance.SemaphoreWaiters -gt 4GB))) -or (($Instance.SemaphoreTimeouts -gt $ThresholdTimeouts) -and (-not($Instance.SemaphoreTimeouts -gt 4GB))))
			{
				$State = 0
			}
			$ErrorNumber = 0
			$ErrorDesc = ""

			$PerformancePropertyBag = $momAPI.CreatePropertyBag()
			$PerformancePropertyBag.AddValue("Detection Time",$DetectionTime)
			$PerformancePropertyBag.AddValue("Secure Channel",$Instance.Name.replace('\',''))
			$PerformancePropertyBag.AddValue("Semaphore Timeouts",$Instance.SemaphoreTimeouts)
			$PerformancePropertyBag.AddValue("Semaphore Waiters",$Instance.SemaphoreWaiters)
			$PerformancePropertyBag.AddValue("Semaphore Acquires",$Instance.SemaphoreAcquires)
			$PerformancePropertyBag.AddValue("Semaphore Holders",$Instance.SemaphoreHolders)
			$PerformancePropertyBag.AddValue("Average Semaphore Hold Time",$Instance.AverageSemaphoreHoldTime)
    		$PerformancePropertyBag.AddValue("State",$State)
			$PerformancePropertyBag.AddValue("ErrorNumber", $ErrorNumber)
			$PerformancePropertyBag.AddValue("ErrorDescription", $ErrorDesc)

			$PerformancePropertyBag
		}
	}
}

function GetSecureChannelNames 
{
	#Returns an array of secure channel names from the Netlogon performannce counter.
    $Instances = New-Object System.Diagnostics.PerformanceCounterCategory("Netlogon")

    if($Instances.CategoryType -eq 'MultiInstance')
    {
        Set-Variable -Name IsCategoryTypeEmpty -Value $false -Scope script

        $AllInstanceNames = $Instances.GetInstanceNames()

        if($AllInstanceNames.Count -eq 1)
        {
            $AllInstanceNamesToUse = @(1)
            $AllInstanceNamesToUse[0] = $AllInstanceNames
        }
        else
        {
            if($DiagnosticMode -eq 0)
            {
              $AllInstanceNamesToUse = $AllInstanceNames -match '_Total'
            }
            else
            {
              $AllInstanceNamesToUse = $AllInstanceNames
            }
        }
    }
    else
    {
        Set-Variable -Name IsCategoryTypeEmpty -Value $true -Scope script
        $AllInstanceNamesToUse = @()

        if($DiagnosticMode -eq 0)
        {
            $AllInstanceNamesToUse += "_Total"
        }
        else
        {
            $PerfInstanceList = Get-Counter -Counter "\\.\Netlogon(*)\Semaphore Acquires"
					
            foreach ($PerfInstance in $PerfInstanceList.CounterSamples)
            {
               $AllInstanceNamesToUse += $PerfInstance.InstanceName
            }
        }
     }
     return $AllInstanceNamesToUse
}

try
{
	#Check if this computer is joined to Active Directory domain. Workgroup members does not have Netlogon counters so nothing to check with these machines
	$JoinedDomain = (gwmi win32_computersystem).partofdomain
	If ($JoinedDomain -eq $True) 
	{
		if($ThresholdWaiters -eq $null)
		{
			$ThresholdWaiters = $SemWaitersDefaultThreshold
		}

		if($ThresholdTimeouts -eq $null)
		{
			$ThresholdTimeouts = $SemTimeoutsDefaultThreshold
		}

		$nanoRegKey = (Get-Item "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Server\ServerLevels" -ErrorAction SilentlyContinue)
		$isNano = $false
		if($nanoRegKey -eq $null)
		{
			$isNano = $false
		}elseif($nanoRegKey.GetValue("NanoServer") -eq 1)
		{
			$isNano = $true
		}
		if ($isNano)
		{
			NetlogonPerfCounterNanoServer
			return
		}

		$SCNames = GetSecureChannelNames

		$LoopCounter = $SCNames.Count

		for ($i = 0; $i -lt $LoopCounter; $i++)
		{
			$NameToUse = if($SCNames.Count -eq 1){$SCNames}else{$SCNames[$i]}

			$InformationCollected = MCAProblemCheckLite ($NameToUse)

			if ($InformationCollected.ProblemDetected -eq $true)
			{
				$State = 0
			}
			else
			{
				$State = 1
			}

			$ErrorNumber = 0
			$ErrorDesc = ""

			$PerformancePropertyBag = $momAPI.CreatePropertyBag()
			$PerformancePropertyBag.AddValue("Detection Time",$InformationCollected.DetectionTime)
			$PerformancePropertyBag.AddValue("Secure Channel",$InformationCollected.SecureChannel)
			$PerformancePropertyBag.AddValue("Semaphore Timeouts",$InformationCollected.SemaphoreTimeouts)
			$PerformancePropertyBag.AddValue("Semaphore Waiters",$InformationCollected.SemaphoreWaiters)
			$PerformancePropertyBag.AddValue("Semaphore Acquires",$InformationCollected.SemaphoreAcquires)
			$PerformancePropertyBag.AddValue("Semaphore Holders",$InformationCollected.SemaphoreHolders)
			$PerformancePropertyBag.AddValue("Average Semaphore Hold Time",$InformationCollected.AverageSemaphoreHoldTime)
    		$PerformancePropertyBag.AddValue("State",$State)
			$PerformancePropertyBag.AddValue("ErrorNumber", $ErrorNumber)
			$PerformancePropertyBag.AddValue("ErrorDescription", $ErrorDesc)

  			$PerformancePropertyBag
		}
	}
	else
    {
		$State = 1
		$DetectionTime = Get-Date
		$PerformancePropertyBag = $momAPI.CreatePropertyBag()
		$PerformancePropertyBag.AddValue("Detection Time",$DetectionTime)
		$PerformancePropertyBag.AddValue("Secure Channel","Monitor is not applicable for workgroup members")
		$PerformancePropertyBag.AddValue("Semaphore Timeouts",0)
		$PerformancePropertyBag.AddValue("Semaphore Waiters",0)
		$PerformancePropertyBag.AddValue("Semaphore Acquires",0)
		$PerformancePropertyBag.AddValue("Semaphore Holders",0)
		$PerformancePropertyBag.AddValue("Average Semaphore Hold Time", $DetectionTime)
		$PerformancePropertyBag.AddValue("State",$State)
		$PerformancePropertyBag.AddValue("ErrorNumber", "No errors")
		$PerformancePropertyBag.AddValue("ErrorDescription", "")
		$PerformancePropertyBag
    }
}
catch [System.Exception]
{
    $Description = $_.ToString()
    $ErrNumber   = $_.Exception.ErrorCode

    Write-Warning "$SCRIPT_NAME - $Description"
	$DetectionTime = Get-Date
   	$State = 0

    $PerformancePropertyBag = $momAPI.CreatePropertyBag()
	$PerformancePropertyBag.AddValue("Detection Time",$DetectionTime)
	$PerformancePropertyBag.AddValue("Secure Channel","Error")
	$PerformancePropertyBag.AddValue("Semaphore Timeouts",0)
	$PerformancePropertyBag.AddValue("Semaphore Waiters",0)
	$PerformancePropertyBag.AddValue("Semaphore Acquires",0)
	$PerformancePropertyBag.AddValue("Semaphore Holders",0)
	$PerformancePropertyBag.AddValue("Average Semaphore Hold Time", $DetectionTime)
    $PerformancePropertyBag.AddValue("State",$State)
	$PerformancePropertyBag.AddValue("ErrorNumber", $ErrNumber)
	$PerformancePropertyBag.AddValue("ErrorDescription", $Description)

	$PerformancePropertyBag
}
finally
{
	if($DiagnosticMode -eq 0)
	{
	  Write-Host "$SCRIPT_NAME - single performance property bag returned"
	}
	else
	{
       Write-Host "$SCRIPT_NAME - multiple performance property bag returned"
	}
}

Function Load-CimModules
{
	$error.Clear()

	$CimModule = Get-Module CimCmdlets

	if ($null -eq $CimModule)
	{
			Import-Module CimCmdlets
			$error.Clear()
	}
}</ScriptBody><Parameters><Parameter><Name>DiagnosticMode</Name><Value>$Config/DiagnosticMode$</Value></Parameter><Parameter><Name>ThresholdWaiters</Name><Value>$Config/ThresholdWaiters$</Value></Parameter><Parameter><Name>ThresholdTimeouts</Name><Value>$Config/ThresholdTimeouts$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction><ProbeAction ID="RegistryProbe" TypeID="Windows!Microsoft.Windows.RegistryProbe"><ComputerName>$Target/Host/Property[Type='Windows!Microsoft.Windows.Computer']/NetworkName$</ComputerName><RegistryAttributeDefinitions><RegistryAttributeDefinition><AttributeName>SERVER_VERSION_IS_2008</AttributeName><Path>SOFTWARE\Microsoft\Windows NT\CurrentVersion\CurrentVersion</Path><PathType>1</PathType><AttributeType>1</AttributeType></RegistryAttributeDefinition></RegistryAttributeDefinitions></ProbeAction><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe"/><ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter"><Expression><Not><Expression><RegExExpression><ValueExpression><XPathQuery>Values/SERVER_VERSION_IS_2008</XPathQuery></ValueExpression><Operator>ContainsSubstring</Operator><Pattern>6.0</Pattern></RegExExpression></Expression></Not></Expression></ConditionDetection></MemberModules><Composition><Node ID="Probe"><Node ID="Filter"><Node ID="RegistryProbe"><Node ID="PassThrough"/></Node></Node></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType><TriggerOnly>true</TriggerOnly></ProbeActionModuleType><WriteActionModuleType ID="Microsoft.Windows.Server.StartServiceViaWMI.ModuleType" Accessibility="Public" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ServiceName" type="xsd:string"/></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="StartServiceViaWMI" TypeID="System!System.CommandExecuter"><ApplicationName>%windir%\system32\cscript.exe</ApplicationName><WorkingDirectory/><CommandLine>/nologo $File/Microsoft.Windows.Server.StartServiceViaWMI.ModuleType.vbs$ $Config/ComputerName$ $Config/ServiceName$</CommandLine><TimeoutSeconds>300</TimeoutSeconds><RequireOutput>true</RequireOutput><Files><File><Name>Microsoft.Windows.Server.StartServiceViaWMI.ModuleType.vbs</Name><Contents>'Copyright (c) Microsoft Corporation. All rights reserved.

'*************************************************************************
' $ScriptName: "Microsoft.Windows.Server.Common"$
'
' Purpose: To have one place for common stuff across various BaseOS VBScripts
'
' $File: Microsoft.Windows.Server.Common.vbs$
'*************************************************************************

Option Explicit

SetLocale("en-us")

' LogScripEvent Constants
Const lsEventError                 = 1
Const lsEventWarning               = 2
Const lsEventInformation           = 3

' WMI Constants
Const wbemCimtypeUseDefault        = 0   'Use Default Type CIM type - Custom
Const wbemCimtypeSint16            = 2   'Signed 16-bit integer 
Const wbemCimtypeSint32            = 3   'Signed 32-bit integer 
Const wbemCimtypeReal32            = 4   '32-bit real number 
Const wbemCimtypeReal64            = 5   '64-bit real number 
Const wbemCimtypeString            = 8   'String 
Const wbemCimtypeBoolean           = 11  'Boolean value 
Const wbemCimtypeObject            = 13  'CIM object 
Const wbemCimtypeSint8             = 16  'Signed 8-bit integer 
Const wbemCimtypeUint8             = 17  'Unsigned 8-bit integer 
Const wbemCimtypeUint16            = 18  'Unsigned 16-bit integer 
Const wbemCimtypeUint32            = 19  'Unsigned 32-bit integer 
Const wbemCimtypeSint64            = 20  'Signed 64-bit integer  
Const wbemCimtypeUint64            = 21  'Unsigned 64-bit integer 
Const wbemCimtypeDatetime          = 101 'Date/time value 
Const wbemCimtypeReference         = 102 'Reference to a CIM object 
Const wbemCimtypeChar16            = 103 '16-bit character 

Const ErrAction_None               = 0
Const ErrAction_Trace              = 1
Const ErrAction_ThrowError         = 16
Const ErrAction_Abort              = 32
Const ErrAction_ThrowErrorAndAbort = 48

Const DISKSIZE_BYTES_IN_MB = 1048576

Dim g_ErrorEventNumber, g_TraceEventNumber, g_DebugFlag
g_ErrorEventNumber = 4001
g_TraceEventNumber = 4002
g_DebugFlag = False

'---------------------------------------------------------------------------
' Returns WMI Instance requested. Tries to execute WMI query a N times.
'---------------------------------------------------------------------------
Function WMIGetInstanceExTryN(oWMI, ByVal sInstance, ByVal N)
    Dim oInstance, nInstanceCount
    Dim e, i
    Set e = New Error

    For i = 0 To i &lt; N
        On Error Resume Next
        Set oInstance = oWMI.InstancesOf(sInstance)
        e.Save
        On Error Goto 0
        If IsEmpty(oInstance) Or e.Number &lt;&gt; 0 Then
            If i = N - 1 Then
                ThrowScriptError "The class name '" &amp; sInstance &amp; "' returned no instances.  Please check to see if this is a valid WMI class name.", e
            End If
        Else
            On Error Resume Next
            nInstanceCount = oInstance.Count
            e.Save
            On Error Goto 0
            If e.Number &lt;&gt; 0 Then
                If i = N - 1 Then
                    ThrowScriptError "The class name '" &amp; sInstance &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI class name.", e
                End If
            Else
                Exit For
            End If
        End If
        WScript.Sleep(1000)
    Next

    Set WMIGetInstanceExTryN = oInstance
End Function

'---------------------------------------------------------------------------
' Returns WMI Instance requested.
'---------------------------------------------------------------------------
Function WMIGetInstanceEx(oWMI, ByVal sInstance)
    Dim oInstance, nInstanceCount
    Dim e
    Set e = New Error

    On Error Resume Next
    Set oInstance = oWMI.InstancesOf(sInstance)
    e.Save
    On Error Goto 0
    If IsEmpty(oInstance) Or e.Number &lt;&gt; 0 Then
        ThrowScriptError "The class name '" &amp; sInstance &amp; "' returned no instances.  Please check to see if this is a valid WMI class name.", e
    End If

    'Determine if we queried a valid WMI class - Count will return 0 or empty
    On Error Resume Next
    nInstanceCount = oInstance.Count
    e.Save
    On Error Goto 0
    If e.Number &lt;&gt; 0 Then
        ThrowScriptError "The class name '" &amp; sInstance &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI class name.", e
    End If

    Set WMIGetInstanceEx = oInstance
End Function

'---------------------------------------------------------------------------
' Connect to WMI.
'---------------------------------------------------------------------------
Function WMIConnect(ByVal sNamespace)
    Dim oWMI
    Dim e
    Set e = New Error
    On Error Resume Next
    Set oWMI = GetObject(sNamespace)
    e.Save
    On Error Goto 0
    If IsEmpty(oWMI) Then
        ThrowScriptError "Unable to open WMI Namespace '" &amp; sNamespace &amp; "'. Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists.", e
    End If
    Set WMIConnect = oWMI
End Function

'---------------------------------------------------------------------------
' Returns WMI Instance requested.
'---------------------------------------------------------------------------
Function WMIGetInstance(ByVal sNamespace, ByVal sInstance)
    Dim oWMI, oInstance
    Set oWMI = WMIConnect(sNamespace)
    Set oInstance = WMIGetInstanceEx(oWMI, sInstance)
    Set WMIGetInstance = oInstance
End Function

'---------------------------------------------------------------------------
' Returns WMI Instance requested.
'---------------------------------------------------------------------------
Function WMIGetInstanceNoAbort(ByVal sNamespace, ByVal sInstance)
    Dim oWMI, oInstance, nInstanceCount
    
    On Error Resume Next
    Set oWMI = GetObject(sNamespace)
    If Not IsEmpty(oWMI) Then
        Set oInstance = oWMI.InstancesOf(sInstance)
        If Not IsEmpty(oInstance) And Err.Number = 0 Then
            'Determine if we queried a valid WMI class - Count will return 0 or empty
            nInstanceCount = oInstance.Count
            If Err.Number = 0 Then
                Set WMIGetInstanceNoAbort = oInstance
                On Error Goto 0
                Exit Function
            End If
        End If
    End If
    
    On Error Goto 0
    Set WMIGetInstanceNoAbort = Nothing
End Function

'---------------------------------------------------------------------------
' Executes the WMI query and returns the result set.
'---------------------------------------------------------------------------
Function WMIExecQuery(ByVal sNamespace, ByVal sQuery)
    Dim oWMI, oQuery, nInstanceCount
    Dim e
    Set e = New Error
    On Error Resume Next
    Set oWMI = GetObject(sNamespace)
    e.Save
    On Error Goto 0
    If IsEmpty(oWMI) Then
        ThrowScriptError "Unable to open WMI Namespace '" &amp; sNamespace &amp; "'.  Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists.", e
    End If

    On Error Resume Next
    Set oQuery = oWMI.ExecQuery(sQuery)
    e.Save
    On Error Goto 0
    If IsEmpty(oQuery) Or e.Number &lt;&gt; 0 Then
        ThrowScriptError "The Query '" &amp; sQuery &amp; "' returned an invalid result set.  Please check to see if this is a valid WMI Query.", e
    End If

    'Determine if we queried a valid WMI class - Count will return 0 or empty
    On Error Resume Next
    nInstanceCount = oQuery.Count
    e.Save
    On Error Goto 0
    If e.Number &lt;&gt; 0 Then
        ThrowScriptError "The Query '" &amp; sQuery &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI Query.", e
    End If

    Set WMIExecQuery = oQuery
End Function

'---------------------------------------------------------------------------
' Executes the WMI query and returns the result set, no abort version.
'---------------------------------------------------------------------------
Function WMIExecQueryNoAbort(ByVal sNamespace, ByVal sQuery)
    Dim oWMI, oQuery
    Set oWMI = GetObject(sNamespace)
    Set oQuery = oWMI.ExecQuery(sQuery)
    Set WMIExecQueryNoAbort = oQuery
End Function

'---------------------------------------------------------------------------
' Retrieves WMI property.
'---------------------------------------------------------------------------
Function GetWMIProperty(oWmi, sPropName, nCIMType, ErrAction)
    Dim sValue, oWmiProp, oError
    Set oError = New Error
    
    ' Check that object is valid.
    If Not IsValidObject(oWmi) Then
        If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
            ThrowScriptErrorNoAbort "Accessing property on invalid WMI object.", oError
        If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
            Quit()
        
        GetWMIProperty = ""
        Exit Function
    End If
    
    ' Get properties...
    On Error Resume Next
    Set oWmiProp = oWmi.Properties_.Item(sPropName)
    oError.Save
    If oError.Number &lt;&gt; 0 Then
        If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
            ThrowScriptErrorNoAbort "An error occurred while accessing WMI property: '" &amp; sPropName &amp; "'.", oError
        If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
            Quit()
    End If
    On Error Goto 0
    
    If IsValidObject(oWmiProp) Then
        sValue = oWmiProp.Value
        
        If IsNull(sValue) Then ' If value is null, return blank to avoid any issues
            GetWMIProperty = ""
        Else
            Select Case (oWmiProp.CIMType)
                Case wbemCimtypeString, wbemCimtypeSint16, wbemCimtypeSint32, wbemCimtypeReal32, wbemCimtypeReal64, wbemCimtypeSint8, wbemCimtypeUint8, wbemCimtypeUint16, wbemCimtypeUint32, wbemCimtypeSint64, wbemCimtypeUint64:
                    If Not oWmiProp.IsArray Then
                        GetWMIProperty = Trim(CStr(sValue))
                    Else
                        GetWMIProperty = Join(sValue, ", ")
                    End If
                Case wbemCimtypeBoolean:
                    If sValue = 1 Or UCase(sValue) = "TRUE" Then
                        GetWMIProperty = "True"
                    Else
                        GetWMIProperty = "False"
                    End If	
                Case wbemCimtypeDatetime:
                    Dim sTmpStrDate
                    
                    ' First attempt to convert the whole wmi date string
                    sTmpStrDate = Mid(sValue, 5, 2) &amp; "/" &amp; _
                            Mid(sValue, 7, 2) &amp; "/" &amp; _
                            Left(sValue, 4) &amp; " " &amp; _
                            Mid (sValue, 9, 2) &amp; ":" &amp; _
                            Mid(sValue, 11, 2) &amp; ":" &amp; _
                            Mid(sValue, 13, 2)
                    If IsDate(sTmpStrDate) Then
                        GetWMIProperty = CDate(sTmpStrDate)
                    Else
                        ' Second, attempt just to convert the YYYYMMDD 
                        sTmpStrDate = Mid(sValue, 5, 2) &amp; "/" &amp; _
                                Mid(sValue, 7, 2) &amp; "/" &amp; _
                                Left(sValue, 4)
                        If IsDate(sTmpStrDate) Then
                            GetWMIProperty = CDate(sTmpStrDate)
                        Else
                            ' Nothing works - return passed in string 
                            GetWMIProperty = sValue
                        End If
                    End If
                Case Else:
                    GetWMIProperty = ""
            End Select
        End If
    Else
        If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
            ThrowScriptErrorNoAbort "An error occurred while accessing WMI property: '" &amp; sPropName &amp; "'.", oError
        If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
            Quit()
        
        GetWMIProperty = ""
    End If
    
    If (ErrAction And ErrAction_Trace) = ErrAction_Trace Then _
        WScript.Echo "  + " &amp; sPropName &amp; " :: '" &amp; GetWMIProperty &amp; "'"
End Function

'---------------------------------------------------------------------------
' Class for error handling.
'---------------------------------------------------------------------------
Class Error
    Private m_lNumber
    Private m_sSource
    Private m_sDescription
    Private m_sHelpContext
    Private m_sHelpFile
    Public Sub Save()
        m_lNumber = Err.number
        m_sSource = Err.Source
        m_sDescription = Err.Description
        m_sHelpContext = Err.HelpContext
        m_sHelpFile = Err.helpfile
    End Sub
    Public Sub Raise()
        Err.Raise m_lNumber, m_sSource, m_sDescription, m_sHelpFile, m_sHelpContext
    End Sub
    Public Sub Clear()
        m_lNumber = 0
        m_sSource = ""
        m_sDescription = ""
        m_sHelpContext = ""
        m_sHelpFile = ""
    End Sub
    Public Default Property Get Number()
        Number = m_lNumber
    End Property
    Public Property Get Source()
        Source = m_sSource
    End Property
    Public Property Get Description()
        Description = m_sDescription
    End Property
    Public Property Get HelpContext()
        HelpContext = m_sHelpContext
    End Property
    Public Property Get HelpFile()
        HelpFile = m_sHelpFile
    End Property    
End Class

'---------------------------------------------------------------------------
' Creates an event and sends it back to the mom server.
'---------------------------------------------------------------------------
Function ThrowScriptErrorNoAbort(ByVal sMessage, ByVal oErr)
    ' Retrieve the name of this (running) script
    Dim FSO, ScriptFileName
    Set FSO = CreateObject("Scripting.FileSystemObject")
    ScriptFileName = FSO.GetFile(WScript.ScriptFullName).Name
    Set FSO = Nothing
    
    If Not IsNull(oErr) Then _
        sMessage = sMessage &amp; ". " &amp; oErr.Description
    
    On Error Resume Next
    Dim oAPITemp
    Set oAPITemp = CreateObject("MOM.ScriptAPI")
    oAPITemp.LogScriptEvent ScriptFileName, g_ErrorEventNumber, lsEventError, sMessage
    On Error Goto 0
    
    WScript.Echo sMessage
End Function

'---------------------------------------------------------------------------
' Creates an event and sends it back to the mom server.
'---------------------------------------------------------------------------
Function ThrowScriptError(Byval sMessage, ByVal oErr)
    On Error Resume Next
    ThrowScriptErrorNoAbort sMessage, oErr
    Quit()
End Function

'---------------------------------------------------------------------------
' Creates automation objects and returns it.
'---------------------------------------------------------------------------
Function MomCreateObject(ByVal sProgramId)
    Dim oError
    Set oError = New Error
    
    On Error Resume Next
    Set MomCreateObject = CreateObject(sProgramId)
    oError.Save
    On Error Goto 0
    
    If oError.Number &lt;&gt; 0 Then
        ThrowScriptError "Unable to create automation object '" &amp; sProgramId &amp; "'", oError
    End If
End Function

'---------------------------------------------------------------------------
' Quits the script.
'---------------------------------------------------------------------------
Function Quit()
    WScript.Quit()
End Function

'---------------------------------------------------------------------------
' Checks whether oObject is valid.
'---------------------------------------------------------------------------
Function IsValidObject(ByVal oObject)
    IsValidObject = False
    If IsObject(oObject) Then
        If Not oObject Is Nothing Then
            IsValidObject = True
        End If
    End If
End Function

'---------------------------------------------------------------------------
' Outputs arguments for debugging purposes
'---------------------------------------------------------------------------
Function TraceLogArguments
    Dim oArgs
    Set oArgs = WScript.Arguments
    Dim i, sArgs
    For i = 0 To oArgs.Count - 1
        sArgs = sArgs &amp; " {" &amp; oArgs(i) &amp; "}"
    Next
    TraceLogMessage "Arguments:" &amp; sArgs
End Function

'---------------------------------------------------------------------------
' Verifies that number of arguments is correct
'---------------------------------------------------------------------------
Function VerifyNumberOfArguments(ByVal NumberOfArguments)
    Dim oArgs
    Set oArgs = WScript.Arguments
    If oArgs.Count &lt;&gt; NumberOfArguments Then
       Dim i, sArgs
       For i = 0 To oArgs.Count - 1
           sArgs = sArgs &amp; " {" &amp; oArgs(i) &amp; "}"
       Next
       ThrowScriptError "Invalid number of arguments (" &amp; oArgs.Count &amp; " instead of " &amp; NumberOfArguments &amp; "). Arguments:" &amp; sArgs, Null
    End If
End Function

'---------------------------------------------------------------------------
' Outputs to file and echo for debugging purposes
'---------------------------------------------------------------------------
Function TraceLogMessage(ByVal sMessage)
    WScript.Echo sMessage
    
    If g_DebugFlag = True Then
        ' Retrieve the name of this (running) script
        Dim FSO, ScriptFileName
        Set FSO = CreateObject("Scripting.FileSystemObject")
        ScriptFileName = FSO.GetFile(WScript.ScriptFullName).Name
        Set FSO = Nothing
        
        On Error Resume Next
        Dim oAPITemp
        Set oAPITemp = MOMCreateObject("MOM.ScriptAPI")
        oAPITemp.LogScriptEvent ScriptFileName, g_TraceEventNumber, lsEventInformation, sMessage
        On Error Goto 0
    End If
End Function

'---------------------------------------------------------------------------
' Verifies the expression. If equals to False then generates an error and quits the script
'   Usage:
'     Verify Not WMISet Is Nothing, "WMISet is invalid!"
'     Verify WMISet.Count = 1, "Invalid quantity of services with name 'Server' (qty = " &amp; WMISet.Count &amp; ")."
'---------------------------------------------------------------------------
Function Verify(ByVal bBool, ByVal sMessage)
    If bBool = False Then
        ThrowScriptError sMessage, Null
    End If
End Function


Function GetRegistryKeyValue(ByVal keyPath, ByVal key)
Dim oReg, strKeyValue

Set oReg = MOMCreateObject("WScript.Shell")
On Error Resume Next

strKeyValue = oReg.RegRead(keyPath &amp; key)
If Err.Number &lt;&gt; 0 Then
	ThrowScriptError "An error occurred while reading the registry: '" &amp; keyPath &amp; key &amp; "'", Err.Description 
    strKeyValue = ""
End If

' resume error
On Error Goto 0

GetRegistryKeyValue = strKeyValue
End Function

'---------------------------------------------------------------------------
' Function: ExpressedInMB
'   Usage:
'     Parameter (SizeInBytes) 
'     Returns the Size Expressed in MBytes
'---------------------------------------------------------------------------
Function ExpressedInMB(byref SizeInBytes)
   Dim NumberSizeExpInMB
   NumberSizeExpInMB = Round(SizeInBytes / DISKSIZE_BYTES_IN_MB, 0)
   ExpressedInMB = NumberSizeExpInMB
End Function
'Copyright (c) Microsoft Corporation. All rights reserved.
                      
' Parameters that should be passed to this script
' 0 Computer (FQDN) where the Server servise should be started 
' 1 Service Name

Call Main()

const ServiceState_Stopped = "stopped"
const ServiceState_Running = "running"

Sub Main()
    VerifyNumberOfArguments(2)
    
    Dim oArgs
    Set oArgs = WScript.Arguments
    Dim  TargetComputer, ServiceName
    TargetComputer = oArgs(0)
    ServiceName = oArgs(1)
    
    Dim oAPI, oShell
    Set oAPI = MOMCreateObject("MOM.ScriptAPI")
    
    Dim owObj
    
    Set owObj = GetServerService(TargetComputer, ServiceName)
    
    If (LCase(owObj.State) &lt;&gt; ServiceState_Stopped) Then
        WScript.Echo("The " &amp; owObj.DisplayName &amp; " service is not stopped (" &amp; owObj.State &amp; ").")
        Exit Sub
    End If
    
    WScript.Echo("The " &amp; owObj.DisplayName &amp; " service is starting ...")
        
    Dim Result
    Result = 0
    Result = owObj.StartService()
    
    Verify Result = 0, "Could not start the " &amp; owObj.DisplayName &amp; " service with error " &amp; Result &amp; " (" &amp; GetServiceErrorCode(Result) &amp; ")."
    
    Dim nCount
    nCount = 10
    Do
        WScript.Sleep(1000)
        Set owObj = GetServerService(TargetComputer, ServiceName)
        WScript.Echo("Current state is '" &amp; owObj.State &amp; "'.")
        nCount = nCount - 1
    Loop While LCase(owObj.State) &lt;&gt; ServiceState_Running AND nCount &gt;= 0
    
    If (LCase(owObj.State) = ServiceState_Running) Then
        WScript.Echo("The " &amp; owObj.DisplayName &amp; " service was started successfully.")
    End If
End Sub

Function GetServerService(ByVal sTargetComputer, ByVal sServiceName)
    Dim WMISet, owObj
    Set WMISet = WMIGetInstance("winmgmts:\\" + sTargetComputer + "\root\cimv2", "Win32_Service where Name='" &amp; sServiceName &amp; "'")
    Verify WMISet.Count = 1, "Invalid quantity of services with name '" &amp; sServiceName &amp; "' (qty = " &amp; WMISet.Count &amp; ")."
    For Each owObj In WMISet
        Set GetServerService = owObj
        Exit Function
    Next
End Function

Function GetServiceErrorCode(ByVal Code)
    Dim varArray(25)
    varArray(0)  = "Success"
    varArray(1)  = "Not Supported"
    varArray(2)  = "Access Denied"
    varArray(3)  = "Dependent Services Running"
    varArray(4)  = "Invalid Service Control"
    varArray(5)  = "Service Cannot Accept Control"
    varArray(6)  = "Service Not Active"
    varArray(7)  = "Service Request Timeout"
    varArray(8)  = "Unknown Failure"
    varArray(9)  = "Path Not Found"
    varArray(10) = "Service Already Running"
    varArray(11) = "Service Database Locked"
    varArray(12) = "Service Dependency Deleted"
    varArray(13) = "Service Dependency Failure"
    varArray(14) = "Service Disabled"
    varArray(15) = "Service Logon Failure"
    varArray(16) = "Service Marked For Deletion"
    varArray(17) = "Service No Thread"
    varArray(18) = "Status Circular Dependency"
    varArray(19) = "Status Duplicate Name"
    varArray(20) = "Status Invalid Name"
    varArray(21) = "Status Invalid Parameter"
    varArray(22) = "Status Invalid Service Account"
    varArray(23) = "Status Service Exists"
    varArray(24) = "Service Already Paused"
    
    If (Code &lt; 0) OR (Code &gt;= UBound(varArray)) Then
        GetServiceErrorCode = "Unknown Code Result"
        Exit Function
    End If
    
    GetServiceErrorCode = varArray(Code)
End Function
</Contents></File></Files></WriteAction></MemberModules><Composition><Node ID="StartServiceViaWMI"/></Composition></Composite></ModuleImplementation><OutputType>System!System.CommandOutput</OutputType><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.Windows.Server.StartServiceViaWMI.ModuleType.PowerShell" Accessibility="Public" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ServiceName" type="xsd:string"/></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="StartServiceViaWMI" TypeID="System!System.CommandExecuter"><ApplicationName>%windir%\system32\windowspowershell\v1.0\powershell.exe</ApplicationName><WorkingDirectory/><CommandLine>-command "&amp; '$File/Microsoft.Windows.Server.StartServiceViaWMI.ModuleType.ps1$' $Config/ComputerName$ $Config/ServiceName$"</CommandLine><TimeoutSeconds>300</TimeoutSeconds><RequireOutput>true</RequireOutput><Files><File><Name>Microsoft.Windows.Server.StartServiceViaWMI.ModuleType.ps1</Name><Contents>
                                            
param ([string] $TargetComputer, [string] $ServiceName)
$ErrorActionPreference = "Stop"

# Event type constants
$EVENT_TYPE_LOG = 0
$EVENT_TYPE_ERROR = 1
$EVENT_TYPE_WARNING = 2
$EVENT_TYPE_INFORMATION = 4

# Typed property bag constants
$PROPERTY_TYPE_ALERT = 0
$PROPERTY_TYPE_EVENT = 1
$PROPERTY_TYPE_PERFORMANCE = 2
$PROPERTY_TYPE_STATE = 3

# State type constants
$STATE_SUCCESS = "Success"
$STATE_WARNING = "Warning"
$STATE_ERROR = "Error"

$momAPI = new-object -comObject MOM.ScriptAPI
Import-Module CimCmdlets -ErrorAction SilentlyContinue

$ErrAction_None               = 0
$ErrAction_Trace              = 1
$ErrAction_ThrowError         = 16
$ErrAction_Abort              = 32
$ErrAction_ThrowErrorAndAbort = 48

$DISKSIZE_BYTES_IN_MB = 1048576

$g_ErrorEventNumber = 4001
$g_TraceEventNumber = 4002
$g_DebugFlag = $false

$WIN_SRV_2012_OSVer = "6.2"
#******************************************************************************
#   FUNCTION:       CheckByOSCurrentVersion
#   DESCRIPTION:    Returns True if the Registry Key for CurrentVersion
#                   is equal the target OS Versions Number.
#   RETURNS:        Boolean: True, if build is greater or equal than the given number
#******************************************************************************
function CheckByOSCurrentVersion()
{ 
    $strCurrentOSVer = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\"
    $strCurrentOSVer = $strCurrentOSVer.CurrentVersion
    $CheckByOSCurrentVersion = $false
	if($strCurrentOSVer -ge $WIN_SRV_2012_OSVer){
       $CheckByOSCurrentVersion = $true
    }else{
       $CheckByOSCurrentVersion = $false
    }
    return $CheckByOSCurrentVersion;
}

$useCIM = CheckByOSCurrentVersion

#---------------------------------------------------------------------------
# Returns WMI Instance requested. Tries to execute WMI query a N times.
#---------------------------------------------------------------------------
Function WMIGetInstanceExTryN
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery, 
           [int]$N)

    for ($i = 0; $i -lt $N; $i++)
    {
        $error.Clear();
		if($useCIM){
			Load-CimModules
			try
			{
				$cimSessionOption = New-CimSessionOption -Protocol DCOM
				$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
				$oInstance = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
			}
			catch
			{
				$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue 
			}
			Finally
			{
				Get-CimSession | Remove-CimSession
				$cimsession =$null
				$cimSessionOption = $null 
			}
		}else{
			$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
		}
        if ($error.Count -gt 0)
        {
            if ($i -eq ($N-1))
            {
                ThrowScriptError ("The class name '" + $sInstanceQuery + "' returned no instances.  Please check to see if this is a valid WMI class name.") $error[0]
            }
        }
        else
        {
            break;
        }
        sleep -m 1000
    }

    return $oInstance
}

#---------------------------------------------------------------------------
# Returns WMI Instance requested.
#---------------------------------------------------------------------------
Function WMIGetInstanceEx
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery)

    $error.Clear();
	if($useCIM){

		Load-CimModules
		try
		{
			$cimSessionOption = New-CimSessionOption -Protocol DCOM
			$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
			$oInstance = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
		}
		catch
		{
			$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
		}
		Finally
		{
			Get-CimSession | Remove-CimSession
			$cimsession =$null
			$cimSessionOption = $null 
		}
	}else{
		$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
	}
    if ($error.Count -gt 0)
    {
        ThrowScriptError ("The class name '" + $sInstanceQuery + "' returned no instances.  Please check to see if this is a valid WMI class name.") $error[0]
    }

    return $oInstance
}

#---------------------------------------------------------------------------
# Connect to WMI.
#---------------------------------------------------------------------------
Function WMIConnect
{
    param ([string]$sTargetComputer,
           [string]$sNamespace, $sInstanceQuery)

    $error.Clear()

    # !!! Refactoring comment: 
    # Original VBScript only tries to connect to the namespace. Piping to get only the first one saves time. 
	if($useCIM)
	{
	    Load-CimModules
		try
		{
		 $cimSessionOption = New-CimSessionOption -Protocol DCOM
		 $cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
		 $oWMI = Get-CimClass -CimSession $cimsession  -Namespace $sNamespace -ErrorAction SilentlyContinue | select -First 1
		}
		Finally
		{
		 Get-CimSession | Remove-CimSession
		 $cimsession =$null
		 $cimSessionOption = $null 
		}
	}else{
		$oWMI = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue | select -First 1
	}
    if ($error.Count -gt 0)
    {
        $msg = "Unable to open WMI Namespace 'winmgmts:\\" + $sTargetComputer + "\" + $sNamespace + "'. Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists."
        ThrowScriptError $msg $error[0]
    }
}

#---------------------------------------------------------------------------
# Returns WMI Instance requested.
#---------------------------------------------------------------------------
Function WMIGetInstance
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery)

    WMIConnect $sTargetComputer $sNamespace $sInstanceQuery
    $oInstance = WMIGetInstanceEx $sTargetComputer $sNamespace $sInstanceQuery
    return $oInstance
}

#---------------------------------------------------------------------------
# Returns WMI Instance requested.
#---------------------------------------------------------------------------
Function WMIGetInstanceNoAbort
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery)
	if($useCIM){
		Load-CimModules
		try
		{
			$cimSessionOption = New-CimSessionOption -Protocol DCOM
			$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
			$oInstance = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
		}
		catch
		{
			$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue 
		}
		Finally
		{
			Get-CimSession | Remove-CimSession
			$cimsession =$null
			$cimSessionOption = $null 
		}
	}else{
		$oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
	}
    return $oInstance
}

#---------------------------------------------------------------------------
# Executes the WMI query and returns the result set.
#---------------------------------------------------------------------------
Function WMIExecQuery
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sQuery)

    $error.Clear()

	if($useCIM){

		Load-CimModules
		try
		{
			$cimSessionOption = New-CimSessionOption -Protocol DCOM
			$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
			$oQuery = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
		}
		catch
		{
			$oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
		}
		Finally
		{
			Get-CimSession | Remove-CimSession
			$cimsession =$null
			$cimSessionOption = $null 
		}
	}else{
		$oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
	}
    if ($error.Count -gt 0)
    {
        ThrowScriptError ("The Query '" + $sQuery + "' returned an invalid result set.  Please check to see if this is a valid WMI Query.") $error[0]
    }

    return $oQuery
}

#---------------------------------------------------------------------------
# Executes the WMI query and returns the result set, no abort version.
#---------------------------------------------------------------------------
Function WMIExecQueryNoAbort
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sQuery)    
    if($useCIM){
		Load-CimModules
		try
		{
			$cimSessionOption = New-CimSessionOption -Protocol DCOM
			$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
			$oQuery = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
		}
		catch
		{
			$oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue 
		}
		Finally
		{
			Get-CimSession | Remove-CimSession
			$cimsession =$null
			$cimSessionOption = $null 
		}
	}else{
		$oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
	}

    return $oQuery
}

#---------------------------------------------------------------------------
# Creates an event and sends it back to the mom server.
#---------------------------------------------------------------------------
Function ThrowScriptErrorNoAbort
{
    param ([string]$sMessage, 
           [System.Management.Automation.ErrorRecord]$oErr)
    # Retrieve the name of this (running) script
    $ScriptFileName = $MyInvocation.ScriptName
    
    if ($oErr -ne $null)
    {
        $sMessage = $sMessage + ". " + $oErr.ErrorDetails
    }
    
    $momAPI.LogScriptEvent($ScriptFileName, $g_ErrorEventNumber, $EVENT_TYPE_ERROR, $sMessage)
    
    Write-Host $sMessage
}

#---------------------------------------------------------------------------
# Creates an event and sends it back to the mom server.
#---------------------------------------------------------------------------
Function ThrowScriptError
{
    param ([string]$sMessage, 
           [System.Management.Automation.ErrorRecord]$oErr)
    ThrowScriptErrorNoAbort $sMessage $oErr
    exit
}

#---------------------------------------------------------------------------
# Outputs to file and echo for debugging purposes
#---------------------------------------------------------------------------
Function TraceLogMessage
{
    param ([string]$sMessage)

    Write-Host $sMessage
    
    If ($g_DebugFlag -eq $true)
    {
        # Retrieve the name of this (running) script
        $ScriptFileName = $MyInvocation.ScriptName
        
        $momAPI.LogScriptEvent($ScriptFileName, $g_TraceEventNumber, $EVENT_TYPE_INFORMATION, $sMessage)
    }
}

#---------------------------------------------------------------------------
# Verifies the expression. If equals to False then generates an error and quits the script
#   Usage:
#     Verify Not WMISet Is Nothing, "WMISet is invalid!"
#     Verify WMISet.Count = 1, "Invalid quantity of services with name 'Server' (qty = " &amp; WMISet.Count &amp; ")."
#---------------------------------------------------------------------------
Function Verify
{
    param ([bool]$bBool, 
           [string]$sMessage)

    If ($bBool -eq $false)
    {
        ThrowScriptError $sMessage $null
    }
}

Function GetRegistryKeyValue
{
    param ([string]$keyPath, 
           [string]$key)

    $error.Clear()

    $strKeyValue = Get-ItemProperty -Path $keyPath -Name $key -ErrorAction SilentlyContinue
    if ($error.Count -gt 0)
    {
        ThrowScriptError ("An error occurred while reading the registry: '" + $keyPath + $key + "'") $error[0]
    }
    return $strKeyValue.$key
}


#---------------------------------------------------------------------------
# Function: ExpressedInMB
#   Usage:
#     Parameter (SizeInBytes) 
#     Returns the Size Expressed in MBytes
#---------------------------------------------------------------------------
Function ExpressedInMB
{
    param ($SizeInBytes)

    $NumberSizeExpInMB = [math]::Round($SizeInBytes / $DISKSIZE_BYTES_IN_MB, 0)
    return $NumberSizeExpInMB
}

Function Load-CimModules
{
	$error.Clear()

	$CimModule = Get-Module CimCmdlets

	if ($null -eq $CimModule)
	{
			Import-Module CimCmdlets
			$error.Clear()
	}
}#Copyright (c) Microsoft Corporation. All rights reserved.
                      
# Parameters that should be passed to this script
# 0 Computer (FQDN) where the Server service should be started 
# 1 Service Name

Function Main()
{ 
	$ServiceState_Stopped = "stopped"
	$ServiceState_Running = "running"

    $owObj = GetServerService $TargetComputer $ServiceName
    
    If ($owObj.State.ToLower() -ne $ServiceState_Stopped)
    {
        Write-Host ("The " + $owObj.DisplayName + " service is not stopped (" + $owObj.State + ").")
        return
    }
    
    Write-Host ("The " + $owObj.DisplayName + " service is starting ...")
        
    Load-CimModules
	try
	{
		$cimSessionOption = New-CimSessionOption -Protocol DCOM
		$cimsession = New-CimSession -SessionOption $cimSessionOption 
		$Result = Invoke-CimMethod -CimSession $cimsession -InputObject $owObj -MethodName StartService  
	}
	catch
	{
		$Result = Invoke-WmiMethod -InputObject $owObj -Name StartService  
	}
	Finally
	{
		Get-CimSession | Remove-CimSession
		$cimsession =$null
		$cimSessionOption = $null 
	}
    Verify ($Result.ReturnValue -eq 0) ("Could not start the " + $owObj.DisplayName + " service with error " + $Result.ReturnValue + " (" + (GetServiceErrorCode $Result.ReturnValue) + ").")
    
    $nCount = 10
    do
    {
        sleep -m 1000
        $owObj = GetServerService $TargetComputer $ServiceName
        Write-Host ("Current state is '" + $owObj.State + "'.")
        $nCount--
    }
    while ($owObj.State.ToLower() -ne $ServiceState_Running -and $nCount -ge 0)
    
    If ($owObj.State.ToLower() -eq $ServiceState_Running)
    {
        Write-Host ("The " + $owObj.DisplayName + " service was started successfully.")
    }
}

Function GetServerService
{
    param ([string]$sTargetComputer,
           [string]$sServiceName)

    $WMISet = WMIGetInstance $sTargetComputer "root\cimv2" ("Win32_Service where Name='" + $sServiceName + "'")
    Verify ($WMISet -isnot [System.Array]) ("Invalid quantity of services with name '" + $sServiceName + "' (qty = " + $WMISet.Count + ").")
    foreach ($owObj in $WMISet)
    {
        return $owObj
    }
}

Function GetServiceErrorCode
{
    param ([Int]$Code)
    $varArray = New-Object string[] 25
    $varArray[0]  = "Success"
    $varArray[1]  = "Not Supported"
    $varArray[2]  = "Access Denied"
    $varArray[3]  = "Dependent Services Running"
    $varArray[4]  = "Invalid Service Control"
    $varArray[5]  = "Service Cannot Accept Control"
    $varArray[6]  = "Service Not Active"
    $varArray[7]  = "Service Request Timeout"
    $varArray[8]  = "Unknown Failure"
    $varArray[9]  = "Path Not Found"
    $varArray[10] = "Service Already Running"
    $varArray[11] = "Service Database Locked"
    $varArray[12] = "Service Dependency Deleted"
    $varArray[13] = "Service Dependency Failure"
    $varArray[14] = "Service Disabled"
    $varArray[15] = "Service Logon Failure"
    $varArray[16] = "Service Marked For Deletion"
    $varArray[17] = "Service No Thread"
    $varArray[18] = "Status Circular Dependency"
    $varArray[19] = "Status Duplicate Name"
    $varArray[20] = "Status Invalid Name"
    $varArray[21] = "Status Invalid Parameter"
    $varArray[22] = "Status Invalid Service Account"
    $varArray[23] = "Status Service Exists"
    $varArray[24] = "Service Already Paused"
    
    If (($Code -lt 0) -or ($Code -ge $varArray.Length))
    {
        return "Unknown Code Result"
    }
    
    return $varArray[$Code]
}
Function Load-CimModules
{
	$error.Clear()

	$CimModule = Get-Module CimCmdlets

	if ($null -eq $CimModule)
	{
			Import-Module CimCmdlets
			$error.Clear()
	}
}
Main</Contents></File></Files></WriteAction></MemberModules><Composition><Node ID="StartServiceViaWMI"/></Composition></Composite></ModuleImplementation><OutputType>System!System.CommandOutput</OutputType><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.Windows.Server.ScriptWriteAction" Accessibility="Public" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>System!System.ParamListSchema</SchemaType><SchemaType>System!System.CommandExecuterSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ScriptName" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Arguments" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ScriptBody" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SecureInput" minOccurs="0" maxOccurs="1"><xsd:simpleType><xsd:restriction base="xsd:string"><xsd:maxLength value="256"/></xsd:restriction></xsd:simpleType></xsd:element><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="0" maxOccurs="1" name="EventPolicy" type="CommandExecuterEventPolicyType"/></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int"/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA" TypeID="Windows!Microsoft.Windows.ScriptWriteAction"><ScriptName>$Config/ScriptName$</ScriptName><Arguments>$Config/Arguments$</Arguments><ScriptBody>$Config/ScriptBody$</ScriptBody><SecureInput>$Config/SecureInput$</SecureInput><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><EventPolicy>$Config/EventPolicy$</EventPolicy></WriteAction></MemberModules><Composition><Node ID="WA"/></Composition></Composite></ModuleImplementation><OutputType>System!System.CommandOutput</OutputType><InputType>System!System.BaseData</InputType></WriteActionModuleType></ModuleTypes><MonitorTypes><UnitMonitorType ID="Microsoft.Windows.Server.MaxConcurrentAPI.MonitorType" Accessibility="Public"><MonitorTypeStates><MonitorTypeState ID="Success" NoDetection="false"/><MonitorTypeState ID="Error" NoDetection="false"/></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="DiagnosticMode" type="xsd:integer"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:integer"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="0" name="SyncTime" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:integer"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="0" name="ThresholdWaiters" type="xsd:integer"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="0" name="ThresholdTimeouts" type="xsd:integer"/></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int"/><OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string"/><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int"/><OverrideableParameter ID="ThresholdWaiters" Selector="$Config/ThresholdWaiters$" ParameterType="int"/><OverrideableParameter ID="ThresholdTimeouts" Selector="$Config/ThresholdTimeouts$" ParameterType="int"/></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="Schedule" TypeID="System!System.SimpleScheduler"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><SyncTime>$Config/SyncTime$</SyncTime></DataSource><ProbeAction ID="Probe" TypeID="Microsoft.Windows.Server.MaxConcurrentAPI.Probe"><DiagnosticMode>$Config/DiagnosticMode$</DiagnosticMode><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><ThresholdWaiters>$Config/ThresholdWaiters$</ThresholdWaiters><ThresholdTimeouts>$Config/ThresholdTimeouts$</ThresholdTimeouts></ProbeAction><ConditionDetection ID="HealthyCD" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Property[@Name='State']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">1</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="ErrorCD" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Property[@Name='State']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">0</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="Success"><Node ID="HealthyCD"><Node ID="Probe"><Node ID="Schedule"/></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="Error"><Node ID="ErrorCD"><Node ID="Probe"><Node ID="Schedule"/></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType></MonitorTypes></TypeDefinitions><Categories><Category ID="Cat.Microsoft.Windows.Server.Computer.Compmgmt" Target="Microsoft.Windows.Server.Computer.Compmgmt" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject"/><Category ID="Cat.Microsoft.Windows.Server.Computer.MSTSC" Target="Microsoft.Windows.Server.Computer.MSTSC" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject"/><Category ID="Cat.Microsoft.Windows.Server.Computer.MSTSCAdmin" Target="Microsoft.Windows.Server.Computer.MSTSCAdmin" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject"/><Category ID="Cat.Microsoft.Windows.Server.Computer.MSTSCConsole" Target="Microsoft.Windows.Server.Computer.MSTSCConsole" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject"/><Category ID="Cat.Microsoft.Windows.Server.Computer.OpenPowerShell" Target="Microsoft.Windows.Server.Computer.OpenPowerShell" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject"/></Categories><Monitoring><Discoveries><Discovery ID="Microsoft.Windows.Server.AllServersComputerGroupDiscovery" Enabled="true" Target="Microsoft.Windows.Server.ComputerGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SC!Microsoft.SystemCenter.ComputerGroupContainsComputer"/></DiscoveryTypes><DataSource ID="DiscoveryDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Server.Computer"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SC!Microsoft.SystemCenter.ComputerGroupContainsComputer"]$</RelationshipClass></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.Windows.Server.InstanceGroup.Discovery" Enabled="true" Target="Microsoft.Windows.Server.InstanceGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCIG!Microsoft.SystemCenter.InstanceGroupContainsEntities"/></DiscoveryTypes><DataSource ID="DiscoveryDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Server.OperatingSystem"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCIG!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass></MembershipRule><MembershipRule><MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Server.Computer"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCIG!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass></MembershipRule><MembershipRule><MonitoringClass>$MPElement[Name="Microsoft.Windows.Server.NetworkAdapter"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCIG!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass></MembershipRule><MembershipRule><MonitoringClass>$MPElement[Name="Microsoft.Windows.Server.Processor"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCIG!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass></MembershipRule><MembershipRule><MonitoringClass>$MPElement[Name="Microsoft.Windows.Server.LogicalDisk"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCIG!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass></MembershipRule><MembershipRule><MonitoringClass>$MPElement[Name="Microsoft.Windows.Server.PhysicalDisk"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCIG!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass></MembershipRule><MembershipRule><MonitoringClass>$MPElement[Name="Microsoft.Windows.Server.DiskPartition"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCIG!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.Windows.Server.InstanceGroupOnly.Discovery" Enabled="true" Target="Microsoft.Windows.Server.InstanceGroupOnly" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCIG!Microsoft.SystemCenter.InstanceGroupContainsEntities"/></DiscoveryTypes><DataSource ID="DiscoveryDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Server.OperatingSystem"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCIG!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass></MembershipRule><MembershipRule><MonitoringClass>$MPElement[Name="Microsoft.Windows.Server.NetworkAdapter"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCIG!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass></MembershipRule><MembershipRule><MonitoringClass>$MPElement[Name="Microsoft.Windows.Server.Processor"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCIG!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass></MembershipRule><MembershipRule><MonitoringClass>$MPElement[Name="Microsoft.Windows.Server.LogicalDisk"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCIG!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass></MembershipRule><MembershipRule><MonitoringClass>$MPElement[Name="Microsoft.Windows.Server.PhysicalDisk"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCIG!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass></MembershipRule><MembershipRule><MonitoringClass>$MPElement[Name="Microsoft.Windows.Server.DiskPartition"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCIG!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass></MembershipRule></MembershipRules></DataSource></Discovery></Discoveries><Monitors><AggregateMonitor ID="Microsoft.Windows.Server.Computer.HardwareAvailabilityAggregate" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" ParentMonitorID="SystemHealth!System.Health.AvailabilityState" Remotable="true" Priority="Normal"><Category>AvailabilityHealth</Category><Algorithm>WorstOf</Algorithm></AggregateMonitor><DependencyMonitor ID="Microsoft.Windows.Server.Computer.HardwareAvailabilityRollup" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" ParentMonitorID="Microsoft.Windows.Server.Computer.HardwareAvailabilityAggregate" Remotable="true" Priority="Normal" RelationshipType="Windows!Microsoft.Windows.ComputerHostsLogicalDevice" MemberMonitor="SystemHealth!System.Health.AvailabilityState"><Category>AvailabilityHealth</Category><Algorithm>WorstOf</Algorithm><MemberUnAvailable>Error</MemberUnAvailable></DependencyMonitor><DependencyMonitor ID="Microsoft.Windows.Server.Computer.HardwarePerformanceRollup" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" ParentMonitorID="SystemHealth!System.Health.PerformanceState" Remotable="true" Priority="Normal" RelationshipType="Windows!Microsoft.Windows.ComputerHostsLogicalDevice" MemberMonitor="SystemHealth!System.Health.PerformanceState"><Category>PerformanceHealth</Category><Algorithm>WorstOf</Algorithm><MemberUnAvailable>Error</MemberUnAvailable></DependencyMonitor><DependencyMonitor ID="Microsoft.Windows.Server.Computer.OSAvailabilityRollup" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" ParentMonitorID="SystemHealth!System.Health.AvailabilityState" Remotable="true" Priority="Normal" RelationshipType="Windows!Microsoft.Windows.ComputerHostsOperatingSystem" MemberMonitor="SystemHealth!System.Health.AvailabilityState"><Category>AvailabilityHealth</Category><Algorithm>WorstOf</Algorithm><MemberUnAvailable>Error</MemberUnAvailable></DependencyMonitor><DependencyMonitor ID="Microsoft.Windows.Server.Computer.OSConfigurationRollup" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" ParentMonitorID="SystemHealth!System.Health.ConfigurationState" Remotable="true" Priority="Normal" RelationshipType="Windows!Microsoft.Windows.ComputerHostsOperatingSystem" MemberMonitor="SystemHealth!System.Health.ConfigurationState"><Category>ConfigurationHealth</Category><Algorithm>WorstOf</Algorithm><MemberUnAvailable>Error</MemberUnAvailable></DependencyMonitor><DependencyMonitor ID="Microsoft.Windows.Server.Computer.OSPerformanceRollup" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" ParentMonitorID="SystemHealth!System.Health.PerformanceState" Remotable="true" Priority="Normal" RelationshipType="Windows!Microsoft.Windows.ComputerHostsOperatingSystem" MemberMonitor="SystemHealth!System.Health.PerformanceState"><Category>PerformanceHealth</Category><Algorithm>WorstOf</Algorithm><MemberUnAvailable>Error</MemberUnAvailable></DependencyMonitor></Monitors></Monitoring><Presentation><ConsoleTasks><ConsoleTask ID="Microsoft.Windows.Server.Computer.Compmgmt" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" RequireOutput="false"><Assembly>Res.Microsoft.Windows.Server.Computer.Compmgmt</Assembly><Handler>ShellHandler</Handler><Parameters><Argument Name="WorkingDirectory"/><Argument Name="Application">%windir%\system32\mmc.exe</Argument><Argument>%windir%\system32\compmgmt.msc</Argument><Argument>/computer:$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</Argument></Parameters></ConsoleTask><ConsoleTask ID="Microsoft.Windows.Server.Computer.MSTSC" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" RequireOutput="false"><Assembly>Res.Microsoft.Windows.Server.Computer.MSTSC</Assembly><Handler>ShellHandler</Handler><Parameters><Argument Name="WorkingDirectory"/><Argument Name="Application">%windir%\system32\mstsc.exe</Argument><Argument>/v:</Argument><Argument>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</Argument><Argument>/f</Argument></Parameters></ConsoleTask><ConsoleTask ID="Microsoft.Windows.Server.Computer.MSTSCAdmin" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" RequireOutput="false"><Assembly>Res.Microsoft.Windows.Server.Computer.MSTSCAdmin</Assembly><Handler>ShellHandler</Handler><Parameters><Argument Name="WorkingDirectory"/><Argument Name="Application">%windir%\system32\mstsc.exe</Argument><Argument>/v:</Argument><Argument>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</Argument><Argument>/f</Argument><Argument>/admin</Argument></Parameters></ConsoleTask><ConsoleTask ID="Microsoft.Windows.Server.Computer.MSTSCConsole" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" RequireOutput="false"><Assembly>Res.Microsoft.Windows.Server.Computer.MSTSCConsole</Assembly><Handler>ShellHandler</Handler><Parameters><Argument Name="WorkingDirectory"/><Argument Name="Application">%windir%\system32\mstsc.exe</Argument><Argument>/v:</Argument><Argument>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</Argument><Argument>/f</Argument><Argument>/console</Argument></Parameters></ConsoleTask><ConsoleTask ID="Microsoft.Windows.Server.Computer.OpenPowerShell" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" RequireOutput="false"><Assembly>Res.Microsoft.Windows.Server.Computer.OpenPowerShell</Assembly><Handler>ShellHandler</Handler><Parameters><Argument Name="WorkingDirectory"/><Argument Name="Application">powershell.exe </Argument><Argument> -noexit -command "Enter-PSSession -computer $Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$"</Argument></Parameters></ConsoleTask></ConsoleTasks><Views><View ID="Microsoft.Windows.Server.AlertsView" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="true"><Category>Operations</Category><Criteria><ResolutionState><StateRange Operator="NotEquals">255</StateRange></ResolutionState></Criteria><Presentation><ColumnInfo Index="0" SortIndex="0" Width="60" Grouped="true" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Severity</Name><Id>Severity</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="28" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Icon</Name><Id>Icon</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Path</Name><Id>MonitoringObjectPath</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Source</Name><Id>MonitoringObjectDisplayName</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>MonitoringObjectInMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Resolution State</Name><Id>ResolutionState</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="1" Width="150" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Created</Name><Id>TimeRaised</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Age</Name><Id>Age</Id></ColumnInfo><ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Type</Name><Id>Category</Id></ColumnInfo><ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Owner</Name><Id>Owner</Id></ColumnInfo><ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Priority</Name><Id>Priority</Id></ColumnInfo><ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Latency</Name><Id>Latency</Id></ColumnInfo><ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Description</Name><Id>Description</Id></ColumnInfo><ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Connector</Name><Id>ConnectorId</Id></ColumnInfo><ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Forwarding Status</Name><Id>ConnectorStatus</Id></ColumnInfo><ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Class</Name><Id>Class</Id></ColumnInfo><ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time in State</Name><Id>TimeInState</Id></ColumnInfo><ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 1</Name><Id>CustomField1</Id></ColumnInfo><ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 2</Name><Id>CustomField2</Id></ColumnInfo><ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 3</Name><Id>CustomField3</Id></ColumnInfo><ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 4</Name><Id>CustomField4</Id></ColumnInfo><ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 5</Name><Id>CustomField5</Id></ColumnInfo><ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 6</Name><Id>CustomField6</Id></ColumnInfo><ColumnInfo Index="24" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 7</Name><Id>CustomField7</Id></ColumnInfo><ColumnInfo Index="25" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 8</Name><Id>CustomField8</Id></ColumnInfo><ColumnInfo Index="26" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 9</Name><Id>CustomField9</Id></ColumnInfo><ColumnInfo Index="27" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 10</Name><Id>CustomField10</Id></ColumnInfo><ColumnInfo Index="28" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Resolved By</Name><Id>ResolvedBy</Id></ColumnInfo><ColumnInfo Index="29" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time Resolved</Name><Id>TimeResolved</Id></ColumnInfo><ColumnInfo Index="30" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last State Change</Name><Id>TimeResolutionStateLastModified</Id></ColumnInfo><ColumnInfo Index="31" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified</Name><Id>LastModified</Id></ColumnInfo><ColumnInfo Index="32" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified By</Name><Id>LastModifiedBy</Id></ColumnInfo><ColumnInfo Index="33" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Management Group</Name><Id>ManagementGroup</Id></ColumnInfo><ColumnInfo Index="34" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Site</Name><Id>SiteName</Id></ColumnInfo><ColumnInfo Index="35" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Repeat Count</Name><Id>RepeatCount</Id></ColumnInfo><ColumnInfo Index="36" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Ticket ID</Name><Id>TicketId</Id></ColumnInfo></Presentation><Target>$MPElement[Name="Microsoft.Windows.Server.InstanceGroupOnly"]$</Target></View><View ID="Microsoft.Windows.Server.Computer.AlertsView" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="true"><Category>Operations</Category><Criteria><ResolutionState><StateRange Operator="NotEquals">255</StateRange></ResolutionState></Criteria><Presentation><ColumnInfo Index="0" SortIndex="0" Width="60" Grouped="true" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Severity</Name><Id>Severity</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="28" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Icon</Name><Id>Icon</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Path</Name><Id>MonitoringObjectPath</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Source</Name><Id>MonitoringObjectDisplayName</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>MonitoringObjectInMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Resolution State</Name><Id>ResolutionState</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="1" Width="150" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Created</Name><Id>TimeRaised</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Age</Name><Id>Age</Id></ColumnInfo><ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Type</Name><Id>Category</Id></ColumnInfo><ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Owner</Name><Id>Owner</Id></ColumnInfo><ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Priority</Name><Id>Priority</Id></ColumnInfo><ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Latency</Name><Id>Latency</Id></ColumnInfo><ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Description</Name><Id>Description</Id></ColumnInfo><ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Connector</Name><Id>ConnectorId</Id></ColumnInfo><ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Forwarding Status</Name><Id>ConnectorStatus</Id></ColumnInfo><ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Class</Name><Id>Class</Id></ColumnInfo><ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time in State</Name><Id>TimeInState</Id></ColumnInfo><ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 1</Name><Id>CustomField1</Id></ColumnInfo><ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 2</Name><Id>CustomField2</Id></ColumnInfo><ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 3</Name><Id>CustomField3</Id></ColumnInfo><ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 4</Name><Id>CustomField4</Id></ColumnInfo><ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 5</Name><Id>CustomField5</Id></ColumnInfo><ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 6</Name><Id>CustomField6</Id></ColumnInfo><ColumnInfo Index="24" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 7</Name><Id>CustomField7</Id></ColumnInfo><ColumnInfo Index="25" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 8</Name><Id>CustomField8</Id></ColumnInfo><ColumnInfo Index="26" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 9</Name><Id>CustomField9</Id></ColumnInfo><ColumnInfo Index="27" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 10</Name><Id>CustomField10</Id></ColumnInfo><ColumnInfo Index="28" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Resolved By</Name><Id>ResolvedBy</Id></ColumnInfo><ColumnInfo Index="29" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time Resolved</Name><Id>TimeResolved</Id></ColumnInfo><ColumnInfo Index="30" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last State Change</Name><Id>TimeResolutionStateLastModified</Id></ColumnInfo><ColumnInfo Index="31" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified</Name><Id>LastModified</Id></ColumnInfo><ColumnInfo Index="32" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified By</Name><Id>LastModifiedBy</Id></ColumnInfo><ColumnInfo Index="33" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Management Group</Name><Id>ManagementGroup</Id></ColumnInfo><ColumnInfo Index="34" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Site</Name><Id>SiteName</Id></ColumnInfo><ColumnInfo Index="35" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Repeat Count</Name><Id>RepeatCount</Id></ColumnInfo><ColumnInfo Index="36" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Ticket ID</Name><Id>TicketId</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.DiskPartition.Alerts.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.DiskPartition" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="false"><Category>Operations</Category><Criteria><ResolutionState><StateRange Operator="NotEquals">255</StateRange></ResolutionState></Criteria><Presentation><ColumnInfo Index="0" SortIndex="0" Width="60" Grouped="true" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Severity</Name><Id>Severity</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="28" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Icon</Name><Id>Icon</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Path</Name><Id>MonitoringObjectPath</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Source</Name><Id>MonitoringObjectDisplayName</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>MonitoringObjectInMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Resolution State</Name><Id>ResolutionState</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="1" Width="150" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Created</Name><Id>TimeRaised</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Age</Name><Id>Age</Id></ColumnInfo><ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Type</Name><Id>Category</Id></ColumnInfo><ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Owner</Name><Id>Owner</Id></ColumnInfo><ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Priority</Name><Id>Priority</Id></ColumnInfo><ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Latency</Name><Id>Latency</Id></ColumnInfo><ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Description</Name><Id>Description</Id></ColumnInfo><ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Connector</Name><Id>ConnectorId</Id></ColumnInfo><ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Forwarding Status</Name><Id>ConnectorStatus</Id></ColumnInfo><ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Class</Name><Id>Class</Id></ColumnInfo><ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time in State</Name><Id>TimeInState</Id></ColumnInfo><ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 1</Name><Id>CustomField1</Id></ColumnInfo><ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 2</Name><Id>CustomField2</Id></ColumnInfo><ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 3</Name><Id>CustomField3</Id></ColumnInfo><ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 4</Name><Id>CustomField4</Id></ColumnInfo><ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 5</Name><Id>CustomField5</Id></ColumnInfo><ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 6</Name><Id>CustomField6</Id></ColumnInfo><ColumnInfo Index="24" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 7</Name><Id>CustomField7</Id></ColumnInfo><ColumnInfo Index="25" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 8</Name><Id>CustomField8</Id></ColumnInfo><ColumnInfo Index="26" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 9</Name><Id>CustomField9</Id></ColumnInfo><ColumnInfo Index="27" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 10</Name><Id>CustomField10</Id></ColumnInfo><ColumnInfo Index="28" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Resolved By</Name><Id>ResolvedBy</Id></ColumnInfo><ColumnInfo Index="29" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time Resolved</Name><Id>TimeResolved</Id></ColumnInfo><ColumnInfo Index="30" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last State Change</Name><Id>TimeResolutionStateLastModified</Id></ColumnInfo><ColumnInfo Index="31" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified</Name><Id>LastModified</Id></ColumnInfo><ColumnInfo Index="32" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified By</Name><Id>LastModifiedBy</Id></ColumnInfo><ColumnInfo Index="33" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Management Group</Name><Id>ManagementGroup</Id></ColumnInfo><ColumnInfo Index="34" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Site</Name><Id>SiteName</Id></ColumnInfo><ColumnInfo Index="35" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Repeat Count</Name><Id>RepeatCount</Id></ColumnInfo><ColumnInfo Index="36" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Ticket ID</Name><Id>TicketId</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.LogicalDisk.Alerts.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.LogicalDisk" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="false"><Category>Operations</Category><Criteria><ResolutionState><StateRange Operator="NotEquals">255</StateRange></ResolutionState></Criteria><Presentation><ColumnInfo Index="0" SortIndex="0" Width="60" Grouped="true" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Severity</Name><Id>Severity</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="28" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Icon</Name><Id>Icon</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Path</Name><Id>MonitoringObjectPath</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Source</Name><Id>MonitoringObjectDisplayName</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>MonitoringObjectInMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Resolution State</Name><Id>ResolutionState</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="1" Width="150" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Created</Name><Id>TimeRaised</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Age</Name><Id>Age</Id></ColumnInfo><ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Type</Name><Id>Category</Id></ColumnInfo><ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Owner</Name><Id>Owner</Id></ColumnInfo><ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Priority</Name><Id>Priority</Id></ColumnInfo><ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Latency</Name><Id>Latency</Id></ColumnInfo><ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Description</Name><Id>Description</Id></ColumnInfo><ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Connector</Name><Id>ConnectorId</Id></ColumnInfo><ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Forwarding Status</Name><Id>ConnectorStatus</Id></ColumnInfo><ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Class</Name><Id>Class</Id></ColumnInfo><ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time in State</Name><Id>TimeInState</Id></ColumnInfo><ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 1</Name><Id>CustomField1</Id></ColumnInfo><ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 2</Name><Id>CustomField2</Id></ColumnInfo><ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 3</Name><Id>CustomField3</Id></ColumnInfo><ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 4</Name><Id>CustomField4</Id></ColumnInfo><ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 5</Name><Id>CustomField5</Id></ColumnInfo><ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 6</Name><Id>CustomField6</Id></ColumnInfo><ColumnInfo Index="24" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 7</Name><Id>CustomField7</Id></ColumnInfo><ColumnInfo Index="25" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 8</Name><Id>CustomField8</Id></ColumnInfo><ColumnInfo Index="26" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 9</Name><Id>CustomField9</Id></ColumnInfo><ColumnInfo Index="27" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 10</Name><Id>CustomField10</Id></ColumnInfo><ColumnInfo Index="28" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Resolved By</Name><Id>ResolvedBy</Id></ColumnInfo><ColumnInfo Index="29" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time Resolved</Name><Id>TimeResolved</Id></ColumnInfo><ColumnInfo Index="30" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last State Change</Name><Id>TimeResolutionStateLastModified</Id></ColumnInfo><ColumnInfo Index="31" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified</Name><Id>LastModified</Id></ColumnInfo><ColumnInfo Index="32" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified By</Name><Id>LastModifiedBy</Id></ColumnInfo><ColumnInfo Index="33" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Management Group</Name><Id>ManagementGroup</Id></ColumnInfo><ColumnInfo Index="34" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Site</Name><Id>SiteName</Id></ColumnInfo><ColumnInfo Index="35" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Repeat Count</Name><Id>RepeatCount</Id></ColumnInfo><ColumnInfo Index="36" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Ticket ID</Name><Id>TicketId</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.NetworkAdapter.Alerts.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.NetworkAdapter" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="false"><Category>Operations</Category><Criteria><ResolutionState><StateRange Operator="NotEquals">255</StateRange></ResolutionState></Criteria><Presentation><ColumnInfo Index="0" SortIndex="0" Width="60" Grouped="true" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Severity</Name><Id>Severity</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="28" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Icon</Name><Id>Icon</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Path</Name><Id>MonitoringObjectPath</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Source</Name><Id>MonitoringObjectDisplayName</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>MonitoringObjectInMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Resolution State</Name><Id>ResolutionState</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="1" Width="150" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Created</Name><Id>TimeRaised</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Age</Name><Id>Age</Id></ColumnInfo><ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Type</Name><Id>Category</Id></ColumnInfo><ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Owner</Name><Id>Owner</Id></ColumnInfo><ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Priority</Name><Id>Priority</Id></ColumnInfo><ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Latency</Name><Id>Latency</Id></ColumnInfo><ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Description</Name><Id>Description</Id></ColumnInfo><ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Connector</Name><Id>ConnectorId</Id></ColumnInfo><ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Forwarding Status</Name><Id>ConnectorStatus</Id></ColumnInfo><ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Class</Name><Id>Class</Id></ColumnInfo><ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time in State</Name><Id>TimeInState</Id></ColumnInfo><ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 1</Name><Id>CustomField1</Id></ColumnInfo><ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 2</Name><Id>CustomField2</Id></ColumnInfo><ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 3</Name><Id>CustomField3</Id></ColumnInfo><ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 4</Name><Id>CustomField4</Id></ColumnInfo><ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 5</Name><Id>CustomField5</Id></ColumnInfo><ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 6</Name><Id>CustomField6</Id></ColumnInfo><ColumnInfo Index="24" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 7</Name><Id>CustomField7</Id></ColumnInfo><ColumnInfo Index="25" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 8</Name><Id>CustomField8</Id></ColumnInfo><ColumnInfo Index="26" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 9</Name><Id>CustomField9</Id></ColumnInfo><ColumnInfo Index="27" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 10</Name><Id>CustomField10</Id></ColumnInfo><ColumnInfo Index="28" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Resolved By</Name><Id>ResolvedBy</Id></ColumnInfo><ColumnInfo Index="29" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time Resolved</Name><Id>TimeResolved</Id></ColumnInfo><ColumnInfo Index="30" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last State Change</Name><Id>TimeResolutionStateLastModified</Id></ColumnInfo><ColumnInfo Index="31" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified</Name><Id>LastModified</Id></ColumnInfo><ColumnInfo Index="32" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified By</Name><Id>LastModifiedBy</Id></ColumnInfo><ColumnInfo Index="33" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Management Group</Name><Id>ManagementGroup</Id></ColumnInfo><ColumnInfo Index="34" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Site</Name><Id>SiteName</Id></ColumnInfo><ColumnInfo Index="35" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Repeat Count</Name><Id>RepeatCount</Id></ColumnInfo><ColumnInfo Index="36" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Ticket ID</Name><Id>TicketId</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.OperatingSystem.Alerts.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="false"><Category>Operations</Category><Criteria><ResolutionState><StateRange Operator="NotEquals">255</StateRange></ResolutionState></Criteria><Presentation><ColumnInfo Index="0" SortIndex="0" Width="60" Grouped="true" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Severity</Name><Id>Severity</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="28" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Icon</Name><Id>Icon</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Path</Name><Id>MonitoringObjectPath</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Source</Name><Id>MonitoringObjectDisplayName</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>MonitoringObjectInMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Resolution State</Name><Id>ResolutionState</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="1" Width="150" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Created</Name><Id>TimeRaised</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Age</Name><Id>Age</Id></ColumnInfo><ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Type</Name><Id>Category</Id></ColumnInfo><ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Owner</Name><Id>Owner</Id></ColumnInfo><ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Priority</Name><Id>Priority</Id></ColumnInfo><ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Latency</Name><Id>Latency</Id></ColumnInfo><ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Description</Name><Id>Description</Id></ColumnInfo><ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Connector</Name><Id>ConnectorId</Id></ColumnInfo><ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Forwarding Status</Name><Id>ConnectorStatus</Id></ColumnInfo><ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Class</Name><Id>Class</Id></ColumnInfo><ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time in State</Name><Id>TimeInState</Id></ColumnInfo><ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 1</Name><Id>CustomField1</Id></ColumnInfo><ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 2</Name><Id>CustomField2</Id></ColumnInfo><ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 3</Name><Id>CustomField3</Id></ColumnInfo><ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 4</Name><Id>CustomField4</Id></ColumnInfo><ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 5</Name><Id>CustomField5</Id></ColumnInfo><ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 6</Name><Id>CustomField6</Id></ColumnInfo><ColumnInfo Index="24" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 7</Name><Id>CustomField7</Id></ColumnInfo><ColumnInfo Index="25" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 8</Name><Id>CustomField8</Id></ColumnInfo><ColumnInfo Index="26" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 9</Name><Id>CustomField9</Id></ColumnInfo><ColumnInfo Index="27" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 10</Name><Id>CustomField10</Id></ColumnInfo><ColumnInfo Index="28" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Resolved By</Name><Id>ResolvedBy</Id></ColumnInfo><ColumnInfo Index="29" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time Resolved</Name><Id>TimeResolved</Id></ColumnInfo><ColumnInfo Index="30" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last State Change</Name><Id>TimeResolutionStateLastModified</Id></ColumnInfo><ColumnInfo Index="31" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified</Name><Id>LastModified</Id></ColumnInfo><ColumnInfo Index="32" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified By</Name><Id>LastModifiedBy</Id></ColumnInfo><ColumnInfo Index="33" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Management Group</Name><Id>ManagementGroup</Id></ColumnInfo><ColumnInfo Index="34" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Site</Name><Id>SiteName</Id></ColumnInfo><ColumnInfo Index="35" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Repeat Count</Name><Id>RepeatCount</Id></ColumnInfo><ColumnInfo Index="36" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Ticket ID</Name><Id>TicketId</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.PhysicalDisk.Alerts.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.PhysicalDisk" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="false"><Category>Operations</Category><Criteria><ResolutionState><StateRange Operator="NotEquals">255</StateRange></ResolutionState></Criteria><Presentation><ColumnInfo Index="0" SortIndex="0" Width="60" Grouped="true" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Severity</Name><Id>Severity</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="28" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Icon</Name><Id>Icon</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Path</Name><Id>MonitoringObjectPath</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Source</Name><Id>MonitoringObjectDisplayName</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>MonitoringObjectInMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Resolution State</Name><Id>ResolutionState</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="1" Width="150" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Created</Name><Id>TimeRaised</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Age</Name><Id>Age</Id></ColumnInfo><ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Type</Name><Id>Category</Id></ColumnInfo><ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Owner</Name><Id>Owner</Id></ColumnInfo><ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Priority</Name><Id>Priority</Id></ColumnInfo><ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Latency</Name><Id>Latency</Id></ColumnInfo><ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Description</Name><Id>Description</Id></ColumnInfo><ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Connector</Name><Id>ConnectorId</Id></ColumnInfo><ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Forwarding Status</Name><Id>ConnectorStatus</Id></ColumnInfo><ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Class</Name><Id>Class</Id></ColumnInfo><ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time in State</Name><Id>TimeInState</Id></ColumnInfo><ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 1</Name><Id>CustomField1</Id></ColumnInfo><ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 2</Name><Id>CustomField2</Id></ColumnInfo><ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 3</Name><Id>CustomField3</Id></ColumnInfo><ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 4</Name><Id>CustomField4</Id></ColumnInfo><ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 5</Name><Id>CustomField5</Id></ColumnInfo><ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 6</Name><Id>CustomField6</Id></ColumnInfo><ColumnInfo Index="24" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 7</Name><Id>CustomField7</Id></ColumnInfo><ColumnInfo Index="25" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 8</Name><Id>CustomField8</Id></ColumnInfo><ColumnInfo Index="26" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 9</Name><Id>CustomField9</Id></ColumnInfo><ColumnInfo Index="27" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 10</Name><Id>CustomField10</Id></ColumnInfo><ColumnInfo Index="28" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Resolved By</Name><Id>ResolvedBy</Id></ColumnInfo><ColumnInfo Index="29" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time Resolved</Name><Id>TimeResolved</Id></ColumnInfo><ColumnInfo Index="30" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last State Change</Name><Id>TimeResolutionStateLastModified</Id></ColumnInfo><ColumnInfo Index="31" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified</Name><Id>LastModified</Id></ColumnInfo><ColumnInfo Index="32" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified By</Name><Id>LastModifiedBy</Id></ColumnInfo><ColumnInfo Index="33" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Management Group</Name><Id>ManagementGroup</Id></ColumnInfo><ColumnInfo Index="34" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Site</Name><Id>SiteName</Id></ColumnInfo><ColumnInfo Index="35" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Repeat Count</Name><Id>RepeatCount</Id></ColumnInfo><ColumnInfo Index="36" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Ticket ID</Name><Id>TicketId</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.Processor.Alerts.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.Processor" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="false"><Category>Operations</Category><Criteria><ResolutionState><StateRange Operator="NotEquals">255</StateRange></ResolutionState></Criteria><Presentation><ColumnInfo Index="0" SortIndex="0" Width="60" Grouped="true" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Severity</Name><Id>Severity</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="28" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Icon</Name><Id>Icon</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Path</Name><Id>MonitoringObjectPath</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Source</Name><Id>MonitoringObjectDisplayName</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>MonitoringObjectInMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Resolution State</Name><Id>ResolutionState</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="1" Width="150" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Created</Name><Id>TimeRaised</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Age</Name><Id>Age</Id></ColumnInfo><ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Type</Name><Id>Category</Id></ColumnInfo><ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Owner</Name><Id>Owner</Id></ColumnInfo><ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Priority</Name><Id>Priority</Id></ColumnInfo><ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Latency</Name><Id>Latency</Id></ColumnInfo><ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Description</Name><Id>Description</Id></ColumnInfo><ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Connector</Name><Id>ConnectorId</Id></ColumnInfo><ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Forwarding Status</Name><Id>ConnectorStatus</Id></ColumnInfo><ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Class</Name><Id>Class</Id></ColumnInfo><ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time in State</Name><Id>TimeInState</Id></ColumnInfo><ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 1</Name><Id>CustomField1</Id></ColumnInfo><ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 2</Name><Id>CustomField2</Id></ColumnInfo><ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 3</Name><Id>CustomField3</Id></ColumnInfo><ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 4</Name><Id>CustomField4</Id></ColumnInfo><ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 5</Name><Id>CustomField5</Id></ColumnInfo><ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 6</Name><Id>CustomField6</Id></ColumnInfo><ColumnInfo Index="24" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 7</Name><Id>CustomField7</Id></ColumnInfo><ColumnInfo Index="25" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 8</Name><Id>CustomField8</Id></ColumnInfo><ColumnInfo Index="26" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 9</Name><Id>CustomField9</Id></ColumnInfo><ColumnInfo Index="27" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Custom Field 10</Name><Id>CustomField10</Id></ColumnInfo><ColumnInfo Index="28" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Resolved By</Name><Id>ResolvedBy</Id></ColumnInfo><ColumnInfo Index="29" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Time Resolved</Name><Id>TimeResolved</Id></ColumnInfo><ColumnInfo Index="30" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last State Change</Name><Id>TimeResolutionStateLastModified</Id></ColumnInfo><ColumnInfo Index="31" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified</Name><Id>LastModified</Id></ColumnInfo><ColumnInfo Index="32" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Last Modified By</Name><Id>LastModifiedBy</Id></ColumnInfo><ColumnInfo Index="33" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Management Group</Name><Id>ManagementGroup</Id></ColumnInfo><ColumnInfo Index="34" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Site</Name><Id>SiteName</Id></ColumnInfo><ColumnInfo Index="35" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Repeat Count</Name><Id>RepeatCount</Id></ColumnInfo><ColumnInfo Index="36" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Ticket ID</Name><Id>TicketId</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.DiskCapacity.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="1" Rows="2"><Cell Column="1" Row="1" ViewID="Microsoft.Windows.Server.LogicalDiskFreeSpace.View"/><Cell Column="1" Row="2" ViewID="Microsoft.Windows.Server.LogicalDiskFreeMegaBytes.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.DiskPartition.Health.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="1" Rows="2"><Cell Column="1" Row="1" ViewID="Microsoft.Windows.Server.PhysicalDisk.State.View"/><Cell Column="1" Row="2" ViewID="Microsoft.Windows.Server.PhysicalDisk.Alerts.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.LogicalDisk.Health.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="1" Rows="2"><Cell Column="1" Row="1" ViewID="Microsoft.Windows.Server.LogicalDisk.State.View"/><Cell Column="1" Row="2" ViewID="Microsoft.Windows.Server.LogicalDisk.Alerts.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.LogicalDiskPerformance.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="2" Rows="2"><Cell Column="1" Row="1" ViewID="Microsoft.Windows.Server.LogicalDiskAvgDiskSecReads.View"/><Cell Column="2" Row="1" ViewID="Microsoft.Windows.Server.LogicalDiskAvgDiskSecWrites.View"/><Cell Column="1" Row="2" ViewID="Microsoft.Windows.Server.LogicalDiskAvgDiskQueueLength.View"/><Cell Column="2" Row="2" ViewID="Microsoft.Windows.Server.LogicalDiskCurrentDiskQueueLength.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.LogicalDiskUtilization.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="2" Rows="2"><Cell Column="1" Row="1" ColumnSpan="2" ViewID="Microsoft.Windows.Server.LogicalDiskBytesSec.View"/><Cell Column="1" Row="2" ViewID="Microsoft.Windows.Server.LogicalDiskReadsSec.View"/><Cell Column="2" Row="2" ViewID="Microsoft.Windows.Server.LogicalDiskWritesSec.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.MemoryUtilizationPageFile.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="2" Rows="2"><Cell Column="1" Row="1" ViewID="Microsoft.Windows.Server.PagingFileUsage.View"/><Cell Column="2" Row="1" ViewID="Microsoft.Windows.Server.MemoryPagessec.View"/><Cell Column="1" Row="2" ViewID="Microsoft.Windows.Server.MemoryPageWritessec.View"/><Cell Column="2" Row="2" ViewID="Microsoft.Windows.Server.MemoryPageReadssec.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.MemoryUtilizationPhysical.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="2" Rows="2"><Cell Column="1" Row="1" ViewID="Microsoft.Windows.Server.MemoryPoolPagedBytes.View"/><Cell Column="2" Row="1" ViewID="Microsoft.Windows.Server.MemoryPoolNonpagedBytes.View"/><Cell Column="1" Row="2" ColumnSpan="2" ViewID="Microsoft.Windows.Server.MemoryAvailableMBytes.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.NetworkAdapter.Health.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="1" Rows="2"><Cell Column="1" Row="1" ViewID="Microsoft.Windows.Server.NetworkAdapter.State.View"/><Cell Column="1" Row="2" ViewID="Microsoft.Windows.Server.NetworkAdapter.Alerts.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.NetworkAdapterUtilization.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="2" Rows="2"><Cell Column="1" Row="1" ViewID="Microsoft.Windows.Server.NetworkInterfaceBytesReceivedsec.View"/><Cell Column="2" Row="1" ViewID="Microsoft.Windows.Server.NetworkInterfaceBytesSentsec.View"/><Cell Column="1" Row="2" ColumnSpan="2" ViewID="Microsoft.Windows.Server.NetworkInterfaceBytesTotalsec.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.OperatingSystem.Health.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="1" Rows="2"><Cell Column="1" Row="1" ViewID="Microsoft.Windows.Server.OperatingSystem.State.View"/><Cell Column="1" Row="2" ViewID="Microsoft.Windows.Server.OperatingSystem.Alerts.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.PhysicalDisk.Health.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="1" Rows="2"><Cell Column="1" Row="1" ViewID="Microsoft.Windows.Server.PhysicalDisk.State.View"/><Cell Column="1" Row="2" ViewID="Microsoft.Windows.Server.PhysicalDisk.Alerts.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.PhysicalDiskPerformance.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="2" Rows="2"><Cell Column="1" Row="1" ViewID="Microsoft.Windows.Server.PhysicalDiskAvgDiskSecReads.View"/><Cell Column="2" Row="1" ViewID="Microsoft.Windows.Server.PhysicalDiskAvgDiskSecWrites.View"/><Cell Column="1" Row="2" ViewID="Microsoft.Windows.Server.PhysicalDiskAvgDiskQueueLength.View"/><Cell Column="2" Row="2" ViewID="Microsoft.Windows.Server.PhysicalDiskCurrentDiskQueueLength.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.PhysicalDiskUtilization.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="2" Rows="2"><Cell Column="1" Row="1" ColumnSpan="2" ViewID="Microsoft.Windows.Server.PhysicalDiskBytesSec.View"/><Cell Column="1" Row="2" ViewID="Microsoft.Windows.Server.PhysicalDiskReadsSec.View"/><Cell Column="2" Row="2" ViewID="Microsoft.Windows.Server.PhysicalDiskWritesSec.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.Processor.Health.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="1" Rows="2"><Cell Column="1" Row="1" ViewID="Microsoft.Windows.Server.Processor.State.View"/><Cell Column="1" Row="2" ViewID="Microsoft.Windows.Server.Processor.Alerts.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.ProcessorPerformance.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="2" Rows="2"><Cell Column="1" Row="1" ColumnSpan="2" ViewID="Microsoft.Windows.Server.ProcessorProcessorTime_Total.View"/><Cell Column="1" Row="2" ViewID="Microsoft.Windows.Server.SystemProcessorQueueLength.View"/><Cell Column="2" Row="2" ViewID="Microsoft.Windows.Server.SystemContextSwitchessec.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.Processor.Dashboard.View" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.DashboardViewType" Visible="true"><Category>Operations</Category><PanelConfiguration Columns="2" Rows="2"><Cell Column="1" Row="1" ColumnSpan="2" ViewID="Microsoft.Windows.Server.Processor.ProcessorTime.View"/><Cell Column="1" Row="2" ViewID="Microsoft.Windows.Server.Processor.DPCTime.View"/><Cell Column="2" Row="2" ViewID="Microsoft.Windows.Server.Processor.InterruptTime.View"/></PanelConfiguration></View><View ID="Microsoft.Windows.Server.OperatingSystem.ServiceOrDriverFailedToStart.Event.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.EventViewType" Visible="true"><Category>Operations</Category><Criteria><EventNumberList><EventNumber>7000</EventNumber><EventNumber>7001</EventNumber><EventNumber>7002</EventNumber><EventNumber>7003</EventNumber><EventNumber>7008</EventNumber><EventNumber>7013</EventNumber><EventNumber>7014</EventNumber><EventNumber>7022</EventNumber><EventNumber>7023</EventNumber><EventNumber>7025</EventNumber><EventNumber>7026</EventNumber><EventNumber>7038</EventNumber></EventNumberList><PublisherName>Service Control Manager</PublisherName></Criteria><Presentation><ColumnInfo Index="0" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Level</Name><Id>LevelId</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Date and Time</Name><Id>TimeGenerated</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Source</Name><Id>PublisherName</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Name</Name><Id>MonitoringObjectName</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>User</Name><Id>User</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Event Number</Name><Id>Number</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Log Name</Name><Id>Channel</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Logging Computer</Name><Id>LoggingComputer</Id></ColumnInfo></Presentation><Target/></View><View ID="Microsoft.Windows.Server.OperatingSystem.ServiceTerminatedUnexpextedly.Event.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.EventViewType" Visible="true"><Category>Operations</Category><Criteria><EventNumberList><EventNumber>7021</EventNumber><EventNumber>7024</EventNumber><EventNumber>7031</EventNumber><EventNumber>7032</EventNumber><EventNumber>7034</EventNumber></EventNumberList><PublisherName>Service Control Manager</PublisherName></Criteria><Presentation><ColumnInfo Index="0" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Level</Name><Id>LevelId</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Date and Time</Name><Id>TimeGenerated</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Source</Name><Id>PublisherName</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Name</Name><Id>MonitoringObjectName</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>User</Name><Id>User</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Event Number</Name><Id>Number</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Log Name</Name><Id>Channel</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Logging Computer</Name><Id>LoggingComputer</Id></ColumnInfo></Presentation><Target/></View><View ID="Microsoft.Windows.Server.OperatingSystem.ShareConfigurationInvalid.Event.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.EventViewType" Visible="true"><Category>Operations</Category><Criteria><EventNumberList><EventNumber>2507</EventNumber><EventNumber>2511</EventNumber></EventNumberList><PublisherName>Server</PublisherName></Criteria><Presentation><ColumnInfo Index="0" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Level</Name><Id>LevelId</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Date and Time</Name><Id>TimeGenerated</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Source</Name><Id>PublisherName</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Name</Name><Id>MonitoringObjectName</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>User</Name><Id>User</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Event Number</Name><Id>Number</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Log Name</Name><Id>Channel</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Logging Computer</Name><Id>LoggingComputer</Id></ColumnInfo></Presentation><Target/></View><View ID="Microsoft.Windows.Server.OperatingSystem.SoftwareUpdateInstallationFailed.Event.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.EventViewType" Visible="true"><Category>Operations</Category><Criteria><EventNumberList><EventNumber>20</EventNumber></EventNumberList><PublisherName>Windows Update Agent</PublisherName></Criteria><Presentation><ColumnInfo Index="0" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending"><Name>Level</Name><Id>LevelId</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Date and Time</Name><Id>TimeGenerated</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Source</Name><Id>PublisherName</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Name</Name><Id>MonitoringObjectName</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>User</Name><Id>User</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Event Number</Name><Id>Number</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Log Name</Name><Id>Channel</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Logging Computer</Name><Id>LoggingComputer</Id></ColumnInfo></Presentation><Target/></View><View ID="Microsoft.Windows.Server.Computer.PerformanceView" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="true"><Category>Operations</Category></View><View ID="Microsoft.Windows.Server.LogicalDiskAvgDiskQueueLength.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.LogicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>LogicalDisk</Object><Instance/><Counter>Avg. Disk Queue Length</Counter></Criteria></View><View ID="Microsoft.Windows.Server.LogicalDiskAvgDiskSecReads.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.LogicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>LogicalDisk</Object><Instance/><Counter>Avg. Disk sec/Read</Counter></Criteria></View><View ID="Microsoft.Windows.Server.LogicalDiskAvgDiskSecWrites.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.LogicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>LogicalDisk</Object><Instance/><Counter>Avg. Disk sec/Write</Counter></Criteria></View><View ID="Microsoft.Windows.Server.LogicalDiskBytesSec.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.LogicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>LogicalDisk</Object><Instance/><Counter>Disk Bytes/sec</Counter></Criteria></View><View ID="Microsoft.Windows.Server.LogicalDiskCurrentDiskQueueLength.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.LogicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>LogicalDisk</Object><Instance/><Counter>Current Disk Queue Length</Counter></Criteria></View><View ID="Microsoft.Windows.Server.LogicalDiskFreeMegaBytes.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.LogicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>LogicalDisk</Object><Instance/><Counter>Free Megabytes</Counter></Criteria></View><View ID="Microsoft.Windows.Server.LogicalDiskFreeSpace.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.LogicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>LogicalDisk</Object><Instance/><Counter>% Free Space</Counter></Criteria></View><View ID="Microsoft.Windows.Server.LogicalDiskReadsSec.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.LogicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>LogicalDisk</Object><Instance/><Counter>Disk Reads/sec</Counter></Criteria></View><View ID="Microsoft.Windows.Server.LogicalDiskWritesSec.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.LogicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>LogicalDisk</Object><Instance/><Counter>Disk Writes/sec</Counter></Criteria></View><View ID="Microsoft.Windows.Server.MemoryAvailableMBytes.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>Memory</Object><Instance/><Counter>Available MBytes</Counter></Criteria></View><View ID="Microsoft.Windows.Server.MemoryPageReadssec.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>Memory</Object><Instance/><Counter>Page Reads/sec</Counter></Criteria></View><View ID="Microsoft.Windows.Server.MemoryPagessec.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>Memory</Object><Instance/><Counter>Pages/sec</Counter></Criteria></View><View ID="Microsoft.Windows.Server.MemoryPageWritessec.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>Memory</Object><Instance/><Counter>Page Writes/sec</Counter></Criteria></View><View ID="Microsoft.Windows.Server.MemoryPoolNonpagedBytes.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>Memory</Object><Instance/><Counter>Pool Nonpaged Bytes</Counter></Criteria></View><View ID="Microsoft.Windows.Server.MemoryPoolPagedBytes.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>Memory</Object><Instance/><Counter>Pool Paged Bytes</Counter></Criteria></View><View ID="Microsoft.Windows.Server.NetworkInterfaceBytesReceivedsec.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.NetworkAdapter" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>Network Interface</Object><Instance/><Counter>Bytes Received/sec</Counter></Criteria></View><View ID="Microsoft.Windows.Server.NetworkInterfaceBytesSentsec.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.NetworkAdapter" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>Network Interface</Object><Instance/><Counter>Bytes Sent/sec</Counter></Criteria></View><View ID="Microsoft.Windows.Server.NetworkInterfaceBytesTotalsec.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.NetworkAdapter" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>Network Interface</Object><Instance/><Counter>Bytes Total/sec</Counter></Criteria></View><View ID="Microsoft.Windows.Server.PagingFileUsage.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>Paging File</Object><Instance/><Counter>% Usage</Counter></Criteria></View><View ID="Microsoft.Windows.Server.PhysicalDiskAvgDiskQueueLength.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.PhysicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>PhysicalDisk</Object><Instance/><Counter>Avg. Disk Queue Length</Counter></Criteria></View><View ID="Microsoft.Windows.Server.PhysicalDiskAvgDiskSecReads.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.PhysicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>PhysicalDisk</Object><Instance/><Counter>Avg. Disk sec/Read</Counter></Criteria></View><View ID="Microsoft.Windows.Server.PhysicalDiskAvgDiskSecWrites.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.PhysicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>PhysicalDisk</Object><Instance/><Counter>Avg. Disk sec/Write</Counter></Criteria></View><View ID="Microsoft.Windows.Server.PhysicalDiskBytesSec.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.PhysicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>PhysicalDisk</Object><Instance/><Counter>Disk Bytes/sec</Counter></Criteria></View><View ID="Microsoft.Windows.Server.PhysicalDiskCurrentDiskQueueLength.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.PhysicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>PhysicalDisk</Object><Instance/><Counter>Current Disk Queue Length</Counter></Criteria></View><View ID="Microsoft.Windows.Server.PhysicalDiskReadsSec.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.PhysicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>PhysicalDisk</Object><Instance/><Counter>Disk Reads/sec</Counter></Criteria></View><View ID="Microsoft.Windows.Server.PhysicalDiskWritesSec.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.PhysicalDisk" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>PhysicalDisk</Object><Instance/><Counter>Disk Writes/sec</Counter></Criteria></View><View ID="Microsoft.Windows.Server.ProcessorInterruptTime_Total.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>Processor</Object><Instance>_Total</Instance><Counter>% Interrupt Time</Counter></Criteria></View><View ID="Microsoft.Windows.Server.ProcessorProcessorTime_Total.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>Processor</Object><Instance>_Total</Instance><Counter>% Processor Time</Counter></Criteria></View><View ID="Microsoft.Windows.Server.SystemContextSwitchessec.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>System</Object><Instance/><Counter>Context Switches/sec</Counter></Criteria></View><View ID="Microsoft.Windows.Server.SystemProcessorQueueLength.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>System</Object><Instance/><Counter>Processor Queue Length</Counter></Criteria></View><View ID="Microsoft.Windows.Server.Processor.ProcessorTime.View" Accessibility="Internal" Enabled="true" Target="Windows!Microsoft.Windows.Processor" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>Processor</Object><Instance/><Counter>% Processor Time</Counter></Criteria></View><View ID="Microsoft.Windows.Server.Processor.DPCTime.View" Accessibility="Internal" Enabled="true" Target="Windows!Microsoft.Windows.Processor" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>Processor</Object><Instance/><Counter>% DPC Time</Counter></Criteria></View><View ID="Microsoft.Windows.Server.Processor.InterruptTime.View" Accessibility="Internal" Enabled="true" Target="Windows!Microsoft.Windows.Processor" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="false"><Category>Operations</Category><Criteria><Object>Processor</Object><Instance/><Counter>% Interrupt Time</Counter></Criteria></View><View ID="Microsoft.Windows.Server.Computer.StateView" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true"><Category>Operations</Category><Criteria/><Presentation><ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>State</Name><Id>Microsoft.Windows.Server.Computer</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>InMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Path</Name><Id>Path</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Display Name</Name><Id>DisplayName</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>IP Address</Name><Id>IPAddress</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>IsVirtualMachine</Name><Id>IsVirtualMachine</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.DiskPartition.State.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.DiskPartition" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="false"><Category>Operations</Category><Criteria/><Presentation><ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>State</Name><Id>Microsoft.Windows.Server.DiskPartition</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>InMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Path</Name><Id>Path</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Display Name</Name><Id>DisplayName</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Bootable</Name><Id>Bootable</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Primary Partition</Name><Id>PrimaryPartition</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Size(Bytes)</Name><Id>Size</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Disk Partition 2000 State</Name><Id>Microsoft.Windows.Server.2000.DiskPartition</Id></ColumnInfo><ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Disk Partition 2003 State</Name><Id>Microsoft.Windows.Server.2003.DiskPartition</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.DiskPartition.StateView" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.DiskPartition" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true"><Category>Operations</Category><Criteria/><Presentation><ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>State</Name><Id>Microsoft.Windows.Server.DiskPartition</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>InMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Path</Name><Id>Path</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Display Name</Name><Id>DisplayName</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Bootable</Name><Id>Bootable</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Primary Partition</Name><Id>PrimaryPartition</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Size(Bytes)</Name><Id>Size</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Disk Partition 2000 State</Name><Id>Microsoft.Windows.Server.2000.DiskPartition</Id></ColumnInfo><ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Disk Partition 2003 State</Name><Id>Microsoft.Windows.Server.2003.DiskPartition</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.LogicalDisk.State.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.LogicalDisk" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="false"><Category>Operations</Category><Criteria/><Presentation><ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>State</Name><Id>Microsoft.Windows.Server.LogicalDisk</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>InMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Path</Name><Id>Path</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Display Name</Name><Id>DisplayName</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>File System</Name><Id>FileSystem</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Device Description</Name><Id>Description</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Size(Bytes)</Name><Id>Size</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Logical Disk 2000 State</Name><Id>Microsoft.Windows.Server.2000.LogicalDisk</Id></ColumnInfo><ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Logical Disk 2003 State</Name><Id>Microsoft.Windows.Server.2003.LogicalDisk</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.NetworkAdapter.State.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.NetworkAdapter" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="false"><Category>Operations</Category><Criteria/><Presentation><ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>State</Name><Id>Microsoft.Windows.Server.NetworkAdapter</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>InMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Path</Name><Id>Path</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Display Name</Name><Id>DisplayName</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>MACAddress</Name><Id>MACAddress</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>DeviceName</Name><Id>DeviceName</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>IPAddress</Name><Id>IPAddress</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>IPSubnet</Name><Id>IPSubnet</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.OperatingSystem.State.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="false"><Category>Operations</Category><Criteria/><Presentation><ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>State</Name><Id>Microsoft.Windows.Server.OperatingSystem</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>InMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Path</Name><Id>Path</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Display Name</Name><Id>DisplayName</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Operating System Version</Name><Id>OSVersionDisplayName</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Service Pack Version</Name><Id>CSDVersion</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>System Drive</Name><Id>SystemDrive</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Physical Memory</Name><Id>PhysicalMemory</Id></ColumnInfo><ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Logical Processors</Name><Id>LogicalProcessors</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.PhysicalDisk.State.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.PhysicalDisk" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="false"><Category>Operations</Category><Criteria/><Presentation><ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>State</Name><Id>Microsoft.Windows.Server.PhysicalDisk</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>InMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Path</Name><Id>Path</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Display Name</Name><Id>DisplayName</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Manufacturer</Name><Id>Manufacturer</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Model</Name><Id>Model</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Caption</Name><Id>Caption</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>InterfaceType</Name><Id>InterfaceType</Id></ColumnInfo><ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Size(Bytes)</Name><Id>Size</Id></ColumnInfo><ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Physical Disk 2000 State</Name><Id>Microsoft.Windows.Server.2000.PhysicalDisk</Id></ColumnInfo><ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Physical Disk 2003 State</Name><Id>Microsoft.Windows.Server.2003.PhysicalDisk</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.Processor.State.View" Accessibility="Public" Enabled="true" Target="Microsoft.Windows.Server.Processor" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="false"><Category>Operations</Category><Criteria/><Presentation><ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>State</Name><Id>Microsoft.Windows.Server.Processor</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>InMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Path</Name><Id>Path</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Display Name</Name><Id>DisplayName</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Manufacturer</Name><Id>Manufacturer</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Speed</Name><Id>Speed</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Data Width</Name><Id>DataWidth</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Revision</Name><Id>Revision</Id></ColumnInfo><ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Version</Name><Id>Version</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.OS.State.View" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true"><Category>Operations</Category><Criteria/><Presentation><ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>State</Name><Id>Microsoft.Windows.Server.OperatingSystem</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>InMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Path</Name><Id>Path</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Display Name</Name><Id>System.Entity/DisplayName</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Operating System Version</Name><Id>Microsoft.Windows.OperatingSystem/OSVersion</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Operating System Version Display Name</Name><Id>Microsoft.Windows.OperatingSystem/OSVersionDisplayName</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Product Type</Name><Id>Microsoft.Windows.OperatingSystem/ProductType</Id></ColumnInfo><ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Build Number</Name><Id>Microsoft.Windows.OperatingSystem/BuildNumber</Id></ColumnInfo><ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>CSD Version</Name><Id>Microsoft.Windows.OperatingSystem/CSDVersion</Id></ColumnInfo><ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Service Pack Version</Name><Id>Microsoft.Windows.OperatingSystem/ServicePackVersion</Id></ColumnInfo><ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Serial Number</Name><Id>Microsoft.Windows.OperatingSystem/SerialNumber</Id></ColumnInfo><ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Install Date</Name><Id>Microsoft.Windows.OperatingSystem/InstallDate</Id></ColumnInfo><ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>System Drive</Name><Id>Microsoft.Windows.OperatingSystem/SystemDrive</Id></ColumnInfo><ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Windows Directory</Name><Id>Microsoft.Windows.OperatingSystem/WindowsDirectory</Id></ColumnInfo><ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Physical Memory (KB)</Name><Id>Microsoft.Windows.OperatingSystem/PhysicalMemory</Id></ColumnInfo><ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Logical Processors</Name><Id>Microsoft.Windows.OperatingSystem/LogicalProcessors</Id></ColumnInfo><ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Country Code</Name><Id>Microsoft.Windows.OperatingSystem/CountryCode</Id></ColumnInfo><ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Locale</Name><Id>Microsoft.Windows.OperatingSystem/Locale</Id></ColumnInfo><ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Description</Name><Id>Microsoft.Windows.OperatingSystem/Description</Id></ColumnInfo><ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Manufacturer</Name><Id>Microsoft.Windows.OperatingSystem/Manufacturer</Id></ColumnInfo><ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>OS Language</Name><Id>Microsoft.Windows.OperatingSystem/OSLanguage</Id></ColumnInfo><ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Minor Version</Name><Id>Microsoft.Windows.OperatingSystem/MinorVersion</Id></ColumnInfo><ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending"><Name>Major Version</Name><Id>Microsoft.Windows.OperatingSystem/MajorVersion</Id></ColumnInfo></Presentation></View><View ID="Microsoft.Windows.Server.Computer.TasksView" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SC!Microsoft.SystemCenter.TaskStatusViewType" Visible="true"><Category>Operations</Category><Criteria/><Presentation><ColumnInfo Index="0" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Status</Name><Id>Status</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Task Name</Name><Id>DisplayName</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Scheduled Time</Name><Id>TimeScheduled</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Start Time</Name><Id>TimeStarted</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Submitted By</Name><Id>SubmittedBy</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Run As</Name><Id>RunningAs</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Task Target</Name><Id>TargetName</Id></ColumnInfo><ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Task Target Class</Name><Id>TargetedType</Id></ColumnInfo></Presentation><Target>$MPElement[Name="Microsoft.Windows.Server.InstanceGroup"]$</Target></View></Views><Folders><Folder ID="Microsoft.Windows.Server.ViewFolder.Health" Accessibility="Public" ParentFolder="Microsoft.Windows.Server.ViewFolder.Root"/><Folder ID="Microsoft.Windows.Server.ViewFolder.HealthEvents" Accessibility="Public" ParentFolder="Microsoft.Windows.Server.ViewFolder.Health"/><Folder ID="Microsoft.Windows.Server.ViewFolder.Performance" Accessibility="Public" ParentFolder="Microsoft.Windows.Server.ViewFolder.Root"/><Folder ID="Microsoft.Windows.Server.ViewFolder.Root" Accessibility="Public" ParentFolder="SC!Microsoft.SystemCenter.Monitoring.ViewFolder.Root"/></Folders><FolderItems><FolderItem ElementID="Microsoft.Windows.Server.AlertsView" ID="Microsoft.Windows.Server.AlertsView" Folder="Microsoft.Windows.Server.ViewFolder.Root"/><FolderItem ElementID="Microsoft.Windows.Server.Computer.PerformanceView" ID="Microsoft.Windows.Server.Computer.PerformanceView" Folder="Microsoft.Windows.Server.ViewFolder.Root"/><FolderItem ElementID="Microsoft.Windows.Server.Computer.StateView" ID="Microsoft.Windows.Server.Computer.StateView" Folder="Microsoft.Windows.Server.ViewFolder.Root"/><FolderItem ElementID="Microsoft.Windows.Server.Computer.TasksView" ID="Microsoft.Windows.Server.Computer.TasksView" Folder="Microsoft.Windows.Server.ViewFolder.Root"/><FolderItem ElementID="Microsoft.Windows.Server.DiskCapacity.Dashboard.View" ID="Microsoft.Windows.Server.DiskCapacity.Dashboard.View" Folder="Microsoft.Windows.Server.ViewFolder.Performance"/><FolderItem ElementID="Microsoft.Windows.Server.LogicalDisk.Health.Dashboard.View" ID="Microsoft.Windows.Server.LogicalDisk.Health.Dashboard.View" Folder="Microsoft.Windows.Server.ViewFolder.Health"/><FolderItem ElementID="Microsoft.Windows.Server.LogicalDisk.State.View" ID="Microsoft.Windows.Server.LogicalDisk.State.View" Folder="Microsoft.Windows.Server.ViewFolder.Root"/><FolderItem ElementID="Microsoft.Windows.Server.LogicalDiskPerformance.Dashboard.View" ID="Microsoft.Windows.Server.LogicalDiskPerformance.Dashboard.View" Folder="Microsoft.Windows.Server.ViewFolder.Performance"/><FolderItem ElementID="Microsoft.Windows.Server.LogicalDiskUtilization.Dashboard.View" ID="Microsoft.Windows.Server.LogicalDiskUtilization.Dashboard.View" Folder="Microsoft.Windows.Server.ViewFolder.Performance"/><FolderItem ElementID="Microsoft.Windows.Server.MemoryUtilizationPageFile.Dashboard.View" ID="Microsoft.Windows.Server.MemoryUtilizationPageFile.Dashboard.View" Folder="Microsoft.Windows.Server.ViewFolder.Performance"/><FolderItem ElementID="Microsoft.Windows.Server.MemoryUtilizationPhysical.Dashboard.View" ID="Microsoft.Windows.Server.MemoryUtilizationPhysical.Dashboard.View" Folder="Microsoft.Windows.Server.ViewFolder.Performance"/><FolderItem ElementID="Microsoft.Windows.Server.NetworkAdapter.Health.Dashboard.View" ID="Microsoft.Windows.Server.NetworkAdapter.Health.Dashboard.View" Folder="Microsoft.Windows.Server.ViewFolder.Health"/><FolderItem ElementID="Microsoft.Windows.Server.NetworkAdapter.State.View" ID="Microsoft.Windows.Server.NetworkAdapter.State.View" Folder="Microsoft.Windows.Server.ViewFolder.Root"/><FolderItem ElementID="Microsoft.Windows.Server.NetworkAdapterUtilization.Dashboard.View" ID="Microsoft.Windows.Server.NetworkAdapterUtilization.Dashboard.View" Folder="Microsoft.Windows.Server.ViewFolder.Performance"/><FolderItem ElementID="Microsoft.Windows.Server.OperatingSystem.Health.Dashboard.View" ID="Microsoft.Windows.Server.OperatingSystem.Health.Dashboard.View" Folder="Microsoft.Windows.Server.ViewFolder.Health"/><FolderItem ElementID="Microsoft.Windows.Server.OperatingSystem.ServiceOrDriverFailedToStart.Event.View" ID="Microsoft.Windows.Server.OperatingSystem.ServiceOrDriverFailedToStart.Event.View" Folder="Microsoft.Windows.Server.ViewFolder.HealthEvents"/><FolderItem ElementID="Microsoft.Windows.Server.OperatingSystem.ServiceTerminatedUnexpextedly.Event.View" ID="Microsoft.Windows.Server.OperatingSystem.ServiceTerminatedUnexpextedly.Event.View" Folder="Microsoft.Windows.Server.ViewFolder.HealthEvents"/><FolderItem ElementID="Microsoft.Windows.Server.OperatingSystem.ShareConfigurationInvalid.Event.View" ID="Microsoft.Windows.Server.OperatingSystem.ShareConfigurationInvalid.Event.View" Folder="Microsoft.Windows.Server.ViewFolder.HealthEvents"/><FolderItem ElementID="Microsoft.Windows.Server.OperatingSystem.SoftwareUpdateInstallationFailed.Event.View" ID="Microsoft.Windows.Server.OperatingSystem.SoftwareUpdateInstallationFailed.Event.View" Folder="Microsoft.Windows.Server.ViewFolder.HealthEvents"/><FolderItem ElementID="Microsoft.Windows.Server.ProcessorPerformance.Dashboard.View" ID="Microsoft.Windows.Server.ProcessorPerformance.Dashboard.View" Folder="Microsoft.Windows.Server.ViewFolder.Performance"/><FolderItem ElementID="Microsoft.Windows.Server.OS.State.View" ID="Microsoft.Windows.Server.OS.State.View" Folder="Microsoft.Windows.Server.ViewFolder.Root"/></FolderItems></Presentation><LanguagePacks><LanguagePack ID="ENU" IsDefault="true"><DisplayStrings><DisplayString ElementID="Microsoft.Windows.Server.AllServersComputerGroupDiscovery"><Name>Populate All Windows Servers Computer Group</Name><Description>This discovery puts all Windows Servers into the Windows Servers Computer Group.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Computer.AlertsView"><Name>Computer Active Alerts</Name><Description>This Alerts View will display all unresolved Alerts for all Windows Server Computers</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.AlertsView"><Name>Active Alerts</Name><Description>This Alerts View will display all unresolved Alerts for all Windows Servers</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Computer.Compmgmt"><Name>Computer Management</Name><Description>Run Computer Management for this computer. </Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Computer.HardwareAvailabilityRollup"><Name>Hardware Availability Rollup</Name><Description>This monitor rolls up the availability health of all hardware hosted on the Windows computer.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Computer.HardwarePerformanceRollup"><Name>Hardware Performance Rollup</Name><Description>This monitor rolls up the performance health of all hardware hosted on the Windows computer.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Computer.MSTSC"><Name>Remote Desktop</Name><Description>Open a remote desktop session to this computer</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Computer.MSTSCAdmin"><Name>Remote Desktop (Admin)</Name><Description>Open a remote desktop administration session to this computer.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Computer.MSTSCConsole"><Name>Remote Desktop (Console)</Name><Description>Open a remote desktop session to the console on this computer.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Computer.OSAvailabilityRollup"><Name>Operating System Availability Rollup</Name><Description>This monitor rolls up the availability health of the Operating System to the Windows computer.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Computer.OSConfigurationRollup"><Name>Operating System Configuration Rollup</Name><Description>This monitor rolls up the configuration health of the Operating System to the Windows computer.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Computer.OSPerformanceRollup"><Name>Operating System Performance Rollup</Name><Description>This monitor rolls up the performance health of the Operating System to the Windows computer.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Computer.PerformanceView"><Name>Operating System Performance</Name><Description>This Performance View will display all performance data for all Windows Server Operating Systems</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Computer.StateView"><Name>Windows Server State</Name><Description>Shows state and attributes all Windows servers.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Computer.TasksView"><Name>Task Status</Name><Description>This Task Status View will display Task status information for all Windows Servers</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.ComputerGroup"><Name>Windows Server Computer Group</Name><Description>A group containing all computers that are running a Windows Server version of the Windows operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.DiskCapacity.Dashboard.View"><Name>Disk Capacity</Name><Description>This dashboard view displays Disk Capacity related performance data.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.DiskPartition"><Name>Disk Partition (Server)</Name><Description>All instances of a disk partition regardless of the Windows Server operating system version.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.DiskPartition" SubElementID="BlockSize"><Name>Block Size</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.DiskPartition" SubElementID="Bootable"><Name>Bootable</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.DiskPartition" SubElementID="DiskIndex"><Name>Disk Index</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.DiskPartition" SubElementID="PrimaryPartition"><Name>PrimaryPartition</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.DiskPartition" SubElementID="Size"><Name>Size</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.DiskPartition.Alerts.View"><Name>Disk Partition Alerts</Name><Description>This view displays Disk Partition related alerts.  Discovery of disk partitions is not enabled by default.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.DiskPartition.Health.Dashboard.View"><Name>Physical Disk Partition Health</Name><Description>This dashboard view displays monitoring status and information for Disk Partitions.  Discovery of disk partitions is not enabled by default.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.DiskPartition.State.View"><Name>Disk Partition State</Name><Description>This view displays the state of Disk Partitions.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.DiskPartition.StateView"><Name>Physical Disk Partition State</Name><Description>Shows state and attributes for all Windows server disk partitions.  Discovery of disk partitions is not enabled by default.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.InstanceGroup"><Name>Windows Server Instances Group</Name><Description>A group containing all Server Operating System managed objects.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.InstanceGroupOnly"><Name>Windows Server Instances Only Group</Name><Description>A group containing all Server Operating System managed objects (except computers).</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.InstanceGroup.Discovery"><Name>Populate Windows Server Instances Group</Name><Description>This discovery rule populates the Windows Server Instances Group.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.InstanceGroupOnly.Discovery"><Name>Populate Windows Server Instances Only Group</Name><Description>This discovery rule populates the Windows Server Instances Only Group.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Library"><Name>Windows Server Operating System Library</Name><Description>Microsoft Windows Server Operating System Library Management Pack: This management pack is the library management pack that defines all of the features and components that are common to all versions of Windows Server Operating Systems.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDisk"><Name>Logical Disk (Server)</Name><Description>All instances of a logical disk regardless of the Windows Server operating system version.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDisk" SubElementID="Compressed"><Name>Compressed</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDisk" SubElementID="DriveType"><Name>Drive Type</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDisk" SubElementID="FileSystem"><Name>FileSystem</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDisk" SubElementID="QuotasDisabled"><Name>Quotas Disabled</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDisk" SubElementID="Size"><Name>Size (Bytes) (String)</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDisk" SubElementID="SizeNumeric"><Name>Size (MBytes) (Numeric) (DEPRECATED)</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDisk" SubElementID="SizeInMBs"><Name>Size (MBytes) (Numeric)</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDisk" SubElementID="SupportsDiskQuota"><Name>Supports Disk Quota</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDisk" SubElementID="SupportsFileBasedCompression"><Name>Supports File Based Compression</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDisk.Alerts.View"><Name>Logical Disk Alerts</Name><Description>This view displays Logical Disk related alerts.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDisk.Health.Dashboard.View"><Name>Disk Health</Name><Description>This dashboard view displays monitoring status and information for Logical Disks.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDisk.State.View"><Name>Logical Disk State</Name><Description>This view displays state for instances of a Logical Disk.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDiskAvgDiskQueueLength.View"><Name>Logical Disk\Avg. Disk Queue Length Performance</Name><Description>This view displays performance data for the Logical Disk\Avg. Disk Queue Length performance counter. </Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDiskAvgDiskSecReads.View"><Name>Logical Disk\Avg. Disk Sec/Reads Performance</Name><Description>This view displays performance data for the Logical Disk\Avg. Disk Sec/Reads performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDiskAvgDiskSecWrites.View"><Name>Logical Disk\Avg. Disk Sec/Writes Performance</Name><Description>This view displays performance data for the Logical Disk\Avg. Disk Sec/Writes performance counter. </Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDiskBytesSec.View"><Name>Logical Disk\Disk Bytes/sec Performance</Name><Description>This view displays performance data for the Logical Disk\Disk Bytes/sec performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDiskCurrentDiskQueueLength.View"><Name>Logical Disk\Current Disk Queue Length Performance</Name><Description>This view displays performance data for the Logical Disk\Current Disk Queue Length performance counter.  </Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDiskFreeMegaBytes.View"><Name>Logical Disk\Free MegaBytes Performance</Name><Description>This view displays performance data for the Logical Disk\Free MegaBytes performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDiskFreeSpace.View"><Name>Logical Disk\% Free Space Performance</Name><Description>This view displays performance data for the Logical Disk\% Free Space performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDiskPerformance.Dashboard.View"><Name>Disk Performance</Name><Description>This dashboard view displays Logical Disk Performance related performance data.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDiskReadsSec.View"><Name>Logical Disk\Disk Reads/sec Performance</Name><Description>This view displays performance data for the Logical Disk\Disk Reads/sec performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDiskUtilization.Dashboard.View"><Name>Disk Utilization</Name><Description>This dashboard view displays Logical Disk Utilization related performance data.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.LogicalDiskWritesSec.View"><Name>Logical Disk\Disk Writes/sec Performance</Name><Description>This view displays performance data for the Logical Disk\Disk Writes/sec performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MemoryAvailableMBytes.View"><Name>Memory\Available MBytes Performance</Name><Description>This view displays performance data for the Memory\Available MBytes performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MemoryPageReadssec.View"><Name>Memory\Page Reads/sec Performance</Name><Description>This view displays performance data for the Memory\Page Reads/sec. performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MemoryPagessec.View"><Name>Memory\Pages/sec Performance</Name><Description>This view displays performance data for the Memory\Pages/sec performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MemoryPageWritessec.View"><Name>Memory Page Writes/sec Performance</Name><Description>This view displays performance data for the Memory\Page Writes/sec performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MemoryPoolNonpagedBytes.View"><Name>Memory\Pool Nonpaged Bytes Performance</Name><Description>This view displays performance data for the Memory\Pool Non-paged Bytes performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MemoryPoolPagedBytes.View"><Name>Memory\Pool Paged Bytes Performance</Name><Description>This view displays performance data for the Memory\Pool Paged Bytes performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MemoryUtilizationPageFile.Dashboard.View"><Name>Memory Utilization (Page File)</Name><Description>This dashboard view displays Page File related performance data.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MemoryUtilizationPhysical.Dashboard.View"><Name>Memory Utilization (Physical)</Name><Description>This dashboard view displays Physical Memory Utilization related performance data.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapter"><Name>Network Adapter (Server)</Name><Description>All instances of a network adapter regardless of the Windows Server operating system version.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapter" SubElementID="AdapterType"><Name>Adapter Type</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapter" SubElementID="DHCPEnabled"><Name>DHCP Enabled</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapter" SubElementID="DHCPServer"><Name>DHCP Server</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapter" SubElementID="DNSDomain"><Name>DNS Domain</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapter" SubElementID="Index"><Name>Index</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapter" SubElementID="IPAddress"><Name>IP Address(es)</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapter" SubElementID="IPSubnet"><Name>IP Subnet</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapter" SubElementID="MACAddress"><Name>MAC Address</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapter" SubElementID="Manufacturer"><Name>Manufacturer</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapter" SubElementID="PerfmonInstance"><Name>Performance Monitor Instance Name</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapter" SubElementID="ServiceName"><Name>Service Name</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapter.Alerts.View"><Name>Network Adapter Alerts</Name><Description>This view displays Network Adapter related alerts.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapter.Health.Dashboard.View"><Name>Network Adapter Health</Name><Description>This dashboard view displays monitoring status and information for the Network Adapter(s).</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapter.State.View"><Name>Network Adapter State</Name><Description>This view displays state for instances of a Network Adapter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkAdapterUtilization.Dashboard.View"><Name>Network Adapter Utilization</Name><Description>This dashboard view displays Network Adapter related performance data.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkInterfaceBytesReceivedsec.View"><Name>Network Interface\Bytes Received/sec Performance</Name><Description>This view displays performance data for the Network Interface\Bytes Received/sec performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkInterfaceBytesSentsec.View"><Name>Network Interface\Bytes Sent/sec Performance</Name><Description>This view displays performance data for the Network Interface\Bytes Sent/sec performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.NetworkInterfaceBytesTotalsec.View"><Name>Network Interface\Bytes Total/sec Performance</Name><Description>This view displays performance data for the Network Interface\Bytes Total/sec performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.OperatingSystem.Alerts.View"><Name>Operating System Alerts</Name><Description>This view displays Operating System related alerts.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.OperatingSystem.Health.Dashboard.View"><Name>Operating System Health</Name><Description>This dashboard view displays monitoring status and information for Operating System(s).</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.OperatingSystem.ServiceOrDriverFailedToStart.Event.View"><Name>Services or Drivers Failing to Start</Name><Description>This view shows events for all services or drivers which fail to start.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.OperatingSystem.ServiceTerminatedUnexpextedly.Event.View"><Name>Unexpected Service Terminations</Name><Description>This view shows events for all unexpected service terminations.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.OperatingSystem.ShareConfigurationInvalid.Event.View"><Name>Shares with Invalid Configuration</Name><Description>This view shows events indicating invalid configuration of shared volumes.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.OperatingSystem.SoftwareUpdateInstallationFailed.Event.View"><Name>Failed Software Update Installations</Name><Description>This view shows events indicating errors occurred upon software update installation.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.OperatingSystem.State.View"><Name>Operating System State</Name><Description>This view displays state for instances of a Operating System.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PagingFileUsage.View"><Name>Paging File\% Usage Performance</Name><Description>This view displays performance data for the Paging File\% Usage performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk"><Name>Physical Disk (Server)</Name><Description>All instances of a physical disk regardless of the Windows Server operating system version.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="Caption"><Name>Caption</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="Index"><Name>Index</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="InterfaceType"><Name>Interface Type</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="Manufacturer"><Name>Manufacturer</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="Model"><Name>Model</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="PerfmonInstance"><Name>Performance Monitor Instance Name</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="SCSIBus"><Name>SCSI Bus</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="SCSILogicalUnit"><Name>SCSI Logical Unit</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="SCSIPort"><Name>SCSI Port</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="SCSITargetID"><Name>SCSI TargetID</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="Size"><Name>Size (Bytes)</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="TotalCylinders"><Name>Total Cylinders</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="TotalHeads"><Name>Total Heads</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="TotalSectors"><Name>Total Sectors</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="TotalTracks"><Name>Total Tracks</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk" SubElementID="TracksPerCylinder"><Name>Tracks Per Cylinder</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk.Alerts.View"><Name>Physical Disk Alerts</Name><Description>This view displays Physical Disk related alerts.   Discovery of physical disks is not enabled by default.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk.Health.Dashboard.View"><Name>Physical Disk Health</Name><Description>This dashboard view displays monitoring status and information for Physical Disks.  Discovery of physical disks is not enabled by default.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDisk.State.View"><Name>Physical Disk State</Name><Description>This view displays state for instances of a Physical Disk.   Discovery of physical disks is not enabled by default.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDiskAvgDiskQueueLength.View"><Name>Physical Disk\Avg. Disk Queue Length Performance</Name><Description>This view displays performance data for the Physical Disk\Avg. Disk Queue Length performance counter. Discovery of physical disks is not enabled by default.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDiskAvgDiskSecReads.View"><Name>Physical Disk\Avg. Disk Sec/Reads Performance</Name><Description>This view displays performance data for the Physical Disk\Avg. Disk Sec/Reads performance counter.  Discovery of physical disks is not enabled by default.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDiskAvgDiskSecWrites.View"><Name>Physical Disk\Avg. Disk Sec/Writes Performance</Name><Description>This view displays performance data for the Physical Disk\Avg. Disk Sec/Writes performance counter. Discovery of physical disks is not enabled by default.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDiskBytesSec.View"><Name>Physical Disk\Disk Bytes/sec Performance</Name><Description>This view displays performance data for the Physical Disk\Disk Bytes/sec performance counter.  Discovery of physical disks is not enabled by default.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDiskCurrentDiskQueueLength.View"><Name>Physical Disk\Current Disk Queue Length Performance</Name><Description>This view displays performance data for the Physical Disk\Current Disk Queue Length performance counter.  Discovery of physical disks is not enabled by default.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDiskPerformance.Dashboard.View"><Name>Physical Disk Performance</Name><Description>This dashboard view displays Physical Disk Performance related performance data.   Discovery of physical disks is not enabled by default.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDiskReadsSec.View"><Name>Physical Disk\Disk Reads/sec Performance</Name><Description>This view displays performance data for the Physical Disk\Disk Reads/sec performance counter.  Discovery of physical disks is not enabled by default.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDiskUtilization.Dashboard.View"><Name>Physical Disk Utilization</Name><Description>This dashboard view displays Physical Disk Utilization related performance data.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.PhysicalDiskWritesSec.View"><Name>Physical Disk\Disk Writes/sec Performance</Name><Description>This view displays performance data for the Physical Disk\Disk Writes/sec performance counter.  Discovery of physical disks is not enabled by default.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Processor"><Name>Processor (Server)</Name><Description>All instances of a processor regardless of the Windows Server operating system version.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Processor" SubElementID="DataWidth"><Name>Data Width</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Processor" SubElementID="Manufacturer"><Name>Manufacturer</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Processor" SubElementID="PerfmonInstance"><Name>Performance Monitor Instance Name</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Processor" SubElementID="Revision"><Name>Revision</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Processor" SubElementID="Speed"><Name>Speed</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Processor" SubElementID="Version"><Name>Version</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Processor.Alerts.View"><Name>Individual Processor Alerts</Name><Description>This view displays Processor (CPU) related alerts.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Processor.Health.Dashboard.View"><Name>Processor Health</Name><Description>This dashboard view displays monitoring status and information for the individual processors.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Processor.State.View"><Name>Individual Processor State</Name><Description>This view displays state for instances of a Processor (CPU).</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.ProcessorInterruptTime_Total.View"><Name>Processor\% Interrupt Time\_Total Performance</Name><Description>This view displays performance data for the _Total instance of the Processor\% Interrupt Time performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.ProcessorPerformance.Dashboard.View"><Name>Processor Performance</Name><Description>This dashboard view displays processor related performance data.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.ProcessorProcessorTime_Total.View"><Name>Processor\% Processor Time\_Total Performance</Name><Description>This view displays performance data for the _Total instance of the Processor\%Processor Time performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.SystemContextSwitchessec.View"><Name>System\Context\Switches/sec Performance</Name><Description>This view displays performance data for the System\Context Switches/sec performance counter.The Windows Server Operating System Management Pack must be installed for this view function.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.SystemProcessorQueueLength.View"><Name>System\Processor Queue Length Performance</Name><Description>This view displays performance data for the System\Processor Queue Length performance counter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Processor.Dashboard.View"><Name>Processor Time</Name><Description>This dashboard view displays processor related performance data for total processor time, DPC time and interrupt time.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Processor.ProcessorTime.View"><Name>Processor\% Processor Time Performance</Name><Description>This view displays performance data for Processor\% Processor Time performance counters.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Processor.DPCTime.View"><Name>Processor\% DPC Time Performance</Name><Description>This view displays performance data for Processor\% DPC Time performance counters.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Processor.InterruptTime.View"><Name>Processor\% Interrupt Time Performance</Name><Description>This view displays performance data for Processor\% Interrupt Time performance counters.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.TopCPUUsage.ProbeAction"><Name>Probe Module: Top CPU Usage</Name><Description>This probe action is used by CPU monitoring tasks and diagnostics in the version specific operating system management packs.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.TopCPUUsage.ProbeAction" SubElementID="IntervalMilliseconds"><Name>Interval (milliseconds)</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.TopCPUUsage.ProbeAction" SubElementID="NumSamples"><Name>Num Samples</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.TopCPUUsage.ProbeAction.PowerShell"><Name>Probe Module: Top CPU Usage. (PowerShell)</Name><Description>This probe action is used by CPU monitoring tasks and diagnostics in the version specific operating system management packs.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.TopCPUUsage.ProbeAction.PowerShell" SubElementID="IntervalMilliseconds"><Name>Interval (milliseconds)</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.TopCPUUsage.ProbeAction.PowerShell" SubElementID="NumSamples"><Name>Num Samples</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.ViewFolder.Health"><Name>Health Monitoring</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.ViewFolder.HealthEvents"><Name>Operating System Events</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.ViewFolder.Performance"><Name>Performance</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.ViewFolder.Root"><Name>Microsoft Windows Server</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.IsFeatureInstalled.Probe"><Name>Probe Module: Is Feature Installed</Name><Description>The "Is Feature Installed" probe module checks whether a specified feature is installed on a computer running the Windows Server 2008 or later server operating system. This module can be used by developers who need to discover features installed.  Refer to the management pack guide for more information on how to use this module type.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.IsFeatureInstalled.Probe.PowerShell"><Name>Probe Module: Is Feature Installed. (PowerShell)</Name><Description>The "Is Feature Installed" probe module checks whether a specified feature is installed on a computer running the Windows Server 2008 or later server operating system. This module can be used by developers who need to discover features installed.  Refer to the management pack guide for more information on how to use this module type.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.StartServiceViaWMI.ModuleType"><Name>Write Action Module: Start Service via WMI</Name><Description>This write action module is used in the version specific operating system management packs for tasks.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.StartServiceViaWMI.ModuleType.PowerShell"><Name>Write Action Module: Start Service via WMI. (PowerShell)</Name><Description>This write action module is used in the version specific operating system management packs for tasks.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.ScriptWriteAction"><Name>Run Script</Name><Description>This write action module runs script without exposing script arguments for overriding.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.ScriptWriteAction" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.Computer"><Name>Windows Server 2012 Computer</Name><Description>All instances of computers running the Windows Server 2012 operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.Computer" SubElementID="InstallType"><Name>Install Type</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.ComputerGroup"><Name>Windows Server 2012 Computer Group</Name><Description>A group containing all computers that are running a Windows Server 2012 version of the Windows operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.Core.Computer"><Name>Windows Server 2012 Core Computer</Name><Description>All instances of computers running the Windows Server 2012 Core operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.Core.ComputerGroup"><Name>Windows Server 2012 Core Computer Group</Name><Description>A group containing all computers that are running a Windows Server 2012 Core version of the Windows operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.Core.OperatingSystem"><Name>Windows Server 2012 Core Operating System</Name><Description>All instances of the Windows Server 2012 Core operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.DiskPartition"><Name>Windows Server 2012 Disk Partition</Name><Description>All instances of a disk partition on a Windows Server 2012 operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.Full.Computer"><Name>Windows Server 2012 Full Computer</Name><Description>All instances of computers running the Windows Server 2012 Full operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.Full.ComputerGroup"><Name>Windows Server 2012 Full Computer Group</Name><Description>A group containing all computers that are running a Windows Server 2012 Full version of the Windows operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.Full.OperatingSystem"><Name>Windows Server 2012 Full Operating System</Name><Description>All instances of the Windows Server 2012 Full operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.LogicalDisk"><Name>Windows Server 2012 Logical Disk</Name><Description>All instances of a logical disk on a Windows Server 2012 operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.NetworkAdapter"><Name>Windows Server 2012 Network Adapter</Name><Description>All instances of a network adapter on a Windows Server 2012 operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.NetworkAdapter" SubElementID="SlotNumber"><Name>Slot ID</Name><Description>The Slot number of a PCI network adapter.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.OperatingSystem"><Name>Windows Server 2012 Operating System</Name><Description>All instances of the Windows Server 2012 operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.OperatingSystem" SubElementID="InstallType"><Name>Install Type</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.OperatingSystem" SubElementID="PowerPlan"><Name>Power Plan</Name><Description>Power plan of the Windows Server 2012 operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.PhysicalDisk"><Name>Windows Server 2012 Physical Disk</Name><Description>All instances of a physical disk on a Windows Server 2012 operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.6.2.Processor"><Name>Windows Server 2012 Processor</Name><Description>All instances of a processor on a Windows Server 2012 operating system.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MaxConcurrentAPI.Probe"><Name>Windows Server Max Concurrent API Probe Module</Name><Description>Windows Server Max Concurrent API Probe Module</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MaxConcurrentAPI.Probe" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name><Description>Expecting time (in seconds) that the module wait to finish the execution.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MaxConcurrentAPI.Probe" SubElementID="ThresholdWaiters"><Name>Threshold Waiters</Name><Description>Limit to consider in calculation.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MaxConcurrentAPI.Probe" SubElementID="ThresholdTimeouts"><Name>Threshold Timeouts</Name><Description>Limit to consider in calculation.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MaxConcurrentAPI.MonitorType"><Name>Windows Server Max Concurrent API Monitor Type</Name><Description>Windows Server Max Concurrent API Monitor Type</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MaxConcurrentAPI.MonitorType" SubElementID="IntervalSeconds"><Name>Interval seconds</Name><Description>How frequently (in seconds) the value should be sampled.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MaxConcurrentAPI.MonitorType" SubElementID="SyncTime"><Name>SyncTime</Name><Description>Synchronization time for the module execution.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MaxConcurrentAPI.MonitorType" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name><Description>Expecting time (in seconds) that the module wait to finish the execution.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MaxConcurrentAPI.MonitorType" SubElementID="ThresholdWaiters"><Name>Threshold Waiters</Name><Description>Limit to consider in calculation.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.MaxConcurrentAPI.MonitorType" SubElementID="ThresholdTimeouts"><Name>Threshold Timeouts</Name><Description>Limit to consider in calculation.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.OS.State.View"><Name>Windows Server Operating System State</Name><Description>This view displays state for instances of a Operating System.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Computer.OpenPowerShell"><Name>Open PowerShell</Name><Description>Open PowerShell</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.Computer.HardwareAvailabilityAggregate"><Name>Hardware Availability Aggregate monitor</Name><Description>This aggregate monitor rolls up the availability health of all hardware hosted on the Windows computer.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.ProcessSeed"><Name>Windows Server Process Monitoring Seed</Name><Description>Windows Server process monitoring seed.</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.ProcessSeed" SubElementID="PortMonitoringEnabled"><Name>Port Monitoring Enabled</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.ProcessSeed" SubElementID="ProcessMonitoringEnabled"><Name>Process Monitoring Enabled</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.ProcessSeed" SubElementID="ThresholdsByProcess"><Name>Thresholds</Name></DisplayString><DisplayString ElementID="Microsoft.Windows.Server.ComputerHostsProcessSeed"><Name>Windows Server Computer Hosts Windows Server Process Monitoring Seed</Name><Description>Relationship between a Windows server computer and a Windows Server Process Monitoring Seed that it hosts</Description></DisplayString></DisplayStrings><KnowledgeArticles><KnowledgeArticle ElementID="Microsoft.Windows.Server.AllServersComputerGroupDiscovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This Discovery Rule discovers and populates the Windows Server Computer group named “Windows Server Computer Group” with instances of computers that are running any version of a Microsoft Windows Server operating system.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.Windows.Server.Computer.Compmgmt" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This Task starts the Computer Management MMC Snap-in which provides administrators with centralized access to the following MMC Snapins:</maml:para><maml:list><maml:listItem><maml:para>Event Viewer</maml:para></maml:listItem><maml:listItem><maml:para>Shared Folders</maml:para></maml:listItem><maml:listItem><maml:para>Local Users and Groups</maml:para></maml:listItem><maml:listItem><maml:para>Performance Log and Alerts</maml:para></maml:listItem><maml:listItem><maml:para>Device Manager</maml:para></maml:listItem><maml:listItem><maml:para>Removable Storage</maml:para></maml:listItem><maml:listItem><maml:para>Disk Defragmenter</maml:para></maml:listItem><maml:listItem><maml:para>Services</maml:para></maml:listItem><maml:listItem><maml:para>WMI Control</maml:para></maml:listItem><maml:listItem><maml:para>Internet Information Services</maml:para></maml:listItem></maml:list><maml:para>Once executed the Computer Management application will connect to target server and provide remote management access for each of the MMC Snapins.</maml:para><maml:para/></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.Windows.Server.Computer.MSTSC" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This Task starts the Remote Desktop Connection client application.  Once executed the Remote Desktop Connection client will start a new Terminal Services session on the target server.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.Windows.Server.Computer.MSTSCAdmin" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This Task starts the Remote Desktop Connection client application.  If the target server is a Windows Server 2008-based server, then once executed the Remote Desktop Connection client will connect to the administration session on the target server.  If the target server is a Windows Server 2003-based server, then once executed the Remote Desktop Connection client will connect to the existing Console session on the target server.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.Windows.Server.Computer.MSTSCConsole" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This Task starts the Remote Desktop Connection client application.  Once executed the Remote Desktop Connection client will connect to the existing Console session on the target server.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.Windows.Server.InstanceGroup.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This Discovery Rule discovers and populates the Windows Server Instances group named "Windows Server Instances Group" with set of entities (Operating System, Computer, Network Adapter, Processor, Logical Disk, Physical Disk, Disk Partition) on the computers that are running any version of a Microsoft Windows Server operating system.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.Windows.Server.InstanceGroupOnly.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This Discovery Rule discovers and populates the Windows Server Instances group named "Windows Server Instances Group" with set of entities (Operating System, Network Adapter, Processor, Logical Disk, Physical Disk, Disk Partition) on the computers that are running any version of a Microsoft Windows Server operating system.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.Windows.Server.Library" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>The Windows Server Library Management Pack provides the base monitoring related features (Managed Objects, Groups, Discovery, etc) that are required to monitor Windows Server Operating Systems. This Library Management Pack must be imported before or during the import of a version specific Management Pack for Windows Server operating system (for example; Windows Server 2003).</maml:para></maml:section></MamlContent></KnowledgeArticle></KnowledgeArticles></LanguagePack></LanguagePacks><Resources><Assembly ID="Res.Microsoft.Windows.Server.Computer.Compmgmt" Accessibility="Public" FileName="Microsoft.Windows.Server.Computer.Compmgmt" HasNullStream="true" QualifiedName="Microsoft.Windows.Server.Computer.Compmgmt"/><Assembly ID="Res.Microsoft.Windows.Server.Computer.MSTSC" Accessibility="Public" FileName="Microsoft.Windows.Server.Computer.MSTSC" HasNullStream="true" QualifiedName="Microsoft.Windows.Server.Computer.MSTSC"/><Assembly ID="Res.Microsoft.Windows.Server.Computer.MSTSCAdmin" Accessibility="Public" FileName="Microsoft.Windows.Server.Computer.MSTSCAdmin" HasNullStream="true" QualifiedName="Microsoft.Windows.Server.Computer.MSTSCAdmin"/><Assembly ID="Res.Microsoft.Windows.Server.Computer.MSTSCConsole" Accessibility="Public" FileName="Microsoft.Windows.Server.Computer.MSTSCConsole" HasNullStream="true" QualifiedName="Microsoft.Windows.Server.Computer.MSTSCConsole"/><Assembly ID="Res.Microsoft.Windows.Server.Computer.OpenPowerShell" Accessibility="Public" FileName="Microsoft.Windows.Server.Computer.OpenPowerShell" HasNullStream="true" QualifiedName="Microsoft.Windows.Server.Computer.OpenPowerShell"/></Resources></ManagementPack>
