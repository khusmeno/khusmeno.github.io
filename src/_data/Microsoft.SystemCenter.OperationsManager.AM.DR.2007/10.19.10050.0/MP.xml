<ManagementPack xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.0"><Manifest><Identity><ID>Microsoft.SystemCenter.OperationsManager.AM.DR.2007</ID><Version>10.19.10050.0</Version></Identity><Name>System Center Agent Management Diagnostics and Recoveries MP</Name><References><Reference Alias="SC2007"><ID>Microsoft.SystemCenter.2007</ID><Version>10.19.10050.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="SCLibrary"><ID>Microsoft.SystemCenter.Library</ID><Version>7.0.8443.6</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="Windows"><ID>Microsoft.Windows.Library</ID><Version>7.5.8500.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="Health"><ID>System.Health.Library</ID><Version>7.0.8443.6</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="System"><ID>System.Library</ID><Version>7.5.8500.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference></References></Manifest><TypeDefinitions><ModuleTypes><ProbeActionModuleType ID="Microsoft.SystemCenter.AgentManagement.EntityState" Accessibility="Internal" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagedEntityId" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CollectState" type="xsd:boolean"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="PostSnapshot" type="xsd:boolean"/></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>a73ba515-aa32-4576-aad4-e4a1ebc721c2</ClassID></Native></ModuleImplementation><OutputType>Health!System.Health.EntityStateChangeData</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.AgentManagement.EntityStateAction" Accessibility="Internal" Batching="false" PassThrough="false"><Configuration/><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="EntityState" TypeID="Microsoft.SystemCenter.AgentManagement.EntityState"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ManagedEntityId>$Target/Id$</ManagedEntityId><CollectState>false</CollectState><PostSnapshot>true</PostSnapshot></ProbeAction></MemberModules><Composition><Node ID="EntityState"/></Composition></Composite></ModuleImplementation><OutputType>Health!System.Health.EntityStateChangeData</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.ICMPProbe.WithConsecutiveSamples.Probe" Accessibility="Internal" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerSourcePing" type="xsd:string"><xsd:annotation><xsd:documentation>This should always be the Windows Computer PrincipalName since this is going to be where we connect to WMI and ping from</xsd:documentation></xsd:annotation></xsd:element><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="NetworkTargetToPing" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="PingSamples" type="xsd:unsignedInt"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalMilliseconds" type="xsd:integer"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="LogEvents" type="xsd:boolean"/></Configuration><OverrideableParameters><OverrideableParameter ID="ComputerSourcePing" Selector="$Config/ComputerSourcePing$" ParameterType="string"/><OverrideableParameter ID="NetworkTargetToPing" Selector="$Config/NetworkTargetToPing$" ParameterType="string"/><OverrideableParameter ID="PingSamples" Selector="$Config/PingSamples$" ParameterType="int"/><OverrideableParameter ID="IntervalMilliseconds" Selector="$Config/IntervalMilliseconds$" ParameterType="int"/><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int"/><OverrideableParameter ID="LogEvents" Selector="$Config/LogEvents$" ParameterType="bool"/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="Probe" TypeID="Windows!Microsoft.Windows.ScriptPropertyBagProbe"><ScriptName>Microsoft.SystemCenter.ICMPProbe.WithConsecutiveSamples.vbs</ScriptName><Arguments>"$Config/ComputerSourcePing$" "$Config/NetworkTargetToPing$" "$Config/PingSamples$" "$Config/IntervalMilliseconds$" "$Config/LogEvents$"</Arguments><ScriptBody>
                    'Copyright (c) Microsoft Corporation. All rights reserved.

'*************************************************************************
' $ScriptName:  "Microsoft.SystemCenter.ICMPProbe.WithConsecutiveSamples" $
'
' Purpose:      This script runs a WMI query to ping a target computer to check if it is available in the network.
'
' $File:        Microsoft.SystemCenter.ICMPProbe.WithConsecutiveSamples.vbs $
'*************************************************************************

Option Explicit
SetLocale("en-us")

'Define local event constants 
Const EVENT_TYPE_ERROR = 1 
Const EVENT_TYPE_WARNING = 2 
Const EVENT_TYPE_INFORMATION = 4 

'Other constants
Const SCRIPT_NAME = "Microsoft.SystemCenter.ICMPProbe.WithConsecutiveSamples"
' Event ID Constants
Const EVENTID_LOGINFORMATION = 100
Const EVENTID_SUCCESS = 99
Const EVENTID_SCRIPT_ERROR = 1000

Const APP_DISCOVERY_CONNECT_FAILURE = -1
Const APP_DISCOVERY_QUERY_FAILURE = -2
Const REGISTRY_CONNECT_FAILURE = -3
Const REGISTRY_READ_FAILURE = -4
Const HKEY_CLASSES_ROOT 	= &amp;H80000000
Const HKEY_CURRENT_USER 	= &amp;H80000001
Const HKEY_LOCAL_MACHINE 	= &amp;H80000002
Const HKEY_USERS 		= &amp;H80000003
Const HKEY_CURRENT_CONFIG 	= &amp;H80000005
Const StateDataType       = 3


Dim oAPI, oBagState
Dim oParams, bLogSuccessEvent
Dim strErrorDetail, strMessage
Dim  dtStart

Dim SourceComputerToPing, TargetComputerToPing, intPingSamples, intervalMilliseconds, strPingStatus, intStatus 
Dim objWMIService, oPropertyBag, colItems, objItem
Dim strStatusCode, strResponseTime, boolPing

dtStart = Now
strStatusCode = "11003" 
strResponseTime = "0"

Set oAPI = MomCreateObject("Mom.ScriptAPI") 

Set oParams = WScript.Arguments
if oParams.Count &lt; 5 then
      strMessage = "The script '" &amp; SCRIPT_NAME &amp; "' didn't execute successfully because some parameters were missing: Param Count(" &amp; CStr(oParams.Count) &amp; ")"
      CreateEvent EVENTID_SCRIPT_ERROR, EVENT_TYPE_INFORMATION, strMessage
	  Wscript.Quit -1
End if

SourceComputerToPing = oParams(0)
TargetComputerToPing = oParams(1)
intPingSamples = CInt(oParams(2))
intervalMilliseconds = CInt(oParams(3))
bLogSuccessEvent = CBool(oParams(4))

Set oPropertyBag = oAPI.CreatePropertyBag()

If Trim(SourceComputerToPing) =  "" Then
   SourceComputerToPing = "."
End If

If bLogSuccessEvent = true Then
    strMessage = "Script executed with these parameters: SourceComputerToPing: " &amp; SourceComputerToPing &amp; " TargetComputerToPing: " &amp; TargetComputerToPing &amp; " PingSamples: " &amp; oParams(2) &amp; " intervalMilliseconds: " &amp; oParams(3)  
    call CreateEvent(EVENTID_LOGINFORMATION, EVENT_TYPE_INFORMATION, strMessage)
End If

Dim ObjError
Dim itmPing
Set ObjError = New Error

On Error Resume Next

For itmPing = 1 To intPingSamples
    If bLogSuccessEvent = true Then
        strMessage = "Executing Ping Number " &amp; CStr(itmPing) 
        call CreateEvent(EVENTID_LOGINFORMATION, EVENT_TYPE_INFORMATION, strMessage)
    End If

    boolPing = PingComputer(SourceComputerToPing, TargetComputerToPing)

    If bLogSuccessEvent = true Then
        strMessage = "Ping Number " &amp; CStr(itmPing) &amp; " Result: " &amp; CStr(boolPing)
        call CreateEvent(EVENTID_LOGINFORMATION, EVENT_TYPE_INFORMATION, strMessage)
    End If


    If boolPing = True Then
       Exit For
    End If

    If itmPing &lt; intPingSamples Then
        Wscript.Sleep(intervalMilliseconds)
    End If
Next  

'this is to check whether the previous ping from primary management server to agent was successfully received from agent. if not then we try to find the parent of agent and try the ping from there one more time.
If strStatusCode &lt;&gt; "0" Then 
    SourceComputerToPing = GetParentManagementServer(TargetComputerToPing,SourceComputerToPing)
    If Trim(SourceComputerToPing) =  "" Then
       SourceComputerToPing = "."
    End If
    For itmPing = 1 To intPingSamples
        If bLogSuccessEvent = true Then
            strMessage = "Executing Ping Number " &amp; CStr(itmPing) 
            call CreateEvent(EVENTID_LOGINFORMATION, EVENT_TYPE_INFORMATION, strMessage)
        End If

        boolPing = PingComputer(SourceComputerToPing, TargetComputerToPing)

        If bLogSuccessEvent = true Then
            strMessage = "Ping Number " &amp; CStr(itmPing) &amp; " Result: " &amp; CStr(boolPing)
            call CreateEvent(EVENTID_LOGINFORMATION, EVENT_TYPE_INFORMATION, strMessage)
        End If


        If boolPing = True Then
            Exit For
        End If

        If itmPing &lt; intPingSamples Then
            Wscript.Sleep(intervalMilliseconds)
        End If
    Next   
End If 

call ReturnResponse(false, strMessage)

'---------------------------------------------------------------------------
' Retrieves the script output.
'---------------------------------------------------------------------------
Sub ReturnResponse(boolErrorFlag, strMessageToUse)
    Dim intEventID, intEventType

    If boolErrorFlag = true Then
       oPropertyBag.AddValue "StatusCode", strStatusCode
       oPropertyBag.AddValue "ResponseTime", strResponseTime
       oPropertyBag.AddValue "ErrorMessage", strMessageToUse
       intEventID = EVENTID_SCRIPT_ERROR
       intEventType = EVENT_TYPE_ERROR
    Else
       oPropertyBag.AddValue "StatusCode", strStatusCode
       oPropertyBag.AddValue "ResponseTime", strResponseTime
       intEventID = EVENTID_SUCCESS
       intEventType = EVENT_TYPE_INFORMATION

       strMessageToUse = "The script '" &amp; SCRIPT_NAME &amp; "' completed successfully in " &amp; DateDiff("s", dtStart, Now) &amp; " seconds."

    End If

    If bLogSuccessEvent = true Then
       call CreateEvent(intEventID, intEventType, strMessageToUse)
    End If

    Call oAPI.Return(oPropertyBag)
    WScript.Quit 
End Sub
'-------------------------------------------------
' Retrieves Parent management server of an agent 
'-------------------------------------------------
Function GetParentManagementServer(agent,agentParent)

    Dim resultFile, strFileText, objPath
    Dim psScript
    Dim oError, objShell, objReadFile , listofGateways, gatewayMachine ,boolPing , retSource
    const DontShowWindow = 0, WaitUntilFinished = true
    Set oError = New Error
    boolPing =  false
    retSource=""
    Set objShell = MomCreateObject("Wscript.Shell")
       
    objPath = MomCreateObject("Scripting.FileSystemObject").GetParentFolderName(WScript.ScriptFullName)
    
    resultFile = objPath &amp; "\" &amp; agent &amp; ".txt"
    psScript = " $setupKey = Get-Item -Path 'HKLM:\Software\Microsoft\Microsoft Operations Manager\3.0\Setup';" &amp;_ 
    " $installDirectory = $setupKey.GetValue('InstallDirectory') | Split-Path;"  &amp;_ 
    " $psmPath = $installdirectory + '\Powershell\OperationsManager\OperationsManager.psm1';"  &amp;_ 
    " $agentParent = '" &amp; agentParent &amp; "';" &amp;_ 
    " Import-Module $psmPath;" &amp;_ 
    " $agent = Get-SCOMAgent -Name '" &amp; agent &amp; "';" &amp;_  
    " if($agent -ne $null -and ($agent.GetPrimaryManagementServer()).IsGateway -eq $true) " &amp;_ 
    " { (Get-SCOMAgent -Name '" &amp; agent &amp; "' | Get-SCOMParentManagementServer).Name | Out-File -FilePath '" &amp; resultFile &amp; "'; Exit 0;" &amp;_
    " } else { $agentParent | Out-File -FilePath '" &amp; resultFile &amp; "'; Exit 0; } " 
    
    objShell.run "powershell.exe -command " &amp; psScript, DontShowWindow, WaitUntilFinished 
   
    On Error Resume Next
    Set objReadFile = MomCreateObject("Scripting.FileSystemObject").OpenTextFile(resultFile, 1,True,-1)
    oError.Save
    On Error Goto 0

    If oError.Number &lt;&gt; 0 Then 
        call CreateEvent(EVENTID_LOGINFORMATION,EVENT_TYPE_INFORMATION, oError.Description)
    End If

   If Not objReadFile.AtEndOfStream Then 
        strFileText = objReadFile.ReadAll
        listofGateways = Split(strFileText , vbCrLf) 
            For Each gatewayMachine In listofGateways
                    If Trim(gatewayMachine) =  "" Then
                        gatewayMachine = "."
                    End If
                    boolPing = PingComputer(".", Trim(gatewayMachine))
                    'this check is needed to verify whether a ping (initiated from Gateway or Management server) was successfully received from agent
                    if strStatusCode = "0" Then
                        retSource = Trim(gatewayMachine)
                        Exit For 
                    End If
             Next
   End If

    On Error Resume Next
    objReadFile.Close
    On Error Goto 0
    Set objReadFile = Nothing
    GetParentManagementServer = retSource

End Function


Sub CreateEvent(lEventID, lEventType, strMessage)
 oAPI.LogScriptEvent SCRIPT_NAME,lEventID, lEventType, strMessage
End Sub

Function MomCreateObject(ByVal sProgramId)
    Dim oError
    Set oError = New Error
    
	On Error Resume Next
	Set MomCreateObject = CreateObject(sProgramId)
	oError.Save
	On Error Goto 0
	
	If oError.Number &lt;&gt; 0 Then 
        call ReturnResponse(true, "Unable to create automation object '" &amp; sProgramId &amp; "'")
    End If
End Function

'---------------------------------------------------------------------------
' Gets WMI Status.
'---------------------------------------------------------------------------
Function PingComputer(SourceComputerToPing, TargetComputerToPing)
    Dim strFieldValues, strFieldVal, objFieldValues, boolStatus
    Dim oError
    Set oError = New Error
    boolStatus = false
    strStatusCode = "11003" 
    strResponseTime = "0"

    On Error Resume Next

    strFieldValues = ExecuteWMIQuery(SourceComputerToPing, "CIMv2", "SELECT StatusCode, ResponseTime FROM Win32_PingStatus WHERE Address = '" + TargetComputerToPing + "'", "StatusCode;ResponseTime")

    If strFieldValues = ";;" Then
        strStatusCode = "11003" 
        strResponseTime = "0"
    Else
        objFieldValues  = Split(strFieldValues,";")
        strStatusCode   = objFieldValues(0)
        strResponseTime = objFieldValues(1)

	oError.Save
	On Error Goto 0
	
	If oError.Number &lt;&gt; 0 Then 
            boolStatus = false
            strMessage = "Unable to parse WMI response '" &amp; strFieldValues &amp; "'"
            call ReturnResponse(true, strMessage)
        else
            boolStatus = true
        End If
    End If

    PingComputer = boolStatus 
End Function

'---------------------------------------------------------------------------
' Retrieves a WMI object from the specified namespace.
'---------------------------------------------------------------------------
Function GetWMIObject(ByVal sNamespace)
	Dim oWMI
    Dim oError
    Set oError = New Error
	
	'get the object
	on error resume next
	set oWMI = GetObject(sNamespace)

	oError.Save
	On Error Goto 0
	
	If oError.Number &lt;&gt; 0 Then 
        strMessage = "Unable to create automation object '" &amp; sNamespace &amp; "'"
        call ReturnResponse(true, strMessage)
    End If
	
	'did it work?
	If IsEmpty(oWMI) Then
		'no
        strMessage = "Error Number: " &amp; ObjError.number &amp; " Unable to open WMI Namespace '" &amp; sNamespace &amp; "'. Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists."
        call ReturnResponse(true, strMessage)
	End if
	
	set GetWMIObject = oWMI
End Function

'---------------------------------------------------------------------------
' Execute a WMI Query.
'---------------------------------------------------------------------------
Function ExecuteWMIQuery(TargetComputer, strBaseClass, strQuery, strPropertyNames)
    Dim WbemSrv, WbemObjectSet, objItem, objPropertyNames, objProp, strPropValues
    Dim oError
    Set oError = New Error
    strPropValues = ""

    On Error Resume Next

    Set WbemSrv = GetWMIObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp; TargetComputer &amp; "\root\" &amp; strBaseClass)

    Set WbemObjectSet = WbemSrv.ExecQuery(strQuery)

	oError.Save
	On Error Goto 0
	
	If oError.Number &lt;&gt; 0 Then 
        strMessage = "Unable Execute Query '" &amp; strQuery &amp; "'"
        call ReturnResponse(true, strMessage)
    End If

    objPropertyNames = Split(strPropertyNames,";")

	oError.Save
	On Error Goto 0
	
	If oError.Number &lt;&gt; 0 Then 
        strMessage = "Unable Get Returned Values from Query '" &amp; strQuery &amp; "'"
        call ReturnResponse(true, strMessage)
    End If

    For Each objItem in WbemObjectSet
        For each objProp in objPropertyNames
            If IsNUll(objItem.Properties_(objProp).value) = True Then
               strPropValues = strPropValues &amp; "" &amp; ";"
            Else
               strPropValues = strPropValues &amp; CStr(objItem.Properties_(objProp).value) &amp; ";"
            End If
        Next
    Next

	oError.Save
	On Error Goto 0
	
	If oError.Number &lt;&gt; 0 Then 
        strMessage = "Unable Get Returned Values from Query '" &amp; strQuery &amp; "'"
        call ReturnResponse(true, strMessage)
    End If

    ExecuteWMIQuery = strPropValues
End Function


Class Error
    Private m_lNumber
    Private m_sSource
    Private m_sDescription
    Private m_sHelpContext
    Private m_sHelpFile
    Public Sub Save()
        m_lNumber = Err.number
        m_sSource = Err.Source
        m_sDescription = Err.Description
        m_sHelpContext = Err.HelpContext
        m_sHelpFile = Err.helpfile
    End Sub
    Public Sub Raise()
        Err.Raise m_lNumber, m_sSource, m_sDescription, m_sHelpFile, m_sHelpContext
    End Sub
    Public Sub Clear()
        m_lNumber = 0
        m_sSource = ""
        m_sDescription = ""
        m_sHelpContext = ""
        m_sHelpFile = ""
    End Sub
    Public Default Property Get Number()
        Number = m_lNumber
    End Property
    Public Property Get Source()
        Source = m_sSource
    End Property
    Public Property Get Description()
        Description = m_sDescription
    End Property
    Public Property Get HelpContext()
        HelpContext = m_sHelpContext
    End Property
    Public Property Get HelpFile()
        HelpFile = m_sHelpFile
    End Property    
End Class
                  </ScriptBody><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction></MemberModules><Composition><Node ID="Probe"/></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.AgentManagement.AgentManagerAction" Accessibility="Internal" RunAs="SCLibrary!Microsoft.SystemCenter.AgentManagementAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="PrincipalName" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Operation" type="xsd:int"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroup" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementServerDNS" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementServerAD" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InstallPath" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Port" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="EnableErrorReporting" type="xsd:int"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="QueueErrorReports" type="xsd:int"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InstallUserAndDomain" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InstallPassword" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ActionsUserAndDomain" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ActionsPassword" type="xsd:string"/></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>b24c0097-d239-4aab-8ab7-b30960f5ea70</ClassID></Native></ModuleImplementation><OutputType>System!System.BaseData</OutputType><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.AgentManagement.Recovery.EnableAndStartServiceAction" Accessibility="Internal" RunAs="SCLibrary!Microsoft.SystemCenter.AgentManagementAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string"/></Configuration><OverrideableParameters><OverrideableParameter ID="ComputerName" Selector="$Config/ComputerName$" ParameterType="string"/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="EnableService" TypeID="Windows!Microsoft.Windows.ServiceControlManager.ConfigureStartupType"><ComputerName>$Config/ComputerName$</ComputerName><ServiceName>HealthService</ServiceName><StartupType>Auto</StartupType></WriteAction><WriteAction ID="StartService" TypeID="Windows!Microsoft.Windows.ServiceControlManager.StartService"><ComputerName>$Config/ComputerName$</ComputerName><ServiceName>HealthService</ServiceName></WriteAction></MemberModules><Composition><Node ID="StartService"><Node ID="EnableService"/></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.CommandOutput</OutputType><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.ComputerDown.SetComputerDownMonitor" Accessibility="Internal" Batching="false"><Configuration/><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="ComputerDown" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetComputerDownStateActionNoEventContext"><HealthServiceId>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceId$</HealthServiceId><HealthState>Error</HealthState></WriteAction></MemberModules><Composition><Node ID="ComputerDown"/></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.ComputerUp.SetComputerDownMonitor" Accessibility="Internal" Batching="false"><Configuration/><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="ComputerUp" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetComputerDownStateActionNoEventContext"><HealthServiceId>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceId$</HealthServiceId><HealthState>Success</HealthState></WriteAction></MemberModules><Composition><Node ID="ComputerUp"/></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.Health.SetStateAction" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Health!System.Health.AlertSchema</SchemaType><SchemaType>System!System.ManagedEntityKeysSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MonitorId" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagedEntityTypeId" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="KeyProperties" type="System.ManagedEntityKeys"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthState" type="System.Health.AlertHealthState"/></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>44cbc334-8b5f-4cb6-bee0-6bdcbc80e8d5</ClassID></Native></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetComputerDownStateActionNoEventContext" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Health!System.Health.AlertSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthServiceId" type="xsd:string" minOccurs="1"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthState" type="System.Health.AlertHealthState" minOccurs="1"/></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.HealthServiceWatcher.SetStateActionNoFilter"><MonitorId>$MPElement[Name="SC2007!Microsoft.SystemCenter.HealthService.ComputerDown"]$</MonitorId><HealthServiceId>$Config/HealthServiceId$</HealthServiceId><HealthState>$Config/HealthState$</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"/></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceWatcher.SetStateActionNoFilter" Accessibility="Internal" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Health!System.Health.AlertSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MonitorId" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthServiceId" type="xsd:string" minOccurs="1"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthState" type="System.Health.AlertHealthState"/></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="Health.SetStateAction" TypeID="Microsoft.SystemCenter.Health.SetStateAction"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><MonitorId>$Config/MonitorId$</MonitorId><ManagedEntityTypeId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]$</ManagedEntityTypeId><KeyProperties><KeyProperty><PropertyId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthServiceWatchersGroup"]/WatcherGroupName$</PropertyId><IsCaseSensitive>false</IsCaseSensitive><Value>$Target/Host/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatchersGroup"]/WatcherGroupName$</Value></KeyProperty><KeyProperty><PropertyId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceId$</PropertyId><IsCaseSensitive>false</IsCaseSensitive><Value>$Config/HealthServiceId$</Value></KeyProperty></KeyProperties><HealthState>$Config/HealthState$</HealthState></WriteAction></MemberModules><Composition><Node ID="Health.SetStateAction"/></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType></ModuleTypes></TypeDefinitions><Monitoring><Diagnostics><Diagnostic ID="Microsoft.SystemCenter.HealthService.Diagnostic.ICMPPingDiagnostic" Comment="In response to heartbeat failure, pings machine" Accessibility="Public" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher" Monitor="SC2007!Microsoft.SystemCenter.HealthService.Heartbeat" ExecuteOnState="Error" Remotable="true" Timeout="300"><Category>Maintenance</Category><ProbeAction ID="Ping" RunAs="SCLibrary!Microsoft.SystemCenter.AgentManagementAccount" TypeID="Microsoft.SystemCenter.ICMPProbe.WithConsecutiveSamples.Probe"><ComputerSourcePing>$Target/Host/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatchersGroup"]/RMSPrincipalName$</ComputerSourcePing><NetworkTargetToPing>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceName$</NetworkTargetToPing><PingSamples>3</PingSamples><IntervalMilliseconds>30000</IntervalMilliseconds><TimeoutSeconds>300</TimeoutSeconds><LogEvents>false</LogEvents></ProbeAction></Diagnostic><Diagnostic ID="Microsoft.SystemCenter.HealthService.Diagnostic.QueryHealthService" Comment="Queries both Service State and configuration. If the service doesn't exist or the computer cannot be contacted, State value will reflect this." Accessibility="Public" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher" Monitor="SC2007!Microsoft.SystemCenter.HealthService.Heartbeat" ExecuteOnState="Error" Remotable="true" Timeout="300"><Category>Maintenance</Category><ProbeAction ID="QueryRemoteHS" RunAs="SCLibrary!Microsoft.SystemCenter.AgentManagementAccount" TypeID="Windows!Microsoft.Windows.ServiceControlManager.QueryService"><ComputerName>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceName$</ComputerName><ServiceName>HealthService</ServiceName></ProbeAction></Diagnostic><Diagnostic ID="Microsoft.SystemCenter.HealthService.Diagnostic.QueryHealthServiceWatcher" Accessibility="Internal" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher" Monitor="SC2007!Microsoft.SystemCenter.HealthService.ComputerDown" ExecuteOnState="Error" Remotable="true" Timeout="300"><Category>Maintenance</Category><ProbeAction ID="QueryHSW" TypeID="Microsoft.SystemCenter.AgentManagement.EntityStateAction"/></Diagnostic></Diagnostics><Recoveries><Recovery ID="Microsoft.SystemCenter.HealthService.Recovery.AutoReinstallAgent" Comment="Repair remote agent. Automatic based on Diagnostic" Accessibility="Internal" Enabled="false" Target="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher" Monitor="SC2007!Microsoft.SystemCenter.HealthService.Heartbeat" ResetMonitor="false" ExecuteOnDiagnostic="Microsoft.SystemCenter.HealthService.Diagnostic.QueryHealthService" Remotable="true" Timeout="300"><Category>Maintenance</Category><ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery>Diagnostic/DataItem/Property[@Name='State']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">8</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><WriteAction ID="ReinstallAgent" TypeID="Microsoft.SystemCenter.AgentManagement.AgentManagerAction"><ComputerName>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceName$</ComputerName><PrincipalName>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceName$</PrincipalName><Operation>4</Operation><ManagementGroup>$Target/ManagementGroup/Name$</ManagementGroup><ManagementServerDNS>$Target/Host/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatchersGroup"]/RMSPrincipalName$</ManagementServerDNS><ManagementServerAD>$Target/Host/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatchersGroup"]/RMSPrincipalName$</ManagementServerAD><InstallPath/><Port>5723</Port><EnableErrorReporting>0</EnableErrorReporting><QueueErrorReports>0</QueueErrorReports><InstallUserAndDomain/><InstallPassword/><ActionsUserAndDomain/><ActionsPassword/></WriteAction></Recovery><Recovery ID="Microsoft.SystemCenter.HealthService.Recovery.ComputerDown.SetComputerDownMonitor" Accessibility="Internal" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher" Monitor="SC2007!Microsoft.SystemCenter.HealthService.Heartbeat" ResetMonitor="false" ExecuteOnDiagnostic="Microsoft.SystemCenter.HealthService.Diagnostic.ICMPPingDiagnostic" Remotable="true" Timeout="300"><Category>Maintenance</Category><ConditionDetection ID="FilterCondition" TypeID="System!System.ExpressionFilter"><Expression><Or><Expression><Not><Expression><Exists><ValueExpression><XPathQuery>Diagnostic/DataItem/Property[@Name='StatusCode']</XPathQuery></ValueExpression></Exists></Expression></Not></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>Diagnostic/DataItem/Property[@Name='StatusCode']</XPathQuery></ValueExpression><Operator>NotEqual</Operator><ValueExpression><Value Type="Integer">0</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></ConditionDetection><WriteAction ID="ComputerDown" TypeID="Microsoft.SystemCenter.ComputerDown.SetComputerDownMonitor"/></Recovery><Recovery ID="Microsoft.SystemCenter.HealthService.Recovery.ComputerUp.SetComputerDownMonitor" Accessibility="Internal" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher" Monitor="SC2007!Microsoft.SystemCenter.HealthService.Heartbeat" ResetMonitor="false" ExecuteOnDiagnostic="Microsoft.SystemCenter.HealthService.Diagnostic.ICMPPingDiagnostic" Remotable="true" Timeout="300"><Category>Maintenance</Category><ConditionDetection ID="FilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><Exists><ValueExpression><XPathQuery>Diagnostic/DataItem/Property[@Name='StatusCode']</XPathQuery></ValueExpression></Exists></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>Diagnostic/DataItem/Property[@Name='StatusCode']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">0</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><WriteAction ID="ComputerUp" TypeID="Microsoft.SystemCenter.ComputerUp.SetComputerDownMonitor"/></Recovery><Recovery ID="Microsoft.SystemCenter.HealthService.Recovery.ManualReinstallAgent" Comment="Repair remote agent. Manually initiated by the user" Accessibility="Internal" Enabled="false" Target="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher" Monitor="SC2007!Microsoft.SystemCenter.HealthService.Heartbeat" ResetMonitor="false" ExecuteOnState="Error" Remotable="true" Timeout="300"><Category>Maintenance</Category><WriteAction ID="ReinstallAgent" TypeID="Microsoft.SystemCenter.AgentManagement.AgentManagerAction"><ComputerName>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceName$</ComputerName><PrincipalName>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceName$</PrincipalName><Operation>4</Operation><ManagementGroup>$Target/ManagementGroup/Name$</ManagementGroup><ManagementServerDNS>$Target/Host/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatchersGroup"]/RMSPrincipalName$</ManagementServerDNS><ManagementServerAD>$Target/Host/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatchersGroup"]/RMSPrincipalName$</ManagementServerAD><InstallPath/><Port>5723</Port><EnableErrorReporting>0</EnableErrorReporting><QueueErrorReports>0</QueueErrorReports><InstallUserAndDomain/><InstallPassword/><ActionsUserAndDomain/><ActionsPassword/></WriteAction></Recovery><Recovery ID="Microsoft.SystemCenter.HealthService.Recovery.RemotelyEnableAndRestartHealthService" Comment="Enable the disabled health service, then start" Accessibility="Internal" Enabled="false" Target="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher" Monitor="SC2007!Microsoft.SystemCenter.HealthService.Heartbeat" ResetMonitor="false" ExecuteOnDiagnostic="Microsoft.SystemCenter.HealthService.Diagnostic.QueryHealthService" Remotable="true" Timeout="300"><Category>Maintenance</Category><ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>Diagnostic/DataItem/Property[@Name='State']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">1</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>Diagnostic/DataItem/Property[@Name='StartMode']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">4</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><WriteAction ID="EnableAndStartService" TypeID="Microsoft.SystemCenter.AgentManagement.Recovery.EnableAndStartServiceAction"><ComputerName>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceName$</ComputerName></WriteAction></Recovery><Recovery ID="Microsoft.SystemCenter.HealthService.Recovery.RemotelyRestartHeathService" Comment="Start remote health service" Accessibility="Internal" Enabled="false" Target="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher" Monitor="SC2007!Microsoft.SystemCenter.HealthService.Heartbeat" ResetMonitor="false" ExecuteOnDiagnostic="Microsoft.SystemCenter.HealthService.Diagnostic.QueryHealthService" Remotable="true" Timeout="300"><Category>Maintenance</Category><ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery>Diagnostic/DataItem/Property[@Name='State']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">1</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><WriteAction ID="StartService" RunAs="SCLibrary!Microsoft.SystemCenter.AgentManagementAccount" TypeID="Windows!Microsoft.Windows.ServiceControlManager.StartService"><ComputerName>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceName$</ComputerName><ServiceName>HealthService</ServiceName></WriteAction></Recovery><Recovery ID="Microsoft.SystemCenter.HealthService.Recovery.RepairAgentAfterConfigProcessFailed" Comment="Repair remote agent. Initiated by state change" Accessibility="Internal" Enabled="false" Target="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher" Monitor="SC2007!Microsoft.SystemCenter.HealthService.ConfigProcessed" ResetMonitor="false" ExecuteOnState="Error" Remotable="true" Timeout="300"><Category>Maintenance</Category><WriteAction ID="RepairAgent" TypeID="Microsoft.SystemCenter.AgentManagement.AgentManagerAction"><ComputerName>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceName$</ComputerName><PrincipalName>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceName$</PrincipalName><Operation>4</Operation><ManagementGroup>$Target/ManagementGroup/Name$</ManagementGroup><ManagementServerDNS>$Target/Host/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatchersGroup"]/RMSPrincipalName$</ManagementServerDNS><ManagementServerAD>$Target/Host/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatchersGroup"]/RMSPrincipalName$</ManagementServerAD><InstallPath/><Port>5723</Port><EnableErrorReporting>0</EnableErrorReporting><QueueErrorReports>0</QueueErrorReports><InstallUserAndDomain/><InstallPassword/><ActionsUserAndDomain/><ActionsPassword/></WriteAction></Recovery><Recovery ID="Microsoft.SystemCenter.HealthService.Recovery.ResumeHealthService" Accessibility="Internal" Enabled="false" Target="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher" Monitor="SC2007!Microsoft.SystemCenter.HealthService.Heartbeat" ResetMonitor="false" ExecuteOnDiagnostic="Microsoft.SystemCenter.HealthService.Diagnostic.QueryHealthService" Remotable="true" Timeout="300"><Category>Maintenance</Category><ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery>Diagnostic/DataItem/Property[@Name='State']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">7</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><WriteAction ID="WA" TypeID="System!System.CommandExecuter"><ApplicationName>%windir%\system32\sc.exe</ApplicationName><WorkingDirectory>%windir%\system32</WorkingDirectory><CommandLine>\\$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher"]/HealthServiceName$ continue HealthService</CommandLine><TimeoutSeconds>300</TimeoutSeconds><RequireOutput>true</RequireOutput></WriteAction></Recovery><Recovery ID="Microsoft.SystemCenter.HealthService.Recovery.Watcher.ComputerUp.SetComputerDownMonitor" Accessibility="Internal" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthServiceWatcher" Monitor="SC2007!Microsoft.SystemCenter.HealthService.ComputerDown" ResetMonitor="false" ExecuteOnDiagnostic="Microsoft.SystemCenter.HealthService.Diagnostic.QueryHealthServiceWatcher" Remotable="true" Timeout="300"><Category>Maintenance</Category><ConditionDetection ID="FilterCondition" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery>Diagnostic/DataItem/Changes/Change/MonitorId[.=substring-before(substring-after('$MPElement[Name="SC2007!Microsoft.SystemCenter.HealthService.Heartbeat"]$','{'),'}')]/../NewHealthState</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">1</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><WriteAction ID="ComputerUp" TypeID="Microsoft.SystemCenter.ComputerUp.SetComputerDownMonitor"/></Recovery></Recoveries></Monitoring><LanguagePacks><LanguagePack ID="ENU" IsDefault="true"><DisplayStrings><DisplayString ElementID="Microsoft.SystemCenter.AgentManagement.AgentManagerAction"><Name>Reinstall Health Service write action</Name><Description>This write action is used by recoveries to reinstall an agent.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.AgentManagement.EntityState"><Name>Health Service Watcher state probe module (base)</Name><Description>This is used as the base implementation for the probe module which queries the state of a Health Service Watcher.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.AgentManagement.EntityStateAction"><Name>Health Service Watcher state probe module</Name><Description>This probe module is used to query the state of a Health Service Watcher.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.AgentManagement.Recovery.EnableAndStartServiceAction"><Name>Enable and Start Service Write Action Module Type</Name><Description>This write action is used by recoveries to enable and start the agent service.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.AgentManagement.Recovery.EnableAndStartServiceAction" SubElementID="ComputerName"><Name>Computer Name</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ComputerDown.SetComputerDownMonitor"><Name>Set the "Computer Not Reachable" monitor to error</Name><Description>This write action is used to drive the state of the “Computer not Reachable” monitor.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ComputerUp.SetComputerDownMonitor"><Name>Set the "Computer Not Reachable" monitor to success</Name><Description>This write action is used to drive the state of the “Computer not Reachable” monitor.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.Health.SetStateAction"><Name>Set State Write Action Module Type</Name><Description>This write action is used to drive the state of various monitors.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthService.Diagnostic.ICMPPingDiagnostic"><Name>Ping Computer on Heartbeat Failure</Name><Description>Performs an ICMP Ping against the computer when Collection Management Server detects a heartbeat failure.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthService.Diagnostic.QueryHealthService"><Name>Check If Health Service Is Running</Name><Description>Remotely checks if the Health Service is currently running on the target computer.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthService.Diagnostic.QueryHealthServiceWatcher"><Name>Check The Health State of Health Service Watcher</Name><Description>Retrieves the state snapshot of the Health Service Watcher.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthService.Recovery.AutoReinstallAgent"><Name>Reinstall Health Service (triggered from Diagnostic)</Name><Description>Remotely reinstalls the Health Service on the target computer when the "Check Health Service Service Control Manager Configuration" diagnostic has run.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthService.Recovery.ComputerDown.SetComputerDownMonitor"><Name>Reserved (Computer Not Reachable - Critical)</Name><Description>This recovery is not intended to be run by the user directly. This recovery processes the diagnostic output and sets the "Computer Not Reachable" monitor.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthService.Recovery.ComputerUp.SetComputerDownMonitor"><Name>Set the "Computer Not Reachable" monitor to success because the "Ping Computer on Heartbeat Failure" diagnostic succeeded</Name><Description>This recovery is not intended to be run by the user directly. This recovery processes the diagnostic output and sets the "Computer Not Reachable" monitor.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthService.Recovery.ManualReinstallAgent"><Name>Reinstall Health Service Manually</Name><Description>Remotely reinstalls the Health Service on the target computer. Manually initiated by the user.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthService.Recovery.RemotelyEnableAndRestartHealthService"><Name>Enable and Restart Health Service</Name><Description>Remotely enables the Health Service, then starts it on the target computer.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthService.Recovery.RemotelyRestartHeathService"><Name>Restart Health Service</Name><Description>Remotely restarts the Health Service on the target computer.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthService.Recovery.RepairAgentAfterConfigProcessFailed"><Name>Repair Health Service (triggered from state change)</Name><Description>Remotely repairs the Health Service on the target computer.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthService.Recovery.ResumeHealthService"><Name>Resume Health Service</Name><Description>This will resume a paused Health Service</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthService.Recovery.Watcher.ComputerUp.SetComputerDownMonitor"><Name>Set the "Computer Not Reachable" monitor to success because the "Check The Health State of Health Service Watcher" diagnostic succeeded</Name><Description>This recovery is not intended to be run by the user directly. This recovery processes the diagnostic output and sets the "Computer Not Reachable" monitor.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthServiceWatcher.SetComputerDownStateActionNoEventContext"><Name>Set Computer Down State No Event Context Write Action Module Type</Name><Description>This write action is used to drive the state of the “Computer not Reachable” monitor.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthServiceWatcher.SetStateActionNoFilter"><Name>Set State No Filter Write Action Module Type</Name><Description>This write action is used to drive the state of various monitors.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OperationsManager.AM.DR.2007"><Name>System Center Core Monitoring Agent Management</Name><Description>This management pack extends the System Center Core Monitoring by providing diagnostics and recoveries related to agent management.  All recoveries which involve automated remediation are disabled by default.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ICMPProbe.WithConsecutiveSamples.Probe"><Name>Excutes a ping action to a target computer with interval and samples</Name><Description>This probe module type runs a VBscript that pings the target computer with a specific interval and samples given parameters.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ICMPProbe.WithConsecutiveSamples.Probe" SubElementID="ComputerSourcePing"><Name>Source Computer</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ICMPProbe.WithConsecutiveSamples.Probe" SubElementID="NetworkTargetToPing"><Name>Target Computer</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ICMPProbe.WithConsecutiveSamples.Probe" SubElementID="PingSamples"><Name>Ping Samples</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ICMPProbe.WithConsecutiveSamples.Probe" SubElementID="IntervalMilliseconds"><Name>Interval Milliseconds</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ICMPProbe.WithConsecutiveSamples.Probe" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ICMPProbe.WithConsecutiveSamples.Probe" SubElementID="LogEvents"><Name>Log Events</Name></DisplayString></DisplayStrings><KnowledgeArticles><KnowledgeArticle ElementID="Microsoft.SystemCenter.OperationsManager.AM.DR.2007" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Microsoft System Center Operations Manager 2007 Agent Management Management Pack: This Management Pack contains the agent remediation recoveries that must be initiated by the user.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.ICMPProbe.WithConsecutiveSamples.Probe" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This probe module type runs a VBscript that pings the target computer with a specific interval and samples given parameters to obtain a property bag.</maml:para></maml:section></MamlContent></KnowledgeArticle></KnowledgeArticles></LanguagePack></LanguagePacks></ManagementPack>
