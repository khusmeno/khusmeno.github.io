<ManagementPack xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="2.0"><Manifest><Identity><ID>Microsoft.SystemCenter.ManagementPack.Recommendations</ID><Version>10.19.10304.2</Version></Identity><Name>Management Pack Recommendations</Name><References><Reference Alias="SC"><ID>Microsoft.SystemCenter.Library</ID><Version>6.0.6278.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="WSM"><ID>Microsoft.SystemCenter.WSManagement.Library</ID><Version>7.1.10226.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="Unix"><ID>Microsoft.Unix.Library</ID><Version>7.5.1005.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="Windows"><ID>Microsoft.Windows.Library</ID><Version>6.0.6278.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="System"><ID>System.Library</ID><Version>6.0.6278.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference></References></Manifest><TypeDefinitions><EntityTypes><ClassTypes><ClassType ID="LW.Base.Entity" Accessibility="Public" Abstract="true" Base="System!System.LogicalEntity" Hosted="false" Singleton="false" Extension="false"/><ClassType ID="Microsoft.Windows.LW.Base.Host" Accessibility="Public" Abstract="true" Base="LW.Base.Entity" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Base.Microsoft.Windows.ComputerRole.Category" Accessibility="Public" Abstract="true" Base="Microsoft.Windows.LW.Base.Host" Hosted="true" Singleton="false" Extension="false"><Property ID="CategoryName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="GuestOS" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/></ClassType><ClassType ID="LW.Base.Microsoft.Windows.Server.BaseOS.Category" Accessibility="Public" Abstract="false" Base="Windows!Microsoft.Windows.Server.Computer" Hosted="false" Singleton="false" Extension="false"><Property ID="CategoryName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="GuestOS" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/></ClassType><ClassType ID="LW.Microsoft.Core.OS" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.BaseOS.2016" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.Server.BaseOS.Category" Hosted="false" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.BaseOS.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.Server.BaseOS.Category" Hosted="false" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.BaseOS.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.Server.BaseOS.Category" Hosted="false" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.BaseOS.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.Server.BaseOS.Category" Hosted="false" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.6.4.Computer" Accessibility="Public" Abstract="false" Base="Windows!Microsoft.Windows.Server.Computer" Hosted="false" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.6.4.PrintServerRole" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.ActiveDirectoryFederationServices.10.0.FederationServerSeed" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.ADRMS.6.4.Server" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.DHCPServer.6.4.Server" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.10.0.AD.GlobalCatalogServerRole" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.6.4.Cluster.Node" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.FileServices.Service.iSCSITarget.6.3" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.NetworkLoadBalancing.6.4.ServerRole" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.InternetInformationServices.6.4.ServerRole" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.DNSServer.2016.Server" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.CertificateServices.CARole.6.4" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Defender.Role.2016" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Essentials.2016" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Branch.Cache.2016" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.AD.Certificate.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.AD.Federation.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.AD.Rights.Management.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.DHCP.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.DNS.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.File.Services.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Remote.Access.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.NLB.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Remote.Desktop.Services.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Deployment.Services.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Essentials.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Update.Services.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Queuing.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Print.Services.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.HyperV.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.AD.Lightweight.Directory.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Branch.Cache.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Cluster.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.ActiveDirectory.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.WebApplicationProxy.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.AD.Certificate.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.AD.Federation.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.AD.Rights.Management.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.DHCP.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.DNS.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.File.Services.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Remote.Access.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.NLB.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Remote.Desktop.Services.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Deployment.Services.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Update.Services.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Queuing.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Print.Services.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.HyperV.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Branch.Cache.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Cluster.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Backup.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.IIS.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.ActiveDirectory.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.AD.Certificate.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.AD.Federation.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.AD.Rights.Management.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.DHCP.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.DNS.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.File.Services.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.NLB.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Remote.Desktop.Services.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Queuing.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Print.Services.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.HyperV.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Branch.Cache.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.IIS.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.AD.Lightweight.Directory.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.ActiveDirectory.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Routing.Remote.Service.2008R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2005" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2008" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2014" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2016" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2017" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2016.ReportingServices.NativeMode" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2014.ReportingServices.NativeMode" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2012.ReportingServices.NativeMode" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2016.AnalysisServices" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2014.AnalysisServices" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2012.AnalysisServices" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2016.Replication" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2014.Replication" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2012.Replication" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SQL.Server.2017.Replication" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Backup" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Biztalk.2013" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Biztalk.2013R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Biztalk.2010" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Biztalk.2009" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Biztalk.2006" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.CRM.2011" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.CRM.2013" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.CRM.2015" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.NAV.2013" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.NAV.2013R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Exchange.Server.2013" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SharePoint.Server.2013" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SharePoint.Server.2010" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SharePoint.Foundation.Server.2013" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SharePoint.Foundation.Server.2010" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SPF.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Host.Integration.Server.2013" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Host.Integration.Server.2010" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Orchestrator.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SMA.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Dynamics.AX.2009" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Dynamics.AX.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Dynamics.AX.Retail.2012R3" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.ServiceManager.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.TFS.2010" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.TFS.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.TFS.2013" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.TFS.2015" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SCCM.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.MSDTC.2016" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.MSDTC.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.AppController.2012R2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.AdvancedThreatAnalytics" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.SDNMonitoring" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Lync.Server.2013" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.SkypeForBusiness.2015" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.2016.VirtualMachineManager" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.2016.RemoteDesktopServices" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.HyperV.2016" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Power.Management.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.JEE.JBoss.7.Windows.Configuration" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.JEE.Tomcat.8plus.Windows.Configuration" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.JEE.WebSphere.8plus.Windows.Configuration" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.JEE.WebLogic.12plus.Windows.Configuration" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.JEE.Wildfly.8plus.Windows.Configuration" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.Queuing.2016" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.SharePoint.Server.2016" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.Windows.Server.StorageSpacesDirect.2016" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Infront.RightFax" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Infront.SCOrchestrator.Core" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Infront.McAfee" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.NiCE.IBM.Domino" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.NiCE.Oracle" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.OpsLogix.BlackBerryV12" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.OpsLogix.IBMMQ" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.OpsLogix.Oracle" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.OpsLogix.Swift" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.OpsLogix.VMware" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.NiCE.DB2" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Comtrade.NutanixVM" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Calcomp.CHS" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Savision.ActiveDirectory" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Savision.Exchange.2013" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Savision.Exchange.2010" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Savision.Dynamics.CRM" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Savision.SharePoint.2013" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Savision.Lync.Server.2013" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Savision.SkypeForBusiness.2015" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Savision.SCCM.2012" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Savision.DHCP" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Savision.DNS" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Savision.RemoteDesktopServices" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Gripmatix.CVAD" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Teqwave.PostgreSQL" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Dell.EMC" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.SCX.Agent.Instance" Accessibility="Public" Abstract="false" Base="Unix!Microsoft.Unix.Computer" Hosted="false" Singleton="false" Extension="false"><Property ID="GuestOS" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/></ClassType><ClassType ID="LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance" Accessibility="Public" Abstract="false" Base="System!System.ApplicationComponent" Hosted="false" Singleton="false" Extension="false"><Property ID="Id" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="HostName" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="GuestOS" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/><Property ID="CategoryName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0"/></ClassType><ClassType ID="LW.Microsoft.JEE.JBoss.7.Unix.Configuration" Accessibility="Public" Abstract="false" Base="LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance" Hosted="false" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.JEE.Tomcat.8plus.Unix.Configuration" Accessibility="Public" Abstract="false" Base="LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance" Hosted="false" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.JEE.WebSphere.8plus.Unix.Configuration" Accessibility="Public" Abstract="false" Base="LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance" Hosted="false" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.JEE.WebLogic.12plus.Unix.Configuration" Accessibility="Public" Abstract="false" Base="LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance" Hosted="false" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.JEE.Wildfly.8plus.Unix.Configuration" Accessibility="Public" Abstract="false" Base="LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance" Hosted="false" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Comtrade.F5BIGIP" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Gripmatix.ADC" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/><ClassType ID="LW.Microsoft.3rdParty.Infront.Isilon" Accessibility="Public" Abstract="false" Base="LW.Base.Microsoft.Windows.ComputerRole.Category" Hosted="true" Singleton="false" Extension="false"/></ClassTypes><RelationshipTypes><RelationshipType ID="Microsoft.Windows.Computer.Hosts.LW.Base.Host" Accessibility="Public" Abstract="false" Base="System!System.Hosting"><Source ID="Computer" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/><Target ID="SoftwareInstallation" MinCardinality="0" MaxCardinality="2147483647" Type="Microsoft.Windows.LW.Base.Host"/></RelationshipType></RelationshipTypes></EntityTypes><ModuleTypes><DataSourceModuleType ID="LW.Microsoft.Windows.Server.Generic.Discovery.DataSource" Accessibility="Public" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:unsignedInt"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerPrincipalName" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:unsignedInt"/></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int"/><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int"/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Discovery.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">$Config/IntervalSeconds$</Interval></SimpleReccuringSchedule><ExcludeDates/></Scheduler></DataSource><ProbeAction ID="PowerShellDiscoveryProbe" TypeID="Windows!Microsoft.Windows.PowerShellDiscoveryProbe"><ScriptName>"Lightweight generic discovery script"</ScriptName><ScriptBody>
                  param ([String] $sourceID, [String] $managedEntityID, [String] $computerName)
                                    #Copyright (c) Microsoft Corporation. All rights reserved.
                  #*************************************************************************
                  #Author - Arpit Mittal
                  #ScriptName: "Server2016Roles.ps1"$
                  #Purpose: This script along with ServerOSVersions.ps1 will discover installed server roles
                  # on the Windowse Server 2016.
                  #*************************************************************************

                  $windowsFeatureTable = @{}
                  $classMPElementTable = @{}
                  $classCategoryTable = @{}

                  #Get-WindowsFeature Discoveries
                  #IIS
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.InternetInformationServices.6.4.ServerRole","Web-Server")
                  $classMPElementTable.Add("LW.Microsoft.Windows.InternetInformationServices.6.4.ServerRole","`$MPElement[Name='LW.Microsoft.Windows.InternetInformationServices.6.4.ServerRole']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.InternetInformationServices.6.4.ServerRole","IIS 2016+")

                  #Print Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.6.4.PrintServerRole","Print-Services")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.6.4.PrintServerRole","`$MPElement[Name='LW.Microsoft.Windows.Server.6.4.PrintServerRole']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.6.4.PrintServerRole","Print Server 2016+")

                  #ADFS
                  $windowsFeatureTable.Add("LW.Microsoft.ActiveDirectoryFederationServices.10.0.FederationServerSeed","ADFS-Federation")
                  $classMPElementTable.Add("LW.Microsoft.ActiveDirectoryFederationServices.10.0.FederationServerSeed","`$MPElement[Name='LW.Microsoft.ActiveDirectoryFederationServices.10.0.FederationServerSeed']$")
                  $classCategoryTable.Add("LW.Microsoft.ActiveDirectoryFederationServices.10.0.FederationServerSeed","Active Directory Federation Services 2016")

                  #ADRMS
                  $windowsFeatureTable.Add("LW.Microsoft.ADRMS.6.4.Server","ADRMS")
                  $classMPElementTable.Add("LW.Microsoft.ADRMS.6.4.Server","`$MPElement[Name='LW.Microsoft.ADRMS.6.4.Server']$")
                  $classCategoryTable.Add("LW.Microsoft.ADRMS.6.4.Server","Active Directory Rights Management Services 2016")

                  #DHCP
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.DHCPServer.6.4.Server","DHCP")
                  $classMPElementTable.Add("LW.Microsoft.Windows.DHCPServer.6.4.Server","`$MPElement[Name='LW.Microsoft.Windows.DHCPServer.6.4.Server']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.DHCPServer.6.4.Server","DHCP Server 2016+")

                  #ADDS
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.10.0.AD.GlobalCatalogServerRole","AD-Domain-Services")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.10.0.AD.GlobalCatalogServerRole","`$MPElement[Name='LW.Microsoft.Windows.Server.10.0.AD.GlobalCatalogServerRole']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.10.0.AD.GlobalCatalogServerRole","Active Directory Domain Services 2016")

                  #Failover Clustering
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.6.4.Cluster.Node","Failover-Clustering")
                  $classMPElementTable.Add("LW.Microsoft.Windows.6.4.Cluster.Node","`$MPElement[Name='LW.Microsoft.Windows.6.4.Cluster.Node']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.6.4.Cluster.Node","Windows Server Cluster 2016+")

                  #File and iSCSI services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.FileServices.Service.iSCSITarget.6.3","File-Services")
                  $classMPElementTable.Add("LW.Microsoft.Windows.FileServices.Service.iSCSITarget.6.3","`$MPElement[Name='LW.Microsoft.Windows.FileServices.Service.iSCSITarget.6.3']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.FileServices.Service.iSCSITarget.6.3","File Services 2016+")

                  #NLB
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.NetworkLoadBalancing.6.4.ServerRole","NLB")
                  $classMPElementTable.Add("LW.Microsoft.Windows.NetworkLoadBalancing.6.4.ServerRole","`$MPElement[Name='LW.Microsoft.Windows.NetworkLoadBalancing.6.4.ServerRole']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.NetworkLoadBalancing.6.4.ServerRole","Network Load Balancing 2016+")

                  #DNS
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.DNSServer.2016.Server","DNS")
                  $classMPElementTable.Add("LW.Microsoft.Windows.DNSServer.2016.Server","`$MPElement[Name='LW.Microsoft.Windows.DNSServer.2016.Server']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.DNSServer.2016.Server","Domain Naming Service 2016+")

                  #ADCS
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.CertificateServices.CARole.6.4","AD-Certificate")
                  $classMPElementTable.Add("LW.Microsoft.Windows.CertificateServices.CARole.6.4","`$MPElement[Name='LW.Microsoft.Windows.CertificateServices.CARole.6.4']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.CertificateServices.CARole.6.4","Active Directory Certificate Services 2016")

                  #Defender
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Defender.Role.2016","Windows-Defender")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Defender.Role.2016","`$MPElement[Name='LW.Microsoft.Windows.Defender.Role.2016']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Defender.Role.2016","Defender 2016")

                  #Windows Essentials Role
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Essentials.2016","ServerEssentialsRole")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Essentials.2016","`$MPElement[Name='LW.Microsoft.Windows.Essentials.2016']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Essentials.2016","Essentials 2016")

  			      #Branch Cache 2016
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.Branch.Cache.2016","BranchCache")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.Branch.Cache.2016","`$MPElement[Name='LW.Microsoft.Windows.Server.Branch.Cache.2016']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.Branch.Cache.2016","Branch Cache 2016")

				  #LW.Microsoft.HyperV.2016
                  $windowsFeatureTable.Add("LW.Microsoft.HyperV.2016","Msvm_VirtualSystemManagementService")
                  $classMPElementTable.Add("LW.Microsoft.HyperV.2016","`$MPElement[Name='LW.Microsoft.HyperV.2016']$")
                  $classCategoryTable.Add("LW.Microsoft.HyperV.2016","Hyper-V 2016")

				  #LW.Microsoft.2016.RemoteDesktopServices
                  $windowsFeatureTable.Add("LW.Microsoft.2016.RemoteDesktopServices","Remote-Desktop-Services")
                  $classMPElementTable.Add("LW.Microsoft.2016.RemoteDesktopServices","`$MPElement[Name='LW.Microsoft.2016.RemoteDesktopServices']$")
                  $classCategoryTable.Add("LW.Microsoft.2016.RemoteDesktopServices","Remote Desktop Services 2016")

				  #Message Queuing Services 2016+
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.Queuing.2016","MSMQ")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.Queuing.2016","`$MPElement[Name='LW.Microsoft.Windows.Server.Queuing.2016']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.Queuing.2016","Message Queuing 2016+")

                  function LogWrite
                  {
                  Param([string]$logString)
                  $script:logMessage += $logString
                  }

                  #scriptStartTime will help in calculating script run time
                  $scriptStartTime = Get-Date
                  $script:logMessage = ''
				  $GuestOS = ''
				  $wmiOS = (Get-WmiObject -Class Win32_OperatingSystem).caption
				  if (-not ([string]::IsNullOrEmpty($wmiOS)))
				  {
						$GuestOS = $wmiOS
				  }
				  
                  LogWrite "`nServer2016Roles::Starting Server2016Roles script."

                  if(($SourceId -eq $null) -or ($ManagedEntityId -eq $null) -or ($computerName -eq $null))
                  {
                  LogWrite "`nServer2016Roles::SourceId, ManagedEntityId or Computer name is null. Exiting script."
                  Exit -1
                  }

                  #Create discovery property bag only once as we can't return multiple property bags
                  $api = new-object -comObject 'MOM.ScriptAPI'
                  $discoveryData = $api.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)

                  #get all server roles information in single shot
                  $allInstalledFeatures = get-windowsfeature | ?{$_.InstallState -eq "Installed"}

                  #Iterate through discovery method table
                  if($windowsFeatureTable -eq $null)
                  {
                  #Code shouldn't come here
                  LogWrite "`nServer2016Roles::Windows feature table is empty. Exiting the script."
                  Exit -1
                  }

                  foreach ($classDetails in $windowsFeatureTable.GetEnumerator())
                  {
                  $className = $classDetails.Name
                  $serverRoleName = $classDetails.Value

                  if($serverRoleName -eq $null)
                  {
                  continue
                  }

                  $getFeatureDetails = $allInstalledFeatures | ?{$_.Name -eq $serverRoleName}

                  #getfeaturedetails will be null if supported role in NOT present in installed list
                  if(($getFeatureDetails -ne $null) -and ($classMPElementTable.Item($className) -ne $null))
                  {
                  LogWrite "`nCreating class instance for class $className"
                  $instance = $discoveryData.CreateClassInstance($classMPElementTable.Item($className))
                  $instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $computerName)
                  $instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $computerName)
                  $instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.ComputerRole.Category']/CategoryName$", $classCategoryTable.Item($className))
				  $instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.ComputerRole.Category']/GuestOS$", $GuestOS)
                  $discoveryData.AddInstance($instance)
                  }
                  }

                  $scriptEndTime = Get-Date
                  $totalScriptRunTime = ($scriptEndTime - $scriptStartTime) | select-object TotalSeconds
                  $totalScriptRunTime = $totalScriptRunTime.TotalSeconds
                  LogWrite "`n Total time taken to run the script $totalScriptRunTime"

                  #Log an event after running the script
                  $api.LogScriptEvent("Server2016Roles.ps1", 5001, 0, $script:logMessage)

                  #Return discovery property bag
                  $discoveryData</ScriptBody><Parameters><Parameter><Name>sourceID</Name><Value>$MPElement$</Value></Parameter><Parameter><Name>managedEntityID</Name><Value>$Target/Id$</Value></Parameter><Parameter><Name>computerName</Name><Value>$Config/ComputerPrincipalName$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><StrictErrorHandling>false</StrictErrorHandling></ProbeAction></MemberModules><Composition><Node ID="PowerShellDiscoveryProbe"><Node ID="Scheduler"/></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="LW.Microsoft.Windows.Server.BaseOS.Discovery.DataSource" Accessibility="Public" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:unsignedInt"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerPrincipalName" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:unsignedInt"/></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int"/><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int"/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Discovery.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">$Config/IntervalSeconds$</Interval></SimpleReccuringSchedule><ExcludeDates/></Scheduler></DataSource><ProbeAction ID="PowerShellDiscoveryProbe" TypeID="Windows!Microsoft.Windows.PowerShellDiscoveryProbe"><ScriptName>"Lightweight generic server OS discovery script"</ScriptName><ScriptBody>
                  param ([String] $sourceID, [String] $managedEntityID, [String] $computerName)
                  				  #Copyright (c) Microsoft Corporation. All rights reserved.
                  #*************************************************************************
                  #Author - Arpit Mittal
                  #ScriptName: "ServerOSVersions.ps1"$
                  #Purpose: This script will discover all OS versions from 2008R2 to 2016.
                  #*************************************************************************

                  $versionTable = @{}
                  $classMPElementTable = @{}
                  $classCategoryTable = @{}

                  #Get-WindowsFeature Discoveries
                  #2016
                  $versionTable.Add("10.0","LW.Microsoft.BaseOS.2016")
                  $classMPElementTable.Add("LW.Microsoft.BaseOS.2016","`$MPElement[Name='LW.Microsoft.BaseOS.2016']$")
                  $classCategoryTable.Add("LW.Microsoft.BaseOS.2016","Core OS 2016")

                  #Core OS
                  $classMPElementTable.Add("LW.Microsoft.Core.OS","`$MPElement[Name='LW.Microsoft.Core.OS']$")
                  $classCategoryTable.Add("LW.Microsoft.Core.OS","Core OS")

                  #2012R2
                  $versionTable.Add("6.3","LW.Microsoft.BaseOS.2012R2")
                  $classMPElementTable.Add("LW.Microsoft.BaseOS.2012R2","`$MPElement[Name='LW.Microsoft.BaseOS.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.BaseOS.2012R2","Base OS 2012R2")

                  #2012
                  $versionTable.Add("6.2","LW.Microsoft.BaseOS.2012")
                  $classMPElementTable.Add("LW.Microsoft.BaseOS.2012","`$MPElement[Name='LW.Microsoft.BaseOS.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.BaseOS.2012","Base OS 2012")

                  #2008R2
                  $versionTable.Add("6.1","LW.Microsoft.BaseOS.2008R2")
                  $classMPElementTable.Add("LW.Microsoft.BaseOS.2008R2","`$MPElement[Name='LW.Microsoft.BaseOS.2008R2']$")
                  $classCategoryTable.Add("LW.Microsoft.BaseOS.2008R2","Base OS 2008R2")

                  function LogWrite
                  {
					  Param([string]$logString)
					  $script:logMessage += $logString
                  }

				  $GuestOS = ''
				  $wmiOS = (Get-WmiObject -Class Win32_OperatingSystem).caption
				  if (-not ([string]::IsNullOrEmpty($wmiOS)))
				  {
						$GuestOS = $wmiOS
				  }

                  function createInstances
                  {
					  Param($className, $computerName, $classMPElementTable, $classCategoryTable, $discoveryData)

					  LogWrite "`nCreating class instance for class $className"

					  $instance = $discoveryData.CreateClassInstance($classMPElementTable.Item($className))
					  $instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $computerName)
					  $instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $computerName)

					  if($className -eq 'LW.Microsoft.Core.OS')
					  {
							$instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.ComputerRole.Category']/CategoryName$", $classCategoryTable.Item($className))
							$instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.ComputerRole.Category']/GuestOS$", $GuestOS)
					  }
					  else
					  {
							$instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.Server.BaseOS.Category']/CategoryName$", $classCategoryTable.Item($className))
							$instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.Server.BaseOS.Category']/GuestOS$", $GuestOS)
					  }

					  $discoveryData.AddInstance($instance)
					  $discoveryData
                  }

                  #scriptStartTime will help in calculating script run time
                  $scriptStartTime = Get-Date
                  $script:logMessage = ''

                  LogWrite "`nServerOSVersions::Starting ServerOSVersions script."

                  if(($SourceId -eq $null) -or ($ManagedEntityId -eq $null) -or ($computerName -eq $null))
                  {
					  LogWrite "`nServerOSVersions::SourceId, ManagedEntityId or Computer name is null. Exiting script."
					  Exit -1
                  }

                  #Create discovery property bag only once as we can't return multiple property bags
                  $api = new-object -comObject 'MOM.ScriptAPI'
                  $discoveryData = $api.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)

                  $a = gwmi -Class win32_operatingsystem

                  if($a.Version -match '10.0')
                  {
					  $className = $versionTable.Item('10.0')
					  $discoveryData = createInstances $className $computerName $classMPElementTable $classCategoryTable $discoveryData
                  }
                  elseif($a.Version -match '6.3')
                  {
					  $className = $versionTable.Item('6.3')
					  $discoveryData = createInstances $className $computerName $classMPElementTable $classCategoryTable $discoveryData
                  }
                  elseif($a.Version -match '6.2')
                  {
					  $className = $versionTable.Item('6.2')
					  $discoveryData = createInstances $className $computerName $classMPElementTable $classCategoryTable $discoveryData
                  }
                  elseif($a.Version -match '6.1')
                  {
					  $className = $versionTable.Item('6.1')
					  $discoveryData = createInstances $className $computerName $classMPElementTable $classCategoryTable $discoveryData
                  }

                  if(($a.Version -match '6.1') -or ($a.Version -match '6.2') -or ($a.Version -match '6.3'))
                  {
					  $className = "LW.Microsoft.Core.OS"
					  $discoveryData = createInstances $className $computerName $classMPElementTable $classCategoryTable $discoveryData
                  }

                  $scriptEndTime = Get-Date
                  $totalScriptRunTime = ($scriptEndTime - $scriptStartTime) | select-object TotalSeconds
                  $totalScriptRunTime = $totalScriptRunTime.TotalSeconds
                  LogWrite "`n Total time taken to run the script $totalScriptRunTime"

                  #Log an event after running the script
                  $api.LogScriptEvent("ServerOSVersions.ps1", 5000, 0, $script:logMessage)

                  #Return discovery property bag
                  $discoveryData</ScriptBody><Parameters><Parameter><Name>sourceID</Name><Value>$MPElement$</Value></Parameter><Parameter><Name>managedEntityID</Name><Value>$Target/Id$</Value></Parameter><Parameter><Name>computerName</Name><Value>$Config/ComputerPrincipalName$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><StrictErrorHandling>false</StrictErrorHandling></ProbeAction></MemberModules><Composition><Node ID="PowerShellDiscoveryProbe"><Node ID="Scheduler"/></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="LW.Microsoft.Windows.Server.2012R2.Role.Discovery.DataSource" Accessibility="Public" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:unsignedInt"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerPrincipalName" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:unsignedInt"/></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int"/><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int"/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Discovery.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">$Config/IntervalSeconds$</Interval></SimpleReccuringSchedule><ExcludeDates/></Scheduler></DataSource><ProbeAction ID="PowerShellDiscoveryProbe" TypeID="Windows!Microsoft.Windows.PowerShellDiscoveryProbe"><ScriptName>"Lightweight 2012R2 server roles discovery script"</ScriptName><ScriptBody>
                  param ([String] $sourceID, [String] $managedEntityID, [String] $computerName)
                                    #Copyright (c) Microsoft Corporation. All rights reserved.
                  #*************************************************************************
                  #Author - Arpit Mittal
                  #ScriptName: "Server2012R2Roles.ps1"$
                  #Purpose: This script along with ServerOSVersions.ps1 will discover installed server roles
                  # on the Windows Server 2012R2.
                  #*************************************************************************

                  $windowsFeatureTable = @{}
                  $classMPElementTable = @{}
                  $classCategoryTable = @{}

                  #Get-WindowsFeature Discoveries
                  #AD Certificate Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.AD.Certificate.2012R2","AD-Certificate")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.AD.Certificate.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Server.AD.Certificate.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.AD.Certificate.2012R2","Active Directory Certification Services 2012/2012 R2")

                  #AD Federation Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.AD.Federation.2012R2","ADFS-Federation")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.AD.Federation.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Server.AD.Federation.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.AD.Federation.2012R2","Active Directory Federation Services 2012 R2")

                  #AD Right Management Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.AD.Rights.Management.2012R2","ADRMS")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.AD.Rights.Management.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Server.AD.Rights.Management.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.AD.Rights.Management.2012R2","Active Directory Rights Management Services 2012/2012 R2")

                  #DHCP
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.DHCP.2012R2","DHCP")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.DHCP.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Server.DHCP.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.DHCP.2012R2","DHCP Server")

                  #DNS
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.DNS.2012R2","DNS")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.DNS.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Server.DNS.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.DNS.2012R2","Domain Naming Service 2012/2012R2")

                  #File Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.File.Services.2012R2","File-Services")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.File.Services.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Server.File.Services.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.File.Services.2012R2","File Services 2012 R2")

                  #Multi Tenant Remote Access
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.Remote.Access.2012R2","RemoteAccess")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.Remote.Access.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Server.Remote.Access.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.Remote.Access.2012R2","Remote Access 2012/2012 R2")

                  #Network Load Balancing
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.NLB.2012R2","NLB")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.NLB.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Server.NLB.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.NLB.2012R2","Network Load Balancing")

                  #Remote Desktop Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.Remote.Desktop.Services.2012R2","Remote-Desktop-Services")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.Remote.Desktop.Services.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Server.Remote.Desktop.Services.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.Remote.Desktop.Services.2012R2","Remote Desktop Services 2012 R2")

                  #Windows Deployment Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Deployment.Services.2012R2","WDS")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Deployment.Services.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Deployment.Services.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Deployment.Services.2012R2","Windows Deployment Services 2012 R2")

                  #Windows Essentials Role
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Essentials.2012R2","ServerEssentialsRole")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Essentials.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Essentials.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Essentials.2012R2","Essentials")

                  #Message Queuing Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.Queuing.2012R2","MSMQ")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.Queuing.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Server.Queuing.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.Queuing.2012R2","Message Queuing 2012 R2")

                  #Hyper-V Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.HyperV.2012R2","Hyper-V")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.HyperV.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Server.HyperV.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.HyperV.2012R2","Hyper-V 2012 R2")

                  #Active Directory Lightweight Directory Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.AD.Lightweight.Directory.2012R2","ADLDS")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.AD.Lightweight.Directory.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Server.AD.Lightweight.Directory.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.AD.Lightweight.Directory.2012R2","Active Directory Lightweight Directory Services")

                  #Cluster
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.Cluster.2012R2","Failover-Clustering")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.Cluster.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Server.Cluster.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.Cluster.2012R2","Windows Server Cluster")

                  #Active Directory
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.ActiveDirectory.2012R2","AD-Domain-Services")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.ActiveDirectory.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Server.ActiveDirectory.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.ActiveDirectory.2012R2","Active Directory Domain Services 2008/2008R2/2012/2012R2")

                  #Web Application Proxy
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.WebApplicationProxy.2012R2","Web-Application-Proxy")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.WebApplicationProxy.2012R2","`$MPElement[Name='LW.Microsoft.Windows.Server.WebApplicationProxy.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.WebApplicationProxy.2012R2","Web Application Proxy 2012 R2")

				  #LW.Microsoft.3rdParty.Savision.ActiveDirectory
                  $windowsFeatureTable.Add("LW.Microsoft.3rdParty.Savision.ActiveDirectory","AD-Domain-Services")
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.ActiveDirectory","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.ActiveDirectory']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.ActiveDirectory","Active Directory (by Savision)")

				  #LW.Microsoft.3rdParty.Savision.DHCP
                  $windowsFeatureTable.Add("LW.Microsoft.3rdParty.Savision.DHCP","DHCP")
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.DHCP","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.DHCP']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.DHCP","DHCP (by Savision)")

				  #LW.Microsoft.3rdParty.Savision.DNS
                  $windowsFeatureTable.Add("LW.Microsoft.3rdParty.Savision.DNS","DNS")
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.DNS","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.DNS']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.DNS","DNS (by Savision)")

				  #LW.Microsoft.3rdParty.Savision.RemoteDesktopServices
                  $windowsFeatureTable.Add("LW.Microsoft.3rdParty.Savision.RemoteDesktopServices","Remote-Desktop-Services")
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.RemoteDesktopServices","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.RemoteDesktopServices']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.RemoteDesktopServices","Remote Desktop Services (by Savision)")

                  function LogWrite
                  {
					  Param([string]$logString)
					  $script:logMessage += $logString
                  }

                  #scriptStartTime will help in calculating script run time
                  $scriptStartTime = Get-Date
                  $script:logMessage = ''
				  $GuestOS = ''
				  $wmiOS = (Get-WmiObject -Class Win32_OperatingSystem).caption
				  if (-not ([string]::IsNullOrEmpty($wmiOS)))
				  {
						$GuestOS = $wmiOS
				  }

                  LogWrite "`nServer2012R2Roles::Starting Server2012R2Roles script."

                  if(($SourceId -eq $null) -or ($ManagedEntityId -eq $null) -or ($computerName -eq $null))
                  {
					  LogWrite "`nServer2012R2Roles::SourceId, ManagedEntityId or Computer name is null. Exiting script."
					  Exit -1
                  }

                  #Create discovery property bag only once as we can't return multiple property bags
                  $api = new-object -comObject 'MOM.ScriptAPI'
                  $discoveryData = $api.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)

                  #get all server roles information in single shot
                  $allInstalledFeatures = get-windowsfeature | ?{$_.InstallState -eq "Installed"}

                  #Iterate through discovery method table
                  if($windowsFeatureTable -eq $null)
                  {
					  #Code shouldn't come here
					  LogWrite "`nServer2012R2Roles::Windows feature table is empty. Exiting the script."
					  Exit -1
                  }

                  foreach ($classDetails in $windowsFeatureTable.GetEnumerator())
                  {
					  $className = $classDetails.Name
					  $serverRoleName = $classDetails.Value

					  if($serverRoleName -eq $null)
					  {
						 continue
					  }

					  $getFeatureDetails = $allInstalledFeatures | ?{$_.Name -eq $serverRoleName}

					  #getfeaturedetails will be null if server role is not installed or we are not supporting the installed role
					  if(($getFeatureDetails -ne $null) -and ($classMPElementTable.Item($className) -ne $null))
					  {
						  LogWrite "`nCreating class instance for class $className"
						  $instance = $discoveryData.CreateClassInstance($classMPElementTable.Item($className))
						  $instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $computerName)
						  $instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $computerName)
						  $instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.ComputerRole.Category']/CategoryName$", $classCategoryTable.Item($className))
						  $instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.ComputerRole.Category']/GuestOS$", $GuestOS)
						  $discoveryData.AddInstance($instance)
					  }
                  }

                  $scriptEndTime = Get-Date
                  $totalScriptRunTime = ($scriptEndTime - $scriptStartTime) | select-object TotalSeconds
                  $totalScriptRunTime = $totalScriptRunTime.TotalSeconds
                  LogWrite "`n Total time taken to run the script $totalScriptRunTime"

                  #Log an event after running the script
                  $api.LogScriptEvent("Server2012R2Roles.ps1", 5001, 0, $script:logMessage)

                  #Return discovery property bag
                  $discoveryData</ScriptBody><Parameters><Parameter><Name>sourceID</Name><Value>$MPElement$</Value></Parameter><Parameter><Name>managedEntityID</Name><Value>$Target/Id$</Value></Parameter><Parameter><Name>computerName</Name><Value>$Config/ComputerPrincipalName$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><StrictErrorHandling>false</StrictErrorHandling></ProbeAction></MemberModules><Composition><Node ID="PowerShellDiscoveryProbe"><Node ID="Scheduler"/></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="LW.Microsoft.Windows.Server.2012.Role.Discovery.DataSource" Accessibility="Public" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:unsignedInt"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerPrincipalName" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:unsignedInt"/></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int"/><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int"/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Discovery.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">$Config/IntervalSeconds$</Interval></SimpleReccuringSchedule><ExcludeDates/></Scheduler></DataSource><ProbeAction ID="PowerShellDiscoveryProbe" TypeID="Windows!Microsoft.Windows.PowerShellDiscoveryProbe"><ScriptName>"Lightweight 2012 server roles discovery script"</ScriptName><ScriptBody>
                  param ([String] $sourceID, [String] $managedEntityID, [String] $computerName)
                  				  #Copyright (c) Microsoft Corporation. All rights reserved.
                  #*************************************************************************
                  #Author - Arpit Mittal
                  #ScriptName: "Server2012Roles.ps1"$
                  #Purpose: This script along with ServerOSVersions.ps1 will discover installed server roles
                  # on the Windows Server 2012.
                  #*************************************************************************

                  $windowsFeatureTable = @{}
                  $classMPElementTable = @{}
                  $classCategoryTable = @{}

                  #Get-WindowsFeature Discoveries
                  #AD Certificate Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.AD.Certificate.2012","AD-Certificate")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.AD.Certificate.2012","`$MPElement[Name='LW.Microsoft.Windows.Server.AD.Certificate.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.AD.Certificate.2012","Active Directory Certification Services 2012/2012 R2")

                  #AD Federation Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.AD.Federation.2012","ADFS-Federation")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.AD.Federation.2012","`$MPElement[Name='LW.Microsoft.Windows.Server.AD.Federation.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.AD.Federation.2012","Active Directory Federation Services")

                  #AD Right Management Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.AD.Rights.Management.2012","ADRMS")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.AD.Rights.Management.2012","`$MPElement[Name='LW.Microsoft.Windows.Server.AD.Rights.Management.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.AD.Rights.Management.2012","Active Directory Rights Management Services 2012/2012 R2")

                  #DHCP
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.DHCP.2012","DHCP")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.DHCP.2012","`$MPElement[Name='LW.Microsoft.Windows.Server.DHCP.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.DHCP.2012","DHCP Server")

                  #DNS
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.DNS.2012","DNS")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.DNS.2012","`$MPElement[Name='LW.Microsoft.Windows.Server.DNS.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.DNS.2012","Domain Naming Service 2012/2012R2")

                  #Multi Tenant Remote Access
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.Remote.Access.2012","RemoteAccess")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.Remote.Access.2012","`$MPElement[Name='LW.Microsoft.Windows.Server.Remote.Access.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.Remote.Access.2012","Remote Access 2012/2012 R2")

                  #Network Load Balancing
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.NLB.2012","NLB")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.NLB.2012","`$MPElement[Name='LW.Microsoft.Windows.Server.NLB.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.NLB.2012","Network Load Balancing")

                  #Remote Desktop Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.Remote.Desktop.Services.2012","Remote-Desktop-Services")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.Remote.Desktop.Services.2012","`$MPElement[Name='LW.Microsoft.Windows.Server.Remote.Desktop.Services.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.Remote.Desktop.Services.2012","Remote Desktop Services 2012")

                  #Windows Deployment Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Deployment.Services.2012","WDS")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Deployment.Services.2012","`$MPElement[Name='LW.Microsoft.Windows.Deployment.Services.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Deployment.Services.2012","Windows Deployment Services 2012")

                  #Message Queuing Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.Queuing.2012","MSMQ")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.Queuing.2012","`$MPElement[Name='LW.Microsoft.Windows.Server.Queuing.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.Queuing.2012","Message Queuing 2012")

                  #Hyper-V Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.HyperV.2012","Hyper-V")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.HyperV.2012","`$MPElement[Name='LW.Microsoft.Windows.Server.HyperV.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.HyperV.2012","Hyper-V 2012")

                  #Cluster
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.Cluster.2012","Failover-Clustering")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.Cluster.2012","`$MPElement[Name='LW.Microsoft.Windows.Server.Cluster.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.Cluster.2012","Windows Server Cluster")

                  #IIS
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.IIS.2012","Web-Server")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.IIS.2012","`$MPElement[Name='LW.Microsoft.Windows.Server.IIS.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.IIS.2012","IIS 2012")

                  #Active Directory
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.ActiveDirectory.2012","AD-Domain-Services")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.ActiveDirectory.2012","`$MPElement[Name='LW.Microsoft.Windows.Server.ActiveDirectory.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.ActiveDirectory.2012","Active Directory Domain Services 2008/2008R2/2012/2012R2")

				  #LW.Microsoft.3rdParty.Savision.ActiveDirectory
                  $windowsFeatureTable.Add("LW.Microsoft.3rdParty.Savision.ActiveDirectory","AD-Domain-Services")
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.ActiveDirectory","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.ActiveDirectory']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.ActiveDirectory","Active Directory (by Savision)")

				  #LW.Microsoft.3rdParty.Savision.DHCP
                  $windowsFeatureTable.Add("LW.Microsoft.3rdParty.Savision.DHCP","DHCP")
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.DHCP","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.DHCP']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.DHCP","DHCP (by Savision)")

				  #LW.Microsoft.3rdParty.Savision.DNS
                  $windowsFeatureTable.Add("LW.Microsoft.3rdParty.Savision.DNS","DNS")
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.DNS","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.DNS']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.DNS","DNS (by Savision)")

                  function LogWrite
                  {
					  Param([string]$logString)
					  $script:logMessage += $logString
                  }

                  #scriptStartTime will help in calculating script run time
                  $scriptStartTime = Get-Date
                  $script:logMessage = ''
				  $GuestOS = ''
				  $wmiOS = (Get-WmiObject -Class Win32_OperatingSystem).caption
				  if (-not ([string]::IsNullOrEmpty($wmiOS)))
				  {
						$GuestOS = $wmiOS
				  }

                  LogWrite "`nServer2012Roles::Starting nServer2012Roles script."

                  if(($SourceId -eq $null) -or ($ManagedEntityId -eq $null) -or ($computerName -eq $null))
                  {
					  LogWrite "`nServer2012Roles::SourceId, ManagedEntityId or Computer name is null. Exiting script."
					  Exit -1
                  }

                  #Create discovery property bag only once as we can't return multiple property bags
                  $api = new-object -comObject 'MOM.ScriptAPI'
                  $discoveryData = $api.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)

                  #get all server roles information in single shot
                  $allInstalledFeatures = get-windowsfeature | ?{$_.InstallState -eq "Installed"}

                  #Iterate through discovery method table
                  if($windowsFeatureTable -eq $null)
                  {
					  #Code shouldn't come here
					  LogWrite "`nServer2012Roles::Windows feature table is empty. Exiting the script."
					  Exit -1
                  }

                  foreach ($classDetails in $windowsFeatureTable.GetEnumerator())
                  {
					  $className = $classDetails.Name
					  $serverRoleName = $classDetails.Value

					  if($serverRoleName -eq $null)
					  {
							continue
					  }

					  $getFeatureDetails = $allInstalledFeatures | ?{$_.Name -eq $serverRoleName}

					  #getfeaturedetails will be null if server role is not installed or we are not supporting the installed role
					  if(($getFeatureDetails -ne $null) -and ($classMPElementTable.Item($className) -ne $null))
					  {
						  LogWrite "`nCreating class instance for class $className"
						  $instance = $discoveryData.CreateClassInstance($classMPElementTable.Item($className))
						  $instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $computerName)
						  $instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $computerName)
						  $instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.ComputerRole.Category']/CategoryName$", $classCategoryTable.Item($className))
						  $instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.ComputerRole.Category']/GuestOS$", $GuestOS)
						  $discoveryData.AddInstance($instance)
					  }
                  }

                  $scriptEndTime = Get-Date
                  $totalScriptRunTime = ($scriptEndTime - $scriptStartTime) | select-object TotalSeconds
                  $totalScriptRunTime = $totalScriptRunTime.TotalSeconds
                  LogWrite "`n Total time taken to run the script $totalScriptRunTime"

                  #Log an event after running the script
                  $api.LogScriptEvent("Server2012Roles.ps1", 5001, 0, $script:logMessage)

                  #Return discovery property bag
                  $discoveryData</ScriptBody><Parameters><Parameter><Name>sourceID</Name><Value>$MPElement$</Value></Parameter><Parameter><Name>managedEntityID</Name><Value>$Target/Id$</Value></Parameter><Parameter><Name>computerName</Name><Value>$Config/ComputerPrincipalName$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><StrictErrorHandling>false</StrictErrorHandling></ProbeAction></MemberModules><Composition><Node ID="PowerShellDiscoveryProbe"><Node ID="Scheduler"/></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="LW.Microsoft.Windows.Server.2008R2.Role.Discovery.DataSource" Accessibility="Public" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:unsignedInt"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerPrincipalName" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:unsignedInt"/></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int"/><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int"/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Discovery.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">$Config/IntervalSeconds$</Interval></SimpleReccuringSchedule><ExcludeDates/></Scheduler></DataSource><ProbeAction ID="PowerShellDiscoveryProbe" TypeID="Windows!Microsoft.Windows.PowerShellDiscoveryProbe"><ScriptName>"Lightweight 2008R2 server roles discovery script"</ScriptName><ScriptBody>
                  param ([String] $sourceID, [String] $managedEntityID, [String] $computerName)
                  				  #Copyright (c) Microsoft Corporation. All rights reserved.
                  #*************************************************************************
                  #Author - Arpit Mittal
                  #ScriptName: "Server2008R2Roles.ps1"$
                  #Purpose: This script along with ServerOSVersions.ps1 will discover installed server roles
                  # on the Windows Server 2008R2.
                  #*************************************************************************

                  $windowsFeatureTable = @{}
                  $classMPElementTable = @{}
                  $classCategoryTable = @{}

                  #Get-WindowsFeature Discoveries
                  #AD Federation Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.AD.Federation.2008R2","ADFS-Federation")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.AD.Federation.2008R2","`$MPElement[Name='LW.Microsoft.Windows.Server.AD.Federation.2008R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.AD.Federation.2008R2","Active Directory Federation Services")

                  #DHCP
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.DHCP.2008R2","DHCP")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.DHCP.2008R2","`$MPElement[Name='LW.Microsoft.Windows.Server.DHCP.2008R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.DHCP.2008R2","DHCP Server")

                  #Network Load Balancing
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.NLB.2008R2","NLB")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.NLB.2008R2","`$MPElement[Name='LW.Microsoft.Windows.Server.NLB.2008R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.NLB.2008R2","Network Load Balancing")

                  #Print Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.Print.Services.2008R2","Print-Server")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.Print.Services.2008R2","`$MPElement[Name='LW.Microsoft.Windows.Server.Print.Services.2008R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.Print.Services.2008R2","Print Server 2008/2008 R2")

                  #Active Directory Lightweight Directory Services
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.AD.Lightweight.Directory.2008R2","ADLDS")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.AD.Lightweight.Directory.2008R2","`$MPElement[Name='LW.Microsoft.Windows.Server.AD.Lightweight.Directory.2008R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.AD.Lightweight.Directory.2008R2","Active Directory Lightweight Directory Services")

                  #Active Directory
                  $windowsFeatureTable.Add("LW.Microsoft.Windows.Server.ActiveDirectory.2008R2","AD-Domain-Services")
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.ActiveDirectory.2008R2","`$MPElement[Name='LW.Microsoft.Windows.Server.ActiveDirectory.2008R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.ActiveDirectory.2008R2","Active Directory Domain Services 2008/2008R2/2012/2012R2")

                  #LW.Microsoft.3rdParty.Savision.ActiveDirectory
                  $windowsFeatureTable.Add("LW.Microsoft.3rdParty.Savision.ActiveDirectory","AD-Domain-Services")
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.ActiveDirectory","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.ActiveDirectory']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.ActiveDirectory","Active Directory (by Savision)")

				  #LW.Microsoft.3rdParty.Savision.DHCP
                  $windowsFeatureTable.Add("LW.Microsoft.3rdParty.Savision.DHCP","DHCP")
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.DHCP","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.DHCP']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.DHCP","DHCP (by Savision)")

                  function LogWrite
                  {
					  Param([string]$logString)
					  $script:logMessage += $logString
                  }

                  #scriptStartTime will help in calculating script run time
                  $scriptStartTime = Get-Date
                  $script:logMessage = ''
				  $GuestOS = ''
				  $wmiOS = (Get-WmiObject -Class Win32_OperatingSystem).caption
				  if (-not ([string]::IsNullOrEmpty($wmiOS)))
				  {
						$GuestOS = $wmiOS
				  }

                  LogWrite "`nServer2008R2Roles::Starting Server2008R2Roles script."

                  if(($SourceId -eq $null) -or ($ManagedEntityId -eq $null) -or ($computerName -eq $null))
                  {
					  LogWrite "`nServer2008R2Roles::SourceId, ManagedEntityId or Computer name is null. Exiting script."
					  Exit -1
                  }

                  #Create discovery property bag only once as we can't return multiple property bags
                  $api = new-object -comObject 'MOM.ScriptAPI'
                  $discoveryData = $api.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)

                  #get all server roles information in single shot
                  Import-Module servermanager
                  $allInstalledFeatures = get-windowsfeature | ?{$_.Installed -eq "True"}

                  #Iterate through discovery method table
                  if($windowsFeatureTable -eq $null)
                  {
					  #Code shouldn't come here
					  LogWrite "`nServer2008R2Roles::Windows feature table is empty. Exiting the script."
					  Exit -1
                  }

                  foreach ($classDetails in $windowsFeatureTable.GetEnumerator())
                  {
					  $className = $classDetails.Name
					  $serverRoleName = $classDetails.Value

					  if($serverRoleName -eq $null)
					  {
						 continue
					  }

					  $getFeatureDetails = $allInstalledFeatures | ?{$_.Name -eq $serverRoleName}

					  #getfeaturedetails will be null if server role is not installed or we are not supporting the installed role
					  if(($getFeatureDetails -ne $null) -and ($classMPElementTable.Item($className) -ne $null))
					  {
						  LogWrite "`nCreating class instance for class $className"
						  $instance = $discoveryData.CreateClassInstance($classMPElementTable.Item($className))
						  $instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $computerName)
						  $instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $computerName)
						  $instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.ComputerRole.Category']/CategoryName$", $classCategoryTable.Item($className))
						  $instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.ComputerRole.Category']/GuestOS$", $GuestOS)
						  $discoveryData.AddInstance($instance)
					  }
                  }

                  $scriptEndTime = Get-Date
                  $totalScriptRunTime = ($scriptEndTime - $scriptStartTime) | select-object TotalSeconds
                  $totalScriptRunTime = $totalScriptRunTime.TotalSeconds
                  LogWrite "`n Total time taken to run the script $totalScriptRunTime"

                  #Log an event after running the script
                  $api.LogScriptEvent("Server2008R2Roles.ps1", 5001, 0, $script:logMessage)

                  #Return discovery property bag
                  $discoveryData</ScriptBody><Parameters><Parameter><Name>sourceID</Name><Value>$MPElement$</Value></Parameter><Parameter><Name>managedEntityID</Name><Value>$Target/Id$</Value></Parameter><Parameter><Name>computerName</Name><Value>$Config/ComputerPrincipalName$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><StrictErrorHandling>false</StrictErrorHandling></ProbeAction></MemberModules><Composition><Node ID="PowerShellDiscoveryProbe"><Node ID="Scheduler"/></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="LW.Microsoft.Windows.NonServerRoles.Registry.Discovery.DataSource" Accessibility="Public" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:unsignedInt"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerPrincipalName" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:unsignedInt"/></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int"/><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int"/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Discovery.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">$Config/IntervalSeconds$</Interval></SimpleReccuringSchedule><ExcludeDates/></Scheduler></DataSource><ProbeAction ID="PowerShellDiscoveryProbe" TypeID="Windows!Microsoft.Windows.PowerShellDiscoveryProbe"><ScriptName>"Lightweight non server roles discovery script"</ScriptName><ScriptBody>
                  param ([String] $sourceID, [String] $managedEntityID, [String] $computerName)
                  				  #Copyright (c) Microsoft Corporation. All rights reserved.
                  #*************************************************************************
                  #Author - Arpit Mittal
                  #ScriptName: "NonServerRoles.ps1"$
                  #Purpose: This script will discover installed non-server roles on the Windows computers
                  #by searching the registries
                  #*************************************************************************
				 
				  #Table containing class name with multiple registry paths
                  $registryPathTable = @{}
                  #Table containing key value pairs for each registry path
                  $regKeyValuePairs = @{}
                  #Mapping of class names with their class instance names
                  $classMPElementTable = @{}
                  #Mapping of class name with category names
                  $classCategoryTable = @{}

                  #Get-WindowsFeature Discoveries
                  #SQL Server 2005
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2005",@("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\90\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2005","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2005']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2005","SQL Server 2005")

                  #SQL Server 2008
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2008",@("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\100\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2008","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2008']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2008","SQL Server 2008")

                  #SQL Server 2012
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2012",@("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\110\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2012","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2012","SQL Server 2012")

                  #SQL Server 2014
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2014",@("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\120\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2014","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2014']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2014","SQL Server 2014")

                  #BizTalk server 2013
                  $registryPathTable.Add("LW.Microsoft.Windows.Biztalk.2013",("HKLM:\SOFTWARE\Microsoft\BizTalk Server\3.0"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\BizTalk Server\3.0\LW.Microsoft.Windows.Biztalk.2013",@{"ProductVersion"="3.10.229.0"})
                  $classMPElementTable.Add("LW.Microsoft.Windows.Biztalk.2013","`$MPElement[Name='LW.Microsoft.Windows.Biztalk.2013']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Biztalk.2013","BizTalk 2013")

                  #BizTalk server 2013R2
                  $registryPathTable.Add("LW.Microsoft.Windows.Biztalk.2013R2",("HKLM:\SOFTWARE\Microsoft\BizTalk Server\3.0"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\BizTalk Server\3.0\LW.Microsoft.Windows.Biztalk.2013R2",@{"ProductVersion"="3.11"})
                  $classMPElementTable.Add("LW.Microsoft.Windows.Biztalk.2013R2","`$MPElement[Name='LW.Microsoft.Windows.Biztalk.2013R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Biztalk.2013R2","BizTalk 2013 R2")

                  #CRM 2013
                  $registryPathTable.Add("LW.Microsoft.Windows.CRM.2013",("HKLM:\SOFTWARE\Microsoft\MSCRM"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\MSCRM\LW.Microsoft.Windows.CRM.2013",@{"CRM_Server_Version"="^6.*"})
                  $classMPElementTable.Add("LW.Microsoft.Windows.CRM.2013","`$MPElement[Name='LW.Microsoft.Windows.CRM.2013']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.CRM.2013","Dynamics CRM 2013")

                  #CRM 2015
                  $registryPathTable.Add("LW.Microsoft.Windows.CRM.2015",("HKLM:\SOFTWARE\Microsoft\MSCRM"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\MSCRM\LW.Microsoft.Windows.CRM.2015",@{"CRM_Server_Version"="^7.*"})
                  $classMPElementTable.Add("LW.Microsoft.Windows.CRM.2015","`$MPElement[Name='LW.Microsoft.Windows.CRM.2015']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.CRM.2015","Dynamics CRM 2015")

                  #NAV 2013
                  $registryPathTable.Add("LW.Microsoft.Windows.NAV.2013",("HKLM:\SOFTWARE\Microsoft\Microsoft Dynamics NAV\70\Service"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.NAV.2013","`$MPElement[Name='LW.Microsoft.Windows.NAV.2013']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.NAV.2013","Dynamics NAV 2013")

                  #NAV 2013R2
                  $registryPathTable.Add("LW.Microsoft.Windows.NAV.2013R2",("HKLM:\SOFTWARE\Microsoft\Microsoft Dynamics NAV\71\Service"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.NAV.2013R2","`$MPElement[Name='LW.Microsoft.Windows.NAV.2013R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.NAV.2013R2","Dynamics NAV 2013")


                  #Exchange Server 2013
                  $registryPathTable.Add("LW.Microsoft.Windows.Exchange.Server.2013",("HKLM:\SOFTWARE\Microsoft\ExchangeServer\v15\Setup"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.Exchange.Server.2013","`$MPElement[Name='LW.Microsoft.Windows.Exchange.Server.2013']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Exchange.Server.2013","Exchange 2013")

                  #SharePoint Server 2013
                  $registryPathTable.Add("LW.Microsoft.Windows.SharePoint.Server.2013",("HKLM:\SOFTWARE\Microsoft\Office Server\15.0"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SharePoint.Server.2013","`$MPElement[Name='LW.Microsoft.Windows.SharePoint.Server.2013']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SharePoint.Server.2013","SharePoint Server 2013")

                  #SharePoint Foundation Server 2013
                  $registryPathTable.Add("LW.Microsoft.Windows.SharePoint.Foundation.Server.2013",("HKLM:\SOFTWARE\Microsoft\Shared Tools\Web Server Extensions\15.0\WSS"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SharePoint.Foundation.Server.2013","`$MPElement[Name='LW.Microsoft.Windows.SharePoint.Foundation.Server.2013']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SharePoint.Foundation.Server.2013","SharePoint Foundation 2013")

                  #SPF 2012R2
                  $registryPathTable.Add("LW.Microsoft.Windows.SPF.2012R2",("HKLM:\SOFTWARE\Microsoft\Service Provider Foundation"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\Service Provider Foundation\LW.Microsoft.Windows.SPF.2012R2",@{"Version"="^7.2*"})
                  $classMPElementTable.Add("LW.Microsoft.Windows.SPF.2012R2","`$MPElement[Name='LW.Microsoft.Windows.SPF.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SPF.2012R2","Service Provider Foundation")

                  #Host Integration Server 2013
                  $registryPathTable.Add("LW.Microsoft.Windows.Host.Integration.Server.2013",@("HKLM:\SOFTWARE\Microsoft\Host Integration Server\9.0"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.Host.Integration.Server.2013","`$MPElement[Name='LW.Microsoft.Windows.Host.Integration.Server.2013']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Host.Integration.Server.2013","Host Integration Server 2013")

                  #SMA 2012R2
                  $registryPathTable.Add("LW.Microsoft.Windows.SMA.2012R2",@("HKLM:\SOFTWARE\Microsoft\ServiceManagementAutomation"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SMA.2012R2","`$MPElement[Name='LW.Microsoft.Windows.SMA.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SMA.2012R2","ServiceManagementAutomation")

                  #Dynamics AX 2012
                  $registryPathTable.Add("LW.Microsoft.Windows.Dynamics.AX.2012",@("HKLM:\SYSTEM\CurrentControlSet\Services\Dynamics Server\6.0\01"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.Dynamics.AX.2012","`$MPElement[Name='LW.Microsoft.Windows.Dynamics.AX.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Dynamics.AX.2012","Dynamics AX 2012")

                  #TFS 2010
                  $registryPathTable.Add("LW.Microsoft.Windows.TFS.2010",@("HKLM:\SOFTWARE\Microsoft\TeamFoundationServer\10.0\InstalledComponents\ApplicationTier"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\TeamFoundationServer\10.0\InstalledComponents\ApplicationTier\LW.Microsoft.Windows.TFS.2010",@{"IsConfigured"="^1"})
                  $classMPElementTable.Add("LW.Microsoft.Windows.TFS.2010","`$MPElement[Name='LW.Microsoft.Windows.TFS.2010']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.TFS.2010","Team Foundation Server 2010")

                  #TFS 2012
                  $registryPathTable.Add("LW.Microsoft.Windows.TFS.2012",@("HKLM:\SOFTWARE\Microsoft\TeamFoundationServer\11.0\InstalledComponents\ApplicationTier"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\TeamFoundationServer\11.0\InstalledComponents\ApplicationTier\LW.Microsoft.Windows.TFS.2012",@{"IsConfigured"="^1"})
                  $classMPElementTable.Add("LW.Microsoft.Windows.TFS.2012","`$MPElement[Name='LW.Microsoft.Windows.TFS.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.TFS.2012","Team Foundation Server 2012")

                  #SCCM 2012
                  $registryPathTable.Add("LW.Microsoft.Windows.SCCM.2012",("HKLM:\SOFTWARE\Microsoft\SMS\Operations Management"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\SMS\Operations Management\LW.Microsoft.Windows.SCCM.2012",@{"Version"="^5.0*"})
                  $classMPElementTable.Add("LW.Microsoft.Windows.SCCM.2012","`$MPElement[Name='LW.Microsoft.Windows.SCCM.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SCCM.2012","System Center 2012 - Configuration Manager")

				  #MSDTC 2016
                  $registryPathTable.Add("LW.Microsoft.Windows.MSDTC.2016",("HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\SMS\Operations Management\LW.Microsoft.Windows.MSDTC.2016",@{"CurrentVersion"="6.3"})
                  $classMPElementTable.Add("LW.Microsoft.Windows.MSDTC.2016","`$MPElement[Name='LW.Microsoft.Windows.MSDTC.2016']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.MSDTC.2016","Distributed Transaction Coordinator 2016")

				  #MSDTC 2012 R2
                  $registryPathTable.Add("LW.Microsoft.Windows.MSDTC.2012R2",("HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\SMS\Operations Management\LW.Microsoft.Windows.MSDTC.2012R2",@{"CurrentVersion"="6.3"})
                  $classMPElementTable.Add("LW.Microsoft.Windows.MSDTC.2012R2","`$MPElement[Name='LW.Microsoft.Windows.MSDTC.2012R2']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.MSDTC.2012R2","Distributed Transaction Coordinator 2012 R2")

				  #SQL Server 2016
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2016",@("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\130\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2016","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2016']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2016","SQL Server 2016")

				  #Dynamics AX 2009
                  $registryPathTable.Add("LW.Microsoft.Windows.Dynamics.AX.2009",@("HKLM:\SYSTEM\CurrentControlSet\Services\Dynamics Server\5.0"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.Dynamics.AX.2009","`$MPElement[Name='LW.Microsoft.Windows.Dynamics.AX.2009']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Dynamics.AX.2009","Dynamics AX 2009")

				  #Dynamics AX Retail 2012 R3
                  $registryPathTable.Add("LW.Microsoft.Windows.Dynamics.AX.Retail.2012R3",@("HKLM:\SOFTWARE\Microsoft\Dynamics\6.0"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.Dynamics.AX.Retail.2012R3","`$MPElement[Name='LW.Microsoft.Windows.Dynamics.AX.Retail.2012R3']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Dynamics.AX.Retail.2012R3","Dynamics AX Retail 2012 R3")

				  #Host Integration Server 2010
                  $registryPathTable.Add("LW.Microsoft.Windows.Host.Integration.Server.2010",("HKLM:\SOFTWARE\Microsoft\SNA Server\CurrentVersion"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\SNA Server\CurrentVersion\LW.Microsoft.Windows.Host.Integration.Server.2010",@{"SNAVersion"="^8.5*"})
                  $classMPElementTable.Add("LW.Microsoft.Windows.Host.Integration.Server.2010","`$MPElement[Name='LW.Microsoft.Windows.Host.Integration.Server.2010']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Host.Integration.Server.2010","Host Integration Server 2010")

				  #SharePoint Foundation Server 2010
                  $registryPathTable.Add("LW.Microsoft.Windows.SharePoint.Foundation.Server.2010",("HKLM:\SOFTWARE\Microsoft\Shared Tools\Web Server Extensions\14.0\WSS"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SharePoint.Foundation.Server.2010","`$MPElement[Name='LW.Microsoft.Windows.SharePoint.Foundation.Server.2010']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SharePoint.Foundation.Server.2010","Office SharePoint Foundation 2010")

				  #SharePoint 2010 Products
                  $registryPathTable.Add("LW.Microsoft.Windows.SharePoint.Server.2010",("HKLM:\SOFTWARE\Microsoft\Shared Tools\Web Server Extensions\14.0"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SharePoint.Server.2010","`$MPElement[Name='LW.Microsoft.Windows.SharePoint.Server.2010']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SharePoint.Server.2010","SharePoint 2010 Products")

				  #BizTalk server 2010
                  $registryPathTable.Add("LW.Microsoft.Windows.Biztalk.2010",("HKLM:\SOFTWARE\Microsoft\BizTalk Server\3.0"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\BizTalk Server\3.0\LW.Microsoft.Windows.Biztalk.2010",@{"ProductVersion"="3.9.469.0"})
                  $classMPElementTable.Add("LW.Microsoft.Windows.Biztalk.2010","`$MPElement[Name='LW.Microsoft.Windows.Biztalk.2010']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Biztalk.2010","BizTalk 2010")

				  #BizTalk server 2009
                  $registryPathTable.Add("LW.Microsoft.Windows.Biztalk.2009",("HKLM:\SOFTWARE\Microsoft\BizTalk Server\3.0"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\BizTalk Server\3.0\LW.Microsoft.Windows.Biztalk.2009",@{"ProductVersion"="3.8.368.0"})
                  $classMPElementTable.Add("LW.Microsoft.Windows.Biztalk.2009","`$MPElement[Name='LW.Microsoft.Windows.Biztalk.2009']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Biztalk.2009","BizTalk 2009")

				  #BizTalk server 2006
                  $registryPathTable.Add("LW.Microsoft.Windows.Biztalk.2006",("HKLM:\SOFTWARE\Microsoft\BizTalk Server\3.0"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\BizTalk Server\3.0\LW.Microsoft.Windows.Biztalk.2006",@{"ProductVersion"="3.5.1602.0"})
                  $classMPElementTable.Add("LW.Microsoft.Windows.Biztalk.2006","`$MPElement[Name='LW.Microsoft.Windows.Biztalk.2006']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Biztalk.2006","BizTalk 2006")

				  #SQL Server 2016 Reporting Services (Native Mode)
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2016.ReportingServices.NativeMode",("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\130\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2016.ReportingServices.NativeMode","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2016.ReportingServices.NativeMode']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2016.ReportingServices.NativeMode","SQL Server 2016 Reporting Services (Native Mode)")

				  #SQL Server 2014 Reporting Services (Native Mode)
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2014.ReportingServices.NativeMode",("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\120\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2014.ReportingServices.NativeMode","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2014.ReportingServices.NativeMode']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2014.ReportingServices.NativeMode","SQL Server 2014 Reporting Services (Native Mode)")

				  #SQL Server 2012 Reporting Services (Native Mode)
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2012.ReportingServices.NativeMode",("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\110\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2012.ReportingServices.NativeMode","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2012.ReportingServices.NativeMode']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2012.ReportingServices.NativeMode","SQL Server 2012 Reporting Services (Native Mode)")

				  #SQL Server 2016 Analysis Services
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2016.AnalysisServices",("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\130\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2016.AnalysisServices","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2016.AnalysisServices']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2016.AnalysisServices","SQL Server 2016 Analysis Services")

				  #SQL Server 2014 Analysis Services
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2014.AnalysisServices",("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\120\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2014.AnalysisServices","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2014.AnalysisServices']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2014.AnalysisServices","SQL Server 2014 Analysis Services")

				  #SQL Server 2012 Analysis Services
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2012.AnalysisServices",("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\110\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2012.AnalysisServices","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2012.AnalysisServices']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2012.AnalysisServices","SQL Server 2012 Analysis Services")

				  #SQL Server 2016 Replication
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2016.Replication",("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\130\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2016.Replication","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2016.Replication']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2016.Replication","SQL Server 2016 Replication")

				  #SQL Server 2014 Replication
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2014.Replication",("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\120\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2014.Replication","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2014.Replication']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2014.Replication","SQL Server 2014 Replication")

				  #SQL Server 2012 Replication
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2012.Replication",("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\110\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2012.Replication","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2012.Replication']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2012.Replication","SQL Server 2012 Replication")

				  #SQL Server 2017 Replication
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2017.Replication",("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\140\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2017.Replication","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2017.Replication']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2017.Replication","SQL Server 2017+ Replication")

				  #SQL Server 2017+  renamed  SQL Server (for 2012 and up)
                  $registryPathTable.Add("LW.Microsoft.Windows.SQL.Server.2017",@("HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\140\Machines"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SQL.Server.2017","`$MPElement[Name='LW.Microsoft.Windows.SQL.Server.2017']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SQL.Server.2017","SQL Server (for 2012 and up)")

				  #Advanced Threat Analytics
                  $registryPathTable.Add("LW.Microsoft.AdvancedThreatAnalytics",@("HKLM:\SOFTWARE\Microsoft\Microsoft Advanced Threat Analytics"))
                  $classMPElementTable.Add("LW.Microsoft.AdvancedThreatAnalytics","`$MPElement[Name='LW.Microsoft.AdvancedThreatAnalytics']$")
                  $classCategoryTable.Add("LW.Microsoft.AdvancedThreatAnalytics","Advanced Threat Analytics")

                  #SDN Monitoring
                  $registryPathTable.Add("LW.Microsoft.SDNMonitoring",@("HKLM:\SOFTWARE\MICROSOFT\SDNMonitoringMP"))
                  $classMPElementTable.Add("LW.Microsoft.SDNMonitoring","`$MPElement[Name='LW.Microsoft.SDNMonitoring']$")
                  $classCategoryTable.Add("LW.Microsoft.SDNMonitoring","SDN Monitoring")

                  #Lync.Server.2013
                  $registryPathTable.Add("LW.Microsoft.Lync.Server.2013",("HKLM:\Software\Microsoft\Real-Time Communications\{2A0B4BB2-4921-4b40-BA9E-81747CB84635}"))
                  $regKeyValuePairs.Add("HKLM:\Software\Microsoft\Real-Time Communications\{2A0B4BB2-4921-4b40-BA9E-81747CB84635}\LW.Microsoft.Lync.Server.2013",@{"Version"="^5"})
                  $classMPElementTable.Add("LW.Microsoft.Lync.Server.2013","`$MPElement[Name='LW.Microsoft.Lync.Server.2013']$")
                  $classCategoryTable.Add("LW.Microsoft.Lync.Server.2013","Lync Server 2013")

                  #LW.Microsoft.SkypeForBusiness.2015
                  $registryPathTable.Add("LW.Microsoft.SkypeForBusiness.2015",("HKLM:\Software\Microsoft\Real-Time Communications\{2A0B4BB2-4921-4b40-BA9E-81747CB84635}"))
                  $regKeyValuePairs.Add("HKLM:\Software\Microsoft\Real-Time Communications\{2A0B4BB2-4921-4b40-BA9E-81747CB84635}\LW.Microsoft.SkypeForBusiness.2015",@{"Version"="^6"})
                  $classMPElementTable.Add("LW.Microsoft.SkypeForBusiness.2015","`$MPElement[Name='LW.Microsoft.SkypeForBusiness.2015']$")
                  $classCategoryTable.Add("LW.Microsoft.SkypeForBusiness.2015","Skype for Business Server 2015")

				  #Virtual Machine Manager 2016
                  $registryPathTable.Add("LW.Microsoft.2016.VirtualMachineManager",@("HKLM:\SYSTEM\CurrentControlSet\Services\Virtual Server"))
                  $classMPElementTable.Add("LW.Microsoft.2016.VirtualMachineManager","`$MPElement[Name='LW.Microsoft.2016.VirtualMachineManager']$")
                  $classCategoryTable.Add("LW.Microsoft.2016.VirtualMachineManager","Virtual Machine Manager 2016")	

                  #LW.Microsoft.3rdParty.Infront.RightFax
                  $registryPathTable.Add("LW.Microsoft.3rdParty.Infront.RightFax",@("HKLM:\SOFTWARE\MICROSOFT"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Infront.RightFax","`$MPElement[Name='LW.Microsoft.3rdParty.Infront.RightFax']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Infront.RightFax","RightFax (by Infront)")

				  #LW.Microsoft.3rdParty.Infront.SCOrchestrator.Core
                  $registryPathTable.Add("LW.Microsoft.3rdParty.Infront.SCOrchestrator.Core",@("HKLM:\SOFTWARE\WOW6432NODE\Microsoft\SystemCenter2012\Orchestrator"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Infront.SCOrchestrator.Core","`$MPElement[Name='LW.Microsoft.3rdParty.Infront.SCOrchestrator.Core']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Infront.SCOrchestrator.Core","SC Orchestrator (by Infront)")

				  #LW.Microsoft.3rdParty.Infront.McAfee
                  $registryPathTable.Add("LW.Microsoft.3rdParty.Infront.McAfee",@("HKLM:\SOFTWARE\MICROSOFT"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Infront.McAfee","`$MPElement[Name='LW.Microsoft.3rdParty.Infront.McAfee']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Infront.McAfee","McAfee (by Infront)")

				  #LW.Microsoft.3rdParty.NiCE.IBM.Domino
                  $registryPathTable.Add("LW.Microsoft.3rdParty.NiCE.IBM.Domino",@("HKLM:\SOFTWARE\MICROSOFT"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.NiCE.IBM.Domino","`$MPElement[Name='LW.Microsoft.3rdParty.NiCE.IBM.Domino']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.NiCE.IBM.Domino","IBM Domino (by NiCE)")

				  #LW.Microsoft.3rdParty.NiCE.Oracle
                  $registryPathTable.Add("LW.Microsoft.3rdParty.NiCE.Oracle",@("HKLM:\SOFTWARE\MICROSOFT"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.NiCE.Oracle","`$MPElement[Name='LW.Microsoft.3rdParty.NiCE.Oracle']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.NiCE.Oracle","Oracle (by NiCE)")

				  #LW.Microsoft.3rdParty.OpsLogix.VMware
                  $registryPathTable.Add("LW.Microsoft.3rdParty.OpsLogix.VMware",@("HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VMware Tools"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.OpsLogix.VMware","`$MPElement[Name='LW.Microsoft.3rdParty.OpsLogix.VMware']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.OpsLogix.VMware","VMware (by OpsLogix)")

				  #LW.Microsoft.3rdParty.OpsLogix.Oracle
                  $registryPathTable.Add("LW.Microsoft.3rdParty.OpsLogix.Oracle",@("HKLM:\Software\Oracle"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.OpsLogix.Oracle","`$MPElement[Name='LW.Microsoft.3rdParty.OpsLogix.Oracle']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.OpsLogix.Oracle","Oracle (by OpsLogix)")

				  #LW.Microsoft.3rdParty.OpsLogix.IBMMQ
                  $registryPathTable.Add("LW.Microsoft.3rdParty.OpsLogix.IBMMQ",@("HKLM:\SOFTWARE\Wow6432Node\IBM\MQSeries"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.OpsLogix.IBMMQ","`$MPElement[Name='LW.Microsoft.3rdParty.OpsLogix.IBMMQ']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.OpsLogix.IBMMQ","IBM MQ (by OpsLogix)")

				  #LW.Microsoft.3rdParty.OpsLogix.BlackBerryV12
                  $registryPathTable.Add("LW.Microsoft.3rdParty.OpsLogix.BlackBerryV12",@("HKLM:\SOFTWARE\MICROSOFT"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.OpsLogix.BlackBerryV12","`$MPElement[Name='LW.Microsoft.3rdParty.OpsLogix.BlackBerryV12']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.OpsLogix.BlackBerryV12","BlackBerry (by OpsLogix)")

				  #LW.Microsoft.3rdParty.OpsLogix.Swift
                  $registryPathTable.Add("LW.Microsoft.3rdParty.OpsLogix.Swift",@("HKLM:\SOFTWARE\MICROSOFT"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.OpsLogix.Swift","`$MPElement[Name='LW.Microsoft.3rdParty.OpsLogix.Swift']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.OpsLogix.Swift","Swift (by OpsLogix)")

				  #LW.Microsoft.3rdParty.NiCE.DB2
                  $registryPathTable.Add("LW.Microsoft.3rdParty.NiCE.DB2",@("HKLM:\SOFTWARE\MICROSOFT"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.NiCE.DB2","`$MPElement[Name='LW.Microsoft.3rdParty.NiCE.DB2']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.NiCE.DB2","DB2 (by NiCE)")

				  #LW.Microsoft.3rdParty.Comtrade.NutanixVM
                  $registryPathTable.Add("LW.Microsoft.3rdParty.Comtrade.NutanixVM",@("HKLM:\HARDWARE\DESCRIPTION\System\BIOS"))
				  $regKeyValuePairs.Add("HKLM:\HARDWARE\DESCRIPTION\System\BIOS\LW.Microsoft.3rdParty.Comtrade.NutanixVM",@{"SystemManufacturer"="Nutanix"})
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Comtrade.NutanixVM","`$MPElement[Name='LW.Microsoft.3rdParty.Comtrade.NutanixVM']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Comtrade.NutanixVM","Nutanix VM (by HYCU)")

				  #LW.Microsoft.3rdParty.Calcomp.CHS
                  $registryPathTable.Add("LW.Microsoft.3rdParty.Calcomp.CHS",@("HKLM:\SOFTWARE\MICROSOFT"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Calcomp.CHS","`$MPElement[Name='LW.Microsoft.3rdParty.Calcomp.CHS']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Calcomp.CHS","CHS Suite (by Calcomp)")

				  #LW.Microsoft.3rdParty.Savision.Exchange.2013
                  $registryPathTable.Add("LW.Microsoft.3rdParty.Savision.Exchange.2013",("HKLM:\SOFTWARE\Microsoft\ExchangeServer\v15\Setup"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.Exchange.2013","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.Exchange.2013']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.Exchange.2013","Exchange 2013 (by Savision)")

				  #LW.Microsoft.3rdParty.Savision.Exchange.2010
                  $registryPathTable.Add("LW.Microsoft.3rdParty.Savision.Exchange.2010",("HKLM:\SOFTWARE\Microsoft\ExchangeServer\v14\Setup"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.Exchange.2010","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.Exchange.2010']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.Exchange.2010","Exchange 2010 (by Savision)")

				  #LW.Microsoft.3rdParty.Savision.Dynamics.CRM
                  $registryPathTable.Add("LW.Microsoft.3rdParty.Savision.Dynamics.CRM",("HKLM:\SOFTWARE\Microsoft\MSCRM"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\MSCRM\LW.Microsoft.3rdParty.Savision.Dynamics.CRM",@{"CRM_Server_Version"="^7.*"})
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.Dynamics.CRM","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.Dynamics.CRM']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.Dynamics.CRM","Dynamics CRM (by Savision)")

				  #LW.Microsoft.3rdParty.Savision.SharePoint.2013
                  $registryPathTable.Add("LW.Microsoft.3rdParty.Savision.SharePoint.2013",("HKLM:\SOFTWARE\Microsoft\Shared Tools\Web Server Extensions\15.0\WSS"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.SharePoint.2013","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.SharePoint.2013']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.SharePoint.2013","SharePoint 2013 (by Savision)")

				  #LW.Microsoft.3rdParty.Savision.Lync.Server.2013
                  $registryPathTable.Add("LW.Microsoft.3rdParty.Savision.Lync.Server.2013",("HKLM:\Software\Microsoft\Real-Time Communications\{2A0B4BB2-4921-4b40-BA9E-81747CB84635}"))
                  $regKeyValuePairs.Add("HKLM:\Software\Microsoft\Real-Time Communications\{2A0B4BB2-4921-4b40-BA9E-81747CB84635}\LW.Microsoft.3rdParty.Savision.Lync.Server.2013",@{"Version"="^5"})
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.Lync.Server.2013","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.Lync.Server.2013']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.Lync.Server.2013","Lync Server 2013 (by Savision)")

				  #LW.Microsoft.3rdParty.Savision.SkypeForBusiness.2015
                  $registryPathTable.Add("LW.Microsoft.3rdParty.Savision.SkypeForBusiness.2015",("HKLM:\Software\Microsoft\Real-Time Communications\{2A0B4BB2-4921-4b40-BA9E-81747CB84635}"))
                  $regKeyValuePairs.Add("HKLM:\Software\Microsoft\Real-Time Communications\{2A0B4BB2-4921-4b40-BA9E-81747CB84635}\LW.Microsoft.3rdParty.Savision.SkypeForBusiness.2015",@{"Version"="^6"})
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.SkypeForBusiness.2015","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.SkypeForBusiness.2015']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.SkypeForBusiness.2015","Skype for Business Server 2015 (by Savision)")

				  #LW.Microsoft.3rdParty.Savision.SCCM.2012
                  $registryPathTable.Add("LW.Microsoft.3rdParty.Savision.SCCM.2012",("HKLM:\SOFTWARE\Microsoft\SMS\Operations Management"))
                  $regKeyValuePairs.Add("HKLM:\SOFTWARE\Microsoft\SMS\Operations Management\LW.Microsoft.3rdParty.Savision.SCCM.2012",@{"Version"="^5.0*"})
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Savision.SCCM.2012","`$MPElement[Name='LW.Microsoft.3rdParty.Savision.SCCM.2012']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Savision.SCCM.2012","SCCM 2012 (by Savision)")

				  #LW.Microsoft.JEE.WebSphere.8plus.Windows.Configuration
                  $registryPathTable.Add("LW.Microsoft.JEE.WebSphere.8plus.Windows.Configuration",@("HKLM:\SOFTWARE\MICROSOFT"))
                  $classMPElementTable.Add("LW.Microsoft.JEE.WebSphere.8plus.Windows.Configuration","`$MPElement[Name='LW.Microsoft.JEE.WebSphere.8plus.Windows.Configuration']$")
                  $classCategoryTable.Add("LW.Microsoft.JEE.WebSphere.8plus.Windows.Configuration","WebSphere 8+")

				  #LW.Microsoft.JEE.Tomcat.8plus.Windows.Configuration
                  $registryPathTable.Add("LW.Microsoft.JEE.Tomcat.8plus.Windows.Configuration",@("HKLM:\SOFTWARE\MICROSOFT"))
                  $classMPElementTable.Add("LW.Microsoft.JEE.Tomcat.8plus.Windows.Configuration","`$MPElement[Name='LW.Microsoft.JEE.Tomcat.8plus.Windows.Configuration']$")
                  $classCategoryTable.Add("LW.Microsoft.JEE.Tomcat.8plus.Windows.Configuration","Tomcat 8+")

				  #LW.Microsoft.JEE.Wildfly.8plus.Windows.Configuration
                  $registryPathTable.Add("LW.Microsoft.JEE.Wildfly.8plus.Windows.Configuration",@("HKLM:\SOFTWARE\MICROSOFT"))
                  $classMPElementTable.Add("LW.Microsoft.JEE.Wildfly.8plus.Windows.Configuration","`$MPElement[Name='LW.Microsoft.JEE.Wildfly.8plus.Windows.Configuration']$")
                  $classCategoryTable.Add("LW.Microsoft.JEE.Wildfly.8plus.Windows.Configuration","Wildfly 8+")

				  #LW.Microsoft.JEE.JBoss.7.Windows.Configuration
                  $registryPathTable.Add("LW.Microsoft.JEE.JBoss.7.Windows.Configuration",@("HKLM:\SOFTWARE\MICROSOFT"))
                  $classMPElementTable.Add("LW.Microsoft.JEE.JBoss.7.Windows.Configuration","`$MPElement[Name='LW.Microsoft.JEE.JBoss.7.Windows.Configuration']$")
                  $classCategoryTable.Add("LW.Microsoft.JEE.JBoss.7.Windows.Configuration","JBoss 7")

				  #LW.Microsoft.JEE.WebLogic.12plus.Windows.Configuration
                  $registryPathTable.Add("LW.Microsoft.JEE.WebLogic.12plus.Windows.Configuration",@("HKLM:\SOFTWARE\MICROSOFT"))
                  $classMPElementTable.Add("LW.Microsoft.JEE.WebLogic.12plus.Windows.Configuration","`$MPElement[Name='LW.Microsoft.JEE.WebLogic.12plus.Windows.Configuration']$")
                  $classCategoryTable.Add("LW.Microsoft.JEE.WebLogic.12plus.Windows.Configuration","WebLogic 12+")

				  #LW.Microsoft.3rdParty.Gripmatix.CVAD
                  $registryPathTable.Add("LW.Microsoft.3rdParty.Gripmatix.CVAD",@("HKLM:\SOFTWARE\MICROSOFT"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Gripmatix.CVAD","`$MPElement[Name='LW.Microsoft.3rdParty.Gripmatix.CVAD']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Gripmatix.CVAD","MetrixInsight for CVAD (by GripMatix)")

				  #LW.Microsoft.3rdParty.Teqwave.PostgreSQL
                  $registryPathTable.Add("LW.Microsoft.3rdParty.Teqwave.PostgreSQL",@("HKLM:\SOFTWARE\MICROSOFT"))
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Teqwave.PostgreSQL","`$MPElement[Name='LW.Microsoft.3rdParty.Teqwave.PostgreSQL']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Teqwave.PostgreSQL","PostgreSQL (by Teqwave)")

				  # Dell EMC
                  $registryPathTable.Add("LW.Microsoft.3rdParty.Dell.EMC",@("HKLM:\SOFTWARE\MICROSOFT"))                  
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Dell.EMC","`$MPElement[Name='LW.Microsoft.3rdParty.Dell.EMC']$")
				  $classCategoryTable.Add("LW.Microsoft.3rdParty.Dell.EMC","Dell EMC OpenManage Integration for Microsoft SCOM")

				  #SharePoint Server 2016+
                  $registryPathTable.Add("LW.Microsoft.Windows.SharePoint.Server.2016",("HKLM:\SOFTWARE\Microsoft\Office Server\16.0"))
                  $classMPElementTable.Add("LW.Microsoft.Windows.SharePoint.Server.2016","`$MPElement[Name='LW.Microsoft.Windows.SharePoint.Server.2016']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.SharePoint.Server.2016","SharePoint Server 2016+")

				  #S2D 2016+
                  $registryPathTable.Add("LW.Microsoft.Windows.Server.StorageSpacesDirect.2016",("HKLM:\Cluster"))
                  $regKeyValuePairs.Add("HKLM:\Cluster\LW.Microsoft.Windows.Server.StorageSpacesDirect.2016",@{"S2DEnabled"="1"})
                  $classMPElementTable.Add("LW.Microsoft.Windows.Server.StorageSpacesDirect.2016","`$MPElement[Name='LW.Microsoft.Windows.Server.StorageSpacesDirect.2016']$")
                  $classCategoryTable.Add("LW.Microsoft.Windows.Server.StorageSpacesDirect.2016","Storage Spaces Direct 2016+")

				  function LogWrite
                  {
                  Param([string]$logString)
                  $script:logMessage += $logString
                  }

				  function Test-AllRegistryValue ($RegKeys)
				  {
				   $checkKeyExists = $true
					foreach ($RegKey in $RegKeys)
					{
					  $result = Test-RegistryValue $RegKey
					  if ( $result -eq $false )
					  {
					   $checkKeyExists = $false
					  }
					  
					}
					 return $checkKeyExists
				  }

				  function Test-AnyRegistryValue ($RegKeys)
				  {
				   $checkKeyExists = $false
					ForEach ($RegKey in $RegKeys)
					{
					  $result = Test-RegistryValue $RegKey
					  if ( $result -eq $true )
					  {
					   $checkKeyExists = $true
					   break
					  }
					  
					}
					 return $checkKeyExists
				  }

					Function Check-Websphere($requiredVersion)
					{
						$usersList=Get-ChildItem Registry::HKEY_USERS|Select Name
						foreach($user in $usersList)
							{
							$key1="Registry::"+$user.Name+"\Software\IBM\WebSphere Application Server";
							$key2="Registry::"+$user.Name+"\Software\IBM\WebSphere Application Server Network Deployment";

								if((Test-Path $key1) -and (Check-RequiredVersion -key $key1 -requiredVersion $requiredVersion))
								{
								return $true;
								}

								if((Test-Path $key2) -and (Check-RequiredVersion -key $key2 -requiredVersion $requiredVersion))
								{
								return $true;
								}
						}
						return $false;
					}

					Function Check-RequiredVersion($key,$requiredVersion)
					{
						$versionKeys=Get-ChildItem $key;
							foreach($version in $versionKeys)
							{
								$finalKey=$key+'\'+$version.PSChildName;
								$keyData=Get-ItemProperty -Path $finalKey;
								if([int]$keyData.MajorVersion -ge [int]$requiredVersion)
								{
								$keyData.MajorVersion
								return $true;
								}
							}
						return $false;
					}


					Function Check-Tomcat($requiredVersion)
					{
						$list=Get-WmiObject -Query  "SELECT * FROM Win32_Process WHERE Name LIKE 'java%.exe' or Name = 'conhost.exe' or Name Like 'Tomcat_.exe'"
						$objects=$list|where {$_.CommandLine -like '*Tomcat*'}
						foreach($object in $objects)
						{
							if($object.CommandLine -like '*-Dcatalina.home*')
							{
								$locationReg=[Regex]::new('"-Dcatalina.home=([^"]+)"')
								$result=$locationReg.Match($object.CommandLine);
								if($result.Success)
								{
									$location=$result.Groups[1].Value;
								}
								else
								{
									$locationReg=[Regex]::new('-Dcatalina.home="([^"]+)"')
									$result=$locationReg.Match($object.CommandLine);
									if($result.Success)
									{
										$location=$result.Groups[1].Value;
									}
								}
							}
							$location=$location.Replace('"','');
							$rootLocation=$location+"\RELEASE-NOTES";
							if(Test-Path $rootLocation)
							{
								$data=Get-Content $rootLocation
								foreach($line in $data)
								{
									if($line -like "*Apache Tomcat Version *")
									{
										  $reg=[Regex]::new("([0-9]+\.[0-9]+\.[0-9]+)")
										   $resolvedData=$reg.Match($line);
										   if($resolvedData.Success)
										   {
											   $version=$resolvedData.Value.Split('.');
											   if([int]$version[0] -ge [int]$requiredVersion)
											   {
													return $true;
											   }
										   }
										break;
									}
								}
							}
						}
						return $false;
					}

					Function Check-Wildfly($requiredVersion)
					{
						$list=Get-WmiObject -Query "SELECT CommandLine FROM Win32_Process WHERE Name LIKE 'java%.exe' or Name = 'conhost.exe'"
						$objects=$list|Where-Object {$_.CommandLine -like '*-Djboss.home.dir*'}
						$fileLocation1="\modules\system\layers\base\org\jboss\as\product\wildfly-full\dir\META-INF\MANIFEST.MF";
						$fileLocation2="\modules\system\layers\base\org\jboss\as\server\main\module.xml"
            			foreach($object in $objects)
						{
							$locationReg=[Regex]::new('"-Djboss.home.dir=([^"]+)"')
							$location=$null
							$result=$locationReg.Match($object.CommandLine);
							if($result.Success)
							{
								$location=$result.Groups[1].Value;
							}
							else
							{
								$locationReg=[Regex]::new('-Djboss.home.dir="([^"]+)"')
								$result=$locationReg.Match($object.CommandLine);
								if($result.Success)
								{
									$location=$result.Groups[1].Value;
								}
							}

							$location=$location.Replace('"','');
							if(Test-Path ($location+$fileLocation1))
                            {
                                $rootLocation=$location+$fileLocation1
                                $versionData=Get-Content -Path $rootLocation;                                                   
                            }
                            elseif(Test-Path ($location+$fileLocation2))
                            {                                                
                                $rootLocation=$location+$fileLocation2;
                                $fileData=[xml](Get-Content -Path $rootLocation);
                                $versionData=$fileData.module.resources.'resource-root'.path
                            }
                            if($versionData -ne $null -and $versionData -ne "")
                            {
                                $reg=[Regex]::new("([0-9]+\.[0-9]+\.[0-9]+)")
                                $resolvedData=$reg.Match($versionData);
                                if($resolvedData.Success)
                                {
                                    $version=$resolvedData.Value.Split('.');
                                    if([int]$version[0] -ge [int]$requiredVersion)
                                    {
                                        return $true;
                                    }
                                }
                            }     
                        }
						return $false;
					}  

					Function Check-JBoss($requiredVersion)
					{
						$list=Get-WmiObject -Query "SELECT CommandLine FROM Win32_Process WHERE Name LIKE 'java%.exe' or Name = 'conhost.exe'"
						$objects=$list|Where-Object {$_.CommandLine -like '*-Djboss.home.dir*'}
						foreach($object in $objects)
						{
							$locationReg=[Regex]::new('"-Djboss.home.dir=([^"]+)"')
							$location=$null
							$result=$locationReg.Match($object.CommandLine);
							if($result.Success)
							{
								$location=$result.Groups[1].Value;
							}
							else
							{
								$locationReg=[Regex]::new('-Djboss.home.dir="([^"]+)"')
								$result=$locationReg.Match($object.CommandLine);
								if($result.Success)
								{
									$location=$result.Groups[1].Value;
								}
							}

							$location=$location.Replace('"','');
							$rootLocation=$location+"\modules\org\jboss\as\server\main\module.xml"
							if(Test-Path $rootLocation)
							{
							   $fileData=[xml](Get-Content -Path $rootLocation);
							   $versionData=$fileData.module.resources.'resource-root'.path
							   $reg=[Regex]::new("([0-9]+\.[0-9]+\.[0-9]+)")
							   $resolvedData=$reg.Match($versionData);
							   if($resolvedData.Success)
							   {
								   $version=$resolvedData.Value.Split('.');
								   if([int]$version[0] -eq [int]$requiredVersion)
								   {
										return $true;
								   }
							   }     
							}
						}
						return $false;
					} 

					Function Check-Weblogic($requiredVersion)
					{
						$query="Select CommandLine  from Win32_Process WHERE Name LIKE 'java%.exe'"
						$objects=Get-WmiObject -Query $query
						$requiredObjects=$objects|Where-Object{$_.CommandLine -like '*-Dweblogic.home*'}
						foreach($object in $requiredObjects)
						{
							$lines=$object.CommandLine.Split(" ");
							foreach($line in $lines)
							{
								if($line -like '*-Dweblogic.home*')
								{
									$location=$line.replace("-Dweblogic.home=","");
									break;
								}
							}

							$locationValues=$location.Split("\");
							$rootLocation=$locationValues[0]+'\'+$locationValues[1];
							$registryFile=Get-ChildItem -Path $rootLocation -Recurse |Where-Object {$_.Name -eq 'registry.xml'}
							$registryLocation=$registryFile.FullName;
							$fileData=[xml](Get-Content -Path $registryLocation);
							$version=$fileData.registry.distributions.distribution.version
							$versions=$version.Split(".");

							if([int]$versions[0] -ge [int]$requiredVersion)
							{
								return $true;
								break;
							}
						}
						return $false;
					}

					function Check-DellEMC {
						$computer="."
						$hardwareManufacturerName = $null
						$biosObjects = Get-WmiObject -ComputerName $computer -Class Win32_ComputerSystem
						$hardwareManufacturerName = $biosObjects.Manufacturer
						$ModelName = $biosObjects.Model
						$manufacturer = $hardwareManufacturerName
						# To filter Dell manufacture and PowerEdge Servers, AX Nodes and S2D Ready Nodes
						if(($manufacturer.Contains("Dell")) -AND ($ModelName.Contains("PowerEdge")) -or ($ModelName.Contains("AX")) -or ($ModelName.Contains("Storage Spaces Direct RN")))
						{
	   						return $true;
						}
						else
						{
	   						return $false;
						}
					}

                  #This function will check the existence of registry path
                  #Providing path is mandatory, key value is optional
                  function Test-RegistryValue {
                  param (
                  [parameter(Mandatory=$true)]
                  [ValidateNotNullOrEmpty()]$Path,
                  [parameter(Mandatory=$false)]
                  [ValidateNotNullOrEmpty()]$Key,
                  [parameter(Mandatory=$false)]
                  [ValidateNotNullOrEmpty()]$Value
                  )

                  $checkRegistryKeyExists = $false

                  #Check if path exists
                  $isPathPresent = Test-Path $Path

					  #If only path argument was passed in function and path is present, then return true
					  if($isPathPresent -and ($Key -eq $null) -and ($Value -eq $null))
					  {
					  $checkRegistryKeyExists = $true
					  }
					  #handle other scenarios where key or value or both were passed in function arguments
					  elseif($isPathPresent)
					  {
					  #retrieve all keys present on that path
					  $allKeys = Get-ItemProperty $Path

					  #check if key parameter passed to the function is present in the retrieved keys list
						  if($allKeys.($Key))
						  {
						  #check if value is not null then match it with key or if value is null then return true
							  if((($Value -ne $null) -and $allKeys.($Key) -match $Value) -or ($Value -eq $null))
							  {
							  $checkRegistryKeyExists = $true
							  }
						  }
					  }

                  return $checkRegistryKeyExists
                  }

                  #scriptStartTime will help in calculating script run time
                  $scriptStartTime = Get-Date
                  $script:logMessage = ''
				  $GuestOS = ''
				  $wmiOS = (Get-WmiObject -Class Win32_OperatingSystem).caption
				  if (-not ([string]::IsNullOrEmpty($wmiOS)))
				  {
						$GuestOS = (Get-WmiObject -Class Win32_OperatingSystem).caption
				  }
				  LogWrite "`nNonServerRoles::Starting NonServerRoles script."

                  if(($SourceId -eq $null) -or ($ManagedEntityId -eq $null) -or ($computerName -eq $null))
                  {
                  LogWrite "`nNonServerRoles::SourceId, ManagedEntityId or Computer name is null. Exiting script."
                  Exit -1
                  }

                  #Create discovery property bag only once as we can't return multiple property bags
                  $api = new-object -comObject 'MOM.ScriptAPI'
                  $discoveryData = $api.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)

                  #Iterate through discovery method table
                  if($registryPathTable -eq $null)
                  {
                  #Code shouldn't come here
                  LogWrite "`nNonServerRoles::Registry path table is empty. Exiting the script."
                  Exit -1
                  }

                  #Iterate through non-server roles list with their registry paths
                  foreach ($classDetails in $registryPathTable.GetEnumerator())
                  {
                  $className = $classDetails.Name
                  $regPaths = $classDetails.Value
                  #Let's set the bool to true for each non-server roles in the list and set to false if non-server role is not installed
                  $IsValidProperties = $true

					  #Only proceed if non-server role has some paths to test else continue to second entry in registryPathTable
					  if($regPaths.length -ne 0)
					  {
						  foreach($path in $regPaths)
						  {
						  $pathWithClass = "$path\$className"
						  #Check if we need to validate key value pairs for the given path else just test the existence of path
								if($regKeyValuePairs.Item($pathWithClass) -ne $null)
								{
								$pairs = $regKeyValuePairs.Item($pathWithClass)
								#As a precaution check - if somebody creates a false entry of path in the table with empty key value pairs
									if($pairs.Count -ne 0)
									{
										foreach($keypair in $pairs.GetEnumerator())
										{
										#Test the path with key values
										$valid = Test-RegistryValue -Path $path -Key $keyPair.Key -Value $keyPair.Value

											if($valid -eq $false)
											{
											#Set the bool to false so that we don't create instance for this role
											$IsValidProperties = $false
											break
											}
										}
									}
									else
									{
									$IsValidProperties = $false
									break
									}
								}
								else
								{
									#Test the existence of the path which has no key value pairs and set bool to false if not found
									$valid = Test-RegistryValue -Path $path

									if($valid -eq $false)
									{
									$IsValidProperties = $false
									break
									}

									if($className -eq "LW.Microsoft.Windows.MSDTC.2016")
									{
										$IsValidProperties =$false
										$MSDTCobject = $null
										$MSDTCobject = Get-WmiObject win32_service -filter "name='MSDTC'"
										if($MSDTCobject)
										{
											$OSObject = Get-WMIObject  Win32_OperatingSystem 

											if($OSObject.ProductType -ne "1" -and $OSObject.Version.Contains("10.0."))
											{
											$IsValidProperties =$true
											}

										}
									}
									elseif($className -eq "LW.Microsoft.Windows.MSDTC.2012R2")
									{
										$IsValidProperties =$false
										$MSDTCobject = $null
										$MSDTCobject = Get-WmiObject win32_service -filter "name='MSDTC'"
										if($MSDTCobject)
										{
											$OSObject = Get-WMIObject  Win32_OperatingSystem 

											if($OSObject.ProductType -ne "1" -and $OSObject.Version.Contains("6.3."))
											{
											$IsValidProperties =$true
											}
										}
									}
									elseif($className -eq "LW.Microsoft.Windows.SharePoint.Server.2010")
									{
										$IsValidProperties =$false
										$Regkeys = @(
										"HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\Office14.WCSERVER"
										"HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\Office14.SSERVERX"
										"HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\Office14.SSERVER"
										"HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\Office14.OSERVER"
											)
										$Allvalid = Test-AnyRegistryValue $Regkeys
										if($Allvalid -eq $true)
										{  
											$IsValidProperties =$true
										}
									}
									elseif($className -eq "LW.Microsoft.Windows.SQL.Server.2016.ReportingServices.NativeMode")
									{
										$IsValidProperties =$false
										$regkeys1 = @(
											"HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\130\Machines"
											"HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\RS"
												)
										$regkeys2 = @(
										"HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SQL Server\130\Machines"
										"HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SQL Server\Instance Names\RS"
											)

										$allvalid1 = Test-AllRegistryValue $regkeys1
										$allvalid2 = Test-AllRegistryValue $regkeys2

										if($allvalid1 -eq $true -Or $allvalid2 -eq $true )
										{  
											$IsValidProperties =$true
										}
									}
									elseif($className -eq "LW.Microsoft.Windows.SQL.Server.2014.ReportingServices.NativeMode")
									{
										$IsValidProperties =$false
										$regkeys1 = @(
										"HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\120\Machines"
										"HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\RS"
											)

										$regkeys2 = @(
										"HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SQL Server\120\Machines"
										"HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SQL Server\Instance Names\RS"
											)

										$allvalid1 = Test-AllRegistryValue $regkeys1
										$allvalid2 = Test-AllRegistryValue $regkeys2

										if($allvalid1 -eq $true -Or $allvalid2 -eq $true )
										{  
											$IsValidProperties =$true
										}
									}
									elseif($className -eq "LW.Microsoft.Windows.SQL.Server.2012.ReportingServices.NativeMode")
									{
										$IsValidProperties =$false
										$regkeys1 = @(
										"HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\110\Machines"
										"HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\RS"
											)

										$regkeys2 = @(
										"HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SQL Server\110\Machines"
										"HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SQL Server\Instance Names\RS"
											)

										$allvalid1 = Test-AllRegistryValue $regkeys1
										$allvalid2 = Test-AllRegistryValue $regkeys2

										if($allvalid1 -eq $true -Or $allvalid2 -eq $true )
										{  
											$IsValidProperties =$true
										}
									}
									elseif($className -eq "LW.Microsoft.Windows.SQL.Server.2016.AnalysisServices")
									{
										$IsValidProperties =$false
										$Regkeys = @(
										"HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\130\Machines"
										"HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\Microsoft Analysis Services"
											)

										$Regkeys = @(
										"HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SQL Server\130\Machines"
										"HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SQL Server\Microsoft Analysis Services"
											)

										$allvalid1 = Test-AllRegistryValue $regkeys1
										$allvalid2 = Test-AllRegistryValue $regkeys2

										if($allvalid1 -eq $true -Or $allvalid2 -eq $true )
										{  
											$IsValidProperties =$true
										}
									}
									elseif($className -eq "LW.Microsoft.Windows.SQL.Server.2014.AnalysisServices")
									{
										$IsValidProperties =$false
										$regkeys1 = @(
										"HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\120\Machines"
										"HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\Microsoft Analysis Services"
											)

										$regkeys2 = @(
										"HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SQL Server\120\Machines"
										"HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SQL Server\Microsoft Analysis Services"
											)

										$allvalid1 = Test-AllRegistryValue $regkeys1
										$allvalid2 = Test-AllRegistryValue $regkeys2
									   
										if($allvalid1 -eq $true -Or $allvalid2 -eq $true )
										{  
											$IsValidProperties =$true
										}
									}
									elseif($className -eq "LW.Microsoft.Windows.SQL.Server.2012.AnalysisServices")
									{
										$IsValidProperties =$false
										$regkeys1 = @(
										"HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\110\Machines"
										"HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\Microsoft Analysis Services"
											)

										$regkeys2 = @(
										"HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SQL Server\110\Machines"
										"HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SQL Server\Microsoft Analysis Services"
											)

										$allvalid1 = Test-AllRegistryValue $regkeys1
										$allvalid2 = Test-AllRegistryValue $regkeys2
												
										if($allvalid1 -eq $true -Or $allvalid2 -eq $true )
										{  
											$IsValidProperties =$true
										}
									}
									elseif(($className -eq "LW.Microsoft.Windows.SQL.Server.2017.Replication") -Or ($className -eq "LW.Microsoft.Windows.SQL.Server.2016.Replication") -Or ($className -eq "LW.Microsoft.Windows.SQL.Server.2014.Replication") -Or ($className -eq "LW.Microsoft.Windows.SQL.Server.2012.Replication"))
									{
									    $IsValidProperties =$false
										try
										{
											# Make Connecting string to the SQL Server Instance and the Database
											$con = New-Object System.Data.SqlClient.SqlConnection("Data Source=.; Initial Catalog=master; Integrated Security=SSPI")
											$stmt_select = "SELECT COUNT(*) FROM sys.databases WHERE is_distributor = 1"
											# Create command to execute to SQL connection
											$cmd = $con.CreateCommand()
											$cmd.CommandText = $stmt_select
											$con.Open()
											# Invoke the Insert statement
											if($cmd.ExecuteScalar() -gt 0)
											{
												$IsValidProperties =$true
											}
										}
										catch
										{
											$con.Close()
											$cmd.Dispose()
											$IsValidProperties =$false
										}
										finally
										{
											$con.Close()
											$cmd.Dispose()
										}  
									}
									elseif($className -eq "LW.Microsoft.SDNMonitoring")
									{
										$key = "HKLM:\SOFTWARE\MICROSOFT\SDNMonitoringMP\"	
										$NCURLRegKeyName = "RestUrl"
										#Get the Rest URL from the registry
										$NCRegistry  = Get-ItemProperty -Path $key -Name $NCURLRegKeyName -ErrorAction SilentlyContinue
											if($NCRegistry -eq $null)
											{
											    $IsValidProperties =$false
											    break
											}
											$NCURL = $NCRegistry.$NCURLRegKeyName
											if($NCURL -eq $null)
											{
											    $IsValidProperties =$false
											    break
											}
											$IsValidProperties =$true
									}
									elseif($className -eq "LW.Microsoft.3rdParty.Infront.McAfee")
									{
										$IsValidProperties =$false
										$Regkeys = @(
										"HKLM:\SOFTWARE\McAfee\AVEngine"
										"HKLM:\SOFTWARE\Wow6432Node\McAfee\AVEngine"
										"HKLM:\SOFTWARE\Network Associates\ePolicy Orchestrator\Agent"
										"HKLM:\SOFTWARE\Wow6432Node\Network Associates\ePolicy Orchestrator"
										"HKLM:\SOFTWARE\Wow6432Node\Network Associates\ePolicy Orchestrator\Agent"
										"HKLM:\SOFTWARE\Wow6432Node\McAfee\ePolicy Orchestrator\MFS Framework"
										)
										$Allvalid = Test-AnyRegistryValue $Regkeys
										if($Allvalid -eq $true)
										{  
											$IsValidProperties =$true
										}
									}
									elseif($className -eq "LW.Microsoft.3rdParty.Infront.RightFax")
									{
										$IsValidProperties =$false
										$regkeys1 = @(
										"HKLM:\SOFTWARE\Wow6432Node\RightFax"
										"HKLM:\SOFTWARE\RightFax"
											)

										$regkeys2 = @(
										"HKLM:\SOFTWARE\Wow6432Node\RightFax\AddToSCOM"
										"HKLM:\SOFTWARE\RightFax\AddToSCOM"
											)

										$allvalid1 = Test-AnyRegistryValue $regkeys1
										$allvalid2 = Test-AnyRegistryValue $regkeys2
									   
										if($allvalid1 -eq $true -Or $allvalid2 -eq $true )
										{  
											$IsValidProperties =$true
										}
									}
									elseif($className -eq "LW.Microsoft.3rdParty.NiCE.IBM.Domino")
									{
										$IsValidProperties =$false
										$Regkeys = @(
										"HKLM:\SOFTWARE\Wow6432Node\Lotus\Domino"
										"HKLM:\SOFTWARE\Lotus\Domino"
										)
										$Allvalid = Test-AnyRegistryValue $Regkeys
										if($Allvalid -eq $true)
										{  
											$IsValidProperties =$true
										}
									}
									elseif($className -eq "LW.Microsoft.3rdParty.NiCE.Oracle")
									{
										$IsValidProperties =$false
										$strQuery = "select DisplayName from win32_service where Name like 'OracleService%' and StartMode != 'Disabled'"
										$NiCEOracleobject = $null
										try{
										$cimSessionOption = New-CimSessionOption -Protocol DCOM
										$cimsession = New-CimSession -SessionOption $cimSessionOption 
										$NiCEOracleobject = Get-CimInstance -CimSession $cimsession -Namespace $("root\cimv2") -Query $strQuery -ErrorAction Stop
            							}
										catch
										{
											$NiCEOracleobject = Get-WmiObject -Namespace $("root\cimv2") -Query $strQuery -ErrorAction Stop 
										}
										Finally{
										Get-CimSession | Remove-CimSession
										$cimsession =$null
										$cimSessionOption = $null 
										}
										if($NiCEOracleobject)
										{
											$IsValidProperties =$true
										}
									}
									elseif($className -eq "LW.Microsoft.3rdParty.OpsLogix.BlackBerryV12")
									{
										$IsValidProperties =$false
										$regkeys1 = @(
										"HKLM:\SOFTWARE\Wow6432Node\BlackBerry\BES12"
										"HKLM:\SOFTWARE\Wow6432Node\Research In Motion\BES\Setup\InstallVersion"
											)
										$allvalid1 = Test-AnyRegistryValue $regkeys1
												
										if($allvalid1 -eq $true)
										{  
											$IsValidProperties =$true
										}
									}
									elseif($className -eq "LW.Microsoft.3rdParty.Gripmatix.CVAD")
									{ 
										$IsValidProperties =$false
										$regkeys1 = @(
										"HKLM:\SOFTWARE\Citrix\Broker\Service"
										"HKLM:\SOFTWARE\Citrix\ProvisioningServer"
										"HKLM:\SOFTWARE\Citrix\DeliveryServices"
											)
										$allvalid1 = Test-AnyRegistryValue $regkeys1
												
										if($allvalid1 -eq $true)
										{  
											$IsValidProperties =$true
										}
									
									}
									elseif($className -eq "LW.Microsoft.3rdParty.Teqwave.PostgreSQL")
									{ 
										$IsValidProperties =$false 
											$regkeys1 = @(
											"HKLM:\SOFTWARE\PostgreSQL\Installations"
											"HKLM:\SOFTWARE\Wow6432Node\PostgreSQL\Installations"
											"HKLM:\SOFTWARE\BigSQL\PostgreSQL"
											)
												$allvalid1 = Test-AnyRegistryValue $regkeys1
												$TeqwavePGobject = $null

													  if($allvalid1 -eq $false) { 
														  $strQuery = "select Name from Win32_Process where Name like '%postgres.exe' and CommandLine like '%-D%'"
														  try{
															  $cimSessionOption = New-CimSessionOption -Protocol DCOM
															  $cimsession = New-CimSession -SessionOption $cimSessionOption
															  $TeqwavePGobject = Get-CimInstance Win32_Process -Filter "Name like '%postgres.exe' and CommandLine like '%-D%'"
														  }
														  catch
														  {
															  $TeqwavePGobject = Get-WmiObject -Namespace $("root\cimv2") -Query $strQuery -ErrorAction Stop
														  }
														  Finally{
															  Get-CimSession | Remove-CimSession
															  $cimsession =$null
															  $cimSessionOption = $null
														  }
													  }

												if($allvalid1 -eq $true -or $TeqwavePGobject) {
													$IsValidProperties =$true
												}
									}
									elseif($className -eq "LW.Microsoft.3rdParty.OpsLogix.Swift")
									{
										$IsValidProperties =$false
										$strQuery = "select DisplayName from win32_service where DisplayName like 'SWIFT%'"
										$OpsLogixSwiftobject = $null
										try{
										$cimSessionOption = New-CimSessionOption -Protocol DCOM
										$cimsession = New-CimSession -SessionOption $cimSessionOption 
										$OpsLogixSwiftobject = Get-CimInstance -CimSession $cimsession -Namespace $("root\cimv2") -Query $strQuery -ErrorAction Stop
            							}
										catch
										{
											$OpsLogixSwiftobject = Get-WmiObject -Namespace $("root\cimv2") -Query $strQuery -ErrorAction Stop 
										}
										Finally{
										Get-CimSession | Remove-CimSession
										$cimsession =$null
										$cimSessionOption = $null 
										}
										if($OpsLogixSwiftobject)
										{
											$IsValidProperties =$true
										}
									}
									elseif($className -eq "LW.Microsoft.3rdParty.NiCE.DB2")
									{
										$IsValidProperties =$false
										$strQuery = "select DisplayName from win32_service where Name like 'DB2%' and StartMode != 'Disabled'"
										$NiceDB2object = $null
										try{
										$cimSessionOption = New-CimSessionOption -Protocol DCOM
										$cimsession = New-CimSession -SessionOption $cimSessionOption 
										$NiceDB2object = Get-CimInstance -CimSession $cimsession -Namespace $("root\cimv2") -Query $strQuery -ErrorAction Stop
            							}
										catch
										{
											$NiceDB2object = Get-WmiObject -Namespace $("root\cimv2") -Query $strQuery -ErrorAction Stop 
										}
										Finally{
										Get-CimSession | Remove-CimSession
										$cimsession =$null
										$cimSessionOption = $null 
										}
										if($NiceDB2object)
										{
											$IsValidProperties =$true
										}
									}
									elseif($className -eq "LW.Microsoft.Power.Management.2012")
									{
										$IsValidProperties =$false
										$strQuery = "select * from Win32_PowerMeter"
										$PowerManagement = $null
										try{
										$cimSessionOption = New-CimSessionOption -Protocol DCOM
										$cimsession = New-CimSession -SessionOption $cimSessionOption 
										$PowerManagement = Get-CimInstance -CimSession $cimsession -Namespace $("root\cimv2\power") -Query $strQuery -ErrorAction Stop
            							}
										catch
										{
											$PowerManagement = Get-WmiObject -Namespace $("root\cimv2\power") -Query $strQuery -ErrorAction Stop 
										}
										Finally{
										Get-CimSession | Remove-CimSession
										$cimsession =$null
										$cimSessionOption = $null 
										}
										if($PowerManagement)
										{
											$IsValidProperties =$true
										}
									}
									elseif($className -eq "LW.Microsoft.JEE.WebSphere.8plus.Windows.Configuration")
									{
										$IsValidProperties =$false
										$valid = Check-Websphere 8
										if($valid -eq $true)
										{  
											$IsValidProperties =$true
										}
										else
										{   $IsValidPropertie = $false
										}
									}
									elseif($className -eq "LW.Microsoft.JEE.Tomcat.8plus.Windows.Configuration")
									{
										$IsValidProperties =$false
										$valid = Check-Tomcat 8
										if($valid -eq $true)
										{  
											$IsValidProperties =$true
										}
										else
										{   $IsValidPropertie = $false
										}
									}
									elseif($className -eq "LW.Microsoft.JEE.Wildfly.8plus.Windows.Configuration")
									{
										$IsValidProperties =$false
										$valid = Check-Wildfly 8
										if($valid -eq $true)
										{  
											$IsValidProperties =$true
										}
										else
										{   $IsValidPropertie = $false
										}
									}
									elseif($className -eq "LW.Microsoft.JEE.JBoss.7.Windows.Configuration")
									{
										$IsValidProperties =$false
										$valid = Check-JBoss 7
										if($valid -eq $true)
										{  
											$IsValidProperties =$true
										}
										else
										{   $IsValidPropertie = $false
										}
									}
									elseif($className -eq "LW.Microsoft.JEE.WebLogic.12plus.Windows.Configuration")
									{
										$IsValidProperties =$false
										$valid = Check-Weblogic 12
										if($valid -eq $true)
										{  
											$IsValidProperties =$true
										}
										else
										{   $IsValidPropertie = $false
										}
									}
									elseif($className -eq "LW.Microsoft.3rdParty.Dell.EMC")
									{
										
										$IsValidProperties =$false
										$valid = Check-DellEMC
										
										if($valid -eq $true)
										{  
											$IsValidProperties =$true
										}
										else
										{   $IsValidPropertie = $false
										}
									}

								}
						  }
						  #getfeaturedetails will be null if supported role in NOT present in installed list
						  if($IsValidProperties -eq $true -and $classMPElementTable.Item($className) -ne $null)
						  {
						  LogWrite "`nCreating class instance for class $className"
						  $instance = $discoveryData.CreateClassInstance($classMPElementTable.Item($className))
						  $instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $computerName)
						  $instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $computerName)
						  $instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.ComputerRole.Category']/CategoryName$", $classCategoryTable.Item($className))
						  $instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.ComputerRole.Category']/GuestOS$", $GuestOS)
						  $discoveryData.AddInstance($instance)
						  }
					  }
                  }

                  $scriptEndTime = Get-Date
                  $totalScriptRunTime = ($scriptEndTime - $scriptStartTime) | select-object TotalSeconds
                  $totalScriptRunTime = $totalScriptRunTime.TotalSeconds
                  LogWrite "`n Total time taken to run the script $totalScriptRunTime"

                  #Log an event after running the script
                  $api.LogScriptEvent("NonServerRoles.ps1", 5002, 0, $script:logMessage)

                  #Return discovery property bag
                  $discoveryData</ScriptBody><Parameters><Parameter><Name>sourceID</Name><Value>$MPElement$</Value></Parameter><Parameter><Name>managedEntityID</Name><Value>$Target/Id$</Value></Parameter><Parameter><Name>computerName</Name><Value>$Config/ComputerPrincipalName$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><StrictErrorHandling>false</StrictErrorHandling></ProbeAction></MemberModules><Composition><Node ID="PowerShellDiscoveryProbe"><Node ID="Scheduler"/></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="LW.Microsoft.SCX.Agent.DiscoveryData" Accessibility="Public" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType><SchemaType>System!System.Discovery.MapperSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetSystem" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Uri" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Filter" type="xsd:string" minOccurs="0" maxOccurs="1"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SplitItems" type="xsd:boolean"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Interval" type="xsd:unsignedInt"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SyncTime" type="xsd:string" minOccurs="0" maxOccurs="1"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ClassId" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InstanceSettings" minOccurs="0" maxOccurs="1" type="SettingsType"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="OutputErrorIfAny" type="xsd:boolean" minOccurs="0" maxOccurs="1"/></Configuration><OverrideableParameters><OverrideableParameter ID="Interval" Selector="$Config/Interval$" ParameterType="int"/><OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string"/><OverrideableParameter ID="OutputErrorIfAny" Selector="$Config/OutputErrorIfAny$" ParameterType="string"/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Discovery.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">$Config/Interval$</Interval><SyncTime>$Config/SyncTime$</SyncTime></SimpleReccuringSchedule><ExcludeDates/></Scheduler></DataSource><ProbeAction ID="Payload" TypeID="LW.Microsoft.JEE.WSMan.Native.ProbeAction"><UserName>$RunAs[Name="Unix!Microsoft.Unix.ActionAccount"]/UserName$</UserName><Password>$RunAs[Name="Unix!Microsoft.Unix.ActionAccount"]/Password$</Password></ProbeAction><ProbeAction ID="TimedEnum" TypeID="WSM!Microsoft.SystemCenter.WSManagement.Enumerator"><Enumerate><Protocol>https</Protocol><TargetSystem>$Config/TargetSystem$</TargetSystem><Port>1270</Port><Authentication>basic</Authentication><UserName>$Data/WSManPayloadData/UserName$</UserName><Password>$RunAs[Name="Unix!Microsoft.Unix.ActionAccount"]/Password$</Password><SkipCACheck>false</SkipCACheck><SkipCNCheck>false</SkipCNCheck><OutputErrorIfAny>$Config/OutputErrorIfAny$</OutputErrorIfAny><UTF>utf-8</UTF><Uri>$Config/Uri$</Uri><Filter>$Config/Filter$</Filter><TimeOutInMS>120000</TimeOutInMS><SplitItems>$Config/SplitItems$</SplitItems><EventPolicy><EventOnConnectionErrors>false</EventOnConnectionErrors></EventPolicy></Enumerate></ProbeAction><ConditionDetection ID="Mapper" TypeID="System!System.Discovery.ClassSnapshotDataMapper"><ClassId>$Config/ClassId$</ClassId><InstanceSettings>$Config/InstanceSettings$</InstanceSettings></ConditionDetection></MemberModules><Composition><Node ID="Mapper"><Node ID="TimedEnum"><Node ID="Payload"><Node ID="Scheduler"/></Node></Node></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="LW.Microsoft.JEE.WSMan.TimedEnumerate.DoubleFiltered.DiscoveryData" Accessibility="Public" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType><SchemaType>System!System.Discovery.MapperSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetSystem" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Uri" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Filter" type="xsd:string" minOccurs="0" maxOccurs="1"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SplitItems" type="xsd:boolean"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Interval" type="xsd:unsignedInt"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SyncTime" type="xsd:string" minOccurs="0" maxOccurs="1"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="FilterProperty1" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="FilterValue1" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="FilterProperty2" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="FilterValue2" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ClassId" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InstanceSettings" minOccurs="0" maxOccurs="1" type="SettingsType"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="OutputErrorIfAny" type="xsd:boolean" minOccurs="0" maxOccurs="1"/></Configuration><OverrideableParameters><OverrideableParameter ID="Interval" Selector="$Config/Interval$" ParameterType="int"/><OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string"/><OverrideableParameter ID="OutputErrorIfAny" Selector="$Config/OutputErrorIfAny$" ParameterType="string"/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Discovery.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">$Config/Interval$</Interval><SyncTime>$Config/SyncTime$</SyncTime></SimpleReccuringSchedule><ExcludeDates/></Scheduler></DataSource><ProbeAction ID="Payload" TypeID="LW.Microsoft.JEE.WSMan.Native.ProbeAction"><UserName>$RunAs[Name="Unix!Microsoft.Unix.ActionAccount"]/UserName$</UserName><Password>$RunAs[Name="Unix!Microsoft.Unix.ActionAccount"]/Password$</Password></ProbeAction><ProbeAction ID="TimedEnum" TypeID="WSM!Microsoft.SystemCenter.WSManagement.Enumerator"><Enumerate><Protocol>https</Protocol><TargetSystem>$Config/TargetSystem$</TargetSystem><Port>1270</Port><Authentication>basic</Authentication><UserName>$Data/WSManPayloadData/UserName$</UserName><Password>$RunAs[Name="Unix!Microsoft.Unix.ActionAccount"]/Password$</Password><SkipCACheck>false</SkipCACheck><SkipCNCheck>false</SkipCNCheck><OutputErrorIfAny>$Config/OutputErrorIfAny$</OutputErrorIfAny><UTF>utf-8</UTF><Uri>$Config/Uri$</Uri><Filter>$Config/Filter$</Filter><TimeOutInMS>120000</TimeOutInMS><SplitItems>$Config/SplitItems$</SplitItems><EventPolicy><EventOnConnectionErrors>false</EventOnConnectionErrors></EventPolicy></Enumerate></ProbeAction><ConditionDetection ID="Filter1" TypeID="System!System.ExpressionFilter"><Expression><RegExExpression><ValueExpression><XPathQuery Type="String">$Config/FilterProperty1$</XPathQuery></ValueExpression><Operator>MatchesRegularExpression</Operator><Pattern>$Config/FilterValue1$</Pattern></RegExExpression></Expression></ConditionDetection><ConditionDetection ID="Filter2" TypeID="System!System.ExpressionFilter"><Expression><RegExExpression><ValueExpression><XPathQuery Type="String">$Config/FilterProperty2$</XPathQuery></ValueExpression><Operator>MatchesRegularExpression</Operator><Pattern>$Config/FilterValue2$</Pattern></RegExExpression></Expression></ConditionDetection><ConditionDetection ID="Mapper" TypeID="System!System.Discovery.ClassSnapshotDataMapper"><ClassId>$Config/ClassId$</ClassId><InstanceSettings>$Config/InstanceSettings$</InstanceSettings></ConditionDetection></MemberModules><Composition><Node ID="Mapper"><Node ID="Filter2"><Node ID="Filter1"><Node ID="TimedEnum"><Node ID="Payload"><Node ID="Scheduler"/></Node></Node></Node></Node></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="LW.Microsoft.Windows.NetworkDevices.Discovery.DataSource" Accessibility="Public" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:unsignedInt"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerPrincipalName" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:unsignedInt"/></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int"/><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int"/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Discovery.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">$Config/IntervalSeconds$</Interval></SimpleReccuringSchedule><ExcludeDates/></Scheduler></DataSource><ProbeAction ID="PowerShellDiscoveryProbe" TypeID="Windows!Microsoft.Windows.PowerShellDiscoveryProbe"><ScriptName>"Lightweight Network Devices script"</ScriptName><ScriptBody>
                  param ([String] $sourceID, [String] $managedEntityID, [String] $computerName)
                  				  #Copyright (c) Microsoft Corporation. All rights reserved.
                  #*************************************************************************
                  #Author - Sateesh
                  #ScriptName: "NetworkDevices.ps1"$
                  #Purpose: This script along with NetworkDevices.ps1 will discover installed Network Devices
                  # on the Windows Management Server.
                  #*************************************************************************

                  $networkDeviceTable = @{}
                  $classMPElementTable = @{}
                  $classCategoryTable = @{}

                  #LW.Microsoft.3rdParty.Infront.Isilon
                  $networkDeviceTable.Add("LW.Microsoft.3rdParty.Infront.Isilon","LW.Microsoft.3rdParty.Infront.Isilon")
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Infront.Isilon","`$MPElement[Name='LW.Microsoft.3rdParty.Infront.Isilon']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Infront.Isilon","Isilon (by Infront)")

				  #LW.Microsoft.3rdParty.Comtrade.F5BIGIP
                  $networkDeviceTable.Add("LW.Microsoft.3rdParty.Comtrade.F5BIGIP","LW.Microsoft.3rdParty.Comtrade.F5BIGIP")
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Comtrade.F5BIGIP","`$MPElement[Name='LW.Microsoft.3rdParty.Comtrade.F5BIGIP']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Comtrade.F5BIGIP","F5 BIG-IP (by HYCU)")

                  #LW.Microsoft.3rdParty.Gripmatix.ADC
                  $networkDeviceTable.Add("LW.Microsoft.3rdParty.Gripmatix.ADC","LW.Microsoft.3rdParty.Gripmatix.ADC")
                  $classMPElementTable.Add("LW.Microsoft.3rdParty.Gripmatix.ADC","`$MPElement[Name='LW.Microsoft.3rdParty.Gripmatix.ADC']$")
                  $classCategoryTable.Add("LW.Microsoft.3rdParty.Gripmatix.ADC","MetrixInsight for ADC (by GripMatix)")

                  function LogWrite
                  {
					  Param([string]$logString)
					  $script:logMessage += $logString
                  }

                  #scriptStartTime will help in calculating script run time
                  $scriptStartTime = Get-Date
                  $script:logMessage = ''
				  $GuestOS = ''
				  $wmiOS = (Get-WmiObject -Class Win32_OperatingSystem).caption
				  if (-not ([string]::IsNullOrEmpty($wmiOS)))
				  {
						$GuestOS = $wmiOS
				  }

                  LogWrite "`nNetWorkDevices::Starting NetWorkDevices script."

                  if(($SourceId -eq $null) -or ($ManagedEntityId -eq $null) -or ($computerName -eq $null))
                  {
					  LogWrite "`nnNetWorkDevices::SourceId, ManagedEntityId or Computer name is null. Exiting script."
					  Exit -1
                  }

                  #Create discovery property bag only once as we can't return multiple property bags
                  $api = new-object -comObject 'MOM.ScriptAPI'
                  $discoveryData = $api.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)

				  #get all NetWork devices information in single shot
                  
				  $setupKey = Get-Item -Path "HKLM:\Software\Microsoft\Microsoft Operations Manager\3.0\Setup"
                  $installDirectory = $setupKey.GetValue("InstallDirectory") | Split-Path
                  $psmPath = $installdirectory + "\Powershell\OperationsManager\OperationsManager.psm1"
                  Import-Module $psmPath

				  $networkDeviceClassName = "System.NetworkManagement.Node";
				  $networkDeviceClassInstances = Get-ScomClass -Name $networkDeviceClassName | Get-SCOMClassInstance
			
                  #Iterate through discovery method table
                  if($networkDeviceTable -eq $null)
                  {
					  #Code shouldn't come here
					  LogWrite "`nNetworkDevices::Windows feature table is empty. Exiting the script."
					  Exit -1
                  }
                  foreach ($classDetails in $networkDeviceTable.GetEnumerator())
                  {
					  $className = $classDetails.Name
					
					  if($className -eq "LW.Microsoft.3rdParty.Comtrade.F5BIGIP")
					  {
					        $soIDNetworkDevices = $networkDeviceClassInstances | Where {$_."[System.NetworkManagement.Node].SystemObjectID" -like ".1.3.6.1.4.1.3375*"}
					  }
					  elseif($className -eq "LW.Microsoft.3rdParty.Infront.Isilon")
					  {
							$soIDNetworkDevices = $networkDeviceClassInstances | Where {$_."[System.NetworkManagement.Node].SystemObjectID" -like ".1.3.6.1.4.1.12124.1" -or $_."[System.NetworkManagement.Node].SystemObjectID" -like ".1.3.6.1.4.1.12325.1.1.2.1.1"}
					  }
					  elseif($className -eq "LW.Microsoft.3rdParty.Gripmatix.ADC")
					  {
							$soIDNetworkDevices = $networkDeviceClassInstances | Where {$_."[System.NetworkManagement.Node].SystemObjectID" -like ".1.3.6.1.4.1.5951.1"}
					  }
					  #soIDNetworkDevices will be null if Network Device is not disovered or we are not supporting the Network Device 
					  if(($soIDNetworkDevices -ne $null) -and ($classMPElementTable.Item($className) -ne $null))
					  {
						  LogWrite "`nCreating class instance for class $className"
						  $instance = $discoveryData.CreateClassInstance($classMPElementTable.Item($className))
						  $instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $computerName)
						  $instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $computerName)
						  $instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.ComputerRole.Category']/CategoryName$", $classCategoryTable.Item($className))
						  $instance.AddProperty("$MPElement[Name='LW.Base.Microsoft.Windows.ComputerRole.Category']/GuestOS$", $GuestOS)
						  $discoveryData.AddInstance($instance)
					  }
                  }

                  $scriptEndTime = Get-Date
                  $totalScriptRunTime = ($scriptEndTime - $scriptStartTime) | select-object TotalSeconds
                  $totalScriptRunTime = $totalScriptRunTime.TotalSeconds
                  LogWrite "`n Total time taken to run the script $totalScriptRunTime"

                  #Log an event after running the script
                  $api.LogScriptEvent("NetworkDevices.ps1", 5004, 0, $script:logMessage)

                  #Return discovery property bag
                  $discoveryData</ScriptBody><Parameters><Parameter><Name>sourceID</Name><Value>$MPElement$</Value></Parameter><Parameter><Name>managedEntityID</Name><Value>$Target/Id$</Value></Parameter><Parameter><Name>computerName</Name><Value>$Config/ComputerPrincipalName$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><StrictErrorHandling>false</StrictErrorHandling></ProbeAction></MemberModules><Composition><Node ID="PowerShellDiscoveryProbe"><Node ID="Scheduler"/></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><ProbeActionModuleType ID="LW.Microsoft.JEE.WSMan.Native.ProbeAction" Accessibility="Internal" Batching="true" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="UserName" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Password" type="xsd:string"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InvokeAction" type="xsd:string" minOccurs="0" maxOccurs="1"/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Input" type="xsd:string" minOccurs="0" maxOccurs="1"/></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>BC26F256-D513-4DDF-8C27-98ED18DBCCD8</ClassID></Native></ModuleImplementation><OutputType>Unix!Microsoft.SCX.WSManPayloadData</OutputType><TriggerOnly>true</TriggerOnly></ProbeActionModuleType></ModuleTypes></TypeDefinitions><Monitoring><Discoveries><Discovery ID="LW.Microsoft.Windows.Server.GenericServerRoles.Discovery" Enabled="true" Target="LW.Microsoft.BaseOS.2016" ConfirmDelivery="false" Remotable="false" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="LW.Microsoft.ADRMS.6.4.Server"/><DiscoveryClass TypeID="LW.Microsoft.Windows.DHCPServer.6.4.Server"/><DiscoveryClass TypeID="LW.Microsoft.Windows.Server.10.0.AD.GlobalCatalogServerRole"/><DiscoveryClass TypeID="LW.Microsoft.Windows.6.4.Cluster.Node"/><DiscoveryClass TypeID="LW.Microsoft.Windows.NetworkLoadBalancing.6.4.ServerRole"/><DiscoveryClass TypeID="LW.Microsoft.Windows.InternetInformationServices.6.4.ServerRole"/><DiscoveryClass TypeID="LW.Microsoft.Windows.DNSServer.2016.Server"/><DiscoveryClass TypeID="LW.Microsoft.Windows.CertificateServices.CARole.6.4"/><DiscoveryClass TypeID="LW.Microsoft.Windows.FileServices.Service.iSCSITarget.6.3"/><DiscoveryClass TypeID="LW.Microsoft.Windows.Server.6.4.PrintServerRole"/><DiscoveryClass TypeID="LW.Microsoft.ActiveDirectoryFederationServices.10.0.FederationServerSeed"/></DiscoveryTypes><DataSource ID="DiscoveryDS" TypeID="LW.Microsoft.Windows.Server.Generic.Discovery.DataSource"><IntervalSeconds>86400</IntervalSeconds><ComputerPrincipalName>$Target/Property[Type='Windows!Microsoft.Windows.Computer']/PrincipalName$</ComputerPrincipalName><TimeoutSeconds>360</TimeoutSeconds></DataSource></Discovery><Discovery ID="LW.Microsoft.Windows.Server.2012R2.Roles.Discovery" Enabled="true" Target="LW.Microsoft.BaseOS.2012R2" ConfirmDelivery="false" Remotable="false" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="LW.Microsoft.Windows.Server.AD.Certificate.2012R2"/><DiscoveryClass TypeID="LW.Microsoft.Windows.Server.AD.Federation.2012R2"/></DiscoveryTypes><DataSource ID="DiscoveryDS" TypeID="LW.Microsoft.Windows.Server.2012R2.Role.Discovery.DataSource"><IntervalSeconds>86400</IntervalSeconds><ComputerPrincipalName>$Target/Property[Type='Windows!Microsoft.Windows.Computer']/PrincipalName$</ComputerPrincipalName><TimeoutSeconds>360</TimeoutSeconds></DataSource></Discovery><Discovery ID="LW.Microsoft.Windows.Server.BaseOS.Discovery" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" ConfirmDelivery="false" Remotable="false" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="LW.Microsoft.BaseOS.2016"/><DiscoveryClass TypeID="LW.Microsoft.BaseOS.2012R2"/><DiscoveryClass TypeID="LW.Microsoft.BaseOS.2012"/><DiscoveryClass TypeID="LW.Microsoft.BaseOS.2008R2"/><DiscoveryClass TypeID="LW.Microsoft.Core.OS"/></DiscoveryTypes><DataSource ID="DS" TypeID="LW.Microsoft.Windows.Server.BaseOS.Discovery.DataSource"><IntervalSeconds>86400</IntervalSeconds><ComputerPrincipalName>$Target/Property[Type='Windows!Microsoft.Windows.Computer']/PrincipalName$</ComputerPrincipalName><TimeoutSeconds>360</TimeoutSeconds></DataSource></Discovery><Discovery ID="LW.Microsoft.Windows.Server.2012.Roles.Discovery" Enabled="true" Target="LW.Microsoft.BaseOS.2012" ConfirmDelivery="false" Remotable="false" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="LW.Microsoft.Windows.Server.AD.Certificate.2012"/><DiscoveryClass TypeID="LW.Microsoft.Windows.Server.AD.Federation.2012"/></DiscoveryTypes><DataSource ID="DiscoveryDS" TypeID="LW.Microsoft.Windows.Server.2012.Role.Discovery.DataSource"><IntervalSeconds>86400</IntervalSeconds><ComputerPrincipalName>$Target/Property[Type='Windows!Microsoft.Windows.Computer']/PrincipalName$</ComputerPrincipalName><TimeoutSeconds>360</TimeoutSeconds></DataSource></Discovery><Discovery ID="LW.Microsoft.Windows.Server.2008R2.Roles.Discovery" Enabled="true" Target="LW.Microsoft.BaseOS.2008R2" ConfirmDelivery="false" Remotable="false" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="LW.Microsoft.Windows.Server.AD.Certificate.2008R2"/><DiscoveryClass TypeID="LW.Microsoft.Windows.Server.AD.Federation.2008R2"/></DiscoveryTypes><DataSource ID="DiscoveryDS" TypeID="LW.Microsoft.Windows.Server.2008R2.Role.Discovery.DataSource"><IntervalSeconds>86400</IntervalSeconds><ComputerPrincipalName>$Target/Property[Type='Windows!Microsoft.Windows.Computer']/PrincipalName$</ComputerPrincipalName><TimeoutSeconds>360</TimeoutSeconds></DataSource></Discovery><Discovery ID="LW.Microsoft.Windows.NonServerRoles.Registry.Discovery" Enabled="true" Target="LW.Microsoft.Core.OS" ConfirmDelivery="false" Remotable="false" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes/><DataSource ID="DiscoveryDS" TypeID="LW.Microsoft.Windows.NonServerRoles.Registry.Discovery.DataSource"><IntervalSeconds>86400</IntervalSeconds><ComputerPrincipalName>$Target/Host/Property[Type='Windows!Microsoft.Windows.Computer']/PrincipalName$</ComputerPrincipalName><TimeoutSeconds>360</TimeoutSeconds></DataSource></Discovery><Discovery ID="LW.Microsoft.Windows.2016.NonServerRoles.Registry.Discovery" Enabled="true" Target="LW.Microsoft.BaseOS.2016" ConfirmDelivery="false" Remotable="false" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes/><DataSource ID="DiscoveryDS" TypeID="LW.Microsoft.Windows.NonServerRoles.Registry.Discovery.DataSource"><IntervalSeconds>86400</IntervalSeconds><ComputerPrincipalName>$Target/Property[Type='Windows!Microsoft.Windows.Computer']/PrincipalName$</ComputerPrincipalName><TimeoutSeconds>360</TimeoutSeconds></DataSource></Discovery><Discovery ID="LW.Microsoft.SCX.Agent.Discovery" Enabled="true" Target="Unix!Microsoft.Unix.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="LW.Microsoft.SCX.Agent.Instance"/></DiscoveryTypes><DataSource ID="DS" TypeID="LW.Microsoft.SCX.Agent.DiscoveryData"><TargetSystem>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</TargetSystem><Uri>http://schemas.microsoft.com/wbem/wscim/1/cim-schema/2/SCX_Agent?__cimnamespace=root/scx</Uri><Filter/><SplitItems>true</SplitItems><Interval>86400</Interval><SyncTime/><ClassId>$MPElement[Name="LW.Microsoft.SCX.Agent.Instance"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name='LW.Microsoft.SCX.Agent.Instance']/GuestOS$</Name><Value>$Data/WsManData/*[local-name(.)='SCX_Agent']/*[local-name(.)='OSName']$ $Data/WsManData/*[local-name(.)='SCX_Agent']/*[local-name(.)='OSVersion']$</Value></Setting><Setting><Name>$MPElement[Name='Unix!Microsoft.Unix.Computer']/NetworkName$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</Value></Setting><Setting><Name>$MPElement[Name='Unix!Microsoft.Unix.Computer']/PrincipalName$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/PrincipalName$</Value></Setting><Setting><Name>$MPElement[Name='Unix!Microsoft.Unix.Computer']/DNSName$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/DNSName$</Value></Setting><Setting><Name>$MPElement[Name='Unix!Microsoft.Unix.Computer']/IPAddress$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/IPAddress$</Value></Setting><Setting><Name>$MPElement[Name='Unix!Microsoft.Unix.Computer']/SSHPort$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/SSHPort$</Value></Setting><Setting><Name>$MPElement[Name='Unix!Microsoft.Unix.Computer']/AgentVersion$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/AgentVersion$</Value></Setting><Setting><Name>$MPElement[Name='Unix!Microsoft.Unix.Computer']/Architecture$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/Architecture$</Value></Setting></Settings></InstanceSettings></DataSource></Discovery><Discovery ID="LW.Microsoft.JEE.JBoss.7.Unix.Configuration.Discovery" Enabled="true" Target="LW.Microsoft.SCX.Agent.Instance" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="LW.Microsoft.JEE.JBoss.7.Unix.Configuration"/></DiscoveryTypes><DataSource ID="DS" TypeID="LW.Microsoft.JEE.WSMan.TimedEnumerate.DoubleFiltered.DiscoveryData"><TargetSystem>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</TargetSystem><Uri>http://schemas.microsoft.com/wbem/wscim/1/cim-schema/2/SCX_Application_Server?__cimnamespace=root/scx</Uri><Filter/><SplitItems>true</SplitItems><Interval>86400</Interval><SyncTime/><FilterProperty1>//*[local-name()="Type"]</FilterProperty1><FilterValue1>JBoss</FilterValue1><FilterProperty2>//*[local-name()="MajorVersion"]</FilterProperty2><FilterValue2>7</FilterValue2><ClassId>$MPElement[Name="LW.Microsoft.JEE.JBoss.7.Unix.Configuration"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/HostName$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</Value></Setting><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/Id$</Name><Value>$Data/WsManData/*[local-name(.)='SCX_Application_Server']/*[local-name(.)='Name']$</Value></Setting><Setting><Name>$MPElement[Name='System!System.Entity']/DisplayName$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</Value></Setting><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/GuestOS$</Name><Value>$Target/Property[Type="LW.Microsoft.SCX.Agent.Instance"]/GuestOS$</Value></Setting><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/CategoryName$</Name><Value>JBoss 7</Value></Setting></Settings></InstanceSettings></DataSource></Discovery><Discovery ID="LW.Microsoft.JEE.Tomcat.8plus.Unix.Configuration.Discovery" Enabled="true" Target="LW.Microsoft.SCX.Agent.Instance" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="LW.Microsoft.JEE.Tomcat.8plus.Unix.Configuration"/></DiscoveryTypes><DataSource ID="DS" TypeID="LW.Microsoft.JEE.WSMan.TimedEnumerate.DoubleFiltered.DiscoveryData"><TargetSystem>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</TargetSystem><Uri>http://schemas.microsoft.com/wbem/wscim/1/cim-schema/2/SCX_Application_Server?__cimnamespace=root/scx</Uri><Filter/><SplitItems>true</SplitItems><Interval>86400</Interval><SyncTime/><FilterProperty1>//*[local-name()="Type"]</FilterProperty1><FilterValue1>Tomcat</FilterValue1><FilterProperty2>//*[local-name()="MajorVersion"]</FilterProperty2><FilterValue2>^(8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25)$</FilterValue2><ClassId>$MPElement[Name="LW.Microsoft.JEE.Tomcat.8plus.Unix.Configuration"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/HostName$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</Value></Setting><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/Id$</Name><Value>$Data/WsManData/*[local-name(.)='SCX_Application_Server']/*[local-name(.)='Name']$</Value></Setting><Setting><Name>$MPElement[Name='System!System.Entity']/DisplayName$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</Value></Setting><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/GuestOS$</Name><Value>$Target/Property[Type="LW.Microsoft.SCX.Agent.Instance"]/GuestOS$</Value></Setting><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/CategoryName$</Name><Value>Tomcat 8+</Value></Setting></Settings></InstanceSettings></DataSource></Discovery><Discovery ID="LW.Microsoft.JEE.WebSphere.8plus.Unix.Configuration.Discovery" Enabled="true" Target="LW.Microsoft.SCX.Agent.Instance" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="LW.Microsoft.JEE.WebSphere.8plus.Unix.Configuration"/></DiscoveryTypes><DataSource ID="DS" TypeID="LW.Microsoft.JEE.WSMan.TimedEnumerate.DoubleFiltered.DiscoveryData"><TargetSystem>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</TargetSystem><Uri>http://schemas.microsoft.com/wbem/wscim/1/cim-schema/2/SCX_Application_Server?__cimnamespace=root/scx</Uri><Filter/><SplitItems>true</SplitItems><Interval>86400</Interval><SyncTime/><FilterProperty1>//*[local-name()="Type"]</FilterProperty1><FilterValue1>WebSphere</FilterValue1><FilterProperty2>//*[local-name()="MajorVersion"]</FilterProperty2><FilterValue2>^(8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25)$</FilterValue2><ClassId>$MPElement[Name="LW.Microsoft.JEE.WebSphere.8plus.Unix.Configuration"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/HostName$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</Value></Setting><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/Id$</Name><Value>$Data/WsManData/*[local-name(.)='SCX_Application_Server']/*[local-name(.)='Name']$</Value></Setting><Setting><Name>$MPElement[Name='System!System.Entity']/DisplayName$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</Value></Setting><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/GuestOS$</Name><Value>$Target/Property[Type="LW.Microsoft.SCX.Agent.Instance"]/GuestOS$</Value></Setting><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/CategoryName$</Name><Value>WebSphere 8+</Value></Setting></Settings></InstanceSettings></DataSource></Discovery><Discovery ID="LW.Microsoft.JEE.WebLogic.12plus.Unix.Configuration.Discovery" Enabled="true" Target="LW.Microsoft.SCX.Agent.Instance" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="LW.Microsoft.JEE.WebLogic.12plus.Unix.Configuration"/></DiscoveryTypes><DataSource ID="DS" TypeID="LW.Microsoft.JEE.WSMan.TimedEnumerate.DoubleFiltered.DiscoveryData"><TargetSystem>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</TargetSystem><Uri>http://schemas.microsoft.com/wbem/wscim/1/cim-schema/2/SCX_Application_Server?__cimnamespace=root/scx</Uri><Filter/><SplitItems>true</SplitItems><Interval>86400</Interval><SyncTime/><FilterProperty1>//*[local-name()="Type"]</FilterProperty1><FilterValue1>WebLogic</FilterValue1><FilterProperty2>//*[local-name()="MajorVersion"]</FilterProperty2><FilterValue2>^(12|13|14|15|16|17|18|19|20|21|22|23|24|25)$</FilterValue2><ClassId>$MPElement[Name="LW.Microsoft.JEE.WebLogic.12plus.Unix.Configuration"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/HostName$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</Value></Setting><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/Id$</Name><Value>$Data/WsManData/*[local-name(.)='SCX_Application_Server']/*[local-name(.)='Name']$</Value></Setting><Setting><Name>$MPElement[Name='System!System.Entity']/DisplayName$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</Value></Setting><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/GuestOS$</Name><Value>$Target/Property[Type="LW.Microsoft.SCX.Agent.Instance"]/GuestOS$</Value></Setting><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/CategoryName$</Name><Value>WebLogic 12+</Value></Setting></Settings></InstanceSettings></DataSource></Discovery><Discovery ID="LW.Microsoft.JEE.Wildfly.8plus.Unix.Configuration.Discovery" Enabled="true" Target="LW.Microsoft.SCX.Agent.Instance" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="LW.Microsoft.JEE.Wildfly.8plus.Unix.Configuration"/></DiscoveryTypes><DataSource ID="DS" TypeID="LW.Microsoft.JEE.WSMan.TimedEnumerate.DoubleFiltered.DiscoveryData"><TargetSystem>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</TargetSystem><Uri>http://schemas.microsoft.com/wbem/wscim/1/cim-schema/2/SCX_Application_Server?__cimnamespace=root/scx</Uri><Filter/><SplitItems>true</SplitItems><Interval>86400</Interval><SyncTime/><FilterProperty1>//*[local-name()="Type"]</FilterProperty1><FilterValue1>JBoss</FilterValue1><FilterProperty2>//*[local-name()="MajorVersion"]</FilterProperty2><FilterValue2>^(8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25)$</FilterValue2><ClassId>$MPElement[Name="LW.Microsoft.JEE.Wildfly.8plus.Unix.Configuration"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/HostName$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</Value></Setting><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/Id$</Name><Value>$Data/WsManData/*[local-name(.)='SCX_Application_Server']/*[local-name(.)='Name']$</Value></Setting><Setting><Name>$MPElement[Name='System!System.Entity']/DisplayName$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</Value></Setting><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/GuestOS$</Name><Value>$Target/Property[Type="LW.Microsoft.SCX.Agent.Instance"]/GuestOS$</Value></Setting><Setting><Name>$MPElement[Name='LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance']/CategoryName$</Name><Value>Wildfly 8+</Value></Setting></Settings></InstanceSettings></DataSource></Discovery><Discovery ID="LW.Microsoft.Windows.NetworkDevices.Discovery" Enabled="true" Target="SC!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="false" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="LW.Microsoft.3rdParty.Comtrade.F5BIGIP"/><DiscoveryClass TypeID="LW.Microsoft.3rdParty.Infront.Isilon"/><DiscoveryClass TypeID="LW.Microsoft.3rdParty.Gripmatix.ADC"/></DiscoveryTypes><DataSource ID="DiscoveryDS" TypeID="LW.Microsoft.Windows.NetworkDevices.Discovery.DataSource"><IntervalSeconds>86400</IntervalSeconds><ComputerPrincipalName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerPrincipalName><TimeoutSeconds>360</TimeoutSeconds></DataSource></Discovery></Discoveries></Monitoring><LanguagePacks><LanguagePack ID="ENU" IsDefault="true"><DisplayStrings><DisplayString ElementID="Microsoft.SystemCenter.ManagementPack.Recommendations"><Name>Management Pack Recommendations</Name><Description>This management pack recommends the MPs for the various Windows server roles for which the management pack is not installed.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.BaseOS.Discovery"><Name>Lightweight Windows Server Discovery</Name><Description>This rule runs against every Windows Server computer and discovers Windows server from 2008R2 to 2016.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Generic.Discovery.DataSource"><Name>Windows server 2016 Generic Discovery Data Source</Name><Description>This data source runs against every Windows Server(2008R2 to 2016) computer and checks for different server roles.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Generic.Discovery.DataSource" SubElementID="IntervalSeconds"><Name>Interval(sec)</Name></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Generic.Discovery.DataSource" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.GenericServerRoles.Discovery"><Name>Lightweight generic Server Roles Discovery</Name><Description>This rule runs against every Windows Server(2008R2 to 2016) computer and checks whether server roles are installed.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.6.4.PrintServerRole"><Name>Lightweight Print Server Role 2016</Name><Description>Installation of print server role on Windows Server 2016.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.ActiveDirectoryFederationServices.10.0.FederationServerSeed"><Name>Lightweight ADFS Server Role 2016</Name><Description>Installation of ADFS server role on Windows Server 2016.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.ADRMS.6.4.Server"><Name>Lightweight ADRMS Server Role 2016</Name><Description>Installation of ADRMS server role on Windows Server 2016.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.DHCPServer.6.4.Server"><Name>Lightweight DHCP Server Role 2016</Name><Description>Installation of DHCP server role on Windows Server 2016.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.10.0.AD.GlobalCatalogServerRole"><Name>Lightweight ADDS Server Role 2016</Name><Description>Installation of ADDS server role on Windows Server 2016.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.6.4.Cluster.Node"><Name>Lightweight Failover Clustering Server Role 2016</Name><Description>Installation of Failover Clustering server role on Windows Server 2016.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.FileServices.Service.iSCSITarget.6.3"><Name>Lightweight File and iSCSI services Server Role 2016</Name><Description>Installation of File and iSCSI services server role on Windows Server 2016.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.NetworkLoadBalancing.6.4.ServerRole"><Name>Lightweight NLB Server Role 2016</Name><Description>Installation of NLB server role on Windows Server 2016.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.InternetInformationServices.6.4.ServerRole"><Name>Lightweight IIS Server Role 2016</Name><Description>Installation of IIS server role on Windows Server 2016.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.BaseOS.2016"><Name>Lightweight Windows 2016+ Server Computer</Name><Description>Installation of Windows Server 2016+.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.6.4.Computer"><Name>Lightweight Windows 2016 Server Computer</Name><Description>Installation of Windows Server 2016.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.DNSServer.2016.Server"><Name>Lightweight DNS Server role 2016</Name><Description>Installation of DNS server role on Windows Server 2016.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.CertificateServices.CARole.6.4"><Name>Lightweight ADCS Server role 2016</Name><Description>Installation of ADCS server role on Windows Server 2016.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Essentials.2016"><Name>Lightweight Essentials Services role 2016</Name><Description>Installation of Essentials Services role on Windows Server 2016.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Defender.Role.2016"><Name>Lightweight Windows Defender Services role 2016</Name><Description>Installation of Windows Defender Services role on Windows Server 2016.</Description></DisplayString><DisplayString ElementID="LW.Base.Microsoft.Windows.ComputerRole.Category"><Name>Computer role category</Name><Description>Base class for windows server roles</Description></DisplayString><DisplayString ElementID="LW.Base.Microsoft.Windows.ComputerRole.Category" SubElementID="CategoryName"><Name>Category Name</Name></DisplayString><DisplayString ElementID="LW.Base.Microsoft.Windows.ComputerRole.Category" SubElementID="GuestOS"><Name>Guest OS</Name></DisplayString><DisplayString ElementID="LW.Base.Microsoft.Windows.Server.BaseOS.Category"><Name>Server BaseOS category</Name><Description>Base class for Windows Server.</Description></DisplayString><DisplayString ElementID="LW.Base.Microsoft.Windows.Server.BaseOS.Category" SubElementID="CategoryName"><Name>Category Name</Name></DisplayString><DisplayString ElementID="LW.Base.Microsoft.Windows.Server.BaseOS.Category" SubElementID="GuestOS"><Name>Guest OS</Name></DisplayString><DisplayString ElementID="LW.Microsoft.Core.OS"><Name>Lightweight Windows Core OS Server Computer</Name><Description>Installation of Windows Server from 2008R2-2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.BaseOS.2012R2"><Name>Lightweight Windows 2012R2 Server Computer</Name><Description>Installation of Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.BaseOS.2012"><Name>Lightweight Windows 2012 Server Computer</Name><Description>Installation of Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.BaseOS.2008R2"><Name>Lightweight Windows 2008R2 Server Computer</Name><Description>Installation of Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.AD.Certificate.2012R2"><Name>Lightweight ADCS Server role 2012R2</Name><Description>Installation of ADCS server role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.AD.Federation.2012R2"><Name>Lightweight ADFS Server role 2012R2</Name><Description>Installation of ADFS server role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.AD.Rights.Management.2012R2"><Name>Lightweight ADRMS Server role 2012R2</Name><Description>Installation of ADRMS server role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.DHCP.2012R2"><Name>Lightweight DHCP Server role 2012R2</Name><Description>Installation of DHCP server role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.DNS.2012R2"><Name>Lightweight DNS Server role 2012R2</Name><Description>Installation of DNS server role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.File.Services.2012R2"><Name>Lightweight File Services role 2012R2</Name><Description>Installation of File Services role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Remote.Access.2012R2"><Name>Lightweight Remote Access role 2012R2</Name><Description>Installation of Remote Access role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.NLB.2012R2"><Name>Lightweight Network Load Balancer role 2012R2</Name><Description>Installation of Network Load Balancer role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Remote.Desktop.Services.2012R2"><Name>Lightweight Remote Desktop Services role 2012R2</Name><Description>Installation of Remote Desktop Services role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Deployment.Services.2012R2"><Name>Lightweight Deployment Services role 2012R2</Name><Description>Installation of Deployment Services role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Essentials.2012R2"><Name>Lightweight Essentials Services role 2012R2</Name><Description>Installation of Essentials Services role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Update.Services.2012R2"><Name>Lightweight Update Services role 2012R2</Name><Description>Installation of Update Services role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Queuing.2012R2"><Name>Lightweight Message Queuing role 2012R2</Name><Description>Installation of Message Queuing role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Print.Services.2012R2"><Name>Lightweight Print Services role 2012R2</Name><Description>Installation of Print Services role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.HyperV.2012R2"><Name>Lightweight Hyper-V role 2012R2</Name><Description>Installation of Hyper-V role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.AD.Lightweight.Directory.2012R2"><Name>Lightweight AD Lightweight Directory role 2012R2</Name><Description>Installation of AD Lightweight Directory on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Branch.Cache.2012R2"><Name>Lightweight Branch Cache role 2012R2</Name><Description>Installation of Branch Cache on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Cluster.2012R2"><Name>Lightweight Server Cluster role 2012R2</Name><Description>Installation of Windows Server Cluster on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.ActiveDirectory.2012R2"><Name>Lightweight Active Directory Server role 2012R2</Name><Description>Installation of Active Directory server role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.WebApplicationProxy.2012R2"><Name>Lightweight Web Application Proxy Server role 2012R2</Name><Description>Installation of Web Application Proxy server role on Windows Server 2012R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.2012R2.Roles.Discovery"><Name>Lightweight generic Server 2012R2 Roles Discovery</Name><Description>This rule runs against every Windows Server 2012R2 computer and checks whether server roles are installed.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.2012R2.Role.Discovery.DataSource"><Name>&gt;Windows Server 2012 R2 Generic Discovery Data Source</Name><Description>This data source runs against every Windows Server 2012 R2 computer and checks for different server 2012 R2 roles.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.2012R2.Role.Discovery.DataSource" SubElementID="IntervalSeconds"><Name>Interval(sec)</Name></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.2012R2.Role.Discovery.DataSource" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.AD.Certificate.2012"><Name>Lightweight ADCS Server role 2012</Name><Description>Installation of ADCS server role on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.AD.Federation.2012"><Name>Lightweight ADFS Server role 2012</Name><Description>Installation of ADFS server role on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.AD.Rights.Management.2012"><Name>Lightweight ADRMS Server role 2012</Name><Description>Installation of ADRMS server role on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.DHCP.2012"><Name>Lightweight DHCP Server role 2012</Name><Description>Installation of DHCP server role on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.DNS.2012"><Name>Lightweight DNS Server role 2012</Name><Description>Installation of DNS server role on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.File.Services.2012"><Name>Lightweight File Services role 2012</Name><Description>Installation of File Services role on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Remote.Access.2012"><Name>Lightweight Remote Access role 2012</Name><Description>Installation of Remote Access role on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.NLB.2012"><Name>Lightweight Network Load Balancer role 2012</Name><Description>Installation of Network Load Balancer role on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Remote.Desktop.Services.2012"><Name>Lightweight Remote Desktop Services role 2012</Name><Description>Installation of Remote Desktop Services role on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Deployment.Services.2012"><Name>Lightweight Deployment Services role 2012</Name><Description>Installation of Deployment Services role on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Update.Services.2012"><Name>Lightweight Update Services role 2012</Name><Description>Installation of Update Services role on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Queuing.2012"><Name>Lightweight Message Queuing role 2012</Name><Description>Installation of Message Queuing role on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Print.Services.2012"><Name>Lightweight Print Services role 2012</Name><Description>Installation of Print Services role on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.HyperV.2012"><Name>Lightweight Hyper-V role 2012</Name><Description>Installation of Hyper-V role on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Branch.Cache.2012"><Name>Lightweight Branch Cache role 2012</Name><Description>Installation of Branch Cache on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Cluster.2012"><Name>Lightweight Server Cluster role 2012</Name><Description>Installation of Windows Server Cluster on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Backup.2012"><Name>Lightweight Server Backup role 2012</Name><Description>Installation of Windows Server Backup on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.IIS.2012"><Name>Lightweight Server IIS role 2012</Name><Description>Installation of Windows Server IIS on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.ActiveDirectory.2012"><Name>Lightweight Active Directory Server role 2012</Name><Description>Installation of Active Directory server role on Windows Server 2012.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.2012.Roles.Discovery"><Name>Lightweight generic Server 2012 Roles Discovery</Name><Description>This rule runs against every Windows Server 2012 computer and checks whether server roles are installed.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.2012.Role.Discovery.DataSource"><Name>Windows Server 2012 Generic Discovery Data Source</Name><Description>This data source runs against every Windows Server 2012 computer and checks for different server 2012 roles.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.2012.Role.Discovery.DataSource" SubElementID="IntervalSeconds"><Name>Interval(sec)</Name></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.2012.Role.Discovery.DataSource" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.AD.Certificate.2008R2"><Name>Lightweight ADCS Server role 2008R2</Name><Description>Installation of ADCS server role on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.AD.Federation.2008R2"><Name>Lightweight ADFS Server role 2008R2</Name><Description>Installation of ADFS server role on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.AD.Rights.Management.2008R2"><Name>Lightweight ADRMS Server role 2008R2</Name><Description>Installation of ADRMS server role on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.DHCP.2008R2"><Name>Lightweight DHCP Server role 2008R2</Name><Description>Installation of DHCP server role on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.DNS.2008R2"><Name>Lightweight DNS Server role 2008R2</Name><Description>Installation of DNS server role on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.File.Services.2008R2"><Name>Lightweight File Services role 2008R2</Name><Description>Installation of File Services role on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.NLB.2008R2"><Name>Lightweight Network Load Balancer role 2008R2</Name><Description>Installation of Network Load Balancer role on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Remote.Desktop.Services.2008R2"><Name>Lightweight Remote Desktop Services role 2008R2</Name><Description>Installation of Remote Desktop Services role on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Queuing.2008R2"><Name>Lightweight Message Queuing role 2008R2</Name><Description>Installation of Message Queuing role on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Print.Services.2008R2"><Name>Lightweight Print Services role 2008R2</Name><Description>Installation of Print Services role on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.HyperV.2008R2"><Name>Lightweight Hyper-V role 2008R2</Name><Description>Installation of Hyper-V role on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Branch.Cache.2008R2"><Name>Lightweight Branch Cache role 2008R2</Name><Description>Installation of Branch Cache on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.IIS.2008R2"><Name>Lightweight Server IIS role 2008R2</Name><Description>Installation of Windows Server IIS on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.AD.Lightweight.Directory.2008R2"><Name>Lightweight AD Lightweight Directory role 2008R2</Name><Description>Installation of AD Lightweight Directory on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.ActiveDirectory.2008R2"><Name>Lightweight Active Directory Server role 2008R2</Name><Description>Installation of Active Directory server role on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Routing.Remote.Service.2008R2"><Name>Lightweight remote access role 2008R2</Name><Description>Installation of remote access server role on Windows Server 2008R2.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.2008R2.Roles.Discovery"><Name>Lightweight generic Server 2008R2 Roles Discovery</Name><Description>This rule runs against every Windows Server 2008R2 computer and checks whether server roles are installed.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.2008R2.Role.Discovery.DataSource"><Name>Windows Server 2008R2 Generic Discovery Data Source</Name><Description>This data source runs against every Windows Server 2008R2 computer and checks for different server 2008R2 roles.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.2008R2.Role.Discovery.DataSource" SubElementID="IntervalSeconds"><Name>Interval(sec)</Name></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.2008R2.Role.Discovery.DataSource" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.NonServerRoles.Registry.Discovery"><Name>Lightweight generic Non-Server Roles Discovery</Name><Description>This rule runs against every Windows computer 2008 R2/2012/2012 R2 and checks whether various non-server roles are installed.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.NonServerRoles.Registry.Discovery.DataSource"><Name>Non windows server roles Generic Discovery Data Source</Name><Description>This data source runs against every Windows computer 2008 R2/2012/2012 R2 and checks for different non-server roles.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.NonServerRoles.Registry.Discovery.DataSource" SubElementID="IntervalSeconds"><Name>Interval(sec)</Name></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.NonServerRoles.Registry.Discovery.DataSource" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.2016.NonServerRoles.Registry.Discovery"><Name>Lightweight generic 2016+ Non-Server Roles Discovery</Name><Description>This rule runs against every Windows computer 2016+ and checks whether various non-server roles are installed.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2005"><Name>Lightweight SQL Server 2005</Name><Description>Installation of SQL server 2005 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2008"><Name>Lightweight SQL Server role 2008</Name><Description>Installation of SQL server 2008 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2012"><Name>Lightweight SQL Server role 2012</Name><Description>Installation of SQL server 2012 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2014"><Name>Lightweight SQL Server role 2014</Name><Description>Installation of SQL server 2014 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Backup"><Name>Lightweight Windows Server Backup</Name><Description>Installation of Windows server Backup on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Biztalk.2013"><Name>Lightweight BizTalk server 2013</Name><Description>Installation of BizTalk server 2013 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Biztalk.2013R2"><Name>Lightweight BizTalk server 2013R2</Name><Description>Installation of BizTalk server 2013R2 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.CRM.2011"><Name>Lightweight CRM 2011</Name><Description>Installation of CRM 2011 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.CRM.2013"><Name>Lightweight CRM 2013</Name><Description>Installation of CRM 2013 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.CRM.2015"><Name>Lightweight CRM 2015</Name><Description>Installation of CRM 2015 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.NAV.2013"><Name>Lightweight NAV 2013</Name><Description>Installation of NAV 2013 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.NAV.2013R2"><Name>Lightweight NAV 2013 R2</Name><Description>Installation of NAV 2013 R2 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Exchange.Server.2013"><Name>Lightweight Exchange Server 2013</Name><Description>Installation of Exchange Server 2013 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SharePoint.Server.2013"><Name>Lightweight SharePoint Server 2013</Name><Description>Installation of SharePoint Server 2013 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SharePoint.Foundation.Server.2013"><Name>Lightweight SharePoint Foundation Server 2013</Name><Description>Installation of SharePoint Foundation Server 2013 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SPF.2012R2"><Name>Lightweight Service Provider Foundation (SPF) 2012R2</Name><Description>Installation of System Center 2012 R2 Service Provider Foundation (SPF) on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Host.Integration.Server.2013"><Name>Lightweight Host Integration Server 2013</Name><Description>Installation of Host Integration Server 2013 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Orchestrator.2012"><Name>Lightweight Orchestrator 2012 R2</Name><Description>Installation of Orchestrator 2012 R2 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SMA.2012R2"><Name>Lightweight Service Management Automation 2012 R2</Name><Description>Installation of Service Management Automation 2012 R2 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Dynamics.AX.2009"><Name>Lightweight Dynamics AX 2009</Name><Description>Installation of Dynamics AX 2009 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Dynamics.AX.2012"><Name>Lightweight Dynamics AX 2012</Name><Description>Installation of Dynamics AX 2012 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.ServiceManager.2012"><Name>Lightweight Service Manager 2012</Name><Description>Installation of Service Manager 2012 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.TFS.2010"><Name>Lightweight Team Foundation Server 2010</Name><Description>Installation of Team Foundation Server 2010 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.TFS.2012"><Name>Lightweight Team Foundation Server 2012</Name><Description>Installation of Team Foundation Server 2012 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.TFS.2013"><Name>Lightweight Team Foundation Server 2013</Name><Description>Installation of Team Foundation Server 2013 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.TFS.2015"><Name>Lightweight Team Foundation Server 2015</Name><Description>Installation of Team Foundation Server 2015 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SCCM.2012"><Name>Lightweight System Center Configuration Manager 2012</Name><Description>Installation of System Center Configuration Manager 2012 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.MSDTC.2016"><Name>Lightweight Distributed Transaction Coordinator 2016</Name><Description>Installation of Distributed Transaction Coordinator 2016  on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.MSDTC.2012R2"><Name>Lightweight Distributed Transaction Coordinator 2012 R2</Name><Description>Installation of Distributed Transaction Coordinator 2012 R2  on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2016"><Name>Lightweight SQL Server role 2016</Name><Description>Installation of SQL server 2016 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Branch.Cache.2016"><Name>Lightweight Branch Cache role 2016</Name><Description>Installation of Branch Cache on Windows Server 2016.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.AppController.2012R2"><Name>Lightweight System Center App Controller 2012 R2</Name><Description>Installation of System Center App Controller 2012 R2 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Dynamics.AX.Retail.2012R3"><Name>Lightweight Dynamics AX Retail 2012 R3</Name><Description>Installation of Dynamics  AX Retail 2012 R3 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Host.Integration.Server.2010"><Name>Lightweight Host Integration Server 2010</Name><Description>Installation of Host Integration Server 2010 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SharePoint.Foundation.Server.2010"><Name>Lightweight SharePoint Foundation Server 2010</Name><Description>Installation of SharePoint Foundation Server 2010 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SharePoint.Server.2010"><Name>Lightweight SharePoint 2010 Products</Name><Description>Installation of SharePoint 2010 Products on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Biztalk.2010"><Name>Lightweight BizTalk server 2010</Name><Description>Installation of BizTalk server 2010 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Biztalk.2009"><Name>Lightweight BizTalk server 2009</Name><Description>Installation of BizTalk server 2009 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Biztalk.2006"><Name>Lightweight BizTalk server 2006</Name><Description>Installation of BizTalk server 2006 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2016.ReportingServices.NativeMode"><Name>Lightweight SQL Server 2016 Reporting Services (Native Mode)</Name><Description>Installation of SQL Server 2016 Reporting Services (Native Mode) on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2014.ReportingServices.NativeMode"><Name>Lightweight SQL Server 2014 Reporting Services (Native Mode)</Name><Description>Installation of SQL Server 2014 Reporting Services (Native Mode) on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2012.ReportingServices.NativeMode"><Name>Lightweight SQL Server 2012 Reporting Services (Native Mode)</Name><Description>Installation of SQL Server 2012 Reporting Services (Native Mode) on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2016.AnalysisServices"><Name>Lightweight SQL Server 2016 Analysis Services</Name><Description>Installation of SQL Server 2016 Analysis Services on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2014.AnalysisServices"><Name>Lightweight SQL Server 2014 Analysis Services</Name><Description>Installation of SQL Server 2014 Analysis Services on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2012.AnalysisServices"><Name>Lightweight SQL Server 2012 Analysis Services</Name><Description>Installation of SQL Server 2012 Analysis Services on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2016.Replication"><Name>Lightweight SQL Server 2016 Replication Services</Name><Description>Installation of SQL Server 2016 Replication Services on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2014.Replication"><Name>Lightweight SQL Server 2014 Replication Services</Name><Description>Installation of SQL Server 2014 Replication Services on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2012.Replication"><Name>Lightweight SQL Server 2012 Replication Services</Name><Description>Installation of SQL Server 2012 Replication Services on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.AdvancedThreatAnalytics"><Name>Lightweight Advanced Threat Analytics</Name><Description>Installation of Advanced Threat Analytics on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.SDNMonitoring"><Name>Lightweight SDN Monitoring</Name><Description>Installation of SDN Monitoring on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Base.Entity"><Name>Lightweight Base Entity</Name><Description>Defines the basic properties of Lightweight Base Entity</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.LW.Base.Host"><Name>Windows Lightweight Base Host</Name><Description>All Windows Lightweight Base Host</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2017.Replication"><Name>Lightweight SQL Server 2017 Replication Services</Name><Description>Installation of SQL Server 2017 Replication Services on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SQL.Server.2017"><Name>Lightweight SQL Server role (for 2012 and up)</Name><Description>Installation of SQL Server (for 2012 and up) on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Lync.Server.2013"><Name>Lightweight Lync Server 2013</Name><Description>Installation of Lync Server 2013 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.SkypeForBusiness.2015"><Name>Lightweight Skype For Business 2015</Name><Description>Installation of Skype For Business 2015 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.2016.RemoteDesktopServices"><Name>Lightweight Remote Desktop Services 2016</Name><Description>Installation of Remote Desktop Services 2016 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.2016.VirtualMachineManager"><Name>Lightweight 2016 Virtual Machine Manager</Name><Description>Installation of Virtual Machine Manager on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.HyperV.2016"><Name>Windows Lightweight 2016 Hyper-V</Name><Description>Installation of Hyper-V 2016 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Power.Management.2012"><Name>Windows Lightweight Power Management 2012</Name><Description>Installation of Power Management 2012 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.NetworkDevices.Discovery"><Name>Lightweight generic Network Devices Discovery</Name><Description>This rule runs against Management Server and checks whether various NetworkDevices are available.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.NetworkDevices.Discovery.DataSource"><Name>Network devices Generic Discovery Data Source</Name><Description>This data source runs against Management Server and checks for NetworkDevices.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.NetworkDevices.Discovery.DataSource" SubElementID="IntervalSeconds"><Name>Interval(sec)</Name></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.NetworkDevices.Discovery.DataSource" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Infront.RightFax"><Name>Lightweight RightFax (by Infront)</Name><Description>Installation of RightFax on Windows Computer (Infront)</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Infront.SCOrchestrator.Core"><Name>Lightweight SC Orchestrator (by Infront)</Name><Description>Installation of SC Orchestrator on Windows Computer (Infront)</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Infront.McAfee"><Name>Lightweight McAfee (by Infront)</Name><Description>Installation of McAfee Extended on Windows Computer (Infront)</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.NiCE.IBM.Domino"><Name>Lightweight IBM Domino (by NiCE)</Name><Description>Installation of IBM Domino on Windows Computer (NiCE)</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.NiCE.Oracle"><Name>Lightweight Oracle (by NiCE)</Name><Description>Installation of Oracle on Windows Computer (NiCE)</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.OpsLogix.BlackBerryV12"><Name>Lightweight BlackBerry (by OpsLogix)</Name><Description>Installation of BlackBerry on Windows Computer (OpsLogix)</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.OpsLogix.IBMMQ"><Name>Lightweight IBM MQ (by OpsLogix)</Name><Description>Installation of IBM MQ on Windows Computer (OpsLogix)</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.OpsLogix.Oracle"><Name>Lightweight Oracle (by OpsLogix)</Name><Description>Installation of Oracle on Windows Computer by (OpsLogix)</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.OpsLogix.Swift"><Name>Lightweight Swift (by OpsLogix)</Name><Description>Installation of Swift on Windows Computer (OpsLogix)</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.OpsLogix.VMware"><Name>Lightweight VMware (by OpsLogix)</Name><Description>Installation of VMware on Windows Computer (OpsLogix)</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.NiCE.DB2"><Name>Lightweight DB2 (by NiCE)</Name><Description>Installation of DB2 on Windows Computer (NiCE)</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Comtrade.NutanixVM"><Name>Lightweight Nutanix VM (by HYCU)</Name><Description>Installation of Nutanix VM on Windows Computer (HYCU)</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Calcomp.CHS"><Name>Lightweight CHS Suite (Calcomp)</Name><Description>Installation of CHS Suite on Windows Computer (Calcomp)</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Savision.ActiveDirectory"><Name>Lightweight Active Directory (by Savision)</Name><Description>Installation of Active Directory on Windows Computer (Savision).</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Savision.Exchange.2013"><Name>Lightweight Exchange 2013 (by Savision)</Name><Description>Installation of Exchange 2013 on Windows Computer (Savision).</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Savision.Exchange.2010"><Name>Lightweight Exchange 2010 (by Savision)</Name><Description>Installation of Exchange 2010 on Windows Computer (Savision).</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Savision.Dynamics.CRM"><Name>Lightweight Dynamics CRM (by Savision)</Name><Description>Installation of Dynamics CRM on Windows Computer (Savision).</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Savision.SharePoint.2013"><Name>Lightweight SharePoint 2013 (by Savision)</Name><Description>Installation of SharePoint 2013 on Windows Computer (Savision).</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Savision.Lync.Server.2013"><Name>Lightweight Lync Server 2013 (by Savision)</Name><Description>Installation of Lync Server 2013 on Windows Computer (Savision).</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Savision.SkypeForBusiness.2015"><Name>Lightweight Skype For Business 2015 (by Savision)</Name><Description>Installation of Skype For Business 2015 on Windows Computer (Savision).</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Savision.SCCM.2012"><Name>Lightweight System Center Configuration Manager 2012 (by Savision)</Name><Description>Installation of System Center Configuration Manager 2012 on Windows Computer (Savision).</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Savision.DHCP"><Name>Lightweight DHCP (by Savision)</Name><Description>Installation of DHCP on Windows Computer (Savision).</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Savision.DNS"><Name>Lightweight DNS (by Savision)</Name><Description>Installation of DNS on Windows Computer (Savision).</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Savision.RemoteDesktopServices"><Name>Lightweight Remote Desktop Services (by Savision)</Name><Description>Installation of Remote Desktop Services on Windows Computer (Savision).</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Gripmatix.CVAD"><Name>Lightweight MetrixInsight for CVAD (by Gripmatix)</Name><Description>Installation of MetrixInsight for CVAD on Windows Computer (Gripmatix).</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Teqwave.PostgreSQL"><Name>Lightweight PostgreSQL (by Teqwave)</Name><Description>Installation of PostgreSQL on Windows Computer (Teqwave).</Description></DisplayString><DisplayString ElementID="LW.Microsoft.SCX.Agent.Instance"><Name>Lightweight UNIX/Linux SCX Agent</Name><Description>Lightweight SCX Agent instances</Description></DisplayString><DisplayString ElementID="LW.Microsoft.SCX.Agent.Instance" SubElementID="GuestOS"><Name>Guest OS</Name><Description>The Guest OS for this Agent</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance"><Name>Xplat role category</Name><Description>Lightweight seed necessary for creating Unix JEE Application server instance.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance" SubElementID="Id"><Name>ID</Name></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance" SubElementID="HostName"><Name>HostName</Name></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance" SubElementID="GuestOS"><Name>Guest OS</Name><Description>The Guest OS for this Jee Agent Instance</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.ApplicationServer.UnixSeed.Instance" SubElementID="CategoryName"><Name>Category Name</Name></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.JBoss.7.Unix.Configuration"><Name>Lightweight JBoss 7 Application server on Unix/Linux</Name><Description>Installation of JBoss 7 Application server on Unix/Linux.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.SCX.Agent.DiscoveryData"><Name>Lightweight SCX Agent</Name><Description>SCX Agent, returning DiscoveryData</Description></DisplayString><DisplayString ElementID="LW.Microsoft.SCX.Agent.DiscoveryData" SubElementID="Interval"><Name>Interval</Name><Description>Interval in seconds that the TimedEnumerator runs.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.SCX.Agent.DiscoveryData" SubElementID="SyncTime"><Name>SyncTime</Name><Description>Time of day the TimedEnumerator syncs at.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.SCX.Agent.DiscoveryData" SubElementID="OutputErrorIfAny"><Name>Output Error If Any</Name><Description>Output errors.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.WSMan.TimedEnumerate.DoubleFiltered.DiscoveryData"><Name>Lightweight WS-Management Timed Enumerator Double Filtered DiscoveryData</Name><Description>Lightweight WS-Management Timed Enumerator Double Filtered, returning DiscoveryData</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.WSMan.TimedEnumerate.DoubleFiltered.DiscoveryData" SubElementID="Interval"><Name>Interval</Name><Description>Interval in seconds that the TimedEnumerator runs.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.WSMan.TimedEnumerate.DoubleFiltered.DiscoveryData" SubElementID="SyncTime"><Name>SyncTime</Name><Description>Time of day the TimedEnumerator syncs at.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.WSMan.TimedEnumerate.DoubleFiltered.DiscoveryData" SubElementID="OutputErrorIfAny"><Name>Output Error If Any</Name><Description>Output errors.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.WSMan.Native.ProbeAction"><Name>Lightweight WS-Management Native ProbeAction</Name><Description>Internal Probe action for payloading WSMan queries with necessary information</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.JBoss.7.Unix.Configuration.Discovery"><Name>Lightweight discovery for JBoss 7 Application server on Unix/Linux</Name><Description>This rule runs against every Unix/Linux Agent and checks whether JBoss 7 Application server are installed.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.Tomcat.8plus.Unix.Configuration"><Name>Lightweight Tomcat 8plus Application server on Unix/Linux</Name><Description>Installation of Tomcat 8plus Application server on Unix/Linux.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.Tomcat.8plus.Unix.Configuration.Discovery"><Name>Lightweight discovery for Tomcat 8plus Application server on Unix/Linux</Name><Description>This rule runs against every Unix/Linux Agent and checks whether Tomcat 8plus Application server are installed.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.WebSphere.8plus.Unix.Configuration"><Name>Lightweight WebSphere 8plus Application server on Unix/Linux</Name><Description>Installation of WebSphere 8plus Application server on Unix/Linux.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.WebSphere.8plus.Unix.Configuration.Discovery"><Name>Lightweight discovery for WebSphere 8plus Application server on Unix/Linux</Name><Description>This rule runs against every Unix/Linux Agent and checks whether WebSphere 8plus Application server are installed.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.WebLogic.12plus.Unix.Configuration"><Name>Lightweight WebLogic 12plus Application server on Unix/Linux</Name><Description>Installation of WebLogic 12plus Application server on Unix/Linux.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.WebLogic.12plus.Unix.Configuration.Discovery"><Name>Lightweight discovery for WebLogic 12plus Application server on Unix/Linux</Name><Description>This rule runs against every Unix/Linux Agent and checks whether WebLogic 12plus Application server are installed.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.Wildfly.8plus.Unix.Configuration"><Name>Lightweight Wildfly 8plus Application server on Unix/Linux</Name><Description>Installation of Wildfly 8plus Application server on Unix/Linux.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.Wildfly.8plus.Unix.Configuration.Discovery"><Name>Lightweight discovery for Wildfly 8plus Application server on Unix/Linux</Name><Description>This rule runs against every Unix/Linux Agent and checks whether Wildfly 8plus Application server are installed.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.JBoss.7.Windows.Configuration"><Name>Windows Lightweight JEE JBoss 7</Name><Description>Installation of JEE JBoss 7 on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.Tomcat.8plus.Windows.Configuration"><Name>Windows Lightweight JEE Tomcat 8plus</Name><Description>Installation of JEE Tomcat 8plus on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.WebSphere.8plus.Windows.Configuration"><Name>Windows Lightweight JEE WebSphere 8plus</Name><Description>Installation of JEE WebSphere 8plus on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.WebLogic.12plus.Windows.Configuration"><Name>Windows Lightweight JEE WebLogic 12plus</Name><Description>Installation of JEE WebLogic 12plus on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.JEE.Wildfly.8plus.Windows.Configuration"><Name>Windows Lightweight JEE Wildfly 8plus</Name><Description>Installation of  JEE Wildfly 8plus on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.Queuing.2016"><Name>Lightweight Message Queuing role 2016+</Name><Description>Installation of Message Queuing role on Windows Server 2016+.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.SharePoint.Server.2016"><Name>Lightweight SharePoint Server 2016+</Name><Description>Installation of SharePoint Server 2016+ on Windows Computer.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.StorageSpacesDirect.2016"><Name>Lightweight Storage Spaces Direct role 2016+</Name><Description>Installation of Storage Spaces Direct role on Windows Server 2016+.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Dell.EMC"><Name>Lightweight Dell EMC</Name><Description>Installation of Dell EMC OpenManage Integration for Microsoft System Center.</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.BaseOS.Discovery.DataSource"><Name>Lightweight Windows Server Base OS Discovery Data Source</Name><Description>Lightweight Windows Server Base OS Discovery Data Source</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.BaseOS.Discovery.DataSource" SubElementID="IntervalSeconds"><Name>Lightweight Windows Server Base OS Discovery Data Source Interval Seconds configuration</Name><Description>Lightweight Windows Server Base OS Discovery Data Source Interval Seconds configuration</Description></DisplayString><DisplayString ElementID="LW.Microsoft.Windows.Server.BaseOS.Discovery.DataSource" SubElementID="TimeoutSeconds"><Name>Lightweight Windows Server Base OS Discovery Data Source Timeout Seconds configuration</Name><Description>Lightweight Windows Server Base OS Discovery Data Source Timeout Seconds  configuration</Description></DisplayString><DisplayString ElementID="LW.Microsoft.SCX.Agent.Discovery"><Name>LightWeight Microsoft SCX Agent Discovery</Name><Description>LightWeight Microsoft SCX Agent Discovery</Description></DisplayString><DisplayString ElementID="Microsoft.Windows.Computer.Hosts.LW.Base.Host"><Name>Microsoft Windows Computer Hosts Lightweight Base Host</Name></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Comtrade.F5BIGIP"><Name>Lightweight F5 BIG-IP (by HYCU)</Name><Description>Installation of F5 BIG-IP on NetWork Devices (HYCU)</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Gripmatix.ADC"><Name>Lightweight MetrixInsight for ADC (by GripMatix)</Name><Description>Installation of MetrixInsight for ADC on Windows Computer (Gripmatix).</Description></DisplayString><DisplayString ElementID="LW.Microsoft.3rdParty.Infront.Isilon"><Name>Lightweight Isilon (by Infront)</Name><Description>Installation of Isilon on NetWork Devices (Infront)</Description></DisplayString></DisplayStrings><KnowledgeArticles><KnowledgeArticle ElementID="LW.Microsoft.Windows.Server.BaseOS.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This discovery is used to discover the installation of Windows Server 2008R2-2016 by the updates and recommendations feature.</maml:para><maml:para>These are the parameters that can be overridden:</maml:para><maml:list><maml:listItem><maml:para>Interval Seconds: Amount of Seconds for each execution</maml:para></maml:listItem></maml:list></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="LW.Microsoft.Windows.Server.GenericServerRoles.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This discovery is used to discover the installation of specific Windows Server roles by the updates and recommendations feature.</maml:para><maml:para>These are the parameters that can be overridden:</maml:para><maml:list><maml:listItem><maml:para>Interval Seconds: Amount of Seconds for each execution</maml:para></maml:listItem><maml:listItem><maml:para>Timeout Seconds: Amount of seconds to wait until cancel execution for "timeout reasons."</maml:para></maml:listItem></maml:list></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="LW.Microsoft.Windows.Server.Generic.Discovery.DataSource" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This data source is used to determine the installation of specific windows server roles by the updates and recommendations feature.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Configuration</maml:title><maml:para>Interval Seconds: How frequently (in seconds) the value should be checked.</maml:para><maml:para>Timeout Seconds: How much time (in seconds) to wait for the module to finish execution.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="LW.Microsoft.JEE.JBoss.7.Unix.Configuration.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This discovery is used to determine the installation of JEE JBoss Unix Configuration by the updates and recommendations feature.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="LW.Microsoft.JEE.Wildfly.8plus.Unix.Configuration.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This discovery is used to determine the installation of JEE Wildfly 8plus Unix Configuration by the updates and recommendations feature.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="LW.Microsoft.JEE.WebLogic.12plus.Unix.Configuration.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This discovery is used to determine the installation of JEE WebLogic 12plus Unix Configuration by the updates and recommendations feature.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.ManagementPack.Recommendations" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Microsoft SystemCenter Update and Recommendations Management Pack</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="LW.Microsoft.Windows.Server.2012R2.Roles.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Microsoft Windows Server 2012 R2 Roles Discovery</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="LW.Microsoft.Windows.Server.2012.Roles.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Microsoft Windows Server 2012 Roles Discovery</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="LW.Microsoft.Windows.Server.2008R2.Roles.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Microsoft Windows Server 2008 R2 Roles Discovery</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="LW.Microsoft.Windows.NonServerRoles.Registry.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Microsoft Windows Non-Server Roles Registry Discovery</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="LW.Microsoft.Windows.2016.NonServerRoles.Registry.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Microsoft Windows Server 2016 Non-Server Roles Registry Discovery</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="LW.Microsoft.Windows.NetworkDevices.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Network Devices Discovery</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="LW.Microsoft.SCX.Agent.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Microsoft SCX Agent Discovery</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="LW.Microsoft.JEE.WebSphere.8plus.Unix.Configuration.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>JEE WebSphere 8plus Unix Configuration Discovery</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="LW.Microsoft.JEE.Tomcat.8plus.Unix.Configuration.Discovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>JEE Tomcat 8plus Unix Configuration Discovery</maml:para></maml:section></MamlContent></KnowledgeArticle></KnowledgeArticles></LanguagePack></LanguagePacks></ManagementPack>
