<ManagementPack xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.0"><Manifest><Identity><ID>Microsoft.SystemCenter.DataWarehouse.Library</ID><Version>10.19.10649.0</Version></Identity><Name>Microsoft System Center Data Warehouse Library</Name><References><Reference Alias="SystemCenter"><ID>Microsoft.SystemCenter.Library</ID><Version>7.0.8443.6</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="Windows"><ID>Microsoft.Windows.Library</ID><Version>7.5.8500.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="Health"><ID>System.Health.Library</ID><Version>7.0.8443.6</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="System"><ID>System.Library</ID><Version>7.5.8500.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference
Alias="Performance"><ID>System.Performance.Library</ID><Version>7.0.8443.6</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference></References></Manifest><TypeDefinitions><EntityTypes><ClassTypes><ClassType ID="Microsoft.SystemCenter.DataWarehouse" Accessibility="Public" Abstract="false" Base="System!System.LogicalEntity" Hosted="false" Singleton="true" Extension="false"><Property ID="ReportingServerUrl" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="255" MinLength="0" Required="false" Scale="0" /><Property ID="ReportRootFolderName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="255" MinLength="0" Required="false" Scale="0" /><Property ID="MyReportsFolderName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="255" MinLength="0" Required="false" Scale="0" /><Property ID="MainDatabaseServerName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false"
MaxLength="255" MinLength="0" Required="false" Scale="0" /><Property ID="MainDatabaseName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="255" MinLength="0" Required="false" Scale="0" /></ClassType><ClassType ID="Microsoft.SystemCenter.DataWarehouse.DataSet" Accessibility="Public" Abstract="false" Base="System!System.LogicalEntity" Hosted="false" Singleton="false" Extension="false"><Property ID="InstanceGuid" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="40" MinLength="0" Required="false" Scale="0" /><Property ID="Description" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="255" MinLength="0" Required="false" Scale="0" /></ClassType><ClassType ID="Microsoft.SystemCenter.DataWarehouse.StandardDataSet" Accessibility="Public" Abstract="false" Base="Microsoft.SystemCenter.DataWarehouse.DataSet" Hosted="false" Singleton="false" Extension="false" /><ClassType
ID="Microsoft.SystemCenter.DataWarehouseConnectorServer" Accessibility="Public" Abstract="false" Base="SystemCenter!Microsoft.SystemCenter.ManagementServer" Hosted="true" Singleton="false" Extension="false" /><ClassType ID="Microsoft.SystemCenter.DataWarehouse.AppMonitoring" Accessibility="Public" Abstract="false" Base="SystemCenter!Microsoft.SystemCenter.Database.AppMonitoring" Hosted="false" Singleton="true" Extension="false" /></ClassTypes><RelationshipTypes><RelationshipType ID="Microsoft.SystemCenter.DataWarehouse.DataWarehouseContainsDataSet" Accessibility="Public" Abstract="false" Base="System!System.Containment"><Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Microsoft.SystemCenter.DataWarehouse" /><Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Microsoft.SystemCenter.DataWarehouse.DataSet" /></RelationshipType><RelationshipType ID="Microsoft.SystemCenter.OpsMgrDWWatchers.ReferenceDWConnectorServer" Accessibility="Public"
Abstract="false" Base="System!System.Reference"><Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="SystemCenter!Microsoft.SystemCenter.OpsMgrDWWatcher" /><Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Microsoft.SystemCenter.DataWarehouseConnectorServer" /></RelationshipType></RelationshipTypes></EntityTypes><SchemaTypes><SchemaType ID="Microsoft.SystemCenter.DataWarehouse.BulkDataWriterSchema" Accessibility="Public"><xsd:complexType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="RegularExpressionQueryType"><xsd:simpleContent><xsd:extension base="xsd:string"><xsd:attribute name="MatchNumber" type="xsd:nonNegativeInteger" use="optional" /><xsd:attribute name="GroupNumber" type="xsd:nonNegativeInteger" use="optional" /><xsd:attribute name="CaptureNumber" type="xsd:nonNegativeInteger" use="optional" /></xsd:extension></xsd:simpleContent></xsd:complexType><xsd:simpleType xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="TargetAttributeType"><xsd:restriction base="xsd:string"><xsd:enumeration value="DataItem" /><xsd:enumeration value="Iterator" /></xsd:restriction></xsd:simpleType><xsd:complexType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetedXPathExpressionType"><xsd:simpleContent><xsd:extension base="xsd:string"><xsd:attribute name="Target" type="TargetAttributeType" /></xsd:extension></xsd:simpleContent></xsd:complexType><xsd:complexType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AdditionalProcessingType"><xsd:choice><xsd:element name="Hash" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element name="DateTimeToSqlFormat" type="xsd:string" minOccurs="1" maxOccurs="1" /></xsd:choice></xsd:complexType><xsd:simpleType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ValuePropertyType"><xsd:restriction base="xsd:string"><xsd:enumeration value="InnerXml" /><xsd:enumeration value="OuterXml" /><xsd:enumeration value="Value"
/></xsd:restriction></xsd:simpleType><xsd:complexType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="XmlElementDefinitionType"><xsd:sequence><xsd:element name="Name" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element name="XPathExpression" type="TargetedXPathExpressionType" minOccurs="1" maxOccurs="1" /><xsd:element name="ValueProperty" type="ValuePropertyType" minOccurs="1" maxOccurs="1" /><xsd:element name="RegularExpression" type="RegularExpressionQueryType" minOccurs="0" maxOccurs="1" /><xsd:element name="AdditionalProcessing" type="AdditionalProcessingType" minOccurs="0" maxOccurs="1" /></xsd:sequence></xsd:complexType><xsd:complexType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="XmlElementsType"><xsd:sequence><xsd:element name="XmlElement" type="XmlElementDefinitionType" minOccurs="1" maxOccurs="unbounded" /></xsd:sequence></xsd:complexType><xsd:simpleType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="OutputColumnTypeType"><xsd:restriction
base="xsd:string"><xsd:enumeration value="Boolean" /><xsd:enumeration value="DateTime" /><xsd:enumeration value="Guid" /><xsd:enumeration value="String" /><xsd:enumeration value="Int" /><xsd:enumeration value="Long" /><xsd:enumeration value="Double" /></xsd:restriction></xsd:simpleType><xsd:complexType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ColumnDefinitionType"><xsd:sequence><xsd:element name="Name" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element name="Type" type="OutputColumnTypeType" minOccurs="1" maxOccurs="1" /><xsd:element name="XPathExpression" type="TargetedXPathExpressionType" minOccurs="1" maxOccurs="1" /><xsd:element name="ValueProperty" type="ValuePropertyType" minOccurs="1" maxOccurs="1" /><xsd:element name="RegularExpression" type="RegularExpressionQueryType" minOccurs="0" maxOccurs="1" /><xsd:element name="AdditionalProcessing" type="AdditionalProcessingType" minOccurs="0" maxOccurs="1" /></xsd:sequence></xsd:complexType><xsd:complexType
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ColumnDefinitionsType"><xsd:sequence><xsd:element name="Column" type="ColumnDefinitionType" minOccurs="1" maxOccurs="unbounded" /></xsd:sequence></xsd:complexType></SchemaType><SchemaType ID="Microsoft.SystemCenter.DataWarehouse.SqlAuthenticationSchema" Accessibility="Public"><xsd:complexType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SqlAuthenticationType"><xsd:sequence><xsd:element name="Login" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element name="Password" type="xsd:string" minOccurs="1" maxOccurs="1" /></xsd:sequence></xsd:complexType></SchemaType><SchemaType ID="Microsoft.SystemCenter.DataWarehouse.StandardDatasetSchema" Accessibility="Public"><xsd:simpleType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SqlIdentifierType"><xsd:restriction base="xsd:string"><xsd:minLength value="1" /><xsd:maxLength value="128" /><xsd:pattern value="[a-zA-Z][0-9_a-zA-Z]*"
/></xsd:restriction></xsd:simpleType><xsd:simpleType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeOfDayType"><xsd:restriction base="xsd:string"><xsd:minLength value="5" /><xsd:maxLength value="5" /><xsd:pattern value="[0-9][0-9]:[0-9][0-9]" /></xsd:restriction></xsd:simpleType><xsd:simpleType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AggregationTypeType"><xsd:restriction base="xsd:string"><xsd:enumeration value="Raw" /><xsd:enumeration value="Subhourly" /><xsd:enumeration value="Hourly" /><xsd:enumeration value="Daily" /></xsd:restriction></xsd:simpleType><xsd:simpleType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AggregationIntervalDurationMinutesType"><xsd:restriction base="xsd:int"><xsd:enumeration value="1" /><xsd:enumeration value="2" /><xsd:enumeration value="3" /><xsd:enumeration value="4" /><xsd:enumeration value="5" /><xsd:enumeration value="6" /><xsd:enumeration value="10" /><xsd:enumeration value="12" /><xsd:enumeration value="15"
/><xsd:enumeration value="20" /><xsd:enumeration value="30" /></xsd:restriction></xsd:simpleType><xsd:complexType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AggregationSettingsType"><xsd:sequence><xsd:element name="BaseTableName" type="SqlIdentifierType" /><xsd:element name="MaxTableRowCount" type="xsd:positiveInteger" /><xsd:element name="MaxTableSizeKb" type="xsd:positiveInteger" minOccurs="0" maxOccurs="1" /><xsd:element name="DataFileGroupName" type="SqlIdentifierType" minOccurs="0" maxOccurs="1" /><xsd:element name="IndexFileGroupName" type="SqlIdentifierType" minOccurs="0" maxOccurs="1" /><xsd:element name="MaxDataAgeDays" type="xsd:positiveInteger" /><xsd:element name="GroomingIntervalMinutes" type="xsd:positiveInteger" /><xsd:element name="MaxRowsToGroom" type="xsd:positiveInteger" /><xsd:element name="IndexOptimizationIntervalMinutes" type="xsd:positiveInteger" /></xsd:sequence></xsd:complexType><xsd:complexType xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="NonRawAggregationSettingsType"><xsd:complexContent><xsd:extension base="AggregationSettingsType"><xsd:sequence><xsd:element name="AggregationStartDelayMinutes" type="xsd:positiveInteger" /></xsd:sequence></xsd:extension></xsd:complexContent></xsd:complexType><xsd:complexType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SubhourlyAggregationSettingsType"><xsd:complexContent><xsd:extension base="NonRawAggregationSettingsType"><xsd:sequence><xsd:element name="AggregationIntervalDurationMinutes" type="AggregationIntervalDurationMinutesType" /></xsd:sequence></xsd:extension></xsd:complexContent></xsd:complexType><xsd:complexType xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AggregationsType"><xsd:sequence><xsd:element name="Raw" type="AggregationSettingsType" /><xsd:element name="Subhourly" type="SubhourlyAggregationSettingsType" minOccurs="0" maxOccurs="1" /><xsd:element name="Hourly" type="NonRawAggregationSettingsType" minOccurs="0" maxOccurs="1" /><xsd:element
name="Daily" type="NonRawAggregationSettingsType" minOccurs="0" maxOccurs="1" /></xsd:sequence></xsd:complexType></SchemaType></SchemaTypes><SecureReferences><SecureReference ID="Microsoft.SystemCenter.DataWarehouse.ActionAccount" Accessibility="Public" Context="System!System.Entity" /><SecureReference ID="Microsoft.SystemCenter.DataWarehouse.ConfigSynchronizationReaderAccount" Accessibility="Public" Context="System!System.Entity" /><SecureReference ID="Microsoft.SystemCenter.DataWarehouse.ReportDeploymentActionAccount" Accessibility="Public" Context="System!System.Entity" /><SecureReference ID="Microsoft.SystemCenter.DataWarehouse.SdkSqlAuthenticationActionAccount" Accessibility="Public" Context="System!System.Entity" /><SecureReference ID="Microsoft.SystemCenter.DataWarehouse.SqlAuthenticationActionAccount" Accessibility="Public" Context="System!System.Entity" /></SecureReferences><ModuleTypes><DataSourceModuleType
ID="Microsoft.SystemCenter.DataWarehouse.PublishedEntityHealthStateChangeProvider" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DropItems" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="QueueDataOnStall" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="QueueDataStallInterval" type="xsd:duration" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="StalledDataQueueSizeMB" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="DropItems" Selector="$Config/DropItems$" ParameterType="bool" /><OverrideableParameter ID="QueueDataOnStall" Selector="$Config/QueueDataOnStall$" ParameterType="bool" /><OverrideableParameter ID="QueueDataStallInterval" Selector="$Config/QueueDataStallInterval$" ParameterType="string" /><OverrideableParameter ID="StalledDataQueueSizeMB"
Selector="$Config/StalledDataQueueSizeMB$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1" TypeID="Microsoft.SystemCenter.DataWarehouse.PublishedEntityHealthStateChangeProviderInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>A91E7510-80F4-4da4-AC6E-58587F2E70B1</ChannelId><DropItems>$Config/DropItems$</DropItems><QueueDataOnStall>$Config/QueueDataOnStall$</QueueDataOnStall><QueueDataStallInterval>$Config/QueueDataStallInterval$</QueueDataStallInterval><StalledDataQueueSizeMB>$Config/StalledDataQueueSizeMB$</StalledDataQueueSizeMB><StalledDataQueueMaximumAge>P14D</StalledDataQueueMaximumAge></DataSource></MemberModules><Composition><Node ID="DS1" /></Composition></Composite></ModuleImplementation><OutputType>Health!System.Health.EntityStateChangeData</OutputType></DataSourceModuleType><DataSourceModuleType
ID="Microsoft.SystemCenter.DataWarehouse.PublishedEntityHealthStateChangeProviderCustomChannel" Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1" TypeID="Microsoft.SystemCenter.DataWarehouse.PublishedEntityHealthStateChangeProviderInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>$Config/ChannelId$</ChannelId><DropItems>false</DropItems><QueueDataOnStall>false</QueueDataOnStall><QueueDataStallInterval>PT2M</QueueDataStallInterval><StalledDataQueueSizeMB>100</StalledDataQueueSizeMB><StalledDataQueueMaximumAge>P14D</StalledDataQueueMaximumAge></DataSource></MemberModules><Composition><Node ID="DS1"
/></Composition></Composite></ModuleImplementation><OutputType>Health!System.Health.EntityStateChangeData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.DataWarehouse.PublishedEntityHealthStateChangeProviderInternal" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DropItems" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="QueueDataOnStall" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="QueueDataStallInterval" type="xsd:duration" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="StalledDataQueueSizeMB" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="StalledDataQueueMaximumAge" type="xsd:duration" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>8DB8C3B0-3AB0-494a-A09B-5F3643CC27A7</ClassID></Native></ModuleImplementation><OutputType>Health!System.Health.EntityStateChangeData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.DataWarehouse.PublishedEventDataProvider" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DropItems" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="QueueDataOnStall" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="QueueDataStallInterval" type="xsd:duration" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="StalledDataQueueSizeMB" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="DropItems" Selector="$Config/DropItems$" ParameterType="bool"
/><OverrideableParameter ID="QueueDataOnStall" Selector="$Config/QueueDataOnStall$" ParameterType="bool" /><OverrideableParameter ID="QueueDataStallInterval" Selector="$Config/QueueDataStallInterval$" ParameterType="string" /><OverrideableParameter ID="StalledDataQueueSizeMB" Selector="$Config/StalledDataQueueSizeMB$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1"
TypeID="Microsoft.SystemCenter.DataWarehouse.PublishedEventDataProviderInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>0F4C0747-D344-4880-9EE3-A726BFC1D79A</ChannelId><DropItems>$Config/DropItems$</DropItems><QueueDataOnStall>$Config/QueueDataOnStall$</QueueDataOnStall><QueueDataStallInterval>$Config/QueueDataStallInterval$</QueueDataStallInterval><StalledDataQueueSizeMB>$Config/StalledDataQueueSizeMB$</StalledDataQueueSizeMB><StalledDataQueueMaximumAge>P14D</StalledDataQueueMaximumAge></DataSource></MemberModules><Composition><Node ID="DS1" /></Composition></Composite></ModuleImplementation><OutputType>SystemCenter!Microsoft.SystemCenter.Event.LinkedData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.DataWarehouse.PublishedEventDataProviderCustomChannel" Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string"
minOccurs="1" maxOccurs="1" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1" TypeID="Microsoft.SystemCenter.DataWarehouse.PublishedEventDataProviderInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>$Config/ChannelId$</ChannelId><DropItems>false</DropItems><QueueDataOnStall>false</QueueDataOnStall><QueueDataStallInterval>PT2M</QueueDataStallInterval><StalledDataQueueSizeMB>100</StalledDataQueueSizeMB><StalledDataQueueMaximumAge>P14D</StalledDataQueueMaximumAge></DataSource></MemberModules><Composition><Node ID="DS1" /></Composition></Composite></ModuleImplementation><OutputType>SystemCenter!Microsoft.SystemCenter.Event.LinkedData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.DataWarehouse.PublishedEventDataProviderInternal" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DropItems" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="QueueDataOnStall" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="QueueDataStallInterval" type="xsd:duration" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="StalledDataQueueSizeMB" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="StalledDataQueueMaximumAge" type="xsd:duration" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>8DB8C3B0-3AB0-494a-A09B-5F3643CC27A7</ClassID></Native></ModuleImplementation><OutputType>SystemCenter!Microsoft.SystemCenter.Event.LinkedData</OutputType></DataSourceModuleType><DataSourceModuleType
ID="Microsoft.SystemCenter.DataWarehouse.PublishedPerformanceDataProvider" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DropItems" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="QueueDataOnStall" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="QueueDataStallInterval" type="xsd:duration" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="StalledDataQueueSizeMB" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="DropItems" Selector="$Config/DropItems$" ParameterType="bool" /><OverrideableParameter ID="QueueDataOnStall" Selector="$Config/QueueDataOnStall$" ParameterType="bool" /><OverrideableParameter ID="QueueDataStallInterval" Selector="$Config/QueueDataStallInterval$" ParameterType="string" /><OverrideableParameter ID="StalledDataQueueSizeMB" Selector="$Config/StalledDataQueueSizeMB$"
ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1" TypeID="Microsoft.SystemCenter.DataWarehouse.PublishedPerformanceDataProviderInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>63AFB62D-3376-4102-B6EE-9E88EA49AC46</ChannelId><DropItems>$Config/DropItems$</DropItems><QueueDataOnStall>$Config/QueueDataOnStall$</QueueDataOnStall><QueueDataStallInterval>$Config/QueueDataStallInterval$</QueueDataStallInterval><StalledDataQueueSizeMB>$Config/StalledDataQueueSizeMB$</StalledDataQueueSizeMB><StalledDataQueueMaximumAge>P14D</StalledDataQueueMaximumAge></DataSource></MemberModules><Composition><Node ID="DS1" /></Composition></Composite></ModuleImplementation><OutputType>SystemCenter!Microsoft.SystemCenter.Performance.LinkedData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.DataWarehouse.PublishedPerformanceDataProviderCustomChannel"
Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1" TypeID="Microsoft.SystemCenter.DataWarehouse.PublishedPerformanceDataProviderInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>$Config/ChannelId$</ChannelId><DropItems>false</DropItems><QueueDataOnStall>false</QueueDataOnStall><QueueDataStallInterval>PT2M</QueueDataStallInterval><StalledDataQueueSizeMB>100</StalledDataQueueSizeMB><StalledDataQueueMaximumAge>P14D</StalledDataQueueMaximumAge></DataSource></MemberModules><Composition><Node ID="DS1" /></Composition></Composite></ModuleImplementation><OutputType>SystemCenter!Microsoft.SystemCenter.Performance.LinkedData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.DataWarehouse.PublishedPerformanceDataProviderInternal"
Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DropItems" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="QueueDataOnStall" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="QueueDataStallInterval" type="xsd:duration" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="StalledDataQueueSizeMB" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="StalledDataQueueMaximumAge" type="xsd:duration" /></Configuration><ModuleImplementation
Isolation="Any"><Native><ClassID>8DB8C3B0-3AB0-494a-A09B-5F3643CC27A7</ClassID></Native></ModuleImplementation><OutputType>SystemCenter!Microsoft.SystemCenter.Performance.LinkedData</OutputType></DataSourceModuleType><ConditionDetectionModuleType ID="Microsoft.SystemCenter.DataWarehouse.Event.LinkedDataMapper" Accessibility="Internal" Batching="false" Stateful="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagedEntityId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="RuleId" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>eae677d0-9d4f-11d9-9669-0800200c9a66</ClassID></Native></ModuleImplementation><OutputType>SystemCenter!Microsoft.SystemCenter.Event.LinkedData</OutputType><InputTypes><InputType>System!System.Event.Data</InputType></InputTypes></ConditionDetectionModuleType><ConditionDetectionModuleType
ID="Microsoft.SystemCenter.DataWarehouse.Performance.LinkedDataMapper" Accessibility="Internal" Batching="false" Stateful="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagedEntityId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="RuleId" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>2566BCEB-BF6B-45D6-BA1A-F99E5CACB8B2</ClassID></Native></ModuleImplementation><OutputType>SystemCenter!Microsoft.SystemCenter.Performance.LinkedData</OutputType><InputTypes><InputType>Performance!System.Performance.Data</InputType></InputTypes></ConditionDetectionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.AlertDataWriter" Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataRoutingKey" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BulkInsertBatchSize" type="xsd:positiveInteger" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxBatchesToProcessBeforeMaintenanceCount" type="xsd:positiveInteger" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxExecutionAttemptCount" type="xsd:int" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ExecutionAttemptTimeoutIntervalSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" /></Configuration><OverrideableParameters><OverrideableParameter ID="MaxExecutionAttemptCount" Selector="$Config/MaxExecutionAttemptCount$" ParameterType="int" /><OverrideableParameter ID="ExecutionAttemptTimeoutIntervalSeconds" Selector="$Config/ExecutionAttemptTimeoutIntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="BulkInsertBatchSize" Selector="$Config/BulkInsertBatchSize$" ParameterType="int"
/><OverrideableParameter ID="MaxBatchesToProcessBeforeMaintenanceCount" Selector="$Config/MaxBatchesToProcessBeforeMaintenanceCount$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA"
TypeID="Microsoft.SystemCenter.DataWarehouse.AlertDataWriterInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><DataSetId>$MPElement[Name="Microsoft.SystemCenter.DataWarehouse.DataSet.Alert"]$</DataSetId><DataRoutingKey>$Config/DataRoutingKey$</DataRoutingKey><TableName>Alert.AlertStage</TableName><BulkInsertBatchSize>$Config/BulkInsertBatchSize$</BulkInsertBatchSize><MaxBatchesToProcessBeforeMaintenanceCount>$Config/MaxBatchesToProcessBeforeMaintenanceCount$</MaxBatchesToProcessBeforeMaintenanceCount><MaxExecutionAttemptCount>$Config/MaxExecutionAttemptCount$</MaxExecutionAttemptCount><ExecutionAttemptTimeoutIntervalSeconds>$Config/ExecutionAttemptTimeoutIntervalSeconds$</ExecutionAttemptTimeoutIntervalSeconds><SqlAuthentication><Login>$RunAs[Name="Microsoft.SystemCenter.DataWarehouse.SqlAuthenticationActionAccount"]/UserName$</Login><Password>$RunAs[Name="Microsoft.SystemCenter.DataWarehouse.SqlAuthenticationActionAccount"]/Password$</Password></SqlAuthentica
tion></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><InputType>SystemCenter!Microsoft.SystemCenter.DataItemAlertSubscription</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.AlertDataWriterDefaultRouting" Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BulkInsertBatchSize" type="xsd:positiveInteger" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxBatchesToProcessBeforeMaintenanceCount" type="xsd:positiveInteger" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxExecutionAttemptCount" type="xsd:int" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ExecutionAttemptTimeoutIntervalSeconds" type="xsd:int" minOccurs="0" maxOccurs="1"
/></Configuration><OverrideableParameters><OverrideableParameter ID="MaxExecutionAttemptCount" Selector="$Config/MaxExecutionAttemptCount$" ParameterType="int" /><OverrideableParameter ID="ExecutionAttemptTimeoutIntervalSeconds" Selector="$Config/ExecutionAttemptTimeoutIntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="BulkInsertBatchSize" Selector="$Config/BulkInsertBatchSize$" ParameterType="int" /><OverrideableParameter ID="MaxBatchesToProcessBeforeMaintenanceCount" Selector="$Config/MaxBatchesToProcessBeforeMaintenanceCount$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.DataWarehouse.AlertDataWriter"><DataRoutingKey
/><BulkInsertBatchSize>$Config/BulkInsertBatchSize$</BulkInsertBatchSize><MaxBatchesToProcessBeforeMaintenanceCount>$Config/MaxBatchesToProcessBeforeMaintenanceCount$</MaxBatchesToProcessBeforeMaintenanceCount><MaxExecutionAttemptCount>$Config/MaxExecutionAttemptCount$</MaxExecutionAttemptCount><ExecutionAttemptTimeoutIntervalSeconds>$Config/ExecutionAttemptTimeoutIntervalSeconds$</ExecutionAttemptTimeoutIntervalSeconds></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><InputType>SystemCenter!Microsoft.SystemCenter.DataItemAlertSubscription</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.AlertDataWriterInternal" Accessibility="Internal" RunAs="Microsoft.SystemCenter.DataWarehouse.ActionAccount" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Microsoft.SystemCenter.DataWarehouse.SqlAuthenticationSchema</SchemaType></IncludeSchemaTypes><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataSetId" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataRoutingKey" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TableName" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BulkInsertBatchSize" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxBatchesToProcessBeforeMaintenanceCount" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxExecutionAttemptCount" type="xsd:int" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="ExecutionAttemptTimeoutIntervalSeconds" type="xsd:int" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SqlAuthentication" type="SqlAuthenticationType" minOccurs="0" maxOccurs="1" /></Configuration><OverrideableParameters><OverrideableParameter ID="MaxExecutionAttemptCount" Selector="$Config/MaxExecutionAttemptCount$" ParameterType="int" /><OverrideableParameter ID="ExecutionAttemptTimeoutIntervalSeconds" Selector="$Config/ExecutionAttemptTimeoutIntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="BulkInsertBatchSize" Selector="$Config/BulkInsertBatchSize$" ParameterType="int" /><OverrideableParameter ID="MaxBatchesToProcessBeforeMaintenanceCount" Selector="$Config/MaxBatchesToProcessBeforeMaintenanceCount$" ParameterType="int" /></OverrideableParameters><ModuleImplementation
Isolation="Any"><Managed><Assembly>Res.Microsoft.SystemCenter.DataWarehouse.AlertDataWriterInternal</Assembly><Type>Microsoft.EnterpriseManagement.HealthService.Modules.DataWarehouse.AlertBulkInsertModule</Type></Managed></ModuleImplementation><InputType>SystemCenter!Microsoft.SystemCenter.DataItemAlertSubscription</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.BulkInsertBulkDataWriter" Accessibility="Public" RunAs="Microsoft.SystemCenter.DataWarehouse.ActionAccount" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Microsoft.SystemCenter.DataWarehouse.BulkDataWriterSchema</SchemaType><SchemaType>Microsoft.SystemCenter.DataWarehouse.SqlAuthenticationSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataSetId" type="xsd:string"
minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataRoutingKey" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BulkInsertBatchSize" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxBatchesToProcessBeforeMaintenanceCount" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TableName" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxExecutionAttemptCount" type="xsd:int" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ExecutionAttemptTimeoutIntervalSeconds" type="xsd:int" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataItemXPathIteratorExpression" type="xsd:string" minOccurs="0"
maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TableColumns" type="ColumnDefinitionsType" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SqlAuthentication" type="SqlAuthenticationType" minOccurs="0" maxOccurs="1" /></Configuration><OverrideableParameters><OverrideableParameter ID="MaxExecutionAttemptCount" Selector="$Config/MaxExecutionAttemptCount$" ParameterType="int" /><OverrideableParameter ID="ExecutionAttemptTimeoutIntervalSeconds" Selector="$Config/ExecutionAttemptTimeoutIntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="BulkInsertBatchSize" Selector="$Config/BulkInsertBatchSize$" ParameterType="int" /><OverrideableParameter ID="MaxBatchesToProcessBeforeMaintenanceCount" Selector="$Config/MaxBatchesToProcessBeforeMaintenanceCount$" ParameterType="int" /></OverrideableParameters><ModuleImplementation
Isolation="Any"><Managed><Assembly>Res.Microsoft.SystemCenter.DataWarehouse.BulkInsertBulkDataWriter</Assembly><Type>Microsoft.EnterpriseManagement.HealthService.Modules.DataWarehouse.BulkInsertModule</Type></Managed></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.EntityHealthStateChangeDataWriter" Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataRoutingKey" type="xsd:string" minOccurs="1" maxOccurs="1" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA"
TypeID="Microsoft.SystemCenter.DataWarehouse.BulkInsertBulkDataWriter"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><DataSetId>$MPElement[Name="Microsoft.SystemCenter.DataWarehouse.DataSet.State"]$</DataSetId><DataRoutingKey>$Config/DataRoutingKey$</DataRoutingKey><BulkInsertBatchSize>5000</BulkInsertBatchSize><MaxBatchesToProcessBeforeMaintenanceCount>50</MaxBatchesToProcessBeforeMaintenanceCount><TableName>State.StateStage</TableName><MaxExecutionAttemptCount>0</MaxExecutionAttemptCount><ExecutionAttemptTimeoutIntervalSeconds>0</ExecutionAttemptTimeoutIntervalSeconds><DataItemXPathIteratorExpression>DataItem/Changes/Change</DataItemXPathIteratorExpression><TableColumns><Column><Name>EventOriginId</Name><Type>Guid</Type><XPathExpression Target="DataItem">DataItem/ManagedEntity</XPathExpression><ValueProperty>Value</ValueProperty></Column><Column><Name>DateTime</Name><Type>DateTime</Type><XPathExpression
Target="Iterator">TimeChanged</XPathExpression><ValueProperty>Value</ValueProperty><AdditionalProcessing><DateTimeToSqlFormat /></AdditionalProcessing></Column><Column><Name>ManagedEntityGuid</Name><Type>Guid</Type><XPathExpression Target="DataItem">DataItem/ManagedEntity</XPathExpression><ValueProperty>Value</ValueProperty></Column><Column><Name>MonitorGuid</Name><Type>Guid</Type><XPathExpression Target="Iterator">MonitorId</XPathExpression><ValueProperty>Value</ValueProperty></Column><Column><Name>OldHealthState</Name><Type>Int</Type><XPathExpression Target="Iterator">OldHealthState</XPathExpression><ValueProperty>Value</ValueProperty></Column><Column><Name>NewHealthState</Name><Type>Int</Type><XPathExpression
Target="Iterator">NewHealthState</XPathExpression><ValueProperty>Value</ValueProperty></Column></TableColumns><SqlAuthentication><Login>$RunAs[Name="Microsoft.SystemCenter.DataWarehouse.SqlAuthenticationActionAccount"]/UserName$</Login><Password>$RunAs[Name="Microsoft.SystemCenter.DataWarehouse.SqlAuthenticationActionAccount"]/Password$</Password></SqlAuthentication></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.EntityHealthStateChangeDataWriterDefaultRouting" Accessibility="Public" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.DataWarehouse.EntityHealthStateChangeDataWriter"><DataRoutingKey /></WriteAction></MemberModules><Composition><Node ID="WA"
/></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.EventDataWriter" Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataRoutingKey" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BulkInsertBatchSize" type="xsd:positiveInteger" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxBatchesToProcessBeforeMaintenanceCount" type="xsd:positiveInteger" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxExecutionAttemptCount" type="xsd:int" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ExecutionAttemptTimeoutIntervalSeconds" type="xsd:int" minOccurs="0" maxOccurs="1"
/></Configuration><OverrideableParameters><OverrideableParameter ID="MaxExecutionAttemptCount" Selector="$Config/MaxExecutionAttemptCount$" ParameterType="int" /><OverrideableParameter ID="ExecutionAttemptTimeoutIntervalSeconds" Selector="$Config/ExecutionAttemptTimeoutIntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="BulkInsertBatchSize" Selector="$Config/BulkInsertBatchSize$" ParameterType="int" /><OverrideableParameter ID="MaxBatchesToProcessBeforeMaintenanceCount" Selector="$Config/MaxBatchesToProcessBeforeMaintenanceCount$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA"
TypeID="Microsoft.SystemCenter.DataWarehouse.EventDataWriterInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><DataSetId>$MPElement[Name="Microsoft.SystemCenter.DataWarehouse.DataSet.Event"]$</DataSetId><DataRoutingKey>$Config/DataRoutingKey$</DataRoutingKey><TableName>Event.EventStage</TableName><BulkInsertBatchSize>$Config/BulkInsertBatchSize$</BulkInsertBatchSize><MaxBatchesToProcessBeforeMaintenanceCount>$Config/MaxBatchesToProcessBeforeMaintenanceCount$</MaxBatchesToProcessBeforeMaintenanceCount><MaxExecutionAttemptCount>$Config/MaxExecutionAttemptCount$</MaxExecutionAttemptCount><ExecutionAttemptTimeoutIntervalSeconds>$Config/ExecutionAttemptTimeoutIntervalSeconds$</ExecutionAttemptTimeoutIntervalSeconds><SqlAuthentication><Login>$RunAs[Name="Microsoft.SystemCenter.DataWarehouse.SqlAuthenticationActionAccount"]/UserName$</Login><Password>$RunAs[Name="Microsoft.SystemCenter.DataWarehouse.SqlAuthenticationActionAccount"]/Password$</Password></SqlAuthentica
tion></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><InputType>SystemCenter!Microsoft.SystemCenter.Event.LinkedData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.EventDataWriterDefaultRouting" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BulkInsertBatchSize" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxBatchesToProcessBeforeMaintenanceCount" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxExecutionAttemptCount" type="xsd:int" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ExecutionAttemptTimeoutIntervalSeconds" type="xsd:int" minOccurs="1" maxOccurs="1"
/></Configuration><OverrideableParameters><OverrideableParameter ID="MaxExecutionAttemptCount" Selector="$Config/MaxExecutionAttemptCount$" ParameterType="int" /><OverrideableParameter ID="ExecutionAttemptTimeoutIntervalSeconds" Selector="$Config/ExecutionAttemptTimeoutIntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="BulkInsertBatchSize" Selector="$Config/BulkInsertBatchSize$" ParameterType="int" /><OverrideableParameter ID="MaxBatchesToProcessBeforeMaintenanceCount" Selector="$Config/MaxBatchesToProcessBeforeMaintenanceCount$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.DataWarehouse.EventDataWriter"><DataRoutingKey
/><BulkInsertBatchSize>$Config/BulkInsertBatchSize$</BulkInsertBatchSize><MaxBatchesToProcessBeforeMaintenanceCount>$Config/MaxBatchesToProcessBeforeMaintenanceCount$</MaxBatchesToProcessBeforeMaintenanceCount><MaxExecutionAttemptCount>$Config/MaxExecutionAttemptCount$</MaxExecutionAttemptCount><ExecutionAttemptTimeoutIntervalSeconds>$Config/ExecutionAttemptTimeoutIntervalSeconds$</ExecutionAttemptTimeoutIntervalSeconds></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><InputType>SystemCenter!Microsoft.SystemCenter.Event.LinkedData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.EventDataWriterInternal" Accessibility="Internal" RunAs="Microsoft.SystemCenter.DataWarehouse.ActionAccount" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Microsoft.SystemCenter.DataWarehouse.SqlAuthenticationSchema</SchemaType></IncludeSchemaTypes><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataSetId" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataRoutingKey" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TableName" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BulkInsertBatchSize" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxBatchesToProcessBeforeMaintenanceCount" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxExecutionAttemptCount" type="xsd:int" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="ExecutionAttemptTimeoutIntervalSeconds" type="xsd:int" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SqlAuthentication" type="SqlAuthenticationType" minOccurs="0" maxOccurs="1" /></Configuration><OverrideableParameters><OverrideableParameter ID="MaxExecutionAttemptCount" Selector="$Config/MaxExecutionAttemptCount$" ParameterType="int" /><OverrideableParameter ID="ExecutionAttemptTimeoutIntervalSeconds" Selector="$Config/ExecutionAttemptTimeoutIntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="BulkInsertBatchSize" Selector="$Config/BulkInsertBatchSize$" ParameterType="int" /><OverrideableParameter ID="MaxBatchesToProcessBeforeMaintenanceCount" Selector="$Config/MaxBatchesToProcessBeforeMaintenanceCount$" ParameterType="int" /></OverrideableParameters><ModuleImplementation
Isolation="Any"><Managed><Assembly>Res.Microsoft.SystemCenter.DataWarehouse.EventDataWriterInternal</Assembly><Type>Microsoft.EnterpriseManagement.HealthService.Modules.DataWarehouse.EventBulkInsertModule</Type></Managed></ModuleImplementation><InputType>SystemCenter!Microsoft.SystemCenter.Event.LinkedData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.PerformanceDataWriter" Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataRoutingKey" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BulkInsertBatchSize" type="xsd:positiveInteger" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxBatchesToProcessBeforeMaintenanceCount" type="xsd:positiveInteger" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="MaxExecutionAttemptCount" type="xsd:int" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ExecutionAttemptTimeoutIntervalSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" /></Configuration><OverrideableParameters><OverrideableParameter ID="MaxExecutionAttemptCount" Selector="$Config/MaxExecutionAttemptCount$" ParameterType="int" /><OverrideableParameter ID="ExecutionAttemptTimeoutIntervalSeconds" Selector="$Config/ExecutionAttemptTimeoutIntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="BulkInsertBatchSize" Selector="$Config/BulkInsertBatchSize$" ParameterType="int" /><OverrideableParameter ID="MaxBatchesToProcessBeforeMaintenanceCount" Selector="$Config/MaxBatchesToProcessBeforeMaintenanceCount$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA"
TypeID="Microsoft.SystemCenter.DataWarehouse.PerformanceDataWriterInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><DataSetId>$MPElement[Name="Microsoft.SystemCenter.DataWarehouse.DataSet.Performance"]$</DataSetId><DataRoutingKey>$Config/DataRoutingKey$</DataRoutingKey><TableName>Perf.PerformanceStage</TableName><BulkInsertBatchSize>$Config/BulkInsertBatchSize$</BulkInsertBatchSize><MaxBatchesToProcessBeforeMaintenanceCount>$Config/MaxBatchesToProcessBeforeMaintenanceCount$</MaxBatchesToProcessBeforeMaintenanceCount><MaxExecutionAttemptCount>$Config/MaxExecutionAttemptCount$</MaxExecutionAttemptCount><ExecutionAttemptTimeoutIntervalSeconds>$Config/ExecutionAttemptTimeoutIntervalSeconds$</ExecutionAttemptTimeoutIntervalSeconds><SqlAuthentication><Login>$RunAs[Name="Microsoft.SystemCenter.DataWarehouse.SqlAuthenticationActionAccount"]/UserName$</Login><Password>$RunAs[Name="Microsoft.SystemCenter.DataWarehouse.SqlAuthenticationActionAccount"]/Password$</Passwor
d></SqlAuthentication></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><InputType>SystemCenter!Microsoft.SystemCenter.Performance.LinkedData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.PerformanceDataWriterDefaultRouting" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BulkInsertBatchSize" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxBatchesToProcessBeforeMaintenanceCount" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxExecutionAttemptCount" type="xsd:int" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ExecutionAttemptTimeoutIntervalSeconds" type="xsd:int" minOccurs="1" maxOccurs="1"
/></Configuration><OverrideableParameters><OverrideableParameter ID="MaxExecutionAttemptCount" Selector="$Config/MaxExecutionAttemptCount$" ParameterType="int" /><OverrideableParameter ID="ExecutionAttemptTimeoutIntervalSeconds" Selector="$Config/ExecutionAttemptTimeoutIntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="BulkInsertBatchSize" Selector="$Config/BulkInsertBatchSize$" ParameterType="int" /><OverrideableParameter ID="MaxBatchesToProcessBeforeMaintenanceCount" Selector="$Config/MaxBatchesToProcessBeforeMaintenanceCount$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.DataWarehouse.PerformanceDataWriter"><DataRoutingKey
/><BulkInsertBatchSize>$Config/BulkInsertBatchSize$</BulkInsertBatchSize><MaxBatchesToProcessBeforeMaintenanceCount>$Config/MaxBatchesToProcessBeforeMaintenanceCount$</MaxBatchesToProcessBeforeMaintenanceCount><MaxExecutionAttemptCount>$Config/MaxExecutionAttemptCount$</MaxExecutionAttemptCount><ExecutionAttemptTimeoutIntervalSeconds>$Config/ExecutionAttemptTimeoutIntervalSeconds$</ExecutionAttemptTimeoutIntervalSeconds></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><InputType>SystemCenter!Microsoft.SystemCenter.Performance.LinkedData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.PerformanceDataWriterInternal" Accessibility="Internal" RunAs="Microsoft.SystemCenter.DataWarehouse.ActionAccount" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Microsoft.SystemCenter.DataWarehouse.SqlAuthenticationSchema</SchemaType></IncludeSchemaTypes><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataSetId" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataRoutingKey" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TableName" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BulkInsertBatchSize" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxBatchesToProcessBeforeMaintenanceCount" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxExecutionAttemptCount" type="xsd:int" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="ExecutionAttemptTimeoutIntervalSeconds" type="xsd:int" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SqlAuthentication" type="SqlAuthenticationType" minOccurs="0" maxOccurs="1" /></Configuration><OverrideableParameters><OverrideableParameter ID="MaxExecutionAttemptCount" Selector="$Config/MaxExecutionAttemptCount$" ParameterType="int" /><OverrideableParameter ID="ExecutionAttemptTimeoutIntervalSeconds" Selector="$Config/ExecutionAttemptTimeoutIntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="BulkInsertBatchSize" Selector="$Config/BulkInsertBatchSize$" ParameterType="int" /><OverrideableParameter ID="MaxBatchesToProcessBeforeMaintenanceCount" Selector="$Config/MaxBatchesToProcessBeforeMaintenanceCount$" ParameterType="int" /></OverrideableParameters><ModuleImplementation
Isolation="Any"><Managed><Assembly>Res.Microsoft.SystemCenter.DataWarehouse.PerformanceDataWriterInternal</Assembly><Type>Microsoft.EnterpriseManagement.HealthService.Modules.DataWarehouse.PerformanceBulkInsertModule</Type></Managed></ModuleImplementation><InputType>SystemCenter!Microsoft.SystemCenter.Performance.LinkedData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.PublishEntityHealthStateChange" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.DataWarehouse.PublishEntityHealthStateChangeCustomChannel"><ChannelId>A91E7510-80F4-4da4-AC6E-58587F2E70B1</ChannelId></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><InputType>Health!System.Health.EntityStateChangeData</InputType></WriteActionModuleType><WriteActionModuleType
ID="Microsoft.SystemCenter.DataWarehouse.PublishEntityHealthStateChangeCustomChannel" Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" minOccurs="1" maxOccurs="1" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA" TypeID="System!System.PublishData"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>$Config/ChannelId$</ChannelId></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><InputType>Health!System.Health.EntityStateChangeData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.PublishEventData" Accessibility="Public" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Mapper"
TypeID="Microsoft.SystemCenter.DataWarehouse.Event.LinkedDataMapper"><ManagedEntityId>$Target/Id$</ManagedEntityId><RuleId>$MPElement$</RuleId></ConditionDetection><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.DataWarehouse.PublishEventDataCustomChannel"><ChannelId>0F4C0747-D344-4880-9EE3-A726BFC1D79A</ChannelId></WriteAction></MemberModules><Composition><Node ID="WA"><Node ID="Mapper" /></Node></Composition></Composite></ModuleImplementation><InputType>System!System.Event.Data</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.PublishEventDataCustomChannel" Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" minOccurs="1" maxOccurs="1" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA"
TypeID="System!System.PublishData"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>$Config/ChannelId$</ChannelId></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><InputType>SystemCenter!Microsoft.SystemCenter.Event.LinkedData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" Accessibility="Public" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="Mapper" TypeID="Microsoft.SystemCenter.DataWarehouse.Performance.LinkedDataMapper"><ManagedEntityId>$Target/Id$</ManagedEntityId><RuleId>$MPElement$</RuleId></ConditionDetection><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.DataWarehouse.PublishPerformanceDataCustomChannel"><ChannelId>63AFB62D-3376-4102-B6EE-9E88EA49AC46</ChannelId></WriteAction></MemberModules><Composition><Node ID="WA"><Node ID="Mapper"
/></Node></Composition></Composite></ModuleImplementation><InputType>Performance!System.Performance.Data</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.PublishPerformanceDataCustomChannel" Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" minOccurs="1" maxOccurs="1" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA" TypeID="System!System.PublishData"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>$Config/ChannelId$</ChannelId></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><InputType>SystemCenter!Microsoft.SystemCenter.Performance.LinkedData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DataWarehouse.XmlBulkDataWriter" Accessibility="Public"
RunAs="Microsoft.SystemCenter.DataWarehouse.ActionAccount" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>Microsoft.SystemCenter.DataWarehouse.BulkDataWriterSchema</SchemaType><SchemaType>Microsoft.SystemCenter.DataWarehouse.SqlAuthenticationSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataSetId" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataRoutingKey" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="StoredProcedureName" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MaxExecutionAttemptCount" type="xsd:int" minOccurs="1" maxOccurs="1" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ExecutionAttemptTimeoutIntervalSeconds" type="xsd:int" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DataItemXPathIteratorExpression" type="xsd:string" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="XmlElements" type="XmlElementsType" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SqlAuthentication" type="SqlAuthenticationType" minOccurs="0" maxOccurs="1" /></Configuration><OverrideableParameters><OverrideableParameter ID="MaxExecutionAttemptCount" Selector="$Config/MaxExecutionAttemptCount$" ParameterType="int" /><OverrideableParameter ID="ExecutionAttemptTimeoutIntervalSeconds" Selector="$Config/ExecutionAttemptTimeoutIntervalSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation
Isolation="Any"><Managed><Assembly>Res.Microsoft.SystemCenter.DataWarehouse.XmlBulkDataWriter</Assembly><Type>Microsoft.EnterpriseManagement.HealthService.Modules.DataWarehouse.XmlBulkWriterModule</Type></Managed></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType></ModuleTypes><MonitorTypes><UnitMonitorType ID="Microsoft.SystemCenter.DataWarehouse.2SingleEventLog2StateUnitMonitorType" Accessibility="Public"><MonitorTypeStates><MonitorTypeState ID="FirstEventRaised" NoDetection="false" /><MonitorTypeState ID="SecondEventRaised" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="WorkflowName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="FirstEventId" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SecondEventId" type="xsd:int" /></Configuration><MonitorImplementation><MemberModules><DataSource
ID="FirstDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><DataSource ID="SecondDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><ConditionDetection ID="FirstFilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">$Config/FirstEventId$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[2]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/WorkflowName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="SecondFilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">$Config/SecondEventId$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[2]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/WorkflowName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="FirstEventRaised"><Node ID="FirstFilterCondition"><Node ID="FirstDataSource" /></Node></RegularDetection><RegularDetection MonitorTypeStateID="SecondEventRaised"><Node ID="SecondFilterCondition"><Node ID="SecondDataSource" /></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.DataWarehouse.2SingleEventLogTimed2StateUnitMonitorType" Accessibility="Public"><MonitorTypeStates><MonitorTypeState ID="SecondEventRaised" NoDetection="false"
/><MonitorTypeState ID="FirstEventRaisedAndNoSecondEventRaisedInTimeInterval" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="WorkflowName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="FirstEventId" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SecondEventId" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeIntervalSeconds" type="xsd:int" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeIntervalSeconds" Selector="$Config/TimeIntervalSeconds$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="SecondDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><DataSource ID="CorrelatorFirstDataSource"
TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><DataSource ID="CorrelatorSecondDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><ConditionDetection ID="CorrelatorFirstFilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">$Config/FirstEventId$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[2]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/WorkflowName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="CorrelatorSecondFilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">$Config/SecondEventId$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[2]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/WorkflowName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="SecondFilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">$Config/SecondEventId$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[2]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/WorkflowName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="MissingEventCorrelator" TypeID="System!System.CorrelatorAutoMissingCondition"><Correlator><CorrelationExpression /><Count>1</Count><Interval>$Config/TimeIntervalSeconds$</Interval><CorrelationOrder>InSequence</CorrelationOrder><CorrelationItemPolicy>First</CorrelationItemPolicy></Correlator></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="SecondEventRaised"><Node ID="SecondFilterCondition"><Node ID="SecondDataSource" /></Node></RegularDetection><RegularDetection
MonitorTypeStateID="FirstEventRaisedAndNoSecondEventRaisedInTimeInterval"><Node ID="MissingEventCorrelator"><Node ID="CorrelatorFirstFilterCondition"><Node ID="CorrelatorFirstDataSource" /></Node><Node ID="CorrelatorSecondFilterCondition"><Node ID="CorrelatorSecondDataSource" /></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.DataWarehouse.3SingleEventLog3StateUnitMonitorType" Accessibility="Public"><MonitorTypeStates><MonitorTypeState ID="FirstEventRaised" NoDetection="false" /><MonitorTypeState ID="SecondEventRaised" NoDetection="false" /><MonitorTypeState ID="ThirdEventRaised" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="WorkflowName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="FirstEventId" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="SecondEventId" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ThirdEventId" type="xsd:int" /></Configuration><MonitorImplementation><MemberModules><DataSource ID="FirstDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><DataSource ID="SecondDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><DataSource ID="ThirdDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><ConditionDetection ID="FirstFilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="Integer">$Config/FirstEventId$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[2]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/WorkflowName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="SecondFilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="Integer">$Config/SecondEventId$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[2]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/WorkflowName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="ThirdFilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="Integer">$Config/ThirdEventId$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[2]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/WorkflowName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="FirstEventRaised"><Node ID="FirstFilterCondition"><Node ID="FirstDataSource" /></Node></RegularDetection><RegularDetection MonitorTypeStateID="SecondEventRaised"><Node ID="SecondFilterCondition"><Node ID="SecondDataSource"
/></Node></RegularDetection><RegularDetection MonitorTypeStateID="ThirdEventRaised"><Node ID="ThirdFilterCondition"><Node ID="ThirdDataSource" /></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.DataWarehouse.DataCollectionSlowdownUnitMonitorType" Accessibility="Public"><MonitorTypeStates><MonitorTypeState ID="CollectionUpToSpeed" NoDetection="false" /><MonitorTypeState ID="CollectionSlow" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="WorkflowName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AllowedProcessingDelaySeconds" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="WatchWindowSeconds" type="xsd:int" /></Configuration><OverrideableParameters><OverrideableParameter ID="AllowedProcessingDelaySeconds" Selector="$Config/AllowedProcessingDelaySeconds$"
ParameterType="int" /><OverrideableParameter ID="WatchWindowSeconds" Selector="$Config/WatchWindowSeconds$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><ProbeAction ID="OnDemandReset" TypeID="System!System.PassThroughProbe" /><ConditionDetection ID="FilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">2115</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[2]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/WorkflowName$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Params/Param[5]</XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value Type="Integer">$Config/AllowedProcessingDelaySeconds$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="TimerCondition" TypeID="System!System.TimerCondition"><TimerWaitInSeconds>$Config/WatchWindowSeconds$</TimerWaitInSeconds></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="CollectionSlow"><Node ID="FilterCondition"><Node ID="DataSource"
/></Node></RegularDetection><RegularDetection MonitorTypeStateID="CollectionUpToSpeed"><Node ID="TimerCondition"><Node ID="FilterCondition"><Node ID="DataSource" /></Node></Node></RegularDetection></RegularDetections><OnDemandDetections><OnDemandDetection MonitorTypeStateID="CollectionUpToSpeed"><Node ID="OnDemandReset" /></OnDemandDetection></OnDemandDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.DataWarehouse.WorkflowSqlServerAuthUnitMonitorType" Accessibility="Public"><MonitorTypeStates><MonitorTypeState ID="ConfigReloadRequested" NoDetection="false" /><MonitorTypeState ID="SqlAuthProfileEmptyEventRaised" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="WorkflowName" type="xsd:string" /></Configuration><MonitorImplementation><MemberModules><DataSource ID="EventDataSource"
TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><ConditionDetection ID="FirstFilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">1205</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">21025</Value></ValueExpression></SimpleExpression></Expression></Or></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="SecondFilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">1107</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[4]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">$Config/WorkflowName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="ConfigReloadRequested"><Node ID="FirstFilterCondition"><Node ID="EventDataSource" /></Node></RegularDetection><RegularDetection MonitorTypeStateID="SqlAuthProfileEmptyEventRaised"><Node ID="SecondFilterCondition"><Node ID="EventDataSource" /></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.DataWarehouse.DatasetRelatedFirstChanceUnitMonitorType" Accessibility="Public"><MonitorTypeStates><MonitorTypeState ID="FirstEventRaised" NoDetection="false" /><MonitorTypeState ID="SecondEventRaised" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="WorkflowName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="DatasetName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="FirstEventId" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SecondEventId" type="xsd:int" /></Configuration><MonitorImplementation><MemberModules><DataSource ID="FirstDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><DataSource ID="SecondDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><ConditionDetection ID="FirstFilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="Integer">$Config/FirstEventId$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[2]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/WorkflowName$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[3]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/DatasetName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="SecondFilterCondition"
TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">$Config/SecondEventId$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[2]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/WorkflowName$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="String">Params/Param[3]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/DatasetName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="FirstEventRaised"><Node ID="FirstFilterCondition"><Node ID="FirstDataSource" /></Node></RegularDetection><RegularDetection MonitorTypeStateID="SecondEventRaised"><Node ID="SecondFilterCondition"><Node ID="SecondDataSource" /></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.SystemCenter.DataWarehouse.DatasetRelatedRecoveryUnitMonitorType" Accessibility="Public"><MonitorTypeStates><MonitorTypeState ID="SecondEventRaised" NoDetection="false" /><MonitorTypeState ID="FirstEventRaisedAndNoSecondEventRaisedInTimeInterval" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="WorkflowName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatasetName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="FirstEventId" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SecondEventId" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeIntervalSeconds" type="xsd:int" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeIntervalSeconds" Selector="$Config/TimeIntervalSeconds$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="SecondDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><DataSource ID="CorrelatorFirstDataSource"
TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><DataSource ID="CorrelatorSecondDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName></DataSource><ConditionDetection ID="CorrelatorFirstFilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">$Config/FirstEventId$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[2]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/WorkflowName$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[3]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/DatasetName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="CorrelatorSecondFilterCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="Integer">$Config/SecondEventId$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[2]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/WorkflowName$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[3]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/DatasetName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="SecondFilterCondition"
TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">$Config/SecondEventId$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/ManagementGroup/Name$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[2]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/WorkflowName$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="String">Params/Param[3]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/DatasetName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="MissingEventCorrelator" TypeID="System!System.CorrelatorAutoMissingCondition"><Correlator><CorrelationExpression /><Count>1</Count><Interval>$Config/TimeIntervalSeconds$</Interval><CorrelationOrder>InSequence</CorrelationOrder><CorrelationItemPolicy>First</CorrelationItemPolicy></Correlator></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="SecondEventRaised"><Node ID="SecondFilterCondition"><Node ID="SecondDataSource" /></Node></RegularDetection><RegularDetection MonitorTypeStateID="FirstEventRaisedAndNoSecondEventRaisedInTimeInterval"><Node ID="MissingEventCorrelator"><Node ID="CorrelatorFirstFilterCondition"><Node ID="CorrelatorFirstDataSource" /></Node><Node
ID="CorrelatorSecondFilterCondition"><Node ID="CorrelatorSecondDataSource" /></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType></MonitorTypes></TypeDefinitions><Monitoring><Rules><Rule ID="Microsoft.SystemCenter.DataWarehouse.CollectEntityHealthStateChange" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="30"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.SystemCenter.DataWarehouse.PublishedEntityHealthStateChangeProvider"><DropItems>true</DropItems><QueueDataOnStall>false</QueueDataOnStall><QueueDataStallInterval>PT2M</QueueDataStallInterval><StalledDataQueueSizeMB>100</StalledDataQueueSizeMB></DataSource></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.DataWarehouse.EntityHealthStateChangeDataWriterDefaultRouting" Target="Microsoft.SystemCenter.DataWarehouseConnectorServer"
/></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.DataWarehouse.CollectEventData" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="60"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.SystemCenter.DataWarehouse.PublishedEventDataProvider"><DropItems>true</DropItems><QueueDataOnStall>false</QueueDataOnStall><QueueDataStallInterval>PT2M</QueueDataStallInterval><StalledDataQueueSizeMB>100</StalledDataQueueSizeMB></DataSource></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.DataWarehouse.EventDataWriterDefaultRouting"
Target="Microsoft.SystemCenter.DataWarehouseConnectorServer"><BulkInsertBatchSize>1000</BulkInsertBatchSize><MaxBatchesToProcessBeforeMaintenanceCount>50</MaxBatchesToProcessBeforeMaintenanceCount><MaxExecutionAttemptCount>0</MaxExecutionAttemptCount><ExecutionAttemptTimeoutIntervalSeconds>0</ExecutionAttemptTimeoutIntervalSeconds></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.DataWarehouse.CollectPerformanceData" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="90"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.SystemCenter.DataWarehouse.PublishedPerformanceDataProvider"><DropItems>true</DropItems><QueueDataOnStall>false</QueueDataOnStall><QueueDataStallInterval>PT2M</QueueDataStallInterval><StalledDataQueueSizeMB>100</StalledDataQueueSizeMB></DataSource></DataSources><WriteActions><WriteAction ID="WA"
TypeID="Microsoft.SystemCenter.DataWarehouse.PerformanceDataWriterDefaultRouting" Target="Microsoft.SystemCenter.DataWarehouseConnectorServer"><BulkInsertBatchSize>5000</BulkInsertBatchSize><MaxBatchesToProcessBeforeMaintenanceCount>200</MaxBatchesToProcessBeforeMaintenanceCount><MaxExecutionAttemptCount>0</MaxExecutionAttemptCount><ExecutionAttemptTimeoutIntervalSeconds>0</ExecutionAttemptTimeoutIntervalSeconds></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.DataWarehouse.PublishEntityHealthStateChangeForCollection" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Health!System.Health.TargetGroupEntityStateChangeProvider" /></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.DataWarehouse.PublishEntityHealthStateChange"
/></WriteActions></Rule></Rules><Monitors><AggregateMonitor ID="Microsoft.SystemCenter.DataWarehouse.ManagementServer.Collection.Performance.Rollup" Accessibility="Public" Enabled="true" Target="Microsoft.SystemCenter.DataWarehouseConnectorServer" ParentMonitorID="Microsoft.SystemCenter.DataWarehouse.ManagementServer.Performance.Rollup" Remotable="true" Priority="Normal"><Category>StateCollection</Category><Algorithm>WorstOf</Algorithm></AggregateMonitor><AggregateMonitor ID="Microsoft.SystemCenter.DataWarehouse.ManagementServer.Collection.Rollup" Accessibility="Public" Enabled="true" Target="Microsoft.SystemCenter.DataWarehouseConnectorServer" ParentMonitorID="Microsoft.SystemCenter.DataWarehouse.ManagementServer.Rollup" Remotable="true" Priority="Normal"><Category>StateCollection</Category><Algorithm>WorstOf</Algorithm></AggregateMonitor><AggregateMonitor ID="Microsoft.SystemCenter.DataWarehouse.ManagementServer.Maintenance.Rollup" Accessibility="Public" Enabled="true"
Target="SystemCenter!Microsoft.SystemCenter.ManagementServer" ParentMonitorID="Microsoft.SystemCenter.DataWarehouse.ManagementServer.Rollup" Remotable="true" Priority="Normal"><Category>StateCollection</Category><Algorithm>WorstOf</Algorithm></AggregateMonitor><AggregateMonitor ID="Microsoft.SystemCenter.DataWarehouse.ManagementServer.DedicatedMaintenance.Rollup" Accessibility="Public" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.ManagementServer" ParentMonitorID="Microsoft.SystemCenter.DataWarehouse.ManagementServer.Maintenance.Rollup" Remotable="true" Priority="Normal"><Category>StateCollection</Category><Algorithm>WorstOf</Algorithm></AggregateMonitor><AggregateMonitor ID="Microsoft.SystemCenter.DataWarehouse.ManagementServer.WriterMaintenance.Rollup" Accessibility="Public" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.ManagementServer" ParentMonitorID="Microsoft.SystemCenter.DataWarehouse.ManagementServer.Maintenance.Rollup" Remotable="true"
Priority="Normal"><Category>StateCollection</Category><Algorithm>WorstOf</Algorithm></AggregateMonitor><AggregateMonitor ID="Microsoft.SystemCenter.DataWarehouse.ManagementServer.Performance.Rollup" Accessibility="Public" Enabled="true" Target="Microsoft.SystemCenter.DataWarehouseConnectorServer" ParentMonitorID="Health!System.Health.PerformanceState" Remotable="true" Priority="Normal"><Category>StateCollection</Category><Algorithm>WorstOf</Algorithm></AggregateMonitor><AggregateMonitor ID="Microsoft.SystemCenter.DataWarehouse.ManagementServer.Rollup" Accessibility="Public" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.ManagementServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal"><Category>StateCollection</Category><Algorithm>WorstOf</Algorithm></AggregateMonitor></Monitors><Overrides><RuleConfigurationOverride ID="Microsoft.SystemCenter.DataWarehouse.EnableServerEntityHealthStateDataStallHandling"
Context="Microsoft.SystemCenter.DataWarehouseConnectorServer" Enforced="false" Rule="Microsoft.SystemCenter.DataWarehouse.CollectEntityHealthStateChange" Parameter="QueueDataOnStall" Module="DS"><Value>true</Value></RuleConfigurationOverride><RuleConfigurationOverride ID="Microsoft.SystemCenter.DataWarehouse.EnableServerEventDataStallHandling" Context="Microsoft.SystemCenter.DataWarehouseConnectorServer" Enforced="false" Rule="Microsoft.SystemCenter.DataWarehouse.CollectEventData" Parameter="QueueDataOnStall" Module="DS"><Value>true</Value></RuleConfigurationOverride><RuleConfigurationOverride ID="Microsoft.SystemCenter.DataWarehouse.EnableServerPerformanceDataStallHandling" Context="Microsoft.SystemCenter.DataWarehouseConnectorServer" Enforced="false" Rule="Microsoft.SystemCenter.DataWarehouse.CollectPerformanceData" Parameter="QueueDataOnStall" Module="DS"><Value>true</Value></RuleConfigurationOverride></Overrides></Monitoring><Presentation><StringResources><StringResource
ID="Microsoft.SystemCenter.DataWarehouse.DataSet.Alert.DefaultConfiguration" /><StringResource ID="Microsoft.SystemCenter.DataWarehouse.DataSet.Event.DefaultConfiguration" /><StringResource ID="Microsoft.SystemCenter.DataWarehouse.DataSet.Performance.DefaultConfiguration" /><StringResource ID="Microsoft.SystemCenter.DataWarehouse.DataSet.State.DefaultConfiguration" /></StringResources></Presentation><Reporting><DataWarehouseScripts><DataWarehouseScript ID="Microsoft.SystemCenter.DataWarehouse.Script.DatasetDebuggingSupport" Accessibility="Public"><InstallScript>Res.Microsoft.SystemCenter.DataWarehouse.Script.DatasetDebuggingSupport.Install</InstallScript><UninstallScript>Res.Microsoft.SystemCenter.DataWarehouse.Script.DatasetDebuggingSupport.Uninstall</UninstallScript><UpgradeScript>Res.Microsoft.SystemCenter.DataWarehouse.Script.DatasetDebuggingSupport.Upgrade</UpgradeScript></DataWarehouseScript><DataWarehouseScript ID="Microsoft.SystemCenter.DataWarehouse.Script.MemberDatabase"
Accessibility="Internal"><InstallScript>Res.Microsoft.SystemCenter.DataWarehouse.Script.MemberDatabase.Install</InstallScript><UninstallScript>Res.Microsoft.SystemCenter.DataWarehouse.Script.MemberDatabase.Uninstall</UninstallScript><UpgradeScript>Res.Microsoft.SystemCenter.DataWarehouse.Script.MemberDatabase.Upgrade</UpgradeScript></DataWarehouseScript><DataWarehouseScript ID="Microsoft.SystemCenter.DataWarehouse.Script.StandardDatasetSupport" Accessibility="Public"><InstallScript>Res.Microsoft.SystemCenter.DataWarehouse.Script.StandardDatasetSupport.Install</InstallScript><UninstallScript>Res.Microsoft.SystemCenter.DataWarehouse.Script.StandardDatasetSupport.Uninstall</UninstallScript><UpgradeScript>Res.Microsoft.SystemCenter.DataWarehouse.Script.StandardDatasetSupport.Upgrade</UpgradeScript></DataWarehouseScript></DataWarehouseScripts><DataWarehouseDataSets><DataWarehouseDataSet ID="Microsoft.SystemCenter.DataWarehouse.DataSet.Alert"
Accessibility="Public"><Dependencies><DataWarehouseScript>Microsoft.SystemCenter.DataWarehouse.Script.DatasetDebuggingSupport</DataWarehouseScript><DataWarehouseScript>Microsoft.SystemCenter.DataWarehouse.Script.StandardDatasetSupport</DataWarehouseScript></Dependencies><Configuration><IncludeSchemaTypes><SchemaType>Microsoft.SystemCenter.DataWarehouse.StandardDatasetSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Storage" type="AggregationSettingsType" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="RawInsertTableCount" type="xsd:positiveInteger" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BlockingMaintenanceDailyStartTime" type="TimeOfDayType" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BlockingMaintenanceDurationMinutes" type="xsd:positiveInteger" /></Configuration><Install> 
                    SET NOCOUNT ON
EXEC StandardDatasetDelete @DatasetId = '$Config/DatasetId$'
GO
INSERT StandardDataset (
   DatasetId 
  ,SchemaName
  ,DefaultAggregationIntervalCount
  ,RawInsertTableCount
  ,StagingProcessorStoredProcedureName
  ,BlockingMaintenanceDailyStartTime
  ,BlockingMaintenanceDurationMinutes
)
VALUES
(
   '$Config/DatasetId$'
  ,'Alert'
  ,0
  ,$Config/RawInsertTableCount$
  ,'AlertProcessStaging'
  ,'$Config/BlockingMaintenanceDailyStartTime$'
  ,$Config/BlockingMaintenanceDurationMinutes$
)
GO
 
                    SET NOCOUNT ON
INSERT StandardDatasetAggregation
(                               
   DatasetId
  ,AggregationTypeId
  ,AggregationIntervalDurationMinutes
  ,AggregationStartDelayMinutes
  ,BuildAggregationStoredProcedureName
  ,DeleteAggregationStoredProcedureName
  ,GroomStoredProcedureName
  ,IndexOptimizationIntervalMinutes
  ,MaxDataAgeDays
  ,GroomingIntervalMinutes
  ,MaxRowsToGroom
  ,LastGroomingDateTime
  ,DataFileGroupName
  ,IndexFileGroupName
)
VALUES (
   '$Config/DatasetId$'
  ,0
  ,NULL
  ,NULL
  ,NULL
  ,NULL
  ,'AlertGroom'
  ,$Config/Storage/IndexOptimizationIntervalMinutes$
  ,$Config/Storage/MaxDataAgeDays$
  ,$Config/Storage/GroomingIntervalMinutes$
  ,$Config/Storage/MaxRowsToGroom$
  ,GETUTCDATE()
  ,ISNULL(CAST(NULLIF('$Config/Storage/DataFileGroupName$', '') AS sysname), 'default')
  ,ISNULL(CAST(NULLIF('$Config/Storage/IndexFileGroupName$', '') AS sysname), 'default')
)
GO
                    SET NOCOUNT ON
DECLARE
   @MaxTableRowCount    int
  ,@MaxTableSizeKb      int
  
SELECT
   @MaxTableSizeKb = NULLIF('$Config/Storage/MaxTableSizeKb$', '')
  ,@MaxTableRowCount = NULLIF('$Config/Storage/MaxTableRowCount$', '')
  
INSERT StandardDatasetAggregationStorage
(                               
   DatasetId
  ,AggregationTypeId
  ,BaseTableName
  ,DependentTableInd
  ,TableTemplate
  ,CoverViewSelectClause
  ,MaxTableRowCount
  ,MaxTableSizeKb 
)
VALUES
(
   '$Config/DatasetId$'
  ,0
  ,'Alert'
  ,0
  ,'
        CREATE TABLE [Alert].[Alert_$Guid$]
        (
             AlertRowId                 int               NOT NULL  IDENTITY(1, 1)
            ,AlertGuid                  uniqueidentifier  NOT NULL
            ,AlertProblemGuid           uniqueidentifier  NOT NULL
            ,ManagedEntityRowId         int               NOT NULL
            ,AlertName                  nvarchar(256)     NOT NULL
            ,AlertDescription           nvarchar(max)     NULL
            ,Severity                   tinyint           NOT NULL
            ,Priority                   tinyint           NOT NULL
            ,Category                   nvarchar(256)     NOT NULL
            ,WorkflowRowId              int               NULL
            ,MonitorAlertInd            bit               NOT NULL
            ,[DateTime]                 datetime          NOT NULL
            ,RaisedDateTime             AS ([DateTime])
            ,SiteName                   nvarchar(256)     NULL
            ,RepeatCount                int               NOT NULL
            ,AlertStringGuid            uniqueidentifier  NULL
            ,ParameterHash              uniqueidentifier  NULL
            ,DBCreatedDateTime          datetime          NOT NULL
            ,DWCreatedDateTime          datetime          NOT NULL   DEFAULT(GETUTCDATE())
            ,DWLastModifiedDateTime     datetime          NOT NULL   DEFAULT(GETUTCDATE())
            
            ,CONSTRAINT [PK_Alert_$Guid$] PRIMARY KEY CLUSTERED (AlertRowId) ON $DataFileGroupName$
        ) ON $DataFileGroupName$
  '
  ,'SELECT
       AlertGuid
      ,AlertProblemGuid
      ,AlertName
      ,AlertDescription
      ,Severity
      ,Priority
      ,Category
      ,ManagedEntityRowId
      ,WorkflowRowId
      ,MonitorAlertInd
      ,RaisedDateTime
      ,SiteName
      ,RepeatCount
      ,AlertStringGuid
      ,ParameterHash
      ,DBCreatedDateTime
      ,DWCreatedDateTime
      ,DWLastModifiedDateTime
   '
  ,@MaxTableRowCount
  ,@MaxTableSizeKb
)
INSERT StandardDatasetAggregationStorage
(                               
   DatasetId
  ,AggregationTypeId
  ,BaseTableName
  ,TableTag
  ,DependentTableInd
  ,TableTemplate
  ,CoverViewSelectClause
  ,MaxTableRowCount
  ,MaxTableSizeKb 
)
VALUES
(
   '$Config/DatasetId$'
  ,0
  ,'AlertResolutionState'
  ,'state'
  ,1
  ,'
        CREATE TABLE [Alert].[AlertResolutionState_$Guid$]
        (
             AlertResolutionStateRowId    int           NOT NULL  IDENTITY(1, 1)
            ,AlertGuid                    uniqueidentifier  NOT NULL
            ,ResolutionState              tinyint       NOT NULL
            ,TimeInStateSeconds           int           NOT NULL  DEFAULT (-1)
            ,TimeFromRaisedSeconds        int           NOT NULL
            ,StateSetDateTime             datetime      NOT NULL
            ,StateSetByUserId             nvarchar(256) NULL
            ,DWCreatedDateTime            datetime NOT  NULL   DEFAULT(GETUTCDATE())
            
            ,CONSTRAINT [PK_AlertResolutionState_$Guid$] PRIMARY KEY CLUSTERED (AlertResolutionStateRowId) ON $DataFileGroupName$
        ) ON $DataFileGroupName$
  '
  ,'SELECT
       AlertGuid
      ,ResolutionState
      ,TimeInStateSeconds
      ,TimeFromRaisedSeconds
      ,StateSetDateTime
      ,StateSetByUserId
      ,DWCreatedDateTime
   '
  ,$Config/Storage/MaxTableRowCount$
  ,NULL
)
INSERT StandardDatasetAggregationStorage
(                               
   DatasetId
  ,AggregationTypeId
  ,BaseTableName
  ,TableTag
  ,DependentTableInd
  ,TableTemplate
  ,CoverViewSelectClause
  ,MaxTableRowCount
  ,MaxTableSizeKb 
)
VALUES
(
   '$Config/DatasetId$'
  ,0
  ,'AlertDetail'
  ,'detail'
  ,1
  ,'
        CREATE TABLE [Alert].[AlertDetail_$Guid$]
        (
             AlertDetailRowId           int  NOT NULL  IDENTITY(1, 1)
            ,AlertGuid                  uniqueidentifier NOT NULL
            ,Owner                      nvarchar(256) NULL
            ,TicketId                   nvarchar(256) NULL
            ,CustomField1               nvarchar(256) NULL
            ,CustomField2               nvarchar(256) NULL
            ,CustomField3               nvarchar(256) NULL
            ,CustomField4               nvarchar(256) NULL
            ,CustomField5               nvarchar(256) NULL
            ,CustomField6               nvarchar(256) NULL
            ,CustomField7               nvarchar(256) NULL
            ,CustomField8               nvarchar(256) NULL
            ,CustomField9               nvarchar(256) NULL
            ,CustomField10              nvarchar(256) NULL
            ,DBLastModifiedDateTime     datetime  NOT NULL
            ,DBLastModifiedByUserId     nvarchar(256) NULL
            ,DWCreatedDateTime          datetime NOT  NULL   DEFAULT(GETUTCDATE())
            ,TfsWorkItemId              nvarchar(256) NULL
            ,TfsWorkItemOwner           nvarchar(256) NULL
            
            ,CONSTRAINT [PK_AlertDetail_$Guid$] PRIMARY KEY CLUSTERED (AlertDetailRowId) ON $DataFileGroupName$
        ) ON $DataFileGroupName$
  '
  ,'SELECT
       AlertGuid
      ,Owner
      ,TicketId
      ,CustomField1
      ,CustomField2
      ,CustomField3
      ,CustomField4
      ,CustomField5
      ,CustomField6
      ,CustomField7
      ,CustomField8
      ,CustomField9
      ,CustomField10
      ,DBLastModifiedDateTime
      ,DBLastModifiedByUserId
      ,DWCreatedDateTime
      ,TfsWorkItemId
      ,TfsWorkItemOwner
   '
  ,$Config/Storage/MaxTableRowCount$
  ,NULL
)
INSERT StandardDatasetAggregationStorage
(                               
   DatasetId
  ,AggregationTypeId
  ,BaseTableName
  ,TableTag
  ,DependentTableInd
  ,TableTemplate
  ,CoverViewSelectClause
  ,MaxTableRowCount
  ,MaxTableSizeKb 
)
VALUES
(
   '$Config/DatasetId$'
  ,0
  ,'AlertParameter'
  ,'parameter'
  ,1
  ,'
        CREATE TABLE [Alert].[AlertParameter_$Guid$]
        (
             AlertParameterRowId    int               NOT NULL  IDENTITY(1, 1)
            ,AlertGuid              uniqueidentifier  NOT NULL
            ,ParameterIndex         tinyint           NOT NULL
            ,ParameterValue         nvarchar(max)     NULL
            
            ,CONSTRAINT [PK_AlertParameter_$Guid$] PRIMARY KEY CLUSTERED (AlertParameterRowId) ON $DataFileGroupName$
        ) ON $DataFileGroupName$
  '
  ,'SELECT
       AlertGuid
      ,ParameterIndex
      ,ParameterValue
   '
  ,$Config/Storage/MaxTableRowCount$
  ,NULL
)
GO
                    -- main event table indexes
EXEC StandardDatasetIndexDelete
   @DatasetId = '$Config/DatasetId$'
  ,@IndexGuid = '6973521E-D4EC-4612-9A01-422DD56DEE12'
	,@DeleteIndexOnExistingTablesInd = 0
	
EXEC StandardDatasetIndexInsert
   @DatasetId = '$Config/DatasetId$'
  ,@AggregationTypeId = 0
  ,@DependentTableInd = 0
  ,@TableTag = NULL
  ,@UniqueInd = 0
  ,@IndexGuid = '6973521E-D4EC-4612-9A01-422DD56DEE12'
  ,@IndexDefinition = '([DateTime])'
  ,@CreateIndexOnExistingTablesInd = 0
EXEC StandardDatasetIndexDelete
   @DatasetId = '$Config/DatasetId$'
  ,@IndexGuid = '8B2F5444-58E6-450b-9432-9EE85866F8DA'
	,@DeleteIndexOnExistingTablesInd = 0
	
EXEC StandardDatasetIndexInsert
   @DatasetId = '$Config/DatasetId$'
  ,@AggregationTypeId = 0
  ,@DependentTableInd = 0
  ,@TableTag = NULL
  ,@UniqueInd = 1
  ,@IndexGuid = '8B2F5444-58E6-450b-9432-9EE85866F8DA'
  ,@IndexDefinition = '(AlertGuid)'
  ,@CreateIndexOnExistingTablesInd = 0
 
-- alert resolution state indexes 
EXEC StandardDatasetIndexDelete
   @DatasetId = '$Config/DatasetId$'
  ,@IndexGuid = 'A6059CE4-1DED-41ee-B7BA-4B99DB7F734C'
	,@DeleteIndexOnExistingTablesInd = 0
EXEC StandardDatasetIndexInsert
   @DatasetId = '$Config/DatasetId$'
  ,@AggregationTypeId = 0
  ,@DependentTableInd = 1
  ,@TableTag = 'state'
  ,@UniqueInd = 0
  ,@IndexGuid = 'A6059CE4-1DED-41ee-B7BA-4B99DB7F734C'
  ,@IndexDefinition = '(AlertGuid)'
  ,@CreateIndexOnExistingTablesInd = 0
-- alert detail indexes
 
EXEC StandardDatasetIndexDelete
   @DatasetId = '$Config/DatasetId$'
  ,@IndexGuid = 'D4967801-2F91-4b04-ADC3-7A64C805A16A'
	,@DeleteIndexOnExistingTablesInd = 0
 EXEC StandardDatasetIndexInsert
   @DatasetId = '$Config/DatasetId$'
  ,@AggregationTypeId = 0
  ,@DependentTableInd = 1
  ,@TableTag = 'detail'
  ,@UniqueInd = 0
  ,@IndexGuid = 'D4967801-2F91-4b04-ADC3-7A64C805A16A'
  ,@IndexDefinition = '(AlertGuid)'
  ,@CreateIndexOnExistingTablesInd = 0
-- alert parameter indexes
 
EXEC StandardDatasetIndexDelete
   @DatasetId = '$Config/DatasetId$'
  ,@IndexGuid = 'A953E9C0-8936-4e13-ADE2-F28285EC4B2B'
	,@DeleteIndexOnExistingTablesInd = 0
EXEC StandardDatasetIndexInsert
   @DatasetId = '$Config/DatasetId$'
  ,@AggregationTypeId = 0
  ,@DependentTableInd = 1
  ,@TableTag = 'parameter'
  ,@UniqueInd = 1
  ,@IndexGuid = 'A953E9C0-8936-4e13-ADE2-F28285EC4B2B'
  ,@IndexDefinition = '(AlertGuid, ParameterIndex)'
  ,@CreateIndexOnExistingTablesInd = 0
                    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE [name] = 'Alert')
BEGIN
  EXECUTE('CREATE SCHEMA Alert')
END
GO
-- change schema ownership to allow index rebuild and reorganize
ALTER AUTHORIZATION ON SCHEMA::Alert TO OpsMgrWriter
GO
-- change schema alter to allow domain table index rebuild
GRANT ALTER ON SCHEMA::dbo TO OpsMgrWriter
GO
-- grant create table permissions
GRANT CREATE TABLE TO OpsMgrWriter
GO
EXEC StandardDatasetAllocateStorage @DatasetId = '$Config/DatasetId$', @AggregationTypeId = 0
GO
 
                    
                    -- insert staging definition into StandardDatasetStagingArea
BEGIN TRAN
IF EXISTS (SELECT * FROM StandardDatasetStagingArea WHERE DatasetId = '$Config/DatasetId$')
BEGIN
  DELETE StandardDatasetStagingArea
  WHERE DatasetId = '$Config/DatasetId$'
END
INSERT StandardDatasetStagingArea
(
   DatasetId
  ,StagingTableColumnDefinition
  ,BatchedProcessingSupportedInd
  ,MaxRowsToProcessPerTransactionCount
)
VALUES
(
   '$Config/DatasetId$'
  ,'
       DatasetId                  uniqueidentifier  NOT NULL
      ,ManagementGroupGuid        uniqueidentifier  NOT NULL
      ,AlertGuid                  uniqueidentifier  NOT NULL
      ,AlertProblemGuid           uniqueidentifier  NOT NULL
      ,ManagedEntityGuid          uniqueidentifier  NOT NULL
      ,AlertName                  nvarchar(256)     NOT NULL
      ,AlertDescription           nvarchar(max)     NULL
      ,Severity                   tinyint           NOT NULL
      ,Priority                   tinyint           NOT NULL
      ,Category                   nvarchar(256)     NOT NULL
      ,MonitorAlertInd            bit               NOT NULL
      ,WorkflowGuid               uniqueidentifier  NOT NULL
      ,RaisedDateTime             datetime          NOT NULL
      ,CreatedDateTime            datetime          NOT NULL
      ,ResolutionState            tinyint           NOT NULL
      ,Owner                      nvarchar(256)     NULL
      ,TicketId                   nvarchar(256)     NULL
      ,CustomField1               nvarchar(256)     NULL
      ,CustomField2               nvarchar(256)     NULL
      ,CustomField3               nvarchar(256)     NULL
      ,CustomField4               nvarchar(256)     NULL
      ,CustomField5               nvarchar(256)     NULL
      ,CustomField6               nvarchar(256)     NULL
      ,CustomField7               nvarchar(256)     NULL
      ,CustomField8               nvarchar(256)     NULL
      ,CustomField9               nvarchar(256)     NULL
      ,CustomField10              nvarchar(256)     NULL
      ,SiteName                   nvarchar(256)     NULL
      ,AlertParams                xml               NULL
      ,ParameterHash              uniqueidentifier  NULL
      ,RepeatCount                int               NOT NULL
      ,AlertStringGuid            uniqueidentifier  NULL
      ,DBLastModifiedDateTime     datetime          NOT NULL
      ,DBLastModifiedByUserId     nvarchar(256)     NULL
      ,TfsWorkItemId              nvarchar(256)     NULL
      ,TfsWorkItemOwner           nvarchar(256)     NULL
      
      ,AlertStageRowId            int               NOT NULL IDENTITY(1, 1)
      ,AlertRowId                 int               NULL
      ,TableGuid                  uniqueidentifier  NULL
      ,ManagedEntityRowId         int               NULL
      ,WorkflowRowId              int               NULL
      ,InsertReadyInd             AS (ISNULL(ManagedEntityRowId + WorkflowRowId, 0))
      ,DWCreatedDateTime          datetime          NOT NULL DEFAULT(GETUTCDATE())
  '
 ,1
 ,10000
)
COMMIT
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'AlertStage' AND TABLE_SCHEMA = 'Alert')
BEGIN
  DECLARE @Statement nvarchar(max)
  SELECT @Statement = 'CREATE TABLE Alert.AlertStage (' + StagingTableColumnDefinition + ')'
  FROM StandardDatasetStagingArea
  WHERE DatasetId = '$Config/DatasetId$'
  EXECUTE (@Statement)
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_AlertStage_AlertGuidDBLastModifiedDateTimeResolutionStateAlertStageRowId')
BEGIN
  CREATE INDEX IX_AlertStage_AlertGuidDBLastModifiedDateTimeResolutionStateAlertStageRowId ON Alert.AlertStage (AlertGuid, DBLastModifiedDateTime, ResolutionState, AlertStageRowId)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'AlertStage'
      ,@SchemaName = 'Alert'
      ,@DatasetId = '$Config/DatasetId$'
GO
  
GRANT SELECT, INSERT, UPDATE, DELETE ON Alert.AlertStage TO OpsMgrWriter
GO
                    IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'AlertStage2Process' AND TABLE_SCHEMA = 'Alert')
BEGIN
  CREATE TABLE Alert.AlertStage2Process (
       DatasetId                  uniqueidentifier  NOT NULL
      ,ManagementGroupGuid        uniqueidentifier  NOT NULL
      ,AlertGuid                  uniqueidentifier  NOT NULL
      ,AlertProblemGuid           uniqueidentifier  NOT NULL
      ,ManagedEntityGuid          uniqueidentifier  NOT NULL
      ,AlertName                  nvarchar(256)     NOT NULL
      ,AlertDescription           nvarchar(max)     NULL
      ,Severity                   tinyint           NOT NULL
      ,Priority                   tinyint           NOT NULL
      ,Category                   nvarchar(256)     NOT NULL
      ,MonitorAlertInd            bit               NOT NULL
      ,WorkflowGuid               uniqueidentifier  NOT NULL
      ,RaisedDateTime             datetime          NOT NULL
      ,CreatedDateTime            datetime          NOT NULL
      ,ResolutionState            tinyint           NOT NULL
      ,Owner                      nvarchar(256)     NULL
      ,TicketId                   nvarchar(256)     NULL
      ,CustomField1               nvarchar(256)     NULL
      ,CustomField2               nvarchar(256)     NULL
      ,CustomField3               nvarchar(256)     NULL
      ,CustomField4               nvarchar(256)     NULL
      ,CustomField5               nvarchar(256)     NULL
      ,CustomField6               nvarchar(256)     NULL
      ,CustomField7               nvarchar(256)     NULL
      ,CustomField8               nvarchar(256)     NULL
      ,CustomField9               nvarchar(256)     NULL
      ,CustomField10              nvarchar(256)     NULL
      ,SiteName                   nvarchar(256)     NULL
      ,AlertParams                xml               NULL
      ,ParameterHash              uniqueidentifier  NULL
      ,RepeatCount                int               NOT NULL
      ,AlertStringGuid            uniqueidentifier  NULL
      ,DBLastModifiedDateTime     datetime          NOT NULL
      ,DBLastModifiedByUserId     nvarchar(256)     NULL
      ,TfsWorkItemId              nvarchar(256)     NULL
      ,TfsWorkItemOwner           nvarchar(256)     NULL
      
      ,AlertStageRowId            int               NOT NULL
      ,AlertRowId                 int               NULL
      ,TableGuid                  uniqueidentifier  NULL
      ,ManagedEntityRowId         int               NULL
      ,WorkflowRowId              int               NULL
      ,DWCreatedDateTime          datetime          NOT NULL
  )
END
ELSE
BEGIN
    -- Table already exists, ensure TFS columns exist
    IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'AlertStage2Process' AND TABLE_SCHEMA = 'Alert'
        AND COLUMN_NAME = N'TfsWorkItemId')
    ALTER TABLE [Alert].[AlertStage2Process] ADD [TfsWorkItemId] nvarchar(256) NULL
    IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'AlertStage2Process' AND TABLE_SCHEMA = 'Alert'
        AND COLUMN_NAME = N'TfsWorkItemOwner')
    ALTER TABLE [Alert].[AlertStage2Process] ADD [TfsWorkItemOwner] nvarchar(256) NULL
END
GO
                    
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'AlertGroom')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.AlertGroom AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.AlertGroom
   @DatasetId   uniqueidentifier
  ,@AggregationTypeId tinyint
  ,@TableGuid uniqueidentifier
  ,@CutoffDateTime datetime
  ,@MaxRowsToGroom int
  ,@RowsDeleted int OUTPUT
AS
BEGIN
  SET NOCOUNT ON
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(4000)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(4000)
  SET @ErrorInd = 0
  
  DECLARE
     @MainTableName varchar(255)
    ,@TableName varchar(255)
    ,@Statement varchar(max)
    ,@DebugLevel tinyint
    ,@StandardDatasetAggregationStorageRowId int
    ,@SchemaName sysname
  
  BEGIN TRY
    SELECT
       @DebugLevel = DebugLevel
      ,@SchemaName = SchemaName
    FROM StandardDataset
    WHERE DatasetId = @DatasetId
    BEGIN TRAN
    
    CREATE TABLE #AlertGroom (
      AlertGuid uniqueidentifier NOT NULL
    )
    
    SELECT @MainTableName = BaseTableName + '_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = @AggregationTypeId)
      AND (DependentTableInd = 0)
    
    SET @Statement = 'INSERT #AlertGroom (AlertGuid)'
                   + ' SELECT TOP ' + CAST(@MaxRowsToGroom AS varchar(15)) + ' AlertGuid'
                   + ' FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@MainTableName)
                   + ' WHERE ([DateTime] &lt; CONVERT(datetime, ''' + CONVERT(varchar(50), @CutoffDateTime, 120) + ''', 120))'
                   
    EXECUTE (@Statement)
    SET @StandardDatasetAggregationStorageRowId = 0
    
    WHILE EXISTS (SELECT *
                  FROM StandardDatasetAggregationStorage
                  WHERE (DatasetId = @DatasetId)
                    AND (AggregationTypeId = @AggregationTypeId)
                    AND (DependentTableInd = 1)
                    AND (StandardDatasetAggregationStorageRowId &gt; @StandardDatasetAggregationStorageRowId)
                 )
    BEGIN
      SELECT TOP 1
         @StandardDatasetAggregationStorageRowId = StandardDatasetAggregationStorageRowId
        ,@TableName = BaseTableName + '_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')
      FROM StandardDatasetAggregationStorage
      WHERE (DatasetId = @DatasetId)
        AND (AggregationTypeId = @AggregationTypeId)
        AND (DependentTableInd = 1)
        AND (StandardDatasetAggregationStorageRowId &gt; @StandardDatasetAggregationStorageRowId)
		Order By StandardDatasetAggregationStorageRowId Asc
        
      SET @Statement = 'DELETE d'
                     + ' FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@TableName) + ' d'
                     + '   JOIN #AlertGroom a ON (d.AlertGuid = a.AlertGuid)'
      EXECUTE (@Statement)
    END
    
    SET @Statement = 'DELETE d'
                   + ' FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@MainTableName) + ' d'
                   + '   JOIN #AlertGroom a ON (d.AlertGuid = a.AlertGuid)'
    EXECUTE (@Statement)
    SET @RowsDeleted = @@ROWCOUNT
    
    DROP TABLE #AlertGroom
    
    COMMIT
    -- groom staging of data for rejected MGs
    DELETE Alert.AlertStage
    WHERE ManagementGroupGuid NOT IN (SELECT ManagementGroupGuid
                                      FROM ManagementGroup mg
                                      WHERE (ConnectConfirmedDateTime IS NOT NULL)
                                        AND (ConnectRejectedInd = 0)
                                     )
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
    
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    IF (@DebugLevel &gt; 0)
    BEGIN
      DECLARE @DebugMessageText nvarchar(max)
      SET @DebugMessageText = N'Failed to groom data for Alert data set. Error ' + CAST(@ErrorNumber AS varchar(15))
                      + ', Procedure ' + @ErrorProcedure
                      + ', Line ' + CAST(@ErrorLine AS varchar(15))
                      + ', Message: '+ @ErrorMessageText
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 1
        ,@MessageText = @DebugMessageText
    END
      
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
  
  RETURN @RowsDeleted
END
GO
    
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'AlertProcessStaging')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.AlertProcessStaging AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.AlertProcessStaging
   @DatasetId           uniqueidentifier
AS
BEGIN
  SET NOCOUNT ON
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)
  SET @ErrorInd = 0
  BEGIN TRY
    DECLARE
       @InsertTableName sysname
      ,@InsertTableGuid uniqueidentifier
      ,@InsertStartedDateTime datetime
      ,@Statement nvarchar(max)
      ,@MessageText nvarchar(max)
      ,@OperationDurationMs bigint
      ,@ExecResult int
      ,@DebugLevel int
      ,@LockResourceName sysname
      ,@TableGuid uniqueidentifier
      ,@SchemaName sysname
      ,@MaxRowsToProcessCount int
    
    SELECT
       @DebugLevel = DebugLevel
      ,@SchemaName = SchemaName
    FROM StandardDataset
    WHERE DatasetId = @DatasetId
    
    -- get max # of rows to process in one shot
    SELECT @MaxRowsToProcessCount = MaxRowsToProcessPerTransactionCount
    FROM StandardDatasetStagingArea
    WHERE (DatasetId = @DatasetId)
    
    IF (@MaxRowsToProcessCount IS NULL)
    BEGIN
      -- if max row count calue is not set default to 5000
      SET @MaxRowsToProcessCount = 5000
    END
    
    -- delete old entries
    DECLARE @MaxDataAgeDays int
    
    SELECT @MaxDataAgeDays = MaxDataAgeDays
    FROM StandardDatasetAggregation
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = 0)
      
    DELETE TOP (@MaxRowsToProcessCount)
    FROM Alert.AlertStage
    WHERE (DatasetId = @DatasetId)
      AND (DWCreatedDateTime &lt; DATEADD(day, -@MaxDataAgeDays, GETUTCDATE()))
    -- update managed entity ids
    UPDATE s
    SET ManagedEntityRowId = me.ManagedEntityRowId
    FROM Alert.AlertStage s
          JOIN vManagementGroup mg ON (s.ManagementGroupGuid = mg.ManagementGroupGuid)
          JOIN vManagedEntity me ON ((s.ManagedEntityGuid = me.ManagedEntityGuid) AND (mg.ManagementGroupRowId = me.ManagementGroupRowId))
    WHERE (s.ManagedEntityRowId IS NULL)
      
    -- update workflow ids
    UPDATE s
    SET WorkflowRowId = m.MonitorRowId
    FROM Alert.AlertStage s
          JOIN vMonitor m ON (s.WorkflowGuid = m.MonitorGuid)
    WHERE (s.MonitorAlertInd  = 1)
      AND (s.WorkflowRowId IS NULL)
      
    UPDATE s
    SET WorkflowRowId = r.RuleRowId
    FROM Alert.AlertStage s
          JOIN vRule r ON (s.WorkflowGuid = r.RuleGuid)
    WHERE (s.MonitorAlertInd  = 0)
      AND (s.WorkflowRowId IS NULL)
      
    BEGIN TRAN
    
    -- lock table map to ensure we insert into table opened for insertion
    SET @LockResourceName = CAST(@DatasetId AS varchar(50)) + '_TableMap'
  
    EXEC @ExecResult = sp_getapplock
           @Resource = @LockResourceName
          ,@LockMode = 'Shared'
          ,@LockOwner = 'Transaction'
    IF (@ExecResult &lt; 0)
    BEGIN
      RAISERROR(777971001, 16, 1, 'Shared:StandardDatasetTableMap', @ExecResult)
    END
  
    EXEC dbo.StandardDatasetGetInsertTableGuid @DatasetId, 0, @InsertTableGuid OUTPUT
    
    SELECT @InsertTableName = BaseTableName + '_' + REPLACE(CAST(@InsertTableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = 0)
      AND (DependentTableInd = 0)
    
    IF (@DebugLevel &gt; 3)
    BEGIN
      SELECT @MessageText = 'Starting to insert alert(s) into ' + @InsertTableName
      
      SET @InsertStartedDateTime = GETUTCDATE()
      
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 4
        ,@MessageText = @MessageText
    END
     
    -- calculate alert tables and row ids
    DECLARE @VisitedPartition TABLE (
      PartitionGuid uniqueidentifier
    )
    
    WHILE EXISTS (SELECT *
                  FROM Alert.AlertStage s
                        CROSS JOIN StandardDatasetTableMap m
                  WHERE (s.AlertRowId IS NULL)
                    AND (m.DatasetId = @DatasetId)
                    AND (m.AggregationTypeId = 0)
                    AND ((s.RaisedDateTime BETWEEN m.StartDateTime and m.EndDateTime) OR (m.InsertInd = 1))
                    AND (NOT EXISTS (SELECT * FROM @VisitedPartition WHERE (PartitionGuid = m.TableGuid)))
                 )
    BEGIN
      SELECT TOP 1
         @TableGuid = m.TableGuid
      FROM Alert.AlertStage s
            CROSS JOIN StandardDatasetTableMap m
      WHERE (s.AlertRowId IS NULL)
        AND (m.DatasetId = @DatasetId)
        AND (m.AggregationTypeId = 0)
        AND (s.RaisedDateTime BETWEEN ISNULL(m.StartDateTime, '19000101') AND ISNULL(m.EndDateTime, '99991231'))
        AND (NOT EXISTS (SELECT * FROM @VisitedPartition WHERE (PartitionGuid = m.TableGuid)))
      ORDER BY m.StandardDatasetTableMapRowId
      
      INSERT @VisitedPartition VALUES (@TableGuid)
      
      SET @Statement =
            'UPDATE s'
          + ' SET AlertRowId = a.AlertRowId'
          + '    ,TableGuid = ''' + CAST(@TableGuid AS varchar(50)) + ''''
          + ' FROM Alert.AlertStage s'
          + '      JOIN ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('Alert_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' a ON (s.AlertGuid = a.AlertGuid)'
          + ' WHERE (s.AlertRowId IS NULL)'
      EXECUTE (@Statement)
    END
    -- check to see if AlertStage2Process table is not empty
    DECLARE @AlertStage2ProcessRowCount int
    DECLARE @SpaceUsedInfo TABLE (
               [name]       sysname
              ,[rows]       int
              ,reserved     nvarchar(100)
              ,data         nvarchar(100)
              ,index_size   nvarchar(100)
              ,unused       nvarchar(100)
            )
            
    INSERT @SpaceUsedInfo
    EXEC sp_spaceused 'Alert.AlertStage2Process'
    
    SELECT @AlertStage2ProcessRowCount = [rows]
    FROM @SpaceUsedInfo
    IF (@AlertStage2ProcessRowCount = 0)
    BEGIN
      -- move some rows to processing table if it is empty
      
      BEGIN TRAN
      
      INSERT Alert.AlertStage2Process (
         DatasetId
        ,ManagementGroupGuid
        ,AlertGuid
        ,AlertProblemGuid
        ,ManagedEntityGuid
        ,AlertName
        ,AlertDescription
        ,Severity
        ,Priority
        ,Category
        ,MonitorAlertInd
        ,WorkflowGuid
        ,RaisedDateTime
        ,CreatedDateTime
        ,ResolutionState
        ,Owner
        ,TicketId
        ,CustomField1
        ,CustomField2
        ,CustomField3
        ,CustomField4
        ,CustomField5
        ,CustomField6
        ,CustomField7
        ,CustomField8
        ,CustomField9
        ,CustomField10
        ,SiteName
        ,AlertParams
        ,ParameterHash
        ,RepeatCount
        ,AlertStringGuid
        ,DBLastModifiedDateTime
        ,DBLastModifiedByUserId
        
        ,AlertStageRowId
        ,AlertRowId
        ,TableGuid 
        ,ManagedEntityRowId
        ,WorkflowRowId
        ,DWCreatedDateTime
        ,TfsWorkItemId
        ,TfsWorkItemOwner
      )
      SELECT TOP (@MaxRowsToProcessCount)
         DatasetId
        ,ManagementGroupGuid
        ,AlertGuid
        ,AlertProblemGuid
        ,ManagedEntityGuid
        ,AlertName
        ,AlertDescription
        ,Severity
        ,Priority
        ,Category
        ,MonitorAlertInd
        ,WorkflowGuid
        ,RaisedDateTime
        ,CreatedDateTime
        ,ResolutionState
        ,Owner
        ,TicketId
        ,CustomField1
        ,CustomField2
        ,CustomField3
        ,CustomField4
        ,CustomField5
        ,CustomField6
        ,CustomField7
        ,CustomField8
        ,CustomField9
        ,CustomField10
        ,SiteName
        ,AlertParams
        ,ParameterHash
        ,RepeatCount
        ,AlertStringGuid
        ,DBLastModifiedDateTime
        ,DBLastModifiedByUserId
        
        ,AlertStageRowId
        ,AlertRowId
        ,TableGuid 
        ,ManagedEntityRowId
        ,WorkflowRowId
        ,DWCreatedDateTime
        ,TfsWorkItemId
        ,TfsWorkItemOwner
      FROM Alert.AlertStage s
      WHERE (s.AlertStageRowId = (SELECT TOP 1 AlertStageRowId
                                  FROM Alert.AlertStage
                                  WHERE (AlertGuid = s.AlertGuid)
                                  ORDER BY DBLastModifiedDateTime, ResolutionState, AlertStageRowId)
                                 )
        AND (s.InsertReadyInd &gt; 0)
      DELETE s
      FROM Alert.AlertStage s
            JOIN Alert.AlertStage2Process s2p ON (s2p.AlertStageRowId = s.AlertStageRowId)
      COMMIT
    END
    -- work only with rows in processing table
    IF (EXISTS (SELECT * FROM Alert.AlertStage2Process WHERE (AlertRowId IS NULL)))
    BEGIN
      -- we have new alerts in the staging area
      -- process only the first "change" since there
      -- may be multiple changes stored in staging at
      -- the same time, if that's the case - we'll pick
      -- up all other changes next time we process staging
      SET @Statement = 
          'INSERT ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@InsertTableName) + ' ('
        + '   AlertGuid'
        + '  ,AlertProblemGuid'
        + '  ,ManagedEntityRowId'
        + '  ,AlertName'
        + '  ,AlertDescription'
        + '  ,Severity'
        + '  ,Priority'
        + '  ,Category'
        + '  ,WorkflowRowId'
        + '  ,MonitorAlertInd'
        + '  ,[DateTime]'
        + '  ,SiteName'
        + '  ,RepeatCount'
        + '  ,AlertStringGuid'
        + '  ,ParameterHash'
        + '  ,DBCreatedDateTime'
        + ' )'
        + ' SELECT'
        + '   s.AlertGuid'
        + '  ,s.AlertProblemGuid'
        + '  ,s.ManagedEntityRowId'
        + '  ,s.AlertName'
        + '  ,s.AlertDescription'
        + '  ,s.Severity'
        + '  ,s.Priority'
        + '  ,s.Category'
        + '  ,s.WorkflowRowId'
        + '  ,s.MonitorAlertInd'
        + '  ,s.RaisedDateTime'
        + '  ,s.SiteName'
        + '  ,s.RepeatCount'
        + '  ,NULLIF(s.AlertStringGuid, ''00000000-0000-0000-0000-000000000000'')'
        + '  ,NULLIF(s.ParameterHash, ''00000000-0000-0000-0000-000000000000'')'
        + '  ,s.CreatedDateTime'
        + ' FROM Alert.AlertStage2Process s'
        + ' WHERE (s.AlertRowId IS NULL)'
      EXECUTE (@Statement)
      
      -- insert alert parameters
      CREATE TABLE #AlertParameter
      (
         AlertParameterRowId            int IDENTITY(1, 1)
        ,AlertGuid                      uniqueidentifier  NOT NULL
        ,ParameterIndex                 tinyint NULL
        ,ParameterValue                 nvarchar(255) NULL
      )
      
      INSERT #AlertParameter (
         AlertGuid
        ,ParameterValue
      )
      SELECT
         s.AlertGuid
        ,xml.ParameterValue.value('.', 'nvarchar(255)')
      FROM Alert.AlertStage2Process s
            CROSS APPLY s.AlertParams.nodes('AlertParameters/*') as xml(ParameterValue)
      WHERE (s.AlertRowId IS NULL)
      
      -- set parameter indexes
    
      UPDATE ap
      SET ap.ParameterIndex = ap.AlertParameterRowId - ap1.AlertParameterRowId + 1
      FROM #AlertParameter ap
            JOIN #AlertParameter ap1 ON (ap.AlertGuid = ap1.AlertGuid)
      WHERE NOT EXISTS (SELECT *
                        FROM #AlertParameter
                        WHERE (AlertGuid = ap1.AlertGuid)
                          AND (AlertParameterRowId &lt; ap1.AlertParameterRowId)
                       )
      SET @Statement = 
          'INSERT ' + QUOTENAME(@SchemaName) + '.' + 'AlertParameter_' + REPLACE(CAST(@InsertTableGuid AS varchar(50)), '-', '') + '('
        + '    AlertGuid'
        + '   ,ParameterIndex'
        + '   ,ParameterValue'
        + ' )'
        + ' SELECT '
        + '    AlertGuid'
        + '   ,ParameterIndex'
        + '   ,ParameterValue'
        + ' FROM #AlertParameter'
      EXECUTE (@Statement)
      DROP TABLE #AlertParameter
      
      -- retrieve created alert ids
      SET @Statement = 
          'UPDATE s'
        + ' SET AlertRowId = a.AlertRowId'
        + '    ,TableGuid = ''' + CAST(@InsertTableGuid AS varchar(50)) + ''''
        + ' FROM Alert.AlertStage2Process s'
        + '   JOIN  ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@InsertTableName) + ' a ON (s.AlertGuid = a.AlertGuid)'
        + ' WHERE (s.AlertRowId IS NULL)'
      EXECUTE (@Statement)
    END
    IF (EXISTS (SELECT * FROM Alert.AlertStage2Process WHERE (AlertRowId IS NOT NULL)))
    BEGIN
      -- process alert updates
      
      -- build unique list of tables affected
      DECLARE @AffectedPartition TABLE (
         PartitionRowId int IDENTITY(1, 1)
        ,TableGuid uniqueidentifier
      )
      
      INSERT @AffectedPartition(TableGuid)
      SELECT DISTINCT TableGuid
      FROM Alert.AlertStage2Process
      WHERE (AlertRowId IS NOT NULL)
      
      DECLARE @PartitionRowId int
      
      SET @PartitionRowId = 0
      
      WHILE (EXISTS (SELECT * FROM @AffectedPartition WHERE (PartitionRowId &gt; @PartitionRowId)))
      BEGIN
        SELECT TOP 1
           @PartitionRowId = PartitionRowId
          ,@TableGuid = TableGuid
        FROM @AffectedPartition
        WHERE (PartitionRowId &gt; @PartitionRowId)
        
        -- update alert repeat count
        SET @Statement = 
            'UPDATE a'
          + ' SET RepeatCount = s.RepeatCount'
          + '    ,DWLastModifiedDateTime = GETUTCDATE()'
          + ' FROM Alert.AlertStage2Process s'
          + '       JOIN ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('Alert_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' a'
          + '             ON (s.AlertRowId = a.AlertRowId)'
          + ' WHERE (s.RepeatCount &gt; a.RepeatCount)'
        EXECUTE (@Statement)
        
        -- check which alerts have resolution state changed
        CREATE TABLE #ResolutionState (
           AlertStageRowId        int               NOT NULL
          ,AlertGuid              uniqueidentifier  NOT NULL
          ,LastResolutionState    tinyint           NULL
        )
        
        SET @Statement = 
            'INSERT #ResolutionState ('
          + '    AlertStageRowId'
          + '   ,AlertGuid'
          + '   ,LastResolutionState'
          + ')'
          + ' SELECT'
          + '    s.AlertStageRowId'
          + '   ,s.AlertGuid'
          + '   ,r.ResolutionState'
          + ' FROM Alert.AlertStage2Process s'
          + '       LEFT JOIN ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertResolutionState_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' r'
          + '             ON (s.AlertGuid = r.AlertGuid) AND (r.AlertResolutionStateRowId = (SELECT TOP 1 AlertResolutionStateRowId FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertResolutionState_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' WHERE (AlertGuid = s.AlertGuid) AND (StateSetDateTime &lt;= s.DBLastModifiedDateTime) ORDER BY StateSetDateTime DESC, ResolutionState DESC))'
          + ' WHERE (s.AlertRowId IS NOT NULL)'
          + '   AND (s.TableGuid = ''' + CAST(@TableGuid AS varchar(50)) + ''')'
        EXECUTE (@Statement)
        
        -- insert resolution state changes
        SET @Statement =
            'INSERT ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertResolutionState_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' ('
          + '    AlertGuid'
          + '   ,ResolutionState'
          + '   ,TimeFromRaisedSeconds'
          + '   ,StateSetDateTime'
          + '   ,StateSetByUserId'
          + ' )'
          + ' SELECT'
          + '    s.AlertGuid'
          + '   ,s.ResolutionState'
          + '   ,CASE ' -- check to see if alert was raised way in the past/future
          + '      WHEN ISNULL(ABS(DATEDIFF(year, s.DBLastModifiedDateTime, s.RaisedDateTime)), 0) &gt; 3 THEN 3*365*24*60*60 '
          + '      ELSE ISNULL(ABS(DATEDIFF(second, s.DBLastModifiedDateTime, s.RaisedDateTime)), 0) '
          + '    END '
          + '   ,s.DBLastModifiedDateTime'
          + '   ,s.DBLastModifiedByUserId'
          + ' FROM #ResolutionState r'
          + '      JOIN Alert.AlertStage2Process s ON (r.AlertStageRowId = s.AlertStageRowId)'
          + ' WHERE (s.ResolutionState &lt;&gt; r.LastResolutionState) OR (r.LastResolutionState IS NULL)'
        EXECUTE (@Statement)
        
        -- update all "time in state" columns since
        -- we've added some state transitions potentially "in the middle"
        SET @Statement =
            'UPDATE ars'
          + '    SET TimeInStateSeconds = ISNULL(ABS(DATEDIFF(second, ars.StateSetDateTime, ars2.StateSetDateTime)), -1)'
          + ' FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertResolutionState_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' ars'
          + '     JOIN ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertResolutionState_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' ars2'
          + '        ON (ars.AlertGuid = ars2.AlertGuid)'
          + '     JOIN (SELECT DISTINCT AlertGuid = s.AlertGuid'
          + '           FROM #ResolutionState r'
          + '             JOIN Alert.AlertStage2Process s ON (r.AlertStageRowId = s.AlertStageRowId)'
          + '           WHERE (s.ResolutionState &lt;&gt; r.LastResolutionState) OR (r.LastResolutionState IS NULL)'
          + '          ) AS al ON (ars.AlertGuid = al.AlertGuid)'
          + ' WHERE (ars2.AlertResolutionStateRowId = (SELECT TOP 1 AlertResolutionStateRowId'
          + '                                          FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertResolutionState_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', ''))
          + '                                          WHERE (AlertGuid = ars.AlertGuid)'
          + '                                            AND (StateSetDateTime &gt;= ars.StateSetDateTime)'
          + '                                            AND (AlertResolutionStateRowId &lt;&gt; ars.AlertResolutionStateRowId)'
          + '                                          ORDER BY StateSetDateTime, ResolutionState DESC'
          + '                                         ))'
        EXECUTE (@Statement)
        
        DROP TABLE #ResolutionState
        
        -- check to see if alert properties were updated
        CREATE TABLE #AlertDetail (
           AlertStageRowId            int           NOT NULL
          ,DetailRecordExistedInd     bit           NOT NULL
          ,Owner                      nvarchar(256) NULL
          ,TicketId                   nvarchar(256) NULL
          ,CustomField1               nvarchar(256) NULL
          ,CustomField2               nvarchar(256) NULL
          ,CustomField3               nvarchar(256) NULL
          ,CustomField4               nvarchar(256) NULL
          ,CustomField5               nvarchar(256) NULL
          ,CustomField6               nvarchar(256) NULL
          ,CustomField7               nvarchar(256) NULL
          ,CustomField8               nvarchar(256) NULL
          ,CustomField9               nvarchar(256) NULL
          ,CustomField10              nvarchar(256) NULL
          ,TfsWorkItemId              nvarchar(256) NULL
          ,TfsWorkItemOwner           nvarchar(256) NULL
        )
        
        SET @Statement = 
            'INSERT #AlertDetail ('
          + '    AlertStageRowId'
          + '   ,DetailRecordExistedInd'
          + '   ,Owner'
          + '   ,TicketId'
          + '   ,CustomField1'
          + '   ,CustomField2'
          + '   ,CustomField3'
          + '   ,CustomField4'
          + '   ,CustomField5'
          + '   ,CustomField6'
          + '   ,CustomField7'
          + '   ,CustomField8'
          + '   ,CustomField9'
          + '   ,CustomField10'
          + '   ,TfsWorkItemId'
          + '   ,TfsWorkItemOwner'
          + ')'
          + ' SELECT'
          + '    s.AlertStageRowId'
          + '   ,CASE WHEN d.AlertGuid IS NULL THEN 0 ELSE 1 END'
          + '   ,d.Owner'
          + '   ,d.TicketId'
          + '   ,d.CustomField1'
          + '   ,d.CustomField2'
          + '   ,d.CustomField3'
          + '   ,d.CustomField4'
          + '   ,d.CustomField5'
          + '   ,d.CustomField6'
          + '   ,d.CustomField7'
          + '   ,d.CustomField8'
          + '   ,d.CustomField9'
          + '   ,d.CustomField10'
          + '   ,d.TfsWorkItemId'
          + '   ,d.TfsWorkItemOwner'
          + ' FROM Alert.AlertStage2Process s'
          + '       LEFT JOIN ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertDetail_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' d ON (s.AlertGuid = d.AlertGuid)'
          + ' WHERE (s.AlertRowId IS NOT NULL)'
          + '   AND (s.TableGuid = ''' + CAST(@TableGuid AS varchar(50)) + ''')'
          + '   AND (NOT EXISTS (SELECT * FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertDetail_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' WHERE (AlertGuid = s.AlertGuid) AND (DBLastModifiedDateTime &lt;= s.DBLastModifiedDateTime) AND (AlertDetailRowId &gt; d.AlertDetailRowId)))'
        EXECUTE (@Statement)
        
        -- insert alert detail changes
        SET @Statement =
            'INSERT ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertDetail_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' ('
          + '    AlertGuid'
          + '   ,Owner'
          + '   ,TicketId'
          + '   ,CustomField1'
          + '   ,CustomField2'
          + '   ,CustomField3'
          + '   ,CustomField4'
          + '   ,CustomField5'
          + '   ,CustomField6'
          + '   ,CustomField7'
          + '   ,CustomField8'
          + '   ,CustomField9'
          + '   ,CustomField10'
          + '   ,DBLastModifiedDateTime'
          + '   ,DBLastModifiedByUserId'
          + '   ,TfsWorkItemId'
          + '   ,TfsWorkItemOwner'
          + ' )'
          + ' SELECT'
          + '    s.AlertGuid'
          + '   ,s.Owner'
          + '   ,s.TicketId'
          + '   ,s.CustomField1'
          + '   ,s.CustomField2'
          + '   ,s.CustomField3'
          + '   ,s.CustomField4'
          + '   ,s.CustomField5'
          + '   ,s.CustomField6'
          + '   ,s.CustomField7'
          + '   ,s.CustomField8'
          + '   ,s.CustomField9'
          + '   ,s.CustomField10'
          + '   ,s.DBLastModifiedDateTime'
          + '   ,s.DBLastModifiedByUserId'
          + '   ,s.TfsWorkItemId'
          + '   ,s.TfsWorkItemOwner'
          + ' FROM #AlertDetail d'
          + '      JOIN Alert.AlertStage2Process s ON (d.AlertStageRowId = s.AlertStageRowId)'
          + ' WHERE (ISNULL(s.Owner, '''') &lt;&gt; ISNULL(d.Owner, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.TicketId, '''') &lt;&gt; ISNULL(d.TicketId, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField1, '''') &lt;&gt; ISNULL(d.CustomField1, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField2, '''') &lt;&gt; ISNULL(d.CustomField2, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField3, '''') &lt;&gt; ISNULL(d.CustomField3, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField4, '''') &lt;&gt; ISNULL(d.CustomField4, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField5, '''') &lt;&gt; ISNULL(d.CustomField5, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField6, '''') &lt;&gt; ISNULL(d.CustomField6, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField7, '''') &lt;&gt; ISNULL(d.CustomField7, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField8, '''') &lt;&gt; ISNULL(d.CustomField8, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField9, '''') &lt;&gt; ISNULL(d.CustomField9, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField10, '''') &lt;&gt; ISNULL(d.CustomField10, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.TfsWorkItemId, '''') &lt;&gt; ISNULL(d.TfsWorkItemId, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.TfsWorkItemOwner, '''') &lt;&gt; ISNULL(d.TfsWorkItemOwner, '''') COLLATE database_default)'
          + '    OR (d.DetailRecordExistedInd = 0)'
        EXECUTE (@Statement)
        
        DROP TABLE #AlertDetail
        
        -- mark affected table as non-optimized
        UPDATE StandardDatasetTableMap
        SET OptimizedInd = 0
        WHERE (DatasetId = @DatasetId)
          AND (AggregationTypeId = 0)
          AND (TableGuid = @TableGuid)
          AND (InsertInd = 0)
      END
    END
  
    TRUNCATE TABLE Alert.AlertStage2Process
  
    IF (@DebugLevel &gt; 3)
    BEGIN
      SET @MessageText = 'Finished inserting alert(s) into ' + @InsertTableName
      SET @OperationDurationMs = ABS(DATEDIFF(ms, GETUTCDATE(), @InsertStartedDateTime))
      
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 4
        ,@MessageText = @MessageText
        ,@OperationDurationMs = @OperationDurationMs
    END
   
    COMMIT
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
  
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    IF (@DebugLevel &gt; 0)
    BEGIN
      DECLARE @DebugMessageText nvarchar(max)
      
      SET @DebugMessageText = N'Failed to process alert staging area. Error ' + CAST(@ErrorNumber AS varchar(15))
                      + ', Procedure ' + @ErrorProcedure
                      + ', Line ' + CAST(@ErrorLine AS varchar(15))
                      + ', Message: '+ @ErrorMessageText
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 1
        ,@MessageText = @DebugMessageText
    END
      
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END
GO
                    </Install><Uninstall>
                    -- drop SPs
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'AlertGroom')
BEGIN
	EXECUTE ('DROP PROCEDURE dbo.AlertGroom')
END
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'AlertInsert')
BEGIN
	EXECUTE ('DROP PROCEDURE dbo.AlertInsert')
END
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'AlertProcessStaging')
BEGIN
	EXECUTE ('DROP PROCEDURE dbo.AlertProcessStaging')
END
-- drop tables
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'AlertStage' AND TABLE_SCHEMA = 'Alert')
BEGIN
  EXECUTE('DROP TABLE Alert.AlertStage')
END
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'AlertStage2Process' AND TABLE_SCHEMA = 'Alert')
BEGIN
  EXECUTE('DROP TABLE Alert.AlertStage2Process')
END
-- delete std dataset related data
EXEC StandardDatasetDelete '$Config/DatasetId$'
GO
   
                    </Uninstall><Upgrade>
                    IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'AlertStage2Process' AND TABLE_SCHEMA = 'Alert')
BEGIN
  CREATE TABLE Alert.AlertStage2Process (
       DatasetId                  uniqueidentifier  NOT NULL
      ,ManagementGroupGuid        uniqueidentifier  NOT NULL
      ,AlertGuid                  uniqueidentifier  NOT NULL
      ,AlertProblemGuid           uniqueidentifier  NOT NULL
      ,ManagedEntityGuid          uniqueidentifier  NOT NULL
      ,AlertName                  nvarchar(256)     NOT NULL
      ,AlertDescription           nvarchar(max)     NULL
      ,Severity                   tinyint           NOT NULL
      ,Priority                   tinyint           NOT NULL
      ,Category                   nvarchar(256)     NOT NULL
      ,MonitorAlertInd            bit               NOT NULL
      ,WorkflowGuid               uniqueidentifier  NOT NULL
      ,RaisedDateTime             datetime          NOT NULL
      ,CreatedDateTime            datetime          NOT NULL
      ,ResolutionState            tinyint           NOT NULL
      ,Owner                      nvarchar(256)     NULL
      ,TicketId                   nvarchar(256)     NULL
      ,CustomField1               nvarchar(256)     NULL
      ,CustomField2               nvarchar(256)     NULL
      ,CustomField3               nvarchar(256)     NULL
      ,CustomField4               nvarchar(256)     NULL
      ,CustomField5               nvarchar(256)     NULL
      ,CustomField6               nvarchar(256)     NULL
      ,CustomField7               nvarchar(256)     NULL
      ,CustomField8               nvarchar(256)     NULL
      ,CustomField9               nvarchar(256)     NULL
      ,CustomField10              nvarchar(256)     NULL
      ,SiteName                   nvarchar(256)     NULL
      ,AlertParams                xml               NULL
      ,ParameterHash              uniqueidentifier  NULL
      ,RepeatCount                int               NOT NULL
      ,AlertStringGuid            uniqueidentifier  NULL
      ,DBLastModifiedDateTime     datetime          NOT NULL
      ,DBLastModifiedByUserId     nvarchar(256)     NULL
      ,TfsWorkItemId              nvarchar(256)     NULL
      ,TfsWorkItemOwner           nvarchar(256)     NULL
      
      ,AlertStageRowId            int               NOT NULL
      ,AlertRowId                 int               NULL
      ,TableGuid                  uniqueidentifier  NULL
      ,ManagedEntityRowId         int               NULL
      ,WorkflowRowId              int               NULL
      ,DWCreatedDateTime          datetime          NOT NULL
  )
END
ELSE
BEGIN
    -- Table already exists, ensure TFS columns exist
    IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'AlertStage2Process' AND TABLE_SCHEMA = 'Alert'
        AND COLUMN_NAME = N'TfsWorkItemId')
    ALTER TABLE [Alert].[AlertStage2Process] ADD [TfsWorkItemId] nvarchar(256) NULL
    IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'AlertStage2Process' AND TABLE_SCHEMA = 'Alert'
        AND COLUMN_NAME = N'TfsWorkItemOwner')
    ALTER TABLE [Alert].[AlertStage2Process] ADD [TfsWorkItemOwner] nvarchar(256) NULL
END
GO
                    
                    -- Update Alert staging definition in StandardDatasetStagingArea
BEGIN TRAN
IF EXISTS (SELECT * FROM StandardDatasetStagingArea WHERE DatasetId = '$Config/DatasetId$')
BEGIN
  DELETE StandardDatasetStagingArea
  WHERE DatasetId = '$Config/DatasetId$'
END
INSERT StandardDatasetStagingArea
(
   DatasetId
  ,StagingTableColumnDefinition
  ,BatchedProcessingSupportedInd
  ,MaxRowsToProcessPerTransactionCount
)
VALUES
(
   '$Config/DatasetId$'
  ,'
       DatasetId                  uniqueidentifier  NOT NULL
      ,ManagementGroupGuid        uniqueidentifier  NOT NULL
      ,AlertGuid                  uniqueidentifier  NOT NULL
      ,AlertProblemGuid           uniqueidentifier  NOT NULL
      ,ManagedEntityGuid          uniqueidentifier  NOT NULL
      ,AlertName                  nvarchar(256)     NOT NULL
      ,AlertDescription           nvarchar(max)     NULL
      ,Severity                   tinyint           NOT NULL
      ,Priority                   tinyint           NOT NULL
      ,Category                   nvarchar(256)     NOT NULL
      ,MonitorAlertInd            bit               NOT NULL
      ,WorkflowGuid               uniqueidentifier  NOT NULL
      ,RaisedDateTime             datetime          NOT NULL
      ,CreatedDateTime            datetime          NOT NULL
      ,ResolutionState            tinyint           NOT NULL
      ,Owner                      nvarchar(256)     NULL
      ,TicketId                   nvarchar(256)     NULL
      ,CustomField1               nvarchar(256)     NULL
      ,CustomField2               nvarchar(256)     NULL
      ,CustomField3               nvarchar(256)     NULL
      ,CustomField4               nvarchar(256)     NULL
      ,CustomField5               nvarchar(256)     NULL
      ,CustomField6               nvarchar(256)     NULL
      ,CustomField7               nvarchar(256)     NULL
      ,CustomField8               nvarchar(256)     NULL
      ,CustomField9               nvarchar(256)     NULL
      ,CustomField10              nvarchar(256)     NULL
      ,SiteName                   nvarchar(256)     NULL
      ,AlertParams                xml               NULL
      ,ParameterHash              uniqueidentifier  NULL
      ,RepeatCount                int               NOT NULL
      ,AlertStringGuid            uniqueidentifier  NULL
      ,DBLastModifiedDateTime     datetime          NOT NULL
      ,DBLastModifiedByUserId     nvarchar(256)     NULL
      ,TfsWorkItemId              nvarchar(256)     NULL
      ,TfsWorkItemOwner           nvarchar(256)     NULL
      
      ,AlertStageRowId            int               NOT NULL IDENTITY(1, 1)
      ,AlertRowId                 int               NULL
      ,TableGuid                  uniqueidentifier  NULL
      ,ManagedEntityRowId         int               NULL
      ,WorkflowRowId              int               NULL
      ,InsertReadyInd             AS (ISNULL(ManagedEntityRowId + WorkflowRowId, 0))
      ,DWCreatedDateTime          datetime          NOT NULL DEFAULT(GETUTCDATE())
  '
 ,1
 ,10000
)
COMMIT
BEGIN TRAN
SET NOCOUNT ON
-- Need to place new columns above the standard columns, requires creation of a new table, copying data, then dropping old table
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'AlertStage' AND TABLE_SCHEMA = 'Alert')
BEGIN
    -- Create the new table
    DECLARE @Statement nvarchar(max)
    SELECT @Statement = 'CREATE TABLE Alert.Tmp_AlertStage (' + StagingTableColumnDefinition + ')'
    FROM StandardDatasetStagingArea
    WHERE DatasetId = '$Config/DatasetId$'
    EXECUTE (@Statement)
    -- Copy over the data from the existing AlertStage
    SET IDENTITY_INSERT Alert.Tmp_AlertStage ON
    INSERT Alert.Tmp_AlertStage
    (
        DatasetId
        ,ManagementGroupGuid
        ,AlertGuid
        ,AlertProblemGuid
        ,ManagedEntityGuid
        ,AlertName
        ,AlertDescription
        ,Severity
        ,Priority
        ,Category
        ,MonitorAlertInd
        ,WorkflowGuid
        ,RaisedDateTime
        ,CreatedDateTime
        ,ResolutionState
        ,Owner
        ,TicketId
        ,CustomField1
        ,CustomField2
        ,CustomField3
        ,CustomField4
        ,CustomField5
        ,CustomField6
        ,CustomField7
        ,CustomField8
        ,CustomField9
        ,CustomField10
        ,SiteName
        ,AlertParams
        ,ParameterHash
        ,RepeatCount
        ,AlertStringGuid
        ,DBLastModifiedDateTime
        ,DBLastModifiedByUserId
        ,AlertStageRowId
        ,AlertRowId
        ,TableGuid
        ,ManagedEntityRowId
        ,WorkflowRowId
        ,DWCreatedDateTime
    )
    SELECT
        DatasetId
        ,ManagementGroupGuid
        ,AlertGuid
        ,AlertProblemGuid
        ,ManagedEntityGuid
        ,AlertName
        ,AlertDescription
        ,Severity
        ,Priority
        ,Category
        ,MonitorAlertInd
        ,WorkflowGuid
        ,RaisedDateTime
        ,CreatedDateTime
        ,ResolutionState
        ,Owner
        ,TicketId
        ,CustomField1
        ,CustomField2
        ,CustomField3
        ,CustomField4
        ,CustomField5
        ,CustomField6
        ,CustomField7
        ,CustomField8
        ,CustomField9
        ,CustomField10
        ,SiteName
        ,AlertParams
        ,ParameterHash
        ,RepeatCount
        ,AlertStringGuid
        ,DBLastModifiedDateTime
        ,DBLastModifiedByUserId
      
        ,AlertStageRowId
        ,AlertRowId
        ,TableGuid
        ,ManagedEntityRowId
        ,WorkflowRowId
        ,DWCreatedDateTime
    FROM Alert.AlertStage
    SET IDENTITY_INSERT Alert.Tmp_AlertStage OFF
    -- Remove the old table
    DROP TABLE Alert.AlertStage
    -- Rename the temp table to the real name
    EXECUTE sp_rename N'Alert.Tmp_AlertStage', N'AlertStage', 'OBJECT'
    -- Apply indexes and permissions
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_AlertStage_AlertGuidDBLastModifiedDateTimeResolutionStateAlertStageRowId')
    BEGIN
      CREATE INDEX IX_AlertStage_AlertGuidDBLastModifiedDateTimeResolutionStateAlertStageRowId ON Alert.AlertStage (AlertGuid, DBLastModifiedDateTime, ResolutionState, AlertStageRowId)
    END
    EXEC DomainTableRegisterIndexOptimization
           @TableName = 'AlertStage'
          ,@SchemaName = 'Alert'
          ,@DatasetId = '$Config/DatasetId$'
  
    GRANT SELECT, INSERT, UPDATE, DELETE ON Alert.AlertStage TO OpsMgrWriter
END
COMMIT
                    SET NOCOUNT ON
-- update AlertDetail table definition templates
UPDATE sdas
SET TableTemplate = 
   '
        CREATE TABLE [Alert].[AlertDetail_$Guid$]
        (
             AlertDetailRowId           int  NOT NULL  IDENTITY(1, 1)
            ,AlertGuid                  uniqueidentifier NOT NULL
            ,Owner                      nvarchar(256) NULL
            ,TicketId                   nvarchar(256) NULL
            ,CustomField1               nvarchar(256) NULL
            ,CustomField2               nvarchar(256) NULL
            ,CustomField3               nvarchar(256) NULL
            ,CustomField4               nvarchar(256) NULL
            ,CustomField5               nvarchar(256) NULL
            ,CustomField6               nvarchar(256) NULL
            ,CustomField7               nvarchar(256) NULL
            ,CustomField8               nvarchar(256) NULL
            ,CustomField9               nvarchar(256) NULL
            ,CustomField10              nvarchar(256) NULL
            ,DBLastModifiedDateTime     datetime  NOT NULL
            ,DBLastModifiedByUserId     nvarchar(256) NULL
            ,DWCreatedDateTime          datetime NOT  NULL   DEFAULT(GETUTCDATE())
            ,TfsWorkItemId              nvarchar(256) NULL
            ,TfsWorkItemOwner           nvarchar(256) NULL
            
            ,CONSTRAINT [PK_AlertDetail_$Guid$] PRIMARY KEY CLUSTERED (AlertDetailRowId) ON $DataFileGroupName$
        ) ON $DataFileGroupName$
  '
  ,CoverViewSelectClause =
  'SELECT
       AlertGuid
      ,Owner
      ,TicketId
      ,CustomField1
      ,CustomField2
      ,CustomField3
      ,CustomField4
      ,CustomField5
      ,CustomField6
      ,CustomField7
      ,CustomField8
      ,CustomField9
      ,CustomField10
      ,DBLastModifiedDateTime
      ,DBLastModifiedByUserId
      ,DWCreatedDateTime
      ,TfsWorkItemId
      ,TfsWorkItemOwner
   '
FROM StandardDatasetAggregationStorage sdas
        JOIN StandardDataset sd ON (sdas.DatasetId = sd.DatasetId)
WHERE (sd.DatasetId = '$Config/DatasetId$')
  AND (sdas.TableTag = 'detail')
  AND (sdas.DependentTableInd = 1)
GO
 
-- update all tables that were already created
DECLARE 
   @StandardDatasetTableMapRowId int
  ,@Statement nvarchar(max)
  ,@SchemaName sysname
  ,@TableNameSuffix sysname
  ,@BaseTableName sysname
  ,@FullTableName sysname
SET @StandardDatasetTableMapRowId = 0
WHILE EXISTS (SELECT *
              FROM StandardDatasetTableMap tm
              WHERE (tm.StandardDatasetTableMapRowId &gt; @StandardDatasetTableMapRowId)
                AND (tm.DatasetId = '$Config/DatasetId$')
                AND (tm.InsertInd = 1)
             )
BEGIN
  SELECT TOP 1
     @StandardDatasetTableMapRowId = tm.StandardDatasetTableMapRowId
    ,@SchemaName = sd.SchemaName
    ,@TableNameSuffix = tm.TableNameSuffix
    ,@BaseTableName = sdas.BaseTableName
  FROM StandardDatasetTableMap tm
          JOIN StandardDataset sd ON (tm.DatasetId = sd.DatasetId)
          JOIN StandardDatasetAggregationStorage sdas ON (sdas.DatasetId = tm.DatasetId) AND (sdas.AggregationTypeId = tm.AggregationTypeId)
  WHERE (tm.StandardDatasetTableMapRowId &gt; @StandardDatasetTableMapRowId)
    AND (tm.DatasetId = '$Config/DatasetId$')
    AND (tm.InsertInd = 1)
    AND (sdas.TableTag = 'detail')
    AND (sdas.DependentTableInd = 1)
  ORDER BY tm.StandardDatasetTableMapRowId
  SET @FullTableName = @BaseTableName + '_' + @TableNameSuffix
  
  IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @FullTableName AND TABLE_SCHEMA = @SchemaName
    AND COLUMN_NAME = N'TfsWorkItemId')
  BEGIN
    SET @Statement = 'ALTER TABLE ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@FullTableName) + ' ADD TfsWorkItemId nvarchar(256) NULL'
    EXECUTE (@Statement)
  END
  IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @FullTableName AND TABLE_SCHEMA = @SchemaName
    AND COLUMN_NAME = N'TfsWorkItemOwner')
  BEGIN
    SET @Statement = 'ALTER TABLE ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@FullTableName) + ' ADD TfsWorkItemOwner nvarchar(256) NULL'
    EXECUTE (@Statement)
  END
END
GO
-- alter cover views
EXEC StandardDatasetBuildCoverView '$Config/DatasetId$', 0
GO
  
                    
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'AlertProcessStaging')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.AlertProcessStaging AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.AlertProcessStaging
   @DatasetId           uniqueidentifier
AS
BEGIN
  SET NOCOUNT ON
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)
  SET @ErrorInd = 0
  BEGIN TRY
    DECLARE
       @InsertTableName sysname
      ,@InsertTableGuid uniqueidentifier
      ,@InsertStartedDateTime datetime
      ,@Statement nvarchar(max)
      ,@MessageText nvarchar(max)
      ,@OperationDurationMs bigint
      ,@ExecResult int
      ,@DebugLevel int
      ,@LockResourceName sysname
      ,@TableGuid uniqueidentifier
      ,@SchemaName sysname
      ,@MaxRowsToProcessCount int
    
    SELECT
       @DebugLevel = DebugLevel
      ,@SchemaName = SchemaName
    FROM StandardDataset
    WHERE DatasetId = @DatasetId
    
    -- get max # of rows to process in one shot
    SELECT @MaxRowsToProcessCount = MaxRowsToProcessPerTransactionCount
    FROM StandardDatasetStagingArea
    WHERE (DatasetId = @DatasetId)
    
    IF (@MaxRowsToProcessCount IS NULL)
    BEGIN
      -- if max row count calue is not set default to 5000
      SET @MaxRowsToProcessCount = 5000
    END
    
    -- delete old entries
    DECLARE @MaxDataAgeDays int
    
    SELECT @MaxDataAgeDays = MaxDataAgeDays
    FROM StandardDatasetAggregation
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = 0)
      
    DELETE TOP (@MaxRowsToProcessCount)
    FROM Alert.AlertStage
    WHERE (DatasetId = @DatasetId)
      AND (DWCreatedDateTime &lt; DATEADD(day, -@MaxDataAgeDays, GETUTCDATE()))
    -- update managed entity ids
    UPDATE s
    SET ManagedEntityRowId = me.ManagedEntityRowId
    FROM Alert.AlertStage s
          JOIN vManagementGroup mg ON (s.ManagementGroupGuid = mg.ManagementGroupGuid)
          JOIN vManagedEntity me ON ((s.ManagedEntityGuid = me.ManagedEntityGuid) AND (mg.ManagementGroupRowId = me.ManagementGroupRowId))
    WHERE (s.ManagedEntityRowId IS NULL)
      
    -- update workflow ids
    UPDATE s
    SET WorkflowRowId = m.MonitorRowId
    FROM Alert.AlertStage s
          JOIN vMonitor m ON (s.WorkflowGuid = m.MonitorGuid)
    WHERE (s.MonitorAlertInd  = 1)
      AND (s.WorkflowRowId IS NULL)
      
    UPDATE s
    SET WorkflowRowId = r.RuleRowId
    FROM Alert.AlertStage s
          JOIN vRule r ON (s.WorkflowGuid = r.RuleGuid)
    WHERE (s.MonitorAlertInd  = 0)
      AND (s.WorkflowRowId IS NULL)
      
    BEGIN TRAN
    
    -- lock table map to ensure we insert into table opened for insertion
    SET @LockResourceName = CAST(@DatasetId AS varchar(50)) + '_TableMap'
  
    EXEC @ExecResult = sp_getapplock
           @Resource = @LockResourceName
          ,@LockMode = 'Shared'
          ,@LockOwner = 'Transaction'
    IF (@ExecResult &lt; 0)
    BEGIN
      RAISERROR(777971001, 16, 1, 'Shared:StandardDatasetTableMap', @ExecResult)
    END
  
    EXEC dbo.StandardDatasetGetInsertTableGuid @DatasetId, 0, @InsertTableGuid OUTPUT
    
    SELECT @InsertTableName = BaseTableName + '_' + REPLACE(CAST(@InsertTableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = 0)
      AND (DependentTableInd = 0)
    
    IF (@DebugLevel &gt; 3)
    BEGIN
      SELECT @MessageText = 'Starting to insert alert(s) into ' + @InsertTableName
      
      SET @InsertStartedDateTime = GETUTCDATE()
      
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 4
        ,@MessageText = @MessageText
    END
     
    -- calculate alert tables and row ids
    DECLARE @VisitedPartition TABLE (
      PartitionGuid uniqueidentifier
    )
    
    WHILE EXISTS (SELECT *
                  FROM Alert.AlertStage s
                        CROSS JOIN StandardDatasetTableMap m
                  WHERE (s.AlertRowId IS NULL)
                    AND (m.DatasetId = @DatasetId)
                    AND (m.AggregationTypeId = 0)
                    AND ((s.RaisedDateTime BETWEEN m.StartDateTime and m.EndDateTime) OR (m.InsertInd = 1))
                    AND (NOT EXISTS (SELECT * FROM @VisitedPartition WHERE (PartitionGuid = m.TableGuid)))
                 )
    BEGIN
      SELECT TOP 1
         @TableGuid = m.TableGuid
      FROM Alert.AlertStage s
            CROSS JOIN StandardDatasetTableMap m
      WHERE (s.AlertRowId IS NULL)
        AND (m.DatasetId = @DatasetId)
        AND (m.AggregationTypeId = 0)
        AND (s.RaisedDateTime BETWEEN ISNULL(m.StartDateTime, '19000101') AND ISNULL(m.EndDateTime, '99991231'))
        AND (NOT EXISTS (SELECT * FROM @VisitedPartition WHERE (PartitionGuid = m.TableGuid)))
      ORDER BY m.StandardDatasetTableMapRowId
      
      INSERT @VisitedPartition VALUES (@TableGuid)
      
      SET @Statement =
            'UPDATE s'
          + ' SET AlertRowId = a.AlertRowId'
          + '    ,TableGuid = ''' + CAST(@TableGuid AS varchar(50)) + ''''
          + ' FROM Alert.AlertStage s'
          + '      JOIN ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('Alert_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' a ON (s.AlertGuid = a.AlertGuid)'
          + ' WHERE (s.AlertRowId IS NULL)'
      EXECUTE (@Statement)
    END
    -- check to see if AlertStage2Process table is not empty
    DECLARE @AlertStage2ProcessRowCount int
    DECLARE @SpaceUsedInfo TABLE (
               [name]       sysname
              ,[rows]       int
              ,reserved     nvarchar(100)
              ,data         nvarchar(100)
              ,index_size   nvarchar(100)
              ,unused       nvarchar(100)
            )
            
    INSERT @SpaceUsedInfo
    EXEC sp_spaceused 'Alert.AlertStage2Process'
    
    SELECT @AlertStage2ProcessRowCount = [rows]
    FROM @SpaceUsedInfo
    IF (@AlertStage2ProcessRowCount = 0)
    BEGIN
      -- move some rows to processing table if it is empty
      
      BEGIN TRAN
      
      INSERT Alert.AlertStage2Process (
         DatasetId
        ,ManagementGroupGuid
        ,AlertGuid
        ,AlertProblemGuid
        ,ManagedEntityGuid
        ,AlertName
        ,AlertDescription
        ,Severity
        ,Priority
        ,Category
        ,MonitorAlertInd
        ,WorkflowGuid
        ,RaisedDateTime
        ,CreatedDateTime
        ,ResolutionState
        ,Owner
        ,TicketId
        ,CustomField1
        ,CustomField2
        ,CustomField3
        ,CustomField4
        ,CustomField5
        ,CustomField6
        ,CustomField7
        ,CustomField8
        ,CustomField9
        ,CustomField10
        ,SiteName
        ,AlertParams
        ,ParameterHash
        ,RepeatCount
        ,AlertStringGuid
        ,DBLastModifiedDateTime
        ,DBLastModifiedByUserId
        
        ,AlertStageRowId
        ,AlertRowId
        ,TableGuid 
        ,ManagedEntityRowId
        ,WorkflowRowId
        ,DWCreatedDateTime
        ,TfsWorkItemId
        ,TfsWorkItemOwner
      )
      SELECT TOP (@MaxRowsToProcessCount)
         DatasetId
        ,ManagementGroupGuid
        ,AlertGuid
        ,AlertProblemGuid
        ,ManagedEntityGuid
        ,AlertName
        ,AlertDescription
        ,Severity
        ,Priority
        ,Category
        ,MonitorAlertInd
        ,WorkflowGuid
        ,RaisedDateTime
        ,CreatedDateTime
        ,ResolutionState
        ,Owner
        ,TicketId
        ,CustomField1
        ,CustomField2
        ,CustomField3
        ,CustomField4
        ,CustomField5
        ,CustomField6
        ,CustomField7
        ,CustomField8
        ,CustomField9
        ,CustomField10
        ,SiteName
        ,AlertParams
        ,ParameterHash
        ,RepeatCount
        ,AlertStringGuid
        ,DBLastModifiedDateTime
        ,DBLastModifiedByUserId
        
        ,AlertStageRowId
        ,AlertRowId
        ,TableGuid 
        ,ManagedEntityRowId
        ,WorkflowRowId
        ,DWCreatedDateTime
        ,TfsWorkItemId
        ,TfsWorkItemOwner
      FROM Alert.AlertStage s
      WHERE (s.AlertStageRowId = (SELECT TOP 1 AlertStageRowId
                                  FROM Alert.AlertStage
                                  WHERE (AlertGuid = s.AlertGuid)
                                  ORDER BY DBLastModifiedDateTime, ResolutionState, AlertStageRowId)
                                 )
        AND (s.InsertReadyInd &gt; 0)
      DELETE s
      FROM Alert.AlertStage s
            JOIN Alert.AlertStage2Process s2p ON (s2p.AlertStageRowId = s.AlertStageRowId)
      COMMIT
    END
    -- work only with rows in processing table
    IF (EXISTS (SELECT * FROM Alert.AlertStage2Process WHERE (AlertRowId IS NULL)))
    BEGIN
      -- we have new alerts in the staging area
      -- process only the first "change" since there
      -- may be multiple changes stored in staging at
      -- the same time, if that's the case - we'll pick
      -- up all other changes next time we process staging
      SET @Statement = 
          'INSERT ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@InsertTableName) + ' ('
        + '   AlertGuid'
        + '  ,AlertProblemGuid'
        + '  ,ManagedEntityRowId'
        + '  ,AlertName'
        + '  ,AlertDescription'
        + '  ,Severity'
        + '  ,Priority'
        + '  ,Category'
        + '  ,WorkflowRowId'
        + '  ,MonitorAlertInd'
        + '  ,[DateTime]'
        + '  ,SiteName'
        + '  ,RepeatCount'
        + '  ,AlertStringGuid'
        + '  ,ParameterHash'
        + '  ,DBCreatedDateTime'
        + ' )'
        + ' SELECT'
        + '   s.AlertGuid'
        + '  ,s.AlertProblemGuid'
        + '  ,s.ManagedEntityRowId'
        + '  ,s.AlertName'
        + '  ,s.AlertDescription'
        + '  ,s.Severity'
        + '  ,s.Priority'
        + '  ,s.Category'
        + '  ,s.WorkflowRowId'
        + '  ,s.MonitorAlertInd'
        + '  ,s.RaisedDateTime'
        + '  ,s.SiteName'
        + '  ,s.RepeatCount'
        + '  ,NULLIF(s.AlertStringGuid, ''00000000-0000-0000-0000-000000000000'')'
        + '  ,NULLIF(s.ParameterHash, ''00000000-0000-0000-0000-000000000000'')'
        + '  ,s.CreatedDateTime'
        + ' FROM Alert.AlertStage2Process s'
        + ' WHERE (s.AlertRowId IS NULL)'
      EXECUTE (@Statement)
      
      -- insert alert parameters
      CREATE TABLE #AlertParameter
      (
         AlertParameterRowId            int IDENTITY(1, 1)
        ,AlertGuid                      uniqueidentifier  NOT NULL
        ,ParameterIndex                 tinyint NULL
        ,ParameterValue                 nvarchar(255) NULL
      )
      
      INSERT #AlertParameter (
         AlertGuid
        ,ParameterValue
      )
      SELECT
         s.AlertGuid
        ,xml.ParameterValue.value('.', 'nvarchar(255)')
      FROM Alert.AlertStage2Process s
            CROSS APPLY s.AlertParams.nodes('AlertParameters/*') as xml(ParameterValue)
      WHERE (s.AlertRowId IS NULL)
      
      -- set parameter indexes
    
      UPDATE ap
      SET ap.ParameterIndex = ap.AlertParameterRowId - ap1.AlertParameterRowId + 1
      FROM #AlertParameter ap
            JOIN #AlertParameter ap1 ON (ap.AlertGuid = ap1.AlertGuid)
      WHERE NOT EXISTS (SELECT *
                        FROM #AlertParameter
                        WHERE (AlertGuid = ap1.AlertGuid)
                          AND (AlertParameterRowId &lt; ap1.AlertParameterRowId)
                       )
      SET @Statement = 
          'INSERT ' + QUOTENAME(@SchemaName) + '.' + 'AlertParameter_' + REPLACE(CAST(@InsertTableGuid AS varchar(50)), '-', '') + '('
        + '    AlertGuid'
        + '   ,ParameterIndex'
        + '   ,ParameterValue'
        + ' )'
        + ' SELECT '
        + '    AlertGuid'
        + '   ,ParameterIndex'
        + '   ,ParameterValue'
        + ' FROM #AlertParameter'
      EXECUTE (@Statement)
      DROP TABLE #AlertParameter
      
      -- retrieve created alert ids
      SET @Statement = 
          'UPDATE s'
        + ' SET AlertRowId = a.AlertRowId'
        + '    ,TableGuid = ''' + CAST(@InsertTableGuid AS varchar(50)) + ''''
        + ' FROM Alert.AlertStage2Process s'
        + '   JOIN  ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@InsertTableName) + ' a ON (s.AlertGuid = a.AlertGuid)'
        + ' WHERE (s.AlertRowId IS NULL)'
      EXECUTE (@Statement)
    END
    IF (EXISTS (SELECT * FROM Alert.AlertStage2Process WHERE (AlertRowId IS NOT NULL)))
    BEGIN
      -- process alert updates
      
      -- build unique list of tables affected
      DECLARE @AffectedPartition TABLE (
         PartitionRowId int IDENTITY(1, 1)
        ,TableGuid uniqueidentifier
      )
      
      INSERT @AffectedPartition(TableGuid)
      SELECT DISTINCT TableGuid
      FROM Alert.AlertStage2Process
      WHERE (AlertRowId IS NOT NULL)
      
      DECLARE @PartitionRowId int
      
      SET @PartitionRowId = 0
      
      WHILE (EXISTS (SELECT * FROM @AffectedPartition WHERE (PartitionRowId &gt; @PartitionRowId)))
      BEGIN
        SELECT TOP 1
           @PartitionRowId = PartitionRowId
          ,@TableGuid = TableGuid
        FROM @AffectedPartition
        WHERE (PartitionRowId &gt; @PartitionRowId)
        
        -- update alert repeat count
        SET @Statement = 
            'UPDATE a'
          + ' SET RepeatCount = s.RepeatCount'
          + '    ,DWLastModifiedDateTime = GETUTCDATE()'
          + ' FROM Alert.AlertStage2Process s'
          + '       JOIN ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('Alert_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' a'
          + '             ON (s.AlertRowId = a.AlertRowId)'
          + ' WHERE (s.RepeatCount &gt; a.RepeatCount)'
        EXECUTE (@Statement)
        
        -- check which alerts have resolution state changed
        CREATE TABLE #ResolutionState (
           AlertStageRowId        int               NOT NULL
          ,AlertGuid              uniqueidentifier  NOT NULL
          ,LastResolutionState    tinyint           NULL
        )
        
        SET @Statement = 
            'INSERT #ResolutionState ('
          + '    AlertStageRowId'
          + '   ,AlertGuid'
          + '   ,LastResolutionState'
          + ')'
          + ' SELECT'
          + '    s.AlertStageRowId'
          + '   ,s.AlertGuid'
          + '   ,r.ResolutionState'
          + ' FROM Alert.AlertStage2Process s'
          + '       LEFT JOIN ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertResolutionState_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' r'
          + '             ON (s.AlertGuid = r.AlertGuid) AND (r.AlertResolutionStateRowId = (SELECT TOP 1 AlertResolutionStateRowId FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertResolutionState_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' WHERE (AlertGuid = s.AlertGuid) AND (StateSetDateTime &lt;= s.DBLastModifiedDateTime) ORDER BY StateSetDateTime DESC, ResolutionState DESC))'
          + ' WHERE (s.AlertRowId IS NOT NULL)'
          + '   AND (s.TableGuid = ''' + CAST(@TableGuid AS varchar(50)) + ''')'
        EXECUTE (@Statement)
        
        -- insert resolution state changes
        SET @Statement =
            'INSERT ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertResolutionState_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' ('
          + '    AlertGuid'
          + '   ,ResolutionState'
          + '   ,TimeFromRaisedSeconds'
          + '   ,StateSetDateTime'
          + '   ,StateSetByUserId'
          + ' )'
          + ' SELECT'
          + '    s.AlertGuid'
          + '   ,s.ResolutionState'
          + '   ,CASE ' -- check to see if alert was raised way in the past/future
          + '      WHEN ISNULL(ABS(DATEDIFF(year, s.DBLastModifiedDateTime, s.RaisedDateTime)), 0) &gt; 3 THEN 3*365*24*60*60 '
          + '      ELSE ISNULL(ABS(DATEDIFF(second, s.DBLastModifiedDateTime, s.RaisedDateTime)), 0) '
          + '    END '
          + '   ,s.DBLastModifiedDateTime'
          + '   ,s.DBLastModifiedByUserId'
          + ' FROM #ResolutionState r'
          + '      JOIN Alert.AlertStage2Process s ON (r.AlertStageRowId = s.AlertStageRowId)'
          + ' WHERE (s.ResolutionState &lt;&gt; r.LastResolutionState) OR (r.LastResolutionState IS NULL)'
        EXECUTE (@Statement)
        
        -- update all "time in state" columns since
        -- we've added some state transitions potentially "in the middle"
        SET @Statement =
            'UPDATE ars'
          + '    SET TimeInStateSeconds = ISNULL(ABS(DATEDIFF(second, ars.StateSetDateTime, ars2.StateSetDateTime)), -1)'
          + ' FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertResolutionState_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' ars'
          + '     JOIN ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertResolutionState_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' ars2'
          + '        ON (ars.AlertGuid = ars2.AlertGuid)'
          + '     JOIN (SELECT DISTINCT AlertGuid = s.AlertGuid'
          + '           FROM #ResolutionState r'
          + '             JOIN Alert.AlertStage2Process s ON (r.AlertStageRowId = s.AlertStageRowId)'
          + '           WHERE (s.ResolutionState &lt;&gt; r.LastResolutionState) OR (r.LastResolutionState IS NULL)'
          + '          ) AS al ON (ars.AlertGuid = al.AlertGuid)'
          + ' WHERE (ars2.AlertResolutionStateRowId = (SELECT TOP 1 AlertResolutionStateRowId'
          + '                                          FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertResolutionState_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', ''))
          + '                                          WHERE (AlertGuid = ars.AlertGuid)'
          + '                                            AND (StateSetDateTime &gt;= ars.StateSetDateTime)'
          + '                                            AND (AlertResolutionStateRowId &lt;&gt; ars.AlertResolutionStateRowId)'
          + '                                          ORDER BY StateSetDateTime, ResolutionState DESC'
          + '                                         ))'
        EXECUTE (@Statement)
        
        DROP TABLE #ResolutionState
        
        -- check to see if alert properties were updated
        CREATE TABLE #AlertDetail (
           AlertStageRowId            int           NOT NULL
          ,DetailRecordExistedInd     bit           NOT NULL
          ,Owner                      nvarchar(256) NULL
          ,TicketId                   nvarchar(256) NULL
          ,CustomField1               nvarchar(256) NULL
          ,CustomField2               nvarchar(256) NULL
          ,CustomField3               nvarchar(256) NULL
          ,CustomField4               nvarchar(256) NULL
          ,CustomField5               nvarchar(256) NULL
          ,CustomField6               nvarchar(256) NULL
          ,CustomField7               nvarchar(256) NULL
          ,CustomField8               nvarchar(256) NULL
          ,CustomField9               nvarchar(256) NULL
          ,CustomField10              nvarchar(256) NULL
          ,TfsWorkItemId              nvarchar(256) NULL
          ,TfsWorkItemOwner           nvarchar(256) NULL
        )
        
        SET @Statement = 
            'INSERT #AlertDetail ('
          + '    AlertStageRowId'
          + '   ,DetailRecordExistedInd'
          + '   ,Owner'
          + '   ,TicketId'
          + '   ,CustomField1'
          + '   ,CustomField2'
          + '   ,CustomField3'
          + '   ,CustomField4'
          + '   ,CustomField5'
          + '   ,CustomField6'
          + '   ,CustomField7'
          + '   ,CustomField8'
          + '   ,CustomField9'
          + '   ,CustomField10'
          + '   ,TfsWorkItemId'
          + '   ,TfsWorkItemOwner'
          + ')'
          + ' SELECT'
          + '    s.AlertStageRowId'
          + '   ,CASE WHEN d.AlertGuid IS NULL THEN 0 ELSE 1 END'
          + '   ,d.Owner'
          + '   ,d.TicketId'
          + '   ,d.CustomField1'
          + '   ,d.CustomField2'
          + '   ,d.CustomField3'
          + '   ,d.CustomField4'
          + '   ,d.CustomField5'
          + '   ,d.CustomField6'
          + '   ,d.CustomField7'
          + '   ,d.CustomField8'
          + '   ,d.CustomField9'
          + '   ,d.CustomField10'
          + '   ,d.TfsWorkItemId'
          + '   ,d.TfsWorkItemOwner'
          + ' FROM Alert.AlertStage2Process s'
          + '       LEFT JOIN ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertDetail_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' d ON (s.AlertGuid = d.AlertGuid)'
          + ' WHERE (s.AlertRowId IS NOT NULL)'
          + '   AND (s.TableGuid = ''' + CAST(@TableGuid AS varchar(50)) + ''')'
          + '   AND (NOT EXISTS (SELECT * FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertDetail_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' WHERE (AlertGuid = s.AlertGuid) AND (DBLastModifiedDateTime &lt;= s.DBLastModifiedDateTime) AND (AlertDetailRowId &gt; d.AlertDetailRowId)))'
        EXECUTE (@Statement)
        
        -- insert alert detail changes
        SET @Statement =
            'INSERT ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME('AlertDetail_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')) + ' ('
          + '    AlertGuid'
          + '   ,Owner'
          + '   ,TicketId'
          + '   ,CustomField1'
          + '   ,CustomField2'
          + '   ,CustomField3'
          + '   ,CustomField4'
          + '   ,CustomField5'
          + '   ,CustomField6'
          + '   ,CustomField7'
          + '   ,CustomField8'
          + '   ,CustomField9'
          + '   ,CustomField10'
          + '   ,DBLastModifiedDateTime'
          + '   ,DBLastModifiedByUserId'
          + '   ,TfsWorkItemId'
          + '   ,TfsWorkItemOwner'
          + ' )'
          + ' SELECT'
          + '    s.AlertGuid'
          + '   ,s.Owner'
          + '   ,s.TicketId'
          + '   ,s.CustomField1'
          + '   ,s.CustomField2'
          + '   ,s.CustomField3'
          + '   ,s.CustomField4'
          + '   ,s.CustomField5'
          + '   ,s.CustomField6'
          + '   ,s.CustomField7'
          + '   ,s.CustomField8'
          + '   ,s.CustomField9'
          + '   ,s.CustomField10'
          + '   ,s.DBLastModifiedDateTime'
          + '   ,s.DBLastModifiedByUserId'
          + '   ,s.TfsWorkItemId'
          + '   ,s.TfsWorkItemOwner'
          + ' FROM #AlertDetail d'
          + '      JOIN Alert.AlertStage2Process s ON (d.AlertStageRowId = s.AlertStageRowId)'
          + ' WHERE (ISNULL(s.Owner, '''') &lt;&gt; ISNULL(d.Owner, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.TicketId, '''') &lt;&gt; ISNULL(d.TicketId, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField1, '''') &lt;&gt; ISNULL(d.CustomField1, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField2, '''') &lt;&gt; ISNULL(d.CustomField2, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField3, '''') &lt;&gt; ISNULL(d.CustomField3, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField4, '''') &lt;&gt; ISNULL(d.CustomField4, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField5, '''') &lt;&gt; ISNULL(d.CustomField5, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField6, '''') &lt;&gt; ISNULL(d.CustomField6, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField7, '''') &lt;&gt; ISNULL(d.CustomField7, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField8, '''') &lt;&gt; ISNULL(d.CustomField8, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField9, '''') &lt;&gt; ISNULL(d.CustomField9, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.CustomField10, '''') &lt;&gt; ISNULL(d.CustomField10, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.TfsWorkItemId, '''') &lt;&gt; ISNULL(d.TfsWorkItemId, '''') COLLATE database_default)'
          + '    OR (ISNULL(s.TfsWorkItemOwner, '''') &lt;&gt; ISNULL(d.TfsWorkItemOwner, '''') COLLATE database_default)'
          + '    OR (d.DetailRecordExistedInd = 0)'
        EXECUTE (@Statement)
        
        DROP TABLE #AlertDetail
        
        -- mark affected table as non-optimized
        UPDATE StandardDatasetTableMap
        SET OptimizedInd = 0
        WHERE (DatasetId = @DatasetId)
          AND (AggregationTypeId = 0)
          AND (TableGuid = @TableGuid)
          AND (InsertInd = 0)
      END
    END
  
    TRUNCATE TABLE Alert.AlertStage2Process
  
    IF (@DebugLevel &gt; 3)
    BEGIN
      SET @MessageText = 'Finished inserting alert(s) into ' + @InsertTableName
      SET @OperationDurationMs = ABS(DATEDIFF(ms, GETUTCDATE(), @InsertStartedDateTime))
      
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 4
        ,@MessageText = @MessageText
        ,@OperationDurationMs = @OperationDurationMs
    END
   
    COMMIT
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
  
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    IF (@DebugLevel &gt; 0)
    BEGIN
      DECLARE @DebugMessageText nvarchar(max)
      
      SET @DebugMessageText = N'Failed to process alert staging area. Error ' + CAST(@ErrorNumber AS varchar(15))
                      + ', Procedure ' + @ErrorProcedure
                      + ', Line ' + CAST(@ErrorLine AS varchar(15))
                      + ', Message: '+ @ErrorMessageText
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 1
        ,@MessageText = @DebugMessageText
    END
      
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END
GO
            </Upgrade></DataWarehouseDataSet><DataWarehouseDataSet ID="Microsoft.SystemCenter.DataWarehouse.DataSet.Event" Accessibility="Public"><Dependencies><DataWarehouseScript>Microsoft.SystemCenter.DataWarehouse.Script.DatasetDebuggingSupport</DataWarehouseScript><DataWarehouseScript>Microsoft.SystemCenter.DataWarehouse.Script.StandardDatasetSupport</DataWarehouseScript></Dependencies><Configuration><IncludeSchemaTypes><SchemaType>Microsoft.SystemCenter.DataWarehouse.StandardDatasetSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Storage" type="AggregationSettingsType" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="RawInsertTableCount" type="xsd:positiveInteger" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BlockingMaintenanceDailyStartTime" type="TimeOfDayType" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BlockingMaintenanceDurationMinutes"
type="xsd:positiveInteger" /></Configuration><Install> 
                    SET NOCOUNT ON
EXEC StandardDatasetDelete @DatasetId = '$Config/DatasetId$'
GO
INSERT StandardDataset (
   DatasetId 
  ,SchemaName
  ,DefaultAggregationIntervalCount
  ,RawInsertTableCount
  ,StagingProcessorStoredProcedureName
  ,BlockingMaintenanceDailyStartTime
  ,BlockingMaintenanceDurationMinutes
)
VALUES
(
   '$Config/DatasetId$'
  ,'Event'
  ,0
  ,$Config/RawInsertTableCount$
  ,'EventProcessStaging'
  ,'$Config/BlockingMaintenanceDailyStartTime$'
  ,$Config/BlockingMaintenanceDurationMinutes$
)
GO
                    SET NOCOUNT ON
INSERT StandardDatasetAggregation
(                               
   DatasetId
  ,AggregationTypeId
  ,AggregationIntervalDurationMinutes
  ,AggregationStartDelayMinutes
  ,BuildAggregationStoredProcedureName
  ,DeleteAggregationStoredProcedureName
  ,GroomStoredProcedureName
  ,IndexOptimizationIntervalMinutes
  ,MaxDataAgeDays
  ,GroomingIntervalMinutes
  ,MaxRowsToGroom
  ,LastGroomingDateTime
  ,DataFileGroupName
  ,IndexFileGroupName
)
VALUES (
   '$Config/DatasetId$'
  ,0
  ,NULL
  ,NULL
  ,NULL
  ,NULL
  ,'EventGroom'
  ,$Config/Storage/IndexOptimizationIntervalMinutes$
  ,$Config/Storage/MaxDataAgeDays$
  ,$Config/Storage/GroomingIntervalMinutes$
  ,$Config/Storage/MaxRowsToGroom$
  ,GETUTCDATE()
  ,ISNULL(CAST(NULLIF('$Config/Storage/DataFileGroupName$', '') AS sysname), 'default')
  ,ISNULL(CAST(NULLIF('$Config/Storage/IndexFileGroupName$', '') AS sysname), 'default')
)
GO
                    SET NOCOUNT ON
DECLARE
   @MaxTableRowCount    int
  ,@MaxTableSizeKb      int
  
SELECT
   @MaxTableSizeKb = NULLIF('$Config/Storage/MaxTableSizeKb$', '')
  ,@MaxTableRowCount = NULLIF('$Config/Storage/MaxTableRowCount$', '')
  
INSERT StandardDatasetAggregationStorage
(                               
   DatasetId
  ,AggregationTypeId
  ,BaseTableName
  ,DependentTableInd
  ,TableTemplate
  ,CoverViewSelectClause
  ,MaxTableRowCount
  ,MaxTableSizeKb 
)
VALUES
(
   '$Config/DatasetId$'
  ,0
  ,'Event'
  ,0
  ,'
        CREATE TABLE [Event].[Event_$Guid$]
        (
             EventRowId int  NOT NULL  IDENTITY(1, 1)
            ,EventOriginId                  uniqueidentifier  NOT NULL
            ,[DateTime]                     datetime          NOT NULL
            ,EventPublisherRowId            int               NOT NULL
            ,EventChannelRowId              smallint          NOT NULL
            ,EventCategoryRowId             int               NOT NULL
            ,EventLevelId                   tinyint           NOT NULL
            ,LoggingComputerRowId           int               NOT NULL
            ,EventNumber                    bigint            NOT NULL
            ,EventDisplayNumber             int               NOT NULL
            ,UserNameRowId                  int               NOT NULL
            ,RawDescriptionHash             uniqueidentifier  NULL
            ,ParameterHash                  uniqueidentifier  NULL
            ,EventDataHash                  uniqueidentifier  NULL
            
            ,CONSTRAINT [PK_Event_$Guid$] PRIMARY KEY CLUSTERED (EventRowId) ON $DataFileGroupName$
        ) ON $DataFileGroupName$
  '
  ,'SELECT
       EventOriginId
      ,[DateTime]
      ,EventPublisherRowId
      ,EventChannelRowId
      ,EventCategoryRowId
      ,EventLevelId
      ,LoggingComputerRowId
      ,EventNumber
      ,EventDisplayNumber
      ,UserNameRowId
      ,RawDescriptionHash
      ,ParameterHash
      ,EventDataHash
   '
  ,@MaxTableRowCount
  ,@MaxTableSizeKb
)
INSERT StandardDatasetAggregationStorage
(                               
   DatasetId
  ,AggregationTypeId
  ,BaseTableName
  ,TableTag
  ,DependentTableInd
  ,TableTemplate
  ,CoverViewSelectClause
  ,MaxTableRowCount
  ,MaxTableSizeKb 
)
VALUES
(
   '$Config/DatasetId$'
  ,0
  ,'EventRule'
  ,'rule'
  ,1
  ,'
        CREATE TABLE [Event].[EventRule_$Guid$]
        (
             EventRuleRowId       int               NOT NULL  IDENTITY(1, 1)
            ,EventOriginId        uniqueidentifier  NOT NULL
            ,RuleRowId            int               NOT NULL
            ,ManagedEntityRowId   int               NOT NULL
            
            ,CONSTRAINT [PK_EventRule_$Guid$] PRIMARY KEY CLUSTERED (EventRuleRowId) ON $DataFileGroupName$
        ) ON $DataFileGroupName$
  '
  ,'SELECT
       EventOriginId
      ,RuleRowId
      ,ManagedEntityRowId
   '
  ,@MaxTableRowCount
  ,@MaxTableSizeKb
)
INSERT StandardDatasetAggregationStorage
(                               
   DatasetId
  ,AggregationTypeId
  ,BaseTableName
  ,TableTag
  ,DependentTableInd
  ,TableTemplate
  ,CoverViewSelectClause
  ,MaxTableRowCount
  ,MaxTableSizeKb 
)
VALUES
(
   '$Config/DatasetId$'
  ,0
  ,'EventParameter'
  ,'parameter'
  ,1
  ,'
        CREATE TABLE [Event].[EventParameter_$Guid$]
        (
             EventParameterRowId int  NOT NULL  IDENTITY(1, 1)
            ,EventOriginId                  uniqueidentifier  NOT NULL
            ,ParameterIndex                 tinyint NOT NULL
            ,ParameterValue                 nvarchar(max) NULL
            
            ,CONSTRAINT [PK_EventParameter_$Guid$] PRIMARY KEY CLUSTERED (EventParameterRowId) ON $DataFileGroupName$
        ) ON $DataFileGroupName$
  '
  ,'SELECT
       EventOriginId
      ,ParameterIndex
      ,ParameterValue
   '
  ,@MaxTableRowCount
  ,@MaxTableSizeKb
)
INSERT StandardDatasetAggregationStorage
(                               
   DatasetId
  ,AggregationTypeId
  ,BaseTableName
  ,TableTag
  ,DependentTableInd
  ,TableTemplate
  ,CoverViewSelectClause
  ,MaxTableRowCount
  ,MaxTableSizeKb 
)
VALUES
(
   '$Config/DatasetId$'
  ,0
  ,'EventDetail'
  ,'detail'
  ,1
  ,'
        CREATE TABLE [Event].[EventDetail_$Guid$]
        (
             EventDetailRowId int  NOT NULL  IDENTITY(1, 1)
            ,EventOriginId                  uniqueidentifier  NOT NULL
            ,RawDescription                 nvarchar(max)     NULL
            ,RenderedDescription            nvarchar(max)     NULL
            ,EventData                      xml               NULL
            
            ,CONSTRAINT [PK_EventDetail_$Guid$] PRIMARY KEY CLUSTERED (EventDetailRowId) ON $DataFileGroupName$
        ) ON $DataFileGroupName$
  '
  ,'SELECT
       EventOriginId
      ,RawDescription
      ,RenderedDescription
      ,EventData
   '
  ,@MaxTableRowCount
  ,@MaxTableSizeKb
)
GO
                    -- main event table indexes
EXEC StandardDatasetIndexDelete
   @DatasetId = '$Config/DatasetId$'
  ,@IndexGuid = 'FADEE782-6397-4D34-B0C9-10DD260C7D76'
	,@DeleteIndexOnExistingTablesInd = 0
EXEC StandardDatasetIndexInsert
   @DatasetId = '$Config/DatasetId$'
  ,@AggregationTypeId = 0
  ,@DependentTableInd = 0
  ,@TableTag = NULL
  ,@UniqueInd = 0
  ,@IndexGuid = 'FADEE782-6397-4D34-B0C9-10DD260C7D76'
  ,@IndexDefinition = '([DateTime])'
  ,@CreateIndexOnExistingTablesInd = 0
EXEC StandardDatasetIndexDelete
   @DatasetId = '$Config/DatasetId$'
  ,@IndexGuid = '4CFFAA7E-9B6C-432C-B90C-0A28994FAE6F'
	,@DeleteIndexOnExistingTablesInd = 0
EXEC StandardDatasetIndexInsert
   @DatasetId = '$Config/DatasetId$'
  ,@AggregationTypeId = 0
  ,@DependentTableInd = 0
  ,@TableTag = NULL
  ,@UniqueInd = 1
  ,@IndexGuid = '4CFFAA7E-9B6C-432C-B90C-0A28994FAE6F'
  ,@IndexDefinition = '(EventOriginId)'
  ,@CreateIndexOnExistingTablesInd = 0
-- parameter table indexes
EXEC StandardDatasetIndexDelete
   @DatasetId = '$Config/DatasetId$'
  ,@IndexGuid = '2E308EFB-5FFB-48ac-8A55-A43751F569F5'
	,@DeleteIndexOnExistingTablesInd = 0
EXEC StandardDatasetIndexInsert
   @DatasetId = '$Config/DatasetId$'
  ,@AggregationTypeId = 0
  ,@DependentTableInd = 1
  ,@TableTag = 'parameter'
  ,@UniqueInd = 1
  ,@IndexGuid = '2E308EFB-5FFB-48ac-8A55-A43751F569F5'
  ,@IndexDefinition = '(EventOriginId, ParameterIndex)'
  ,@CreateIndexOnExistingTablesInd = 0
-- detail table indexes
EXEC StandardDatasetIndexDelete
   @DatasetId = '$Config/DatasetId$'
  ,@IndexGuid = '04937270-50DE-49b8-AB6F-0E214749914A'
	,@DeleteIndexOnExistingTablesInd = 0
EXEC StandardDatasetIndexInsert
   @DatasetId = '$Config/DatasetId$'
  ,@AggregationTypeId = 0
  ,@DependentTableInd = 1
  ,@TableTag = 'detail'
  ,@UniqueInd = 1
  ,@IndexGuid = '04937270-50DE-49b8-AB6F-0E214749914A'
  ,@IndexDefinition = '(EventOriginId)'
  ,@CreateIndexOnExistingTablesInd = 0
                    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE [name] = 'Event')
BEGIN
  EXECUTE('CREATE SCHEMA Event')
END
GO
-- change schema ownership to allow index rebuild and reorganize
ALTER AUTHORIZATION ON SCHEMA::Event TO OpsMgrWriter
GO
-- change schema alter to allow domain table index rebuild
GRANT ALTER ON SCHEMA::dbo TO OpsMgrWriter
GO
-- grant create table permissions
GRANT CREATE TABLE TO OpsMgrWriter
GO
EXEC StandardDatasetAllocateStorage @DatasetId = '$Config/DatasetId$', @AggregationTypeId = 0
GO
                    
                    IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventCategory' AND TABLE_SCHEMA = 'dbo')
BEGIN
  DROP TABLE dbo.EventCategory
END
GO
CREATE TABLE dbo.EventCategory
(                               
     EventCategoryRowId     int             NOT NULL    IDENTITY(1,1)
    ,EventPublisherRowId    int             NOT NULL
    ,EventCategoryId        int             NOT NULL
    ,EventCategoryTitle     nvarchar(255)   NOT NULL
    ,LastReceivedDateTime   smalldatetime   NOT NULL    DEFAULT (GETUTCDATE())
 
    ,CONSTRAINT PK_EventCategory PRIMARY KEY CLUSTERED (EventCategoryRowId)
    ,CONSTRAINT UN_EventCategory_PublisherIdEventCategoryId UNIQUE (EventPublisherRowId, EventCategoryId)
)
GO
 
CREATE INDEX IX_EventCategory_LastReceivedDateTime ON EventCategory (LastReceivedDateTime)
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'EventCategory'
      ,@DatasetId = '$Config/DatasetId$'
GO
                    IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventChannel' AND TABLE_SCHEMA = 'dbo')
BEGIN
  DROP TABLE dbo.EventChannel
END
GO
CREATE TABLE dbo.EventChannel
(                               
     EventChannelRowId      smallint        NOT NULL    IDENTITY(1,1)
    ,EventChannelTitle      nvarchar(255)   NOT NULL
    ,LastReceivedDateTime   smalldatetime   NOT NULL    DEFAULT (GETUTCDATE())
 
    ,CONSTRAINT PK_EventChannel PRIMARY KEY CLUSTERED (EventChannelRowId)
    ,CONSTRAINT UN_EventChannel_EventChannelTitle UNIQUE (EventChannelTitle)
)
GO
CREATE INDEX IX_EventChannel_LastReceivedDateTime ON EventChannel (LastReceivedDateTime)
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'EventChannel'
      ,@DatasetId = '$Config/DatasetId$'
GO
                    IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventLevel' AND TABLE_SCHEMA = 'dbo')
BEGIN
  DROP TABLE dbo.EventLevel
END
GO
CREATE TABLE dbo.EventLevel
(                               
     EventLevelId       tinyint         NOT NULL
    ,EventLevelTitle    nvarchar(255)   NOT NULL
 
    ,CONSTRAINT PK_EventLevel PRIMARY KEY CLUSTERED (EventLevelId)
)
GO
 
                    IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventLoggingComputer' AND TABLE_SCHEMA = 'dbo')
BEGIN
  DROP TABLE dbo.EventLoggingComputer
END
GO
CREATE TABLE dbo.EventLoggingComputer
(                               
     EventLoggingComputerRowId  int             NOT NULL    IDENTITY(1,1)
    ,ComputerName               nvarchar(255)   NOT NULL
    ,LastReceivedDateTime       smalldatetime   NOT NULL    DEFAULT (GETUTCDATE())
 
    ,CONSTRAINT PK_EventLoggingComputer PRIMARY KEY CLUSTERED (EventLoggingComputerRowId)
    ,CONSTRAINT UN_EventLoggingComputer_ComputerName UNIQUE (ComputerName)
)
GO
CREATE INDEX IX_EventLoggingComputer_LastReceivedDateTime ON EventLoggingComputer (LastReceivedDateTime)
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'EventLoggingComputer'
      ,@DatasetId = '$Config/DatasetId$'
GO
                    IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventPublisher' AND TABLE_SCHEMA = 'dbo')
BEGIN
  DROP TABLE dbo.EventPublisher
END
GO
CREATE TABLE dbo.EventPublisher
(                               
     EventPublisherRowId      int             NOT NULL    IDENTITY(1,1)
    ,EventPublisherGuid       uniqueidentifier NOT NULL
    ,EventPublisherName       nvarchar(255)   NOT NULL
    ,LastReceivedDateTime     smalldatetime   NOT NULL    DEFAULT (GETUTCDATE())
 
    ,CONSTRAINT PK_EventPublisher PRIMARY KEY CLUSTERED (EventPublisherRowId)
    ,CONSTRAINT UN_EventPublisher_PublisherGuid UNIQUE (EventPublisherGuid)
)
GO
CREATE INDEX IX_EventPublisher_LastReceivedDateTime ON EventPublisher (LastReceivedDateTime)
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'EventPublisher'
      ,@DatasetId = '$Config/DatasetId$'
GO
                    -- insert staging definition into StandardDatasetStagingArea
BEGIN TRAN
IF EXISTS (SELECT * FROM StandardDatasetStagingArea WHERE DatasetId = '$Config/DatasetId$')
BEGIN
  DELETE StandardDatasetStagingArea
  WHERE DatasetId = '$Config/DatasetId$'
END
INSERT StandardDatasetStagingArea
(
   DatasetId
  ,StagingTableColumnDefinition
  ,MaxRowsToProcessPerTransactionCount
  ,BatchedProcessingSupportedInd
)
VALUES
(
   '$Config/DatasetId$'
  ,'
   DatasetId                      uniqueidentifier  NOT NULL
  ,ManagementGroupGuid            uniqueidentifier  NOT NULL
  ,EventOriginId                  uniqueidentifier  NOT NULL
  ,[DateTime]                     datetime          NOT NULL
  ,RuleRowId                      int               NOT NULL
  ,ManagedEntityRowId             int               NOT NULL
  ,EventPublisherRowId            int               NOT NULL
  ,EventChannelRowId              smallint          NOT NULL
  ,EventCategoryRowId             int               NOT NULL
  ,EventLevelId                   tinyint           NOT NULL
  ,LoggingComputerRowId           int               NOT NULL
  ,EventDisplayNumber             int               NOT NULL
  ,EventNumber                    bigint            NOT NULL
  ,UserNameRowId                  int               NOT NULL
  ,RawDescription                 nvarchar(max)     NULL
  ,RenderedDescription            nvarchar(max)     NULL
  ,EventParameters                xml               NULL
  ,EventData                      xml               NULL
  ,RawDescriptionHash             uniqueidentifier  NULL
  ,ParameterHash                  uniqueidentifier  NULL
  ,EventDataHash                  uniqueidentifier  NULL
  
  ,EventStageRowId                bigint            NOT NULL    IDENTITY(1, 1)  PRIMARY KEY
  '
 ,20000
 ,1
)
COMMIT
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventStage' AND TABLE_SCHEMA = 'Event')
BEGIN
  DECLARE @Statement nvarchar(max)
  SELECT @Statement = 'CREATE TABLE Event.EventStage (' + StagingTableColumnDefinition + ')'
  FROM StandardDatasetStagingArea
  WHERE DatasetId = '$Config/DatasetId$'
  EXECUTE (@Statement)
END
GO
GRANT ALTER, SELECT, INSERT, UPDATE, DELETE ON Event.EventStage TO OpsMgrWriter
GO
                    IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventUserName' AND TABLE_SCHEMA = 'dbo')
BEGIN
  DROP TABLE dbo.EventUserName
END
GO
CREATE TABLE dbo.EventUserName
(                               
     EventUserNameRowId     int             NOT NULL    IDENTITY(1,1)
    ,UserName               nvarchar(255)   NOT NULL
    ,LastReceivedDateTime   smalldatetime   NOT NULL    DEFAULT (GETUTCDATE())
 
    ,CONSTRAINT PK_EventUserName PRIMARY KEY CLUSTERED (EventUserNameRowId)
    ,CONSTRAINT UN_EventUserName_UserName UNIQUE (UserName)
)
GO
CREATE INDEX IX_EventUserName_LastReceivedDateTime ON EventUserName (LastReceivedDateTime)
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'EventUserName'
      ,@DatasetId = '$Config/DatasetId$'
GO
                    
                    SET NOCOUNT ON
DELETE EventLevel
INSERT EventLevel(EventLevelId, EventLevelTitle) VALUES ( 0, N'Undefined')
INSERT EventLevel(EventLevelId, EventLevelTitle) VALUES ( 1, N'Error')
INSERT EventLevel(EventLevelId, EventLevelTitle) VALUES ( 2, N'Warning')
INSERT EventLevel(EventLevelId, EventLevelTitle) VALUES ( 4, N'Information')
INSERT EventLevel(EventLevelId, EventLevelTitle) VALUES ( 8, N'Success Audit')
INSERT EventLevel(EventLevelId, EventLevelTitle) VALUES (16, N'Failure Audit')
GO
 
                    
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'V' AND name = 'vEventCategory')
BEGIN
  EXECUTE ('CREATE VIEW dbo.vEventCategory AS SELECT A = 1')
END
GO
ALTER VIEW dbo.vEventCategory
AS
  SELECT *
  FROM dbo.EventCategory (NOLOCK)
GO
GRANT SELECT ON dbo.vEventCategory TO OpsMgrReader, OpsMgrWriter
GO
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'V' AND name = 'vEventChannel')
BEGIN
  EXECUTE ('CREATE VIEW dbo.vEventChannel AS SELECT A = 1')
END
GO
ALTER VIEW dbo.vEventChannel
AS
  SELECT *
  FROM dbo.EventChannel (NOLOCK)
GO
GRANT SELECT ON dbo.vEventChannel TO OpsMgrReader, OpsMgrWriter
GO
                     IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'V' AND name = 'vEventLevel')
BEGIN
  EXECUTE ('CREATE VIEW dbo.vEventLevel AS SELECT A = 1')
END
GO
ALTER VIEW dbo.vEventLevel
AS
  SELECT *
  FROM dbo.EventLevel (NOLOCK)
GO
GRANT SELECT ON dbo.vEventLevel TO OpsMgrReader, OpsMgrWriter
GO
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'V' AND name = 'vEventLoggingComputer')
BEGIN
  EXECUTE ('CREATE VIEW dbo.vEventLoggingComputer AS SELECT A = 1')
END
GO
ALTER VIEW dbo.vEventLoggingComputer
AS
  SELECT *
  FROM dbo.EventLoggingComputer (NOLOCK)
GO
GRANT SELECT ON dbo.vEventLoggingComputer TO OpsMgrReader, OpsMgrWriter
GO
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'V' AND name = 'vEventPublisher')
BEGIN
  EXECUTE ('CREATE VIEW dbo.vEventPublisher AS SELECT A = 1')
END
GO
ALTER VIEW dbo.vEventPublisher
AS
  SELECT *
  FROM dbo.EventPublisher (NOLOCK)
GO
GRANT SELECT ON dbo.vEventPublisher TO OpsMgrReader, OpsMgrWriter
GO
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'V' AND name = 'vEventUserName')
BEGIN
  EXECUTE ('CREATE VIEW dbo.vEventUserName AS SELECT A = 1')
END
GO
ALTER VIEW dbo.vEventUserName
AS
  SELECT *
  FROM dbo.EventUserName (NOLOCK)
GO
GRANT SELECT ON dbo.vEventUserName TO OpsMgrReader, OpsMgrWriter
GO
                     IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventCategoryRowIdResolve')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.EventCategoryRowIdResolve AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.EventCategoryRowIdResolve
   @ManagementGroupGuid         uniqueidentifier
  ,@ObjectKeyXml                ntext
AS
BEGIN
  SET NOCOUNT ON
  
  DECLARE @ManagementGroupRowId int
  -- check management group is connected to this DW
  DECLARE @CheckExecResult int
  
  EXEC @CheckExecResult = ManagementGroupAccessCheck @ManagementGroupGuid, @ManagementGroupRowId OUTPUT
  IF (@CheckExecResult &lt;&gt; 0) RETURN @CheckExecResult
  
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)
  SET @ErrorInd = 0
  BEGIN TRY
    DECLARE 
       @ExecResult      int
      ,@XmlDocHandle    int
    EXEC @ExecResult = sp_xml_preparedocument @XmlDocHandle OUTPUT, @ObjectKeyXml
    IF @ExecResult &lt;&gt; 0 RAISERROR(777971000, 16, 1, 'EventCategoryKeys', @ExecResult)
    
    IF (OBJECT_ID('tempdb..#EventCategory') IS NOT NULL)
      DROP TABLE #EventCategory
    
    CREATE TABLE #EventCategory (
       NodeOrdinal    int               NOT NULL
      ,PublisherGuid  uniqueidentifier  NOT NULL
      ,PublisherName  nvarchar(256)     NOT NULL
      ,CategoryId     int               NOT NULL
      ,CategoryTitle  nvarchar(256)     NOT NULL
    )
    
    INSERT #EventCategory (
       NodeOrdinal
      ,PublisherGuid
      ,PublisherName
      ,CategoryId
      ,CategoryTitle
    )
    SELECT
       NodeOrdinal
      ,PublisherGuid
      ,PublisherName
      ,CategoryId
      ,CategoryTitle
    FROM OPENXML(@XmlDocHandle, 'Keys/Key', 2) WITH (
                     NodeOrdinal      int               '@mp:id'
                    ,PublisherGuid    uniqueidentifier  'PublisherGuid'
                    ,PublisherName    nvarchar(256)     'PublisherName'
                    ,CategoryId       int               'CategoryId'
                    ,CategoryTitle    nvarchar(256)     'CategoryTitle') xml
    EXEC sp_xml_removedocument @XmlDocHandle
    SET @XmlDocHandle = NULL
    
    -- work with publisher domain first
    
    UPDATE ep
    SET LastReceivedDateTime = GETUTCDATE()
    FROM EventPublisher ep
          JOIN #EventCategory e ON (ep.EventPublisherGuid = e.PublisherGuid)
    WHERE (ep.LastReceivedDateTime &lt; DATEADD(day, -1, GETUTCDATE()))
    
    INSERT EventPublisher (EventPublisherGuid, EventPublisherName)
    SELECT DISTINCT e.PublisherGuid, e.PublisherName
    FROM #EventCategory e
    WHERE NOT EXISTS (SELECT * FROM EventPublisher WHERE (EventPublisherGuid = e.PublisherGuid))
    
    -- update category domain
    
    UPDATE ec
    SET LastReceivedDateTime = GETUTCDATE()
    FROM EventCategory ec
          JOIN EventPublisher ep ON (ec.EventPublisherRowId = ep.EventPublisherRowId)
          JOIN #EventCategory e ON (ec.EventCategoryId = e.CategoryId) AND (ep.EventPublisherGuid = e.PublisherGuid)
    WHERE (ec.LastReceivedDateTime &lt; DATEADD(day, -1, GETUTCDATE()))
    
    INSERT EventCategory (
       EventPublisherRowId
      ,EventCategoryId
      ,EventCategoryTitle
    )
    SELECT DISTINCT
       ep.EventPublisherRowId
      ,e.CategoryId
      ,e.CategoryTitle
    FROM #EventCategory e
            JOIN EventPublisher ep ON (e.PublisherGuid = ep.EventPublisherGuid)
    WHERE NOT EXISTS (SELECT *
                      FROM EventCategory
                      WHERE (EventCategoryId = e.CategoryId)
                        AND (EventPublisherRowId = ep.EventPublisherRowId)
                     )
    SELECT
       ec.EventCategoryRowId
    FROM #EventCategory e
            JOIN EventPublisher ep ON (e.PublisherGuid = ep.EventPublisherGuid)
            JOIN EventCategory ec ON (e.CategoryId = ec.EventCategoryId) AND (ec.EventPublisherRowId = ep.EventPublisherRowId)
    ORDER BY e.NodeOrdinal
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
  
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
  IF (@XmlDocHandle IS NOT NULL)
    EXEC sp_xml_removedocument @XmlDocHandle
  IF (OBJECT_ID('tempdb..#EventCategory') IS NOT NULL)
    DROP TABLE #EventCategory
    
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END
GO
GRANT EXECUTE ON EventCategoryRowIdResolve TO OpsMgrWriter
GO
   
                     IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventChannelRowIdResolve')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.EventChannelRowIdResolve AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.EventChannelRowIdResolve
   @ManagementGroupGuid         uniqueidentifier
  ,@ObjectKeyXml                ntext
AS
BEGIN
  SET NOCOUNT ON
  
  DECLARE @ManagementGroupRowId int
  -- check management group is connected to this DW
  DECLARE @CheckExecResult int
  
  EXEC @CheckExecResult = ManagementGroupAccessCheck @ManagementGroupGuid, @ManagementGroupRowId OUTPUT
  IF (@CheckExecResult &lt;&gt; 0) RETURN @CheckExecResult
  
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)
  SET @ErrorInd = 0
  BEGIN TRY
    DECLARE 
       @ExecResult      int
      ,@XmlDocHandle    int
    EXEC @ExecResult = sp_xml_preparedocument @XmlDocHandle OUTPUT, @ObjectKeyXml
    IF @ExecResult &lt;&gt; 0 RAISERROR(777971000, 16, 1, 'EventChannelKeys', @ExecResult)
    
    IF (OBJECT_ID('tempdb..#EventChannel') IS NOT NULL)
      DROP TABLE #EventChannel
      
    CREATE TABLE #EventChannel (
       NodeOrdinal    int               NOT NULL
      ,ChannelName    nvarchar(256)     NOT NULL
    )
    
    INSERT #EventChannel (
       NodeOrdinal
      ,ChannelName
    )
    SELECT
       NodeOrdinal
      ,ChannelName
    FROM OPENXML(@XmlDocHandle, 'Keys/Key', 2) WITH (
                     NodeOrdinal      int               '@mp:id'
                    ,ChannelName      nvarchar(256)     '.') xml
    EXEC sp_xml_removedocument @XmlDocHandle
    SET @XmlDocHandle = NULL
    
    UPDATE ec
    SET LastReceivedDateTime = GETUTCDATE()
    FROM EventChannel ec
          JOIN #EventChannel e ON (ec.EventChannelTitle = e.ChannelName COLLATE database_default)
    WHERE (ec.LastReceivedDateTime &lt; DATEADD(day, -1, GETUTCDATE()))
    
    INSERT EventChannel (EventChannelTitle)
    SELECT DISTINCT e.ChannelName
    FROM #EventChannel e
    WHERE NOT EXISTS (SELECT * FROM EventChannel WHERE (EventChannelTitle = e.ChannelName COLLATE database_default))
    SELECT
       CAST(ec.EventChannelRowId AS int)
    FROM #EventChannel e
            JOIN EventChannel ec ON (e.ChannelName = ec.EventChannelTitle COLLATE database_default)
    ORDER BY e.NodeOrdinal
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
  
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
  IF (@XmlDocHandle IS NOT NULL)
    EXEC sp_xml_removedocument @XmlDocHandle
  IF (OBJECT_ID('tempdb..#EventChannel') IS NOT NULL)
    DROP TABLE #EventChannel
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END
GO
GRANT EXECUTE ON EventChannelRowIdResolve TO OpsMgrWriter
GO
  
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventGroom')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.EventGroom AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.EventGroom
   @DatasetId   uniqueidentifier
  ,@AggregationTypeId tinyint
  ,@TableGuid uniqueidentifier
  ,@CutoffDateTime datetime
  ,@MaxRowsToGroom int
  ,@RowsDeleted int OUTPUT
AS
BEGIN
  SET NOCOUNT ON
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(4000)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  sysname
    ,@ErrorMessageText nvarchar(4000)
  SET @ErrorInd = 0
  
  DECLARE
     @MainTableName sysname
    ,@TableName sysname
    ,@Statement nvarchar(max)
    ,@DebugLevel tinyint
    ,@StandardDatasetAggregationStorageRowId int
    ,@SchemaName sysname
  
  BEGIN TRY
    SELECT
       @DebugLevel = DebugLevel
      ,@SchemaName = SchemaName
    FROM StandardDataset
    WHERE DatasetId = @DatasetId
    BEGIN TRAN
    
    CREATE TABLE #EventGroom (
      EventOriginId uniqueidentifier NOT NULL
    )
    
    SELECT @MainTableName = BaseTableName + '_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = @AggregationTypeId)
      AND (DependentTableInd = 0)
    
    SET @Statement = 'INSERT #EventGroom (EventOriginId)'
                   + ' SELECT TOP ' + CAST(@MaxRowsToGroom AS varchar(15)) + ' EventOriginId'
                   + ' FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@MainTableName)
                   + ' WHERE ([DateTime] &lt; CONVERT(datetime, ''' + CONVERT(varchar(50), @CutoffDateTime, 120) + ''', 120))'
                   
    EXECUTE (@Statement)
    SET @StandardDatasetAggregationStorageRowId = 0
    
    WHILE EXISTS (SELECT *
                  FROM StandardDatasetAggregationStorage
                  WHERE (DatasetId = @DatasetId)
                    AND (AggregationTypeId = @AggregationTypeId)
                    AND (DependentTableInd = 1)
                    AND (StandardDatasetAggregationStorageRowId &gt; @StandardDatasetAggregationStorageRowId)
                 )
    BEGIN
      SELECT TOP 1
         @StandardDatasetAggregationStorageRowId = StandardDatasetAggregationStorageRowId
        ,@TableName = BaseTableName + '_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')
      FROM StandardDatasetAggregationStorage
      WHERE (DatasetId = @DatasetId)
        AND (AggregationTypeId = @AggregationTypeId)
        AND (DependentTableInd = 1)
        AND (StandardDatasetAggregationStorageRowId &gt; @StandardDatasetAggregationStorageRowId)
		Order By StandardDatasetAggregationStorageRowId Asc
        
      SET @Statement = 'DELETE d'
                     + ' FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@TableName) + ' d'
                     + '  JOIN #EventGroom e ON (d.EventOriginId = e.EventOriginId)'
      EXECUTE (@Statement)
    END
    
    SET @Statement = 'DELETE d'
                   + ' FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@MainTableName) +' d'
                   + '   JOIN #EventGroom e ON (d.EventOriginId = e.EventOriginId)'
    EXECUTE (@Statement)
    SET @RowsDeleted = @@ROWCOUNT
    
    DROP TABLE #EventGroom
    
    COMMIT
    
    -- groom dynamic dimentions
    DECLARE @MaxDataAgeDays int
    
    SELECT @MaxDataAgeDays = MAX(MaxDataAgeDays)
    FROM StandardDatasetAggregation
    WHERE (DatasetId = @DatasetId)
    
    DELETE e
    FROM EventCategory e
    WHERE LastReceivedDateTime &lt; DATEADD(day, -@MaxDataAgeDays, GETUTCDATE())
    OPTION (RECOMPILE)
    
    DELETE e
    FROM EventChannel e
    WHERE LastReceivedDateTime &lt; DATEADD(day, -@MaxDataAgeDays, GETUTCDATE()) 
    OPTION (RECOMPILE)
    
    DELETE e
    FROM EventLoggingComputer e
    WHERE LastReceivedDateTime &lt; DATEADD(day, -@MaxDataAgeDays, GETUTCDATE()) 
    OPTION (RECOMPILE)
    
    DELETE e
    FROM EventPublisher e
    WHERE LastReceivedDateTime &lt; DATEADD(day, -@MaxDataAgeDays, GETUTCDATE()) 
    OPTION (RECOMPILE)
    
    DELETE e
    FROM EventUserName e
    WHERE LastReceivedDateTime &lt; DATEADD(day, -@MaxDataAgeDays, GETUTCDATE()) 
    OPTION (RECOMPILE)
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
    
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    IF (@DebugLevel &gt; 0)
    BEGIN
      DECLARE @DebugMessageText nvarchar(max)
      SET @DebugMessageText = N'Failed to groom data for event data set. Error ' + CAST(@ErrorNumber AS varchar(15))
                      + ', Procedure ' + @ErrorProcedure
                      + ', Line ' + CAST(@ErrorLine AS varchar(15))
                      + ', Message: '+ @ErrorMessageText
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 1
        ,@MessageText = @DebugMessageText
    END
      
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
  
  RETURN @RowsDeleted
END
GO
   
                     IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventLoggingComputerRowIdResolve')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.EventLoggingComputerRowIdResolve AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.EventLoggingComputerRowIdResolve
   @ManagementGroupGuid         uniqueidentifier
  ,@ObjectKeyXml                ntext
AS
BEGIN
  SET NOCOUNT ON
  
  DECLARE @ManagementGroupRowId int
  -- check management group is connected to this DW
  DECLARE @CheckExecResult int
  
  EXEC @CheckExecResult = ManagementGroupAccessCheck @ManagementGroupGuid, @ManagementGroupRowId OUTPUT
  IF (@CheckExecResult &lt;&gt; 0) RETURN @CheckExecResult
  
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)
  SET @ErrorInd = 0
  BEGIN TRY
    DECLARE 
       @ExecResult      int
      ,@XmlDocHandle    int
    EXEC @ExecResult = sp_xml_preparedocument @XmlDocHandle OUTPUT, @ObjectKeyXml
    IF @ExecResult &lt;&gt; 0 RAISERROR(777971000, 16, 1, 'EventLoggingComputerKeys', @ExecResult)
    
    IF (OBJECT_ID('tempdb..#EventLoggingComputer') IS NOT NULL)
      DROP TABLE #EventLoggingComputer
      
    CREATE TABLE #EventLoggingComputer (
       NodeOrdinal          int               NOT NULL
      ,ComputerName         nvarchar(256)     NOT NULL
    )
    
    INSERT #EventLoggingComputer (
       NodeOrdinal
      ,ComputerName
    )
    SELECT
       NodeOrdinal
      ,LoggingComputerName
    FROM OPENXML(@XmlDocHandle, 'Keys/Key', 2) WITH (
                     NodeOrdinal            int               '@mp:id'
                    ,LoggingComputerName    nvarchar(256)     '.') xml
    EXEC sp_xml_removedocument @XmlDocHandle
    SET @XmlDocHandle = NULL
    
    UPDATE ec
    SET LastReceivedDateTime = GETUTCDATE()
    FROM EventLoggingComputer ec
          JOIN #EventLoggingComputer e ON (ec.ComputerName = e.ComputerName COLLATE database_default)
    WHERE (ec.LastReceivedDateTime &lt; DATEADD(day, -1, GETUTCDATE()))
    
    INSERT EventLoggingComputer (ComputerName)
    SELECT DISTINCT e.ComputerName
    FROM #EventLoggingComputer e
    WHERE NOT EXISTS (SELECT * FROM EventLoggingComputer WHERE (ComputerName = e.ComputerName COLLATE database_default))
    SELECT
       ec.EventLoggingComputerRowId
    FROM #EventLoggingComputer e
            JOIN EventLoggingComputer ec ON (e.ComputerName = ec.ComputerName COLLATE database_default)
    ORDER BY e.NodeOrdinal
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
  
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
  IF (@XmlDocHandle IS NOT NULL)
    EXEC sp_xml_removedocument @XmlDocHandle
  IF (OBJECT_ID('tempdb..#EventLoggingComputer') IS NOT NULL)
    DROP TABLE #EventLoggingComputer
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END
GO
GRANT EXECUTE ON EventLoggingComputerRowIdResolve TO OpsMgrWriter
GO
   
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventProcessStaging')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.EventProcessStaging AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.EventProcessStaging
   @DatasetId           uniqueidentifier
AS
BEGIN
  SET NOCOUNT ON
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)
  SET @ErrorInd = 0
  DECLARE
     @DebugLevel int
    ,@SchemaName sysname
    ,@ExecResult int
    ,@LockResourceName sysname
    ,@InsertTableName sysname
    ,@InsertTableGuid uniqueidentifier
    ,@InsertStartedDateTime datetime
    ,@Statement nvarchar(max)
    ,@MessageText varchar(max)
    ,@OperationDurationMs bigint
    ,@MaxStagingRowsToProcess int
  BEGIN TRY
  
    SELECT
       @DebugLevel = DebugLevel
      ,@SchemaName = SchemaName
    FROM StandardDataset
    WHERE (DatasetId = @DatasetId)
    
    IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventStage2Process' AND TABLE_SCHEMA = 'Event')
    BEGIN
      BEGIN TRAN
      
      DECLARE @ProcessAllRowsInd bit
      SET @ProcessAllRowsInd = 1
      
      -- figure out what we need to do with staging area
      SELECT
         @Statement = StagingTableColumnDefinition
        ,@MaxStagingRowsToProcess = MaxRowsToProcessPerTransactionCount
      FROM StandardDatasetStagingArea
      WHERE DatasetId = @DatasetId
      
      IF (@MaxStagingRowsToProcess IS NOT NULL)
      BEGIN
        DECLARE @EventStageRowCount int
        DECLARE @SpaceUsedInfo TABLE (
                   [name]       sysname
                  ,[rows]       int
                  ,reserved     nvarchar(100)
                  ,data         nvarchar(100)
                  ,index_size   nvarchar(100)
                  ,unused       nvarchar(100)
                )
                
        INSERT @SpaceUsedInfo
        EXEC sp_spaceused 'Event.EventStage'
        
        SELECT @EventStageRowCount = [rows]
        FROM @SpaceUsedInfo
        
        IF (@EventStageRowCount &gt;= @MaxStagingRowsToProcess)
        BEGIN
          SET @ProcessAllRowsInd = 0
        END
      END
      
      IF (@ProcessAllRowsInd = 1)
      BEGIN
        -- no limit set for the number of rows to process
        -- rename and re-create staging table
        -- lock, rename EventStage table and re-create it
        EXEC @ExecResult = sp_rename 'Event.EventStage', 'EventStage2Process'
        
        IF (@ExecResult &lt; 0)
        BEGIN
          RAISERROR(777971003, 16, 1, @ExecResult)
        END
        SELECT @Statement = 'CREATE TABLE Event.EventStage (' + @Statement + ')'
        EXECUTE (@Statement)        
      END
      ELSE
      BEGIN
        -- need to process subset of rows
        -- create extra column to store original row id
        SELECT @Statement =
              'CREATE TABLE Event.EventStage2Process (' 
            + @Statement
            + ',OriginalEventStageRowId  int  NOT NULL'
            + ')'
        EXECUTE (@Statement)
        
        SELECT @Statement =
          ' INSERT Event.EventStage2Process'
        + '  ('
        + '     DatasetId'
        + '    ,ManagementGroupGuid'
        + '    ,EventOriginId'
        + '    ,[DateTime]'
        + '    ,RuleRowId'
        + '    ,ManagedEntityRowId'
        + '    ,EventPublisherRowId'
        + '    ,EventChannelRowId'
        + '    ,EventCategoryRowId'
        + '    ,EventLevelId'
        + '    ,LoggingComputerRowId'
        + '    ,EventDisplayNumber'
        + '    ,EventNumber'
        + '    ,UserNameRowId'
        + '    ,RawDescription'
        + '    ,RenderedDescription'
        + '    ,EventParameters'
        + '    ,EventData'
        + '    ,RawDescriptionHash'
        + '    ,ParameterHash'
        + '    ,EventDataHash'
        + '    ,OriginalEventStageRowId'
        + '  )'
        + '  SELECT TOP (' + CAST(@MaxStagingRowsToProcess AS varchar(15)) + ')'
        + '     DatasetId'
        + '    ,ManagementGroupGuid'
        + '    ,EventOriginId'
        + '    ,[DateTime]'
        + '    ,RuleRowId'
        + '    ,ManagedEntityRowId'
        + '    ,EventPublisherRowId'
        + '    ,EventChannelRowId'
        + '    ,EventCategoryRowId'
        + '    ,EventLevelId'
        + '    ,LoggingComputerRowId'
        + '    ,EventDisplayNumber'
        + '    ,EventNumber'
        + '    ,UserNameRowId'
        + '    ,RawDescription'
        + '    ,RenderedDescription'
        + '    ,EventParameters'
        + '    ,EventData'
        + '    ,RawDescriptionHash'
        + '    ,ParameterHash'
        + '    ,EventDataHash'
        + '    ,EventStageRowId'
        + '  FROM Event.EventStage'
        + '  ORDER BY EventStageRowId'
        EXECUTE(@Statement)
        SELECT @Statement = 
          ' CREATE INDEX IX_EventStage2Process_EventOriginId ON Event.EventStage2Process (EventOriginId)'
        EXECUTE(@Statement)
        
        SELECT @Statement =
          'DELETE es'
        + ' FROM Event.EventStage es'
        + '        JOIN Event.EventStage2Process esp ON (es.EventStageRowId = esp.OriginalEventStageRowId)'
        EXECUTE(@Statement)
      END
      
      GRANT ALTER, SELECT, INSERT, UPDATE, DELETE ON Event.EventStage TO OpsMgrWriter
      
      GRANT CONTROL ON Event.EventStage2Process TO OpsMgrWriter
      COMMIT
    END
    
    BEGIN TRAN
    -- lock table map to ensure we insert into table opened for insertion
    SET @LockResourceName = CAST(@DatasetId AS varchar(50)) + '_TableMap'
  
    EXEC @ExecResult = sp_getapplock
           @Resource = @LockResourceName
          ,@LockMode = 'Shared'
          ,@LockOwner = 'Transaction'
    IF (@ExecResult &lt; 0)
    BEGIN
      RAISERROR(777971001, 16, 1, 'Shared:StandardDatasetTableMap', @ExecResult)
    END
  
    EXEC dbo.StandardDatasetGetInsertTableGuid @DatasetId, 0, @InsertTableGuid OUTPUT
    
    IF (@DebugLevel &gt; 3)
    BEGIN
      SELECT @MessageText = 'Starting to insert ' + CAST(COUNT(*) AS varchar(30)) + ' events into ' + @InsertTableName
      FROM Event.EventStage2Process
      
      SET @InsertStartedDateTime = GETUTCDATE()
      
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 4
        ,@MessageText = @MessageText
    END
    -- insert event &lt;-&gt; rule/me relationships
    -- NOTE: We do not check for event-rule-ME uniqueness
    --       to save time (can produce dupes if event was delivered twice
    --       in two different staging processing windows)
    --       We also saw Sql having troubles coming up with a good plan
    
    SELECT @InsertTableName = BaseTableName + '_' + REPLACE(CAST(@InsertTableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = 0)
      AND (DependentTableInd = 1)
      AND (TableTag = 'rule')
      
    SELECT @Statement =
        ' INSERT ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@InsertTableName) + ' ('
      + '    EventOriginId'
      + '   ,RuleRowId'
      + '   ,ManagedEntityRowId'
      + ' )'
      + ' SELECT'
      + '    s.EventOriginId'
      + '   ,s.RuleRowId'
      + '   ,s.ManagedEntityRowId'
      + ' FROM Event.EventStage2Process s'
    EXECUTE(@Statement)
    -- delete events collected more then once - leave latest collected only
    DELETE s
    FROM Event.EventStage2Process s
    WHERE EXISTS (SELECT *
                  FROM Event.EventStage2Process s_later
                  WHERE (s.EventOriginId = s_later.EventOriginId)
                    AND (s_later.EventStageRowId &gt; s.EventStageRowId)
                 )
    -- insert events
    SELECT @InsertTableName = BaseTableName + '_' + REPLACE(CAST(@InsertTableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = 0)
      AND (DependentTableInd = 0)
      
    -- first delete events that were already delivered
    SELECT @Statement = 'DELETE s'
                        + ' FROM Event.EventStage2Process s, ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@InsertTableName) + ' e'
                        + ' WHERE (s.EventOriginId = e.EventOriginId)'
    EXECUTE (@Statement)
    SELECT @Statement =
        ' INSERT ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@InsertTableName) + ' ('
      + '    EventOriginId'
      + '   ,[DateTime]'
      + '   ,EventPublisherRowId'
      + '   ,EventChannelRowId'
      + '   ,EventCategoryRowId'
      + '   ,EventLevelId'
      + '   ,LoggingComputerRowId'
      + '   ,EventNumber'
      + '   ,EventDisplayNumber'
      + '   ,UserNameRowId'
      + '   ,RawDescriptionHash'
      + '   ,ParameterHash'
      + '   ,EventDataHash'
      + ' )'
      + ' SELECT '
      + '    s.EventOriginId'
      + '   ,s.[DateTime]'
      + '   ,s.EventPublisherRowId'
      + '   ,s.EventChannelRowId'
      + '   ,s.EventCategoryRowId'
      + '   ,s.EventLevelId'
      + '   ,s.LoggingComputerRowId'
      + '   ,s.EventNumber'
      + '   ,s.EventDisplayNumber'
      + '   ,s.UserNameRowId'
      + '   ,s.RawDescriptionHash'
      + '   ,s.ParameterHash'
      + '   ,s.EventDataHash'
      + ' FROM Event.EventStage2Process s'
    EXECUTE(@Statement)
    
    -- insert parameters
    
    SELECT @InsertTableName = BaseTableName + '_' + REPLACE(CAST(@InsertTableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = 0)
      AND (DependentTableInd = 1)
      AND (TableTag = 'parameter')
    
    SELECT @Statement =
        ' INSERT ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@InsertTableName) + ' ('
      + '   EventOriginId'
      + '  ,ParameterIndex'
      + '  ,ParameterValue'
      + ' )'
      + ' SELECT '
      + '   s.EventOriginId'
      + '  ,ROW_NUMBER() OVER(PARTITION BY s.EventOriginId ORDER BY s.EventOriginId)'
      + '  ,p.ParameterValue.value(''.'', ''nvarchar(max)'')'
      + ' FROM Event.EventStage2Process s'
      + '       CROSS APPLY s.EventParameters.nodes(''Params/Param'') as p(ParameterValue)'
    EXECUTE(@Statement)
    -- insert event details
    SELECT @InsertTableName = BaseTableName + '_' + REPLACE(CAST(@InsertTableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = 0)
      AND (DependentTableInd = 1)
      AND (TableTag = 'detail')
    
    SELECT @Statement =
        ' INSERT ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@InsertTableName) + ' ('
      + '   EventOriginId'
      + '  ,RawDescription'
      + '  ,RenderedDescription'
      + '  ,EventData'
      + ' )'
      + ' SELECT '
      + '   s.EventOriginId'
      + '  ,s.RawDescription'
      + '  ,s.RenderedDescription'
      + '  ,s.EventData'
      + ' FROM Event.EventStage2Process s'
    EXECUTE(@Statement)
    -- delete all inserted data from staging
    DROP TABLE Event.EventStage2Process
    
    IF (@DebugLevel &gt; 3)
    BEGIN
      SET @MessageText = 'Finished inserting events into ' + @InsertTableName
      SET @OperationDurationMs = ABS(DATEDIFF(ms, GETUTCDATE(), @InsertStartedDateTime))
      
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 4
        ,@MessageText = @MessageText
        ,@OperationDurationMs = @OperationDurationMs
    END
    COMMIT
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
  
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    IF (@DebugLevel &gt; 0)
    BEGIN
      DECLARE @DebugMessageText nvarchar(max)
      
      SET @DebugMessageText = N'Failed to process data in the event data set staging area. Error ' + CAST(@ErrorNumber AS varchar(15))
                      + ', Procedure ' + @ErrorProcedure
                      + ', Line ' + CAST(@ErrorLine AS varchar(15))
                      + ', Message: '+ @ErrorMessageText
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 1
        ,@MessageText = @DebugMessageText
    END
      
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END
GO
GRANT EXECUTE ON dbo.EventProcessStaging TO OpsMgrWriter
GO
                     IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventPublisherRowIdResolve')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.EventPublisherRowIdResolve AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.EventPublisherRowIdResolve
   @ManagementGroupGuid         uniqueidentifier
  ,@ObjectKeyXml                ntext
AS
BEGIN
  SET NOCOUNT ON
  
  DECLARE @ManagementGroupRowId int
  -- check management group is connected to this DW
  DECLARE @CheckExecResult int
  
  EXEC @CheckExecResult = ManagementGroupAccessCheck @ManagementGroupGuid, @ManagementGroupRowId OUTPUT
  IF (@CheckExecResult &lt;&gt; 0) RETURN @CheckExecResult
  
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)
  SET @ErrorInd = 0
  BEGIN TRY
    DECLARE 
       @ExecResult      int
      ,@XmlDocHandle    int
    EXEC @ExecResult = sp_xml_preparedocument @XmlDocHandle OUTPUT, @ObjectKeyXml
    IF @ExecResult &lt;&gt; 0 RAISERROR(777971000, 16, 1, 'EventPublisherKeys', @ExecResult)
    
    IF (OBJECT_ID('tempdb..#EventPublisher') IS NOT NULL)
      DROP TABLE #EventPublisher
    CREATE TABLE #EventPublisher (
       NodeOrdinal    int               NOT NULL
      ,PublisherGuid  uniqueidentifier  NOT NULL
      ,PublisherName  nvarchar(256)     NOT NULL
    )
    
    INSERT #EventPublisher (
       NodeOrdinal
      ,PublisherGuid
      ,PublisherName
    )
    SELECT
       NodeOrdinal
      ,PublisherGuid
      ,PublisherName
    FROM OPENXML(@XmlDocHandle, 'Keys/Key', 2) WITH (
                     NodeOrdinal          int               '@mp:id'
                    ,PublisherGuid        uniqueidentifier  'PublisherGuid'
                    ,PublisherName        nvarchar(256)     'PublisherName') xml
    EXEC sp_xml_removedocument @XmlDocHandle
    SET @XmlDocHandle = NULL
    
    UPDATE ep
    SET LastReceivedDateTime = GETUTCDATE()
    FROM EventPublisher ep
          JOIN #EventPublisher e ON (ep.EventPublisherGuid = e.PublisherGuid)
    WHERE (ep.LastReceivedDateTime &lt; DATEADD(day, -1, GETUTCDATE()))
    
    INSERT EventPublisher (EventPublisherGuid, EventPublisherName)
    SELECT DISTINCT e.PublisherGuid, e.PublisherName
    FROM #EventPublisher e
    WHERE NOT EXISTS (SELECT * FROM EventPublisher WHERE (EventPublisherGuid = e.PublisherGuid))
    SELECT
       ep.EventPublisherRowId
    FROM #EventPublisher e
            JOIN EventPublisher ep ON (e.PublisherGuid = ep.EventPublisherGuid)
    ORDER BY e.NodeOrdinal
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
  
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
  IF (@XmlDocHandle IS NOT NULL)
    EXEC sp_xml_removedocument @XmlDocHandle
  IF (OBJECT_ID('tempdb..#EventPublisher') IS NOT NULL)
    DROP TABLE #EventPublisher
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END
GO
GRANT EXECUTE ON EventPublisherRowIdResolve TO OpsMgrWriter
GO
  
                     IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventUserNameRowIdResolve')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.EventUserNameRowIdResolve AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.EventUserNameRowIdResolve
   @ManagementGroupGuid         uniqueidentifier
  ,@ObjectKeyXml                ntext
AS
BEGIN
  SET NOCOUNT ON
  
  DECLARE @ManagementGroupRowId int
  -- check management group is connected to this DW
  DECLARE @CheckExecResult int
  
  EXEC @CheckExecResult = ManagementGroupAccessCheck @ManagementGroupGuid, @ManagementGroupRowId OUTPUT
  IF (@CheckExecResult &lt;&gt; 0) RETURN @CheckExecResult
  
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)
  SET @ErrorInd = 0
  BEGIN TRY
    DECLARE 
       @ExecResult      int
      ,@XmlDocHandle    int
    EXEC @ExecResult = sp_xml_preparedocument @XmlDocHandle OUTPUT, @ObjectKeyXml
    IF @ExecResult &lt;&gt; 0 RAISERROR(777971000, 16, 1, 'EventUserNameKeys', @ExecResult)
    
    IF (OBJECT_ID('tempdb..#EventUserName') IS NOT NULL)
      DROP TABLE #EventUserName
    CREATE TABLE #EventUserName (
       NodeOrdinal    int               NOT NULL
      ,UserName       nvarchar(256)     NOT NULL
    )
    
    INSERT #EventUserName (
       NodeOrdinal
      ,UserName
    )
    SELECT
       NodeOrdinal
      ,UserName
    FROM OPENXML(@XmlDocHandle, 'Keys/Key', 2) WITH (
                     NodeOrdinal      int               '@mp:id'
                    ,UserName         nvarchar(256)     '.') xml
    EXEC sp_xml_removedocument @XmlDocHandle
    SET @XmlDocHandle = NULL
    
    UPDATE ec
    SET LastReceivedDateTime = GETUTCDATE()
    FROM EventUserName ec
          JOIN #EventUserName e ON (ec.UserName = e.UserName COLLATE database_default)
    WHERE (ec.LastReceivedDateTime &lt; DATEADD(day, -1, GETUTCDATE()))
    
    INSERT EventUserName (UserName)
    SELECT DISTINCT e.UserName
    FROM #EventUserName e
    WHERE NOT EXISTS (SELECT * FROM EventUserName WHERE (UserName = e.UserName COLLATE database_default))
    SELECT
       ec.EventUserNameRowId
    FROM #EventUserName e
            JOIN EventUserName ec ON (e.UserName = ec.UserName COLLATE database_default)
    ORDER BY e.NodeOrdinal
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
  
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
  IF (@XmlDocHandle IS NOT NULL)
    EXEC sp_xml_removedocument @XmlDocHandle
  IF (OBJECT_ID('tempdb..#EventUserName') IS NOT NULL)
    DROP TABLE #EventUserName
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END
GO
GRANT EXECUTE ON EventUserNameRowIdResolve TO OpsMgrWriter
GO
   
                    </Install><Uninstall>
                    -- drop SPs
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventGroom')
BEGIN
	EXECUTE ('DROP PROCEDURE dbo.EventGroom')
END
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventProcessStaging')
BEGIN
	EXECUTE ('DROP PROCEDURE dbo.EventProcessStaging')
END
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventCategoryRowIdResolve')
BEGIN
	EXECUTE ('DROP PROCEDURE dbo.EventCategoryRowIdResolve')
END
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventChannelRowIdResolve')
BEGIN
	EXECUTE ('DROP PROCEDURE dbo.EventChannelRowIdResolve')
END
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventLoggingComputerRowIdResolve')
BEGIN
	EXECUTE ('DROP PROCEDURE dbo.EventLoggingComputerRowIdResolve')
END
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventPublisherRowIdResolve')
BEGIN
	EXECUTE ('DROP PROCEDURE dbo.EventPublisherRowIdResolve')
END
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventUserNameRowIdResolve')
BEGIN
	EXECUTE ('DROP PROCEDURE dbo.EventUserNameRowIdResolve')
END
-- drop views
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'V' AND name = 'vEventCategory')
BEGIN
  EXECUTE ('DROP VIEW vEventCategory')
END
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'V' AND name = 'vEventChannel')
BEGIN
  EXECUTE ('DROP VIEW vEventChannel')
END
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'V' AND name = 'vEventLevel')
BEGIN
  EXECUTE ('DROP VIEW vEventLevel')
END
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'V' AND name = 'vEventLoggingComputer')
BEGIN
  EXECUTE ('DROP VIEW vEventLoggingComputer')
END
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'V' AND name = 'vEventPublisher')
BEGIN
  EXECUTE ('DROP VIEW vEventPublisher')
END
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'V' AND name = 'vEventUserName')
BEGIN
  EXECUTE ('DROP VIEW vEventUserName')
END
-- drop tables
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventCategory' AND TABLE_SCHEMA = 'dbo')
BEGIN
  EXECUTE('DROP TABLE dbo.EventCategory')
END
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventChannel' AND TABLE_SCHEMA = 'dbo')
BEGIN
  EXECUTE('DROP TABLE dbo.EventChannel')
END
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventLevel' AND TABLE_SCHEMA = 'dbo')
BEGIN
  EXECUTE('DROP TABLE dbo.EventLevel')
END
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventLoggingComputer' AND TABLE_SCHEMA = 'dbo')
BEGIN
  EXECUTE('DROP TABLE dbo.EventLoggingComputer')
END
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventPublisher' AND TABLE_SCHEMA = 'dbo')
BEGIN
  EXECUTE('DROP TABLE dbo.EventPublisher')
END
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventUserName' AND TABLE_SCHEMA = 'dbo')
BEGIN
  EXECUTE('DROP TABLE dbo.EventUserName')
END
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventStage' AND TABLE_SCHEMA = 'Event')
BEGIN
  EXECUTE('DROP TABLE Event.EventStage')
END
-- delete std dataset related data
EXEC StandardDatasetDelete '$Config/DatasetId$'
GO
  
                    </Uninstall><Upgrade>
										SET NOCOUNT ON
-- update table definition templates
UPDATE sdas
SET TableTemplate = '
        CREATE TABLE [Event].[EventParameter_$Guid$]
        (
             EventParameterRowId int  NOT NULL  IDENTITY(1, 1)
            ,EventOriginId                  uniqueidentifier  NOT NULL
            ,ParameterIndex                 tinyint NOT NULL
            ,ParameterValue                 nvarchar(max) NULL
            
            ,CONSTRAINT [PK_EventParameter_$Guid$] PRIMARY KEY CLUSTERED (EventParameterRowId) ON $DataFileGroupName$
        ) ON $DataFileGroupName$
     '
FROM StandardDatasetAggregationStorage sdas
        JOIN StandardDataset sd ON (sdas.DatasetId = sd.DatasetId)
WHERE (sd.DatasetId = '$Config/DatasetId$')
  AND (sdas.TableTag = 'parameter')
  AND (sdas.DependentTableInd = 1)
GO
 
-- update all tables that were already created
DECLARE 
   @StandardDatasetTableMapRowId int
  ,@Statement nvarchar(max)
  ,@SchemaName sysname
  ,@TableNameSuffix sysname
  ,@BaseTableName sysname
SET @StandardDatasetTableMapRowId = 0
WHILE EXISTS (SELECT *
              FROM StandardDatasetTableMap tm
              WHERE (tm.StandardDatasetTableMapRowId &gt; @StandardDatasetTableMapRowId)
                AND (tm.DatasetId = '$Config/DatasetId$')
                AND (tm.InsertInd = 1)
             )
BEGIN
  SELECT TOP 1
     @StandardDatasetTableMapRowId = tm.StandardDatasetTableMapRowId
    ,@SchemaName = sd.SchemaName
    ,@TableNameSuffix = tm.TableNameSuffix
    ,@BaseTableName = sdas.BaseTableName
  FROM StandardDatasetTableMap tm
          JOIN StandardDataset sd ON (tm.DatasetId = sd.DatasetId)
          JOIN StandardDatasetAggregationStorage sdas ON (sdas.DatasetId = tm.DatasetId) AND (sdas.AggregationTypeId = tm.AggregationTypeId)
  WHERE (tm.StandardDatasetTableMapRowId &gt; @StandardDatasetTableMapRowId)
    AND (tm.DatasetId = '$Config/DatasetId$')
    AND (tm.InsertInd = 1)
    AND (sdas.TableTag = 'parameter')
    AND (sdas.DependentTableInd = 1)
  ORDER BY tm.StandardDatasetTableMapRowId
  
  SET @Statement = 'ALTER TABLE ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@BaseTableName + '_' + @TableNameSuffix)
                 + ' ALTER COLUMN ParameterValue nvarchar(max) NULL'
                 
  EXECUTE (@Statement)
END
GO
-- alter cover views
EXEC StandardDatasetBuildCoverView '$Config/DatasetId$', 0
GO
 
                     IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventCategoryRowIdResolve')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.EventCategoryRowIdResolve AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.EventCategoryRowIdResolve
   @ManagementGroupGuid         uniqueidentifier
  ,@ObjectKeyXml                ntext
AS
BEGIN
  SET NOCOUNT ON
  
  DECLARE @ManagementGroupRowId int
  -- check management group is connected to this DW
  DECLARE @CheckExecResult int
  
  EXEC @CheckExecResult = ManagementGroupAccessCheck @ManagementGroupGuid, @ManagementGroupRowId OUTPUT
  IF (@CheckExecResult &lt;&gt; 0) RETURN @CheckExecResult
  
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)
  SET @ErrorInd = 0
  BEGIN TRY
    DECLARE 
       @ExecResult      int
      ,@XmlDocHandle    int
    EXEC @ExecResult = sp_xml_preparedocument @XmlDocHandle OUTPUT, @ObjectKeyXml
    IF @ExecResult &lt;&gt; 0 RAISERROR(777971000, 16, 1, 'EventCategoryKeys', @ExecResult)
    
    IF (OBJECT_ID('tempdb..#EventCategory') IS NOT NULL)
      DROP TABLE #EventCategory
    
    CREATE TABLE #EventCategory (
       NodeOrdinal    int               NOT NULL
      ,PublisherGuid  uniqueidentifier  NOT NULL
      ,PublisherName  nvarchar(256)     NOT NULL
      ,CategoryId     int               NOT NULL
      ,CategoryTitle  nvarchar(256)     NOT NULL
    )
    
    INSERT #EventCategory (
       NodeOrdinal
      ,PublisherGuid
      ,PublisherName
      ,CategoryId
      ,CategoryTitle
    )
    SELECT
       NodeOrdinal
      ,PublisherGuid
      ,PublisherName
      ,CategoryId
      ,CategoryTitle
    FROM OPENXML(@XmlDocHandle, 'Keys/Key', 2) WITH (
                     NodeOrdinal      int               '@mp:id'
                    ,PublisherGuid    uniqueidentifier  'PublisherGuid'
                    ,PublisherName    nvarchar(256)     'PublisherName'
                    ,CategoryId       int               'CategoryId'
                    ,CategoryTitle    nvarchar(256)     'CategoryTitle') xml
    EXEC sp_xml_removedocument @XmlDocHandle
    SET @XmlDocHandle = NULL
    
    -- work with publisher domain first
    
    UPDATE ep
    SET LastReceivedDateTime = GETUTCDATE()
    FROM EventPublisher ep
          JOIN #EventCategory e ON (ep.EventPublisherGuid = e.PublisherGuid)
    WHERE (ep.LastReceivedDateTime &lt; DATEADD(day, -1, GETUTCDATE()))
    
    INSERT EventPublisher (EventPublisherGuid, EventPublisherName)
    SELECT DISTINCT e.PublisherGuid, e.PublisherName
    FROM #EventCategory e
    WHERE NOT EXISTS (SELECT * FROM EventPublisher WHERE (EventPublisherGuid = e.PublisherGuid))
    
    -- update category domain
    
    UPDATE ec
    SET LastReceivedDateTime = GETUTCDATE()
    FROM EventCategory ec
          JOIN EventPublisher ep ON (ec.EventPublisherRowId = ep.EventPublisherRowId)
          JOIN #EventCategory e ON (ec.EventCategoryId = e.CategoryId) AND (ep.EventPublisherGuid = e.PublisherGuid)
    WHERE (ec.LastReceivedDateTime &lt; DATEADD(day, -1, GETUTCDATE()))
    
    INSERT EventCategory (
       EventPublisherRowId
      ,EventCategoryId
      ,EventCategoryTitle
    )
    SELECT DISTINCT
       ep.EventPublisherRowId
      ,e.CategoryId
      ,e.CategoryTitle
    FROM #EventCategory e
            JOIN EventPublisher ep ON (e.PublisherGuid = ep.EventPublisherGuid)
    WHERE NOT EXISTS (SELECT *
                      FROM EventCategory
                      WHERE (EventCategoryId = e.CategoryId)
                        AND (EventPublisherRowId = ep.EventPublisherRowId)
                     )
    SELECT
       ec.EventCategoryRowId
    FROM #EventCategory e
            JOIN EventPublisher ep ON (e.PublisherGuid = ep.EventPublisherGuid)
            JOIN EventCategory ec ON (e.CategoryId = ec.EventCategoryId) AND (ec.EventPublisherRowId = ep.EventPublisherRowId)
    ORDER BY e.NodeOrdinal
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
  
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
  IF (@XmlDocHandle IS NOT NULL)
    EXEC sp_xml_removedocument @XmlDocHandle
  IF (OBJECT_ID('tempdb..#EventCategory') IS NOT NULL)
    DROP TABLE #EventCategory
    
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END
GO
GRANT EXECUTE ON EventCategoryRowIdResolve TO OpsMgrWriter
GO
   
                     IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventChannelRowIdResolve')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.EventChannelRowIdResolve AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.EventChannelRowIdResolve
   @ManagementGroupGuid         uniqueidentifier
  ,@ObjectKeyXml                ntext
AS
BEGIN
  SET NOCOUNT ON
  
  DECLARE @ManagementGroupRowId int
  -- check management group is connected to this DW
  DECLARE @CheckExecResult int
  
  EXEC @CheckExecResult = ManagementGroupAccessCheck @ManagementGroupGuid, @ManagementGroupRowId OUTPUT
  IF (@CheckExecResult &lt;&gt; 0) RETURN @CheckExecResult
  
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)
  SET @ErrorInd = 0
  BEGIN TRY
    DECLARE 
       @ExecResult      int
      ,@XmlDocHandle    int
    EXEC @ExecResult = sp_xml_preparedocument @XmlDocHandle OUTPUT, @ObjectKeyXml
    IF @ExecResult &lt;&gt; 0 RAISERROR(777971000, 16, 1, 'EventChannelKeys', @ExecResult)
    
    IF (OBJECT_ID('tempdb..#EventChannel') IS NOT NULL)
      DROP TABLE #EventChannel
      
    CREATE TABLE #EventChannel (
       NodeOrdinal    int               NOT NULL
      ,ChannelName    nvarchar(256)     NOT NULL
    )
    
    INSERT #EventChannel (
       NodeOrdinal
      ,ChannelName
    )
    SELECT
       NodeOrdinal
      ,ChannelName
    FROM OPENXML(@XmlDocHandle, 'Keys/Key', 2) WITH (
                     NodeOrdinal      int               '@mp:id'
                    ,ChannelName      nvarchar(256)     '.') xml
    EXEC sp_xml_removedocument @XmlDocHandle
    SET @XmlDocHandle = NULL
    
    UPDATE ec
    SET LastReceivedDateTime = GETUTCDATE()
    FROM EventChannel ec
          JOIN #EventChannel e ON (ec.EventChannelTitle = e.ChannelName COLLATE database_default)
    WHERE (ec.LastReceivedDateTime &lt; DATEADD(day, -1, GETUTCDATE()))
    
    INSERT EventChannel (EventChannelTitle)
    SELECT DISTINCT e.ChannelName
    FROM #EventChannel e
    WHERE NOT EXISTS (SELECT * FROM EventChannel WHERE (EventChannelTitle = e.ChannelName COLLATE database_default))
    SELECT
       CAST(ec.EventChannelRowId AS int)
    FROM #EventChannel e
            JOIN EventChannel ec ON (e.ChannelName = ec.EventChannelTitle COLLATE database_default)
    ORDER BY e.NodeOrdinal
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
  
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
  IF (@XmlDocHandle IS NOT NULL)
    EXEC sp_xml_removedocument @XmlDocHandle
  IF (OBJECT_ID('tempdb..#EventChannel') IS NOT NULL)
    DROP TABLE #EventChannel
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END
GO
GRANT EXECUTE ON EventChannelRowIdResolve TO OpsMgrWriter
GO
  
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventGroom')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.EventGroom AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.EventGroom
   @DatasetId   uniqueidentifier
  ,@AggregationTypeId tinyint
  ,@TableGuid uniqueidentifier
  ,@CutoffDateTime datetime
  ,@MaxRowsToGroom int
  ,@RowsDeleted int OUTPUT
AS
BEGIN
  SET NOCOUNT ON
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(4000)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  sysname
    ,@ErrorMessageText nvarchar(4000)
  SET @ErrorInd = 0
  
  DECLARE
     @MainTableName sysname
    ,@TableName sysname
    ,@Statement nvarchar(max)
    ,@DebugLevel tinyint
    ,@StandardDatasetAggregationStorageRowId int
    ,@SchemaName sysname
  
  BEGIN TRY
    SELECT
       @DebugLevel = DebugLevel
      ,@SchemaName = SchemaName
    FROM StandardDataset
    WHERE DatasetId = @DatasetId
    BEGIN TRAN
    
    CREATE TABLE #EventGroom (
      EventOriginId uniqueidentifier NOT NULL
    )
    
    SELECT @MainTableName = BaseTableName + '_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = @AggregationTypeId)
      AND (DependentTableInd = 0)
    
    SET @Statement = 'INSERT #EventGroom (EventOriginId)'
                   + ' SELECT TOP ' + CAST(@MaxRowsToGroom AS varchar(15)) + ' EventOriginId'
                   + ' FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@MainTableName)
                   + ' WHERE ([DateTime] &lt; CONVERT(datetime, ''' + CONVERT(varchar(50), @CutoffDateTime, 120) + ''', 120))'
                   
    EXECUTE (@Statement)
    SET @StandardDatasetAggregationStorageRowId = 0
    
    WHILE EXISTS (SELECT *
                  FROM StandardDatasetAggregationStorage
                  WHERE (DatasetId = @DatasetId)
                    AND (AggregationTypeId = @AggregationTypeId)
                    AND (DependentTableInd = 1)
                    AND (StandardDatasetAggregationStorageRowId &gt; @StandardDatasetAggregationStorageRowId)
                 )
    BEGIN
      SELECT TOP 1
         @StandardDatasetAggregationStorageRowId = StandardDatasetAggregationStorageRowId
        ,@TableName = BaseTableName + '_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')
      FROM StandardDatasetAggregationStorage
      WHERE (DatasetId = @DatasetId)
        AND (AggregationTypeId = @AggregationTypeId)
        AND (DependentTableInd = 1)
        AND (StandardDatasetAggregationStorageRowId &gt; @StandardDatasetAggregationStorageRowId)
		Order By StandardDatasetAggregationStorageRowId Asc
        
      SET @Statement = 'DELETE d'
                     + ' FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@TableName) + ' d'
                     + '  JOIN #EventGroom e ON (d.EventOriginId = e.EventOriginId)'
      EXECUTE (@Statement)
    END
    
    SET @Statement = 'DELETE d'
                   + ' FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@MainTableName) +' d'
                   + '   JOIN #EventGroom e ON (d.EventOriginId = e.EventOriginId)'
    EXECUTE (@Statement)
    SET @RowsDeleted = @@ROWCOUNT
    
    DROP TABLE #EventGroom
    
    COMMIT
    
    -- groom dynamic dimentions
    DECLARE @MaxDataAgeDays int
    
    SELECT @MaxDataAgeDays = MAX(MaxDataAgeDays)
    FROM StandardDatasetAggregation
    WHERE (DatasetId = @DatasetId)
    
    DELETE e
    FROM EventCategory e
    WHERE LastReceivedDateTime &lt; DATEADD(day, -@MaxDataAgeDays, GETUTCDATE())
    OPTION (RECOMPILE)
    
    DELETE e
    FROM EventChannel e
    WHERE LastReceivedDateTime &lt; DATEADD(day, -@MaxDataAgeDays, GETUTCDATE()) 
    OPTION (RECOMPILE)
    
    DELETE e
    FROM EventLoggingComputer e
    WHERE LastReceivedDateTime &lt; DATEADD(day, -@MaxDataAgeDays, GETUTCDATE()) 
    OPTION (RECOMPILE)
    
    DELETE e
    FROM EventPublisher e
    WHERE LastReceivedDateTime &lt; DATEADD(day, -@MaxDataAgeDays, GETUTCDATE()) 
    OPTION (RECOMPILE)
    
    DELETE e
    FROM EventUserName e
    WHERE LastReceivedDateTime &lt; DATEADD(day, -@MaxDataAgeDays, GETUTCDATE()) 
    OPTION (RECOMPILE)
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
    
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    IF (@DebugLevel &gt; 0)
    BEGIN
      DECLARE @DebugMessageText nvarchar(max)
      SET @DebugMessageText = N'Failed to groom data for event data set. Error ' + CAST(@ErrorNumber AS varchar(15))
                      + ', Procedure ' + @ErrorProcedure
                      + ', Line ' + CAST(@ErrorLine AS varchar(15))
                      + ', Message: '+ @ErrorMessageText
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 1
        ,@MessageText = @DebugMessageText
    END
      
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
  
  RETURN @RowsDeleted
END
GO
   
                     IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventLoggingComputerRowIdResolve')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.EventLoggingComputerRowIdResolve AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.EventLoggingComputerRowIdResolve
   @ManagementGroupGuid         uniqueidentifier
  ,@ObjectKeyXml                ntext
AS
BEGIN
  SET NOCOUNT ON
  
  DECLARE @ManagementGroupRowId int
  -- check management group is connected to this DW
  DECLARE @CheckExecResult int
  
  EXEC @CheckExecResult = ManagementGroupAccessCheck @ManagementGroupGuid, @ManagementGroupRowId OUTPUT
  IF (@CheckExecResult &lt;&gt; 0) RETURN @CheckExecResult
  
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)
  SET @ErrorInd = 0
  BEGIN TRY
    DECLARE 
       @ExecResult      int
      ,@XmlDocHandle    int
    EXEC @ExecResult = sp_xml_preparedocument @XmlDocHandle OUTPUT, @ObjectKeyXml
    IF @ExecResult &lt;&gt; 0 RAISERROR(777971000, 16, 1, 'EventLoggingComputerKeys', @ExecResult)
    
    IF (OBJECT_ID('tempdb..#EventLoggingComputer') IS NOT NULL)
      DROP TABLE #EventLoggingComputer
      
    CREATE TABLE #EventLoggingComputer (
       NodeOrdinal          int               NOT NULL
      ,ComputerName         nvarchar(256)     NOT NULL
    )
    
    INSERT #EventLoggingComputer (
       NodeOrdinal
      ,ComputerName
    )
    SELECT
       NodeOrdinal
      ,LoggingComputerName
    FROM OPENXML(@XmlDocHandle, 'Keys/Key', 2) WITH (
                     NodeOrdinal            int               '@mp:id'
                    ,LoggingComputerName    nvarchar(256)     '.') xml
    EXEC sp_xml_removedocument @XmlDocHandle
    SET @XmlDocHandle = NULL
    
    UPDATE ec
    SET LastReceivedDateTime = GETUTCDATE()
    FROM EventLoggingComputer ec
          JOIN #EventLoggingComputer e ON (ec.ComputerName = e.ComputerName COLLATE database_default)
    WHERE (ec.LastReceivedDateTime &lt; DATEADD(day, -1, GETUTCDATE()))
    
    INSERT EventLoggingComputer (ComputerName)
    SELECT DISTINCT e.ComputerName
    FROM #EventLoggingComputer e
    WHERE NOT EXISTS (SELECT * FROM EventLoggingComputer WHERE (ComputerName = e.ComputerName COLLATE database_default))
    SELECT
       ec.EventLoggingComputerRowId
    FROM #EventLoggingComputer e
            JOIN EventLoggingComputer ec ON (e.ComputerName = ec.ComputerName COLLATE database_default)
    ORDER BY e.NodeOrdinal
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
  
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
  IF (@XmlDocHandle IS NOT NULL)
    EXEC sp_xml_removedocument @XmlDocHandle
  IF (OBJECT_ID('tempdb..#EventLoggingComputer') IS NOT NULL)
    DROP TABLE #EventLoggingComputer
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END
GO
GRANT EXECUTE ON EventLoggingComputerRowIdResolve TO OpsMgrWriter
GO
   
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventProcessStaging')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.EventProcessStaging AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.EventProcessStaging
   @DatasetId           uniqueidentifier
AS
BEGIN
  SET NOCOUNT ON
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)
  SET @ErrorInd = 0
  DECLARE
     @DebugLevel int
    ,@SchemaName sysname
    ,@ExecResult int
    ,@LockResourceName sysname
    ,@InsertTableName sysname
    ,@InsertTableGuid uniqueidentifier
    ,@InsertStartedDateTime datetime
    ,@Statement nvarchar(max)
    ,@MessageText varchar(max)
    ,@OperationDurationMs bigint
    ,@MaxStagingRowsToProcess int
  BEGIN TRY
  
    SELECT
       @DebugLevel = DebugLevel
      ,@SchemaName = SchemaName
    FROM StandardDataset
    WHERE (DatasetId = @DatasetId)
    
    IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EventStage2Process' AND TABLE_SCHEMA = 'Event')
    BEGIN
      BEGIN TRAN
      
      DECLARE @ProcessAllRowsInd bit
      SET @ProcessAllRowsInd = 1
      
      -- figure out what we need to do with staging area
      SELECT
         @Statement = StagingTableColumnDefinition
        ,@MaxStagingRowsToProcess = MaxRowsToProcessPerTransactionCount
      FROM StandardDatasetStagingArea
      WHERE DatasetId = @DatasetId
      
      IF (@MaxStagingRowsToProcess IS NOT NULL)
      BEGIN
        DECLARE @EventStageRowCount int
        DECLARE @SpaceUsedInfo TABLE (
                   [name]       sysname
                  ,[rows]       int
                  ,reserved     nvarchar(100)
                  ,data         nvarchar(100)
                  ,index_size   nvarchar(100)
                  ,unused       nvarchar(100)
                )
                
        INSERT @SpaceUsedInfo
        EXEC sp_spaceused 'Event.EventStage'
        
        SELECT @EventStageRowCount = [rows]
        FROM @SpaceUsedInfo
        
        IF (@EventStageRowCount &gt;= @MaxStagingRowsToProcess)
        BEGIN
          SET @ProcessAllRowsInd = 0
        END
      END
      
      IF (@ProcessAllRowsInd = 1)
      BEGIN
        -- no limit set for the number of rows to process
        -- rename and re-create staging table
        -- lock, rename EventStage table and re-create it
        EXEC @ExecResult = sp_rename 'Event.EventStage', 'EventStage2Process'
        
        IF (@ExecResult &lt; 0)
        BEGIN
          RAISERROR(777971003, 16, 1, @ExecResult)
        END
        SELECT @Statement = 'CREATE TABLE Event.EventStage (' + @Statement + ')'
        EXECUTE (@Statement)        
      END
      ELSE
      BEGIN
        -- need to process subset of rows
        -- create extra column to store original row id
        SELECT @Statement =
              'CREATE TABLE Event.EventStage2Process (' 
            + @Statement
            + ',OriginalEventStageRowId  int  NOT NULL'
            + ')'
        EXECUTE (@Statement)
        
        SELECT @Statement =
          ' INSERT Event.EventStage2Process'
        + '  ('
        + '     DatasetId'
        + '    ,ManagementGroupGuid'
        + '    ,EventOriginId'
        + '    ,[DateTime]'
        + '    ,RuleRowId'
        + '    ,ManagedEntityRowId'
        + '    ,EventPublisherRowId'
        + '    ,EventChannelRowId'
        + '    ,EventCategoryRowId'
        + '    ,EventLevelId'
        + '    ,LoggingComputerRowId'
        + '    ,EventDisplayNumber'
        + '    ,EventNumber'
        + '    ,UserNameRowId'
        + '    ,RawDescription'
        + '    ,RenderedDescription'
        + '    ,EventParameters'
        + '    ,EventData'
        + '    ,RawDescriptionHash'
        + '    ,ParameterHash'
        + '    ,EventDataHash'
        + '    ,OriginalEventStageRowId'
        + '  )'
        + '  SELECT TOP (' + CAST(@MaxStagingRowsToProcess AS varchar(15)) + ')'
        + '     DatasetId'
        + '    ,ManagementGroupGuid'
        + '    ,EventOriginId'
        + '    ,[DateTime]'
        + '    ,RuleRowId'
        + '    ,ManagedEntityRowId'
        + '    ,EventPublisherRowId'
        + '    ,EventChannelRowId'
        + '    ,EventCategoryRowId'
        + '    ,EventLevelId'
        + '    ,LoggingComputerRowId'
        + '    ,EventDisplayNumber'
        + '    ,EventNumber'
        + '    ,UserNameRowId'
        + '    ,RawDescription'
        + '    ,RenderedDescription'
        + '    ,EventParameters'
        + '    ,EventData'
        + '    ,RawDescriptionHash'
        + '    ,ParameterHash'
        + '    ,EventDataHash'
        + '    ,EventStageRowId'
        + '  FROM Event.EventStage'
        + '  ORDER BY EventStageRowId'
        EXECUTE(@Statement)
        SELECT @Statement = 
          ' CREATE INDEX IX_EventStage2Process_EventOriginId ON Event.EventStage2Process (EventOriginId)'
        EXECUTE(@Statement)
        
        SELECT @Statement =
          'DELETE es'
        + ' FROM Event.EventStage es'
        + '        JOIN Event.EventStage2Process esp ON (es.EventStageRowId = esp.OriginalEventStageRowId)'
        EXECUTE(@Statement)
      END
      
      GRANT ALTER, SELECT, INSERT, UPDATE, DELETE ON Event.EventStage TO OpsMgrWriter
      
      GRANT CONTROL ON Event.EventStage2Process TO OpsMgrWriter
      COMMIT
    END
    
    BEGIN TRAN
    -- lock table map to ensure we insert into table opened for insertion
    SET @LockResourceName = CAST(@DatasetId AS varchar(50)) + '_TableMap'
  
    EXEC @ExecResult = sp_getapplock
           @Resource = @LockResourceName
          ,@LockMode = 'Shared'
          ,@LockOwner = 'Transaction'
    IF (@ExecResult &lt; 0)
    BEGIN
      RAISERROR(777971001, 16, 1, 'Shared:StandardDatasetTableMap', @ExecResult)
    END
  
    EXEC dbo.StandardDatasetGetInsertTableGuid @DatasetId, 0, @InsertTableGuid OUTPUT
    
    IF (@DebugLevel &gt; 3)
    BEGIN
      SELECT @MessageText = 'Starting to insert ' + CAST(COUNT(*) AS varchar(30)) + ' events into ' + @InsertTableName
      FROM Event.EventStage2Process
      
      SET @InsertStartedDateTime = GETUTCDATE()
      
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 4
        ,@MessageText = @MessageText
    END
    -- insert event &lt;-&gt; rule/me relationships
    -- NOTE: We do not check for event-rule-ME uniqueness
    --       to save time (can produce dupes if event was delivered twice
    --       in two different staging processing windows)
    --       We also saw Sql having troubles coming up with a good plan
    
    SELECT @InsertTableName = BaseTableName + '_' + REPLACE(CAST(@InsertTableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = 0)
      AND (DependentTableInd = 1)
      AND (TableTag = 'rule')
      
    SELECT @Statement =
        ' INSERT ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@InsertTableName) + ' ('
      + '    EventOriginId'
      + '   ,RuleRowId'
      + '   ,ManagedEntityRowId'
      + ' )'
      + ' SELECT'
      + '    s.EventOriginId'
      + '   ,s.RuleRowId'
      + '   ,s.ManagedEntityRowId'
      + ' FROM Event.EventStage2Process s'
    EXECUTE(@Statement)
    -- delete events collected more then once - leave latest collected only
    DELETE s
    FROM Event.EventStage2Process s
    WHERE EXISTS (SELECT *
                  FROM Event.EventStage2Process s_later
                  WHERE (s.EventOriginId = s_later.EventOriginId)
                    AND (s_later.EventStageRowId &gt; s.EventStageRowId)
                 )
    -- insert events
    SELECT @InsertTableName = BaseTableName + '_' + REPLACE(CAST(@InsertTableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = 0)
      AND (DependentTableInd = 0)
      
    -- first delete events that were already delivered
    SELECT @Statement = 'DELETE s'
                        + ' FROM Event.EventStage2Process s, ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@InsertTableName) + ' e'
                        + ' WHERE (s.EventOriginId = e.EventOriginId)'
    EXECUTE (@Statement)
    SELECT @Statement =
        ' INSERT ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@InsertTableName) + ' ('
      + '    EventOriginId'
      + '   ,[DateTime]'
      + '   ,EventPublisherRowId'
      + '   ,EventChannelRowId'
      + '   ,EventCategoryRowId'
      + '   ,EventLevelId'
      + '   ,LoggingComputerRowId'
      + '   ,EventNumber'
      + '   ,EventDisplayNumber'
      + '   ,UserNameRowId'
      + '   ,RawDescriptionHash'
      + '   ,ParameterHash'
      + '   ,EventDataHash'
      + ' )'
      + ' SELECT '
      + '    s.EventOriginId'
      + '   ,s.[DateTime]'
      + '   ,s.EventPublisherRowId'
      + '   ,s.EventChannelRowId'
      + '   ,s.EventCategoryRowId'
      + '   ,s.EventLevelId'
      + '   ,s.LoggingComputerRowId'
      + '   ,s.EventNumber'
      + '   ,s.EventDisplayNumber'
      + '   ,s.UserNameRowId'
      + '   ,s.RawDescriptionHash'
      + '   ,s.ParameterHash'
      + '   ,s.EventDataHash'
      + ' FROM Event.EventStage2Process s'
    EXECUTE(@Statement)
    
    -- insert parameters
    
    SELECT @InsertTableName = BaseTableName + '_' + REPLACE(CAST(@InsertTableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = 0)
      AND (DependentTableInd = 1)
      AND (TableTag = 'parameter')
    
    SELECT @Statement =
        ' INSERT ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@InsertTableName) + ' ('
      + '   EventOriginId'
      + '  ,ParameterIndex'
      + '  ,ParameterValue'
      + ' )'
      + ' SELECT '
      + '   s.EventOriginId'
      + '  ,ROW_NUMBER() OVER(PARTITION BY s.EventOriginId ORDER BY s.EventOriginId)'
      + '  ,p.ParameterValue.value(''.'', ''nvarchar(max)'')'
      + ' FROM Event.EventStage2Process s'
      + '       CROSS APPLY s.EventParameters.nodes(''Params/Param'') as p(ParameterValue)'
    EXECUTE(@Statement)
    -- insert event details
    SELECT @InsertTableName = BaseTableName + '_' + REPLACE(CAST(@InsertTableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = 0)
      AND (DependentTableInd = 1)
      AND (TableTag = 'detail')
    
    SELECT @Statement =
        ' INSERT ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@InsertTableName) + ' ('
      + '   EventOriginId'
      + '  ,RawDescription'
      + '  ,RenderedDescription'
      + '  ,EventData'
      + ' )'
      + ' SELECT '
      + '   s.EventOriginId'
      + '  ,s.RawDescription'
      + '  ,s.RenderedDescription'
      + '  ,s.EventData'
      + ' FROM Event.EventStage2Process s'
    EXECUTE(@Statement)
    -- delete all inserted data from staging
    DROP TABLE Event.EventStage2Process
    
    IF (@DebugLevel &gt; 3)
    BEGIN
      SET @MessageText = 'Finished inserting events into ' + @InsertTableName
      SET @OperationDurationMs = ABS(DATEDIFF(ms, GETUTCDATE(), @InsertStartedDateTime))
      
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 4
        ,@MessageText = @MessageText
        ,@OperationDurationMs = @OperationDurationMs
    END
    COMMIT
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
  
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    IF (@DebugLevel &gt; 0)
    BEGIN
      DECLARE @DebugMessageText nvarchar(max)
      
      SET @DebugMessageText = N'Failed to process data in the event data set staging area. Error ' + CAST(@ErrorNumber AS varchar(15))
                      + ', Procedure ' + @ErrorProcedure
                      + ', Line ' + CAST(@ErrorLine AS varchar(15))
                      + ', Message: '+ @ErrorMessageText
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 1
        ,@MessageText = @DebugMessageText
    END
      
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END
GO
GRANT EXECUTE ON dbo.EventProcessStaging TO OpsMgrWriter
GO
                     IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventPublisherRowIdResolve')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.EventPublisherRowIdResolve AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.EventPublisherRowIdResolve
   @ManagementGroupGuid         uniqueidentifier
  ,@ObjectKeyXml                ntext
AS
BEGIN
  SET NOCOUNT ON
  
  DECLARE @ManagementGroupRowId int
  -- check management group is connected to this DW
  DECLARE @CheckExecResult int
  
  EXEC @CheckExecResult = ManagementGroupAccessCheck @ManagementGroupGuid, @ManagementGroupRowId OUTPUT
  IF (@CheckExecResult &lt;&gt; 0) RETURN @CheckExecResult
  
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)
  SET @ErrorInd = 0
  BEGIN TRY
    DECLARE 
       @ExecResult      int
      ,@XmlDocHandle    int
    EXEC @ExecResult = sp_xml_preparedocument @XmlDocHandle OUTPUT, @ObjectKeyXml
    IF @ExecResult &lt;&gt; 0 RAISERROR(777971000, 16, 1, 'EventPublisherKeys', @ExecResult)
    
    IF (OBJECT_ID('tempdb..#EventPublisher') IS NOT NULL)
      DROP TABLE #EventPublisher
    CREATE TABLE #EventPublisher (
       NodeOrdinal    int               NOT NULL
      ,PublisherGuid  uniqueidentifier  NOT NULL
      ,PublisherName  nvarchar(256)     NOT NULL
    )
    
    INSERT #EventPublisher (
       NodeOrdinal
      ,PublisherGuid
      ,PublisherName
    )
    SELECT
       NodeOrdinal
      ,PublisherGuid
      ,PublisherName
    FROM OPENXML(@XmlDocHandle, 'Keys/Key', 2) WITH (
                     NodeOrdinal          int               '@mp:id'
                    ,PublisherGuid        uniqueidentifier  'PublisherGuid'
                    ,PublisherName        nvarchar(256)     'PublisherName') xml
    EXEC sp_xml_removedocument @XmlDocHandle
    SET @XmlDocHandle = NULL
    
    UPDATE ep
    SET LastReceivedDateTime = GETUTCDATE()
    FROM EventPublisher ep
          JOIN #EventPublisher e ON (ep.EventPublisherGuid = e.PublisherGuid)
    WHERE (ep.LastReceivedDateTime &lt; DATEADD(day, -1, GETUTCDATE()))
    
    INSERT EventPublisher (EventPublisherGuid, EventPublisherName)
    SELECT DISTINCT e.PublisherGuid, e.PublisherName
    FROM #EventPublisher e
    WHERE NOT EXISTS (SELECT * FROM EventPublisher WHERE (EventPublisherGuid = e.PublisherGuid))
    SELECT
       ep.EventPublisherRowId
    FROM #EventPublisher e
            JOIN EventPublisher ep ON (e.PublisherGuid = ep.EventPublisherGuid)
    ORDER BY e.NodeOrdinal
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
  
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
  IF (@XmlDocHandle IS NOT NULL)
    EXEC sp_xml_removedocument @XmlDocHandle
  IF (OBJECT_ID('tempdb..#EventPublisher') IS NOT NULL)
    DROP TABLE #EventPublisher
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END
GO
GRANT EXECUTE ON EventPublisherRowIdResolve TO OpsMgrWriter
GO
  
                     IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'EventUserNameRowIdResolve')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.EventUserNameRowIdResolve AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.EventUserNameRowIdResolve
   @ManagementGroupGuid         uniqueidentifier
  ,@ObjectKeyXml                ntext
AS
BEGIN
  SET NOCOUNT ON
  
  DECLARE @ManagementGroupRowId int
  -- check management group is connected to this DW
  DECLARE @CheckExecResult int
  
  EXEC @CheckExecResult = ManagementGroupAccessCheck @ManagementGroupGuid, @ManagementGroupRowId OUTPUT
  IF (@CheckExecResult &lt;&gt; 0) RETURN @CheckExecResult
  
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)
  SET @ErrorInd = 0
  BEGIN TRY
    DECLARE 
       @ExecResult      int
      ,@XmlDocHandle    int
    EXEC @ExecResult = sp_xml_preparedocument @XmlDocHandle OUTPUT, @ObjectKeyXml
    IF @ExecResult &lt;&gt; 0 RAISERROR(777971000, 16, 1, 'EventUserNameKeys', @ExecResult)
    
    IF (OBJECT_ID('tempdb..#EventUserName') IS NOT NULL)
      DROP TABLE #EventUserName
    CREATE TABLE #EventUserName (
       NodeOrdinal    int               NOT NULL
      ,UserName       nvarchar(256)     NOT NULL
    )
    
    INSERT #EventUserName (
       NodeOrdinal
      ,UserName
    )
    SELECT
       NodeOrdinal
      ,UserName
    FROM OPENXML(@XmlDocHandle, 'Keys/Key', 2) WITH (
                     NodeOrdinal      int               '@mp:id'
                    ,UserName         nvarchar(256)     '.') xml
    EXEC sp_xml_removedocument @XmlDocHandle
    SET @XmlDocHandle = NULL
    
    UPDATE ec
    SET LastReceivedDateTime = GETUTCDATE()
    FROM EventUserName ec
          JOIN #EventUserName e ON (ec.UserName = e.UserName COLLATE database_default)
    WHERE (ec.LastReceivedDateTime &lt; DATEADD(day, -1, GETUTCDATE()))
    
    INSERT EventUserName (UserName)
    SELECT DISTINCT e.UserName
    FROM #EventUserName e
    WHERE NOT EXISTS (SELECT * FROM EventUserName WHERE (UserName = e.UserName COLLATE database_default))
    SELECT
       ec.EventUserNameRowId
    FROM #EventUserName e
            JOIN EventUserName ec ON (e.UserName = ec.UserName COLLATE database_default)
    ORDER BY e.NodeOrdinal
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
  
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
  IF (@XmlDocHandle IS NOT NULL)
    EXEC sp_xml_removedocument @XmlDocHandle
  IF (OBJECT_ID('tempdb..#EventUserName') IS NOT NULL)
    DROP TABLE #EventUserName
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END
GO
GRANT EXECUTE ON EventUserNameRowIdResolve TO OpsMgrWriter
GO
   
                    SET NOCOUNT ON
UPDATE StandardDatasetStagingArea
SET StagingTableColumnDefinition = 
  'DatasetId                      uniqueidentifier  NOT NULL
  ,ManagementGroupGuid            uniqueidentifier  NOT NULL
  ,EventOriginId                  uniqueidentifier  NOT NULL
  ,[DateTime]                     datetime          NOT NULL
  ,RuleRowId                      int               NOT NULL
  ,ManagedEntityRowId             int               NOT NULL
  ,EventPublisherRowId            int               NOT NULL
  ,EventChannelRowId              smallint          NOT NULL
  ,EventCategoryRowId             int               NOT NULL
  ,EventLevelId                   tinyint           NOT NULL
  ,LoggingComputerRowId           int               NOT NULL
  ,EventDisplayNumber             int               NOT NULL
  ,EventNumber                    bigint            NOT NULL
  ,UserNameRowId                  int               NOT NULL
  ,RawDescription                 nvarchar(max)     NULL
  ,RenderedDescription            nvarchar(max)     NULL
  ,EventParameters                xml               NULL
  ,EventData                      xml               NULL
  ,RawDescriptionHash             uniqueidentifier  NULL
  ,ParameterHash                  uniqueidentifier  NULL
  ,EventDataHash                  uniqueidentifier  NULL
  
  ,EventStageRowId                bigint            NOT NULL    IDENTITY(1, 1)  PRIMARY KEY
  '
,MaxRowsToProcessPerTransactionCount = CASE WHEN MaxRowsToProcessPerTransactionCount &lt; 20000 THEN MaxRowsToProcessPerTransactionCount ELSE 20000 END
WHERE DatasetId = '$Config/DatasetId$'
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
               WHERE (TABLE_NAME = 'EventStage')
                 AND (TABLE_SCHEMA = 'Event')
                 AND (CONSTRAINT_TYPE = 'PRIMARY KEY')
)
BEGIN
  ALTER TABLE Event.EventStage
    ADD CONSTRAINT PK_EventStage PRIMARY KEY NONCLUSTERED (EventStageRowId)
END
GO
                    </Upgrade></DataWarehouseDataSet><DataWarehouseDataSet ID="Microsoft.SystemCenter.DataWarehouse.DataSet.Performance" Accessibility="Public"><Dependencies><DataWarehouseScript>Microsoft.SystemCenter.DataWarehouse.Script.DatasetDebuggingSupport</DataWarehouseScript><DataWarehouseScript>Microsoft.SystemCenter.DataWarehouse.Script.StandardDatasetSupport</DataWarehouseScript></Dependencies><Configuration><IncludeSchemaTypes><SchemaType>Microsoft.SystemCenter.DataWarehouse.StandardDatasetSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Aggregations" type="AggregationsType" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="RawInsertTableCount" type="xsd:positiveInteger" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DefaultAggregationIntervalCount" type="xsd:positiveInteger" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BlockingMaintenanceDailyStartTime"
type="TimeOfDayType" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BlockingMaintenanceDurationMinutes" type="xsd:positiveInteger" /></Configuration><Install> 
                    SET NOCOUNT ON
EXEC StandardDatasetDelete @DatasetId = '$Config/DatasetId$'
GO
INSERT StandardDataset (
   DatasetId 
  ,SchemaName
  ,DefaultAggregationIntervalCount
  ,RawInsertTableCount
  ,StagingProcessorStoredProcedureName
  ,BlockingMaintenanceDailyStartTime
  ,BlockingMaintenanceDurationMinutes
)
VALUES
(
   '$Config/DatasetId$'
  ,'Perf'
  ,$Config/DefaultAggregationIntervalCount$
  ,$Config/RawInsertTableCount$
  ,'PerformanceProcessStaging'
  ,'$Config/BlockingMaintenanceDailyStartTime$'
  ,$Config/BlockingMaintenanceDurationMinutes$
)
                    SET NOCOUNT ON
DECLARE 
   @ErrorInd        bit
  ,@ErrorMessageText nvarchar(4000)
  ,@ErrorNumber     int
  ,@ErrorSeverity   int
  ,@ErrorState      int
  ,@ErrorLine       int
  ,@ErrorProcedure  nvarchar(256)
SET @ErrorInd = 0
DECLARE
   @ExecResult int
  ,@XmlDocHandle int
  ,@XmlDocText varchar(max)
  
BEGIN TRY
  SET @XmlDocText = '&lt;Aggregations&gt;$Config/Aggregations$&lt;/Aggregations&gt;'
  EXEC @ExecResult = sp_xml_preparedocument @XmlDocHandle OUTPUT, @XmlDocText
  IF @ExecResult &lt;&gt; 0 RAISERROR(777971000, 16, 1, 'PerfAggregation', @ExecResult)
  INSERT StandardDatasetAggregation
  (                               
     DatasetId
    ,AggregationTypeId
    ,AggregationIntervalDurationMinutes
    ,AggregationStartDelayMinutes
    ,BuildAggregationStoredProcedureName
    ,DeleteAggregationStoredProcedureName
    ,GroomStoredProcedureName
    ,IndexOptimizationIntervalMinutes
    ,MaxDataAgeDays
    ,GroomingIntervalMinutes
    ,MaxRowsToGroom
    ,LastGroomingDateTime
    ,DataFileGroupName
    ,IndexFileGroupName
  )
  SELECT
     '$Config/DatasetId$'
    ,CASE AggregationType
       WHEN 'Raw' THEN 0
       WHEN 'Subhourly' THEN 10
       WHEN 'Hourly' THEN 20
       WHEN 'Daily' THEN 30
     END
    ,CASE AggregationType
       WHEN 'Raw' THEN NULL
       WHEN 'Subhourly' THEN AggregationIntervalDurationMinutes
       WHEN 'Hourly' THEN 60
       WHEN 'Daily' THEN 24*60
     END
    ,AggregationStartDelayMinutes
    ,'PerformanceAggregate'
    ,CASE AggregationType
       WHEN 'Raw' THEN NULL
       ELSE 'PerformanceAggregationDelete'
     END
    ,'PerformanceGroom'
    ,IndexOptimizationIntervalMinutes
    ,MaxDataAgeDays
    ,GroomingIntervalMinutes
    ,MaxRowsToGroom
    ,GETUTCDATE()
    ,DataFileGroupName
    ,IndexFileGroupName
  FROM OPENXML(@XmlDocHandle, 'Aggregations/*', 2) WITH (
       AggregationType                    varchar(50)   '@mp:localname'
      ,MaxTableRowCount                   int
      ,MaxTableSizeKb                     int
      ,AggregationStartDelayMinutes       int
      ,MaxDataAgeDays                     int
      ,GroomingIntervalMinutes            int
      ,MaxRowsToGroom                     int
      ,IndexOptimizationIntervalMinutes   int
      ,DataFileGroupName                  nvarchar(256)
      ,IndexFileGroupName                 nvarchar(256)
      ,AggregationIntervalDurationMinutes int
  )
END TRY
BEGIN CATCH
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
END CATCH
IF (@XmlDocHandle IS NOT NULL)
  EXEC sp_xml_removedocument @XmlDocHandle
IF (@ErrorInd = 1)
BEGIN
  DECLARE @AdjustedErrorSeverity int
  SET @AdjustedErrorSeverity = CASE
                                 WHEN @ErrorSeverity &gt; 18 THEN 18
                                 ELSE @ErrorSeverity
                               END
  
  RAISERROR (777971002, @AdjustedErrorSeverity, 1
    ,@ErrorNumber
    ,@ErrorSeverity
    ,@ErrorState
    ,@ErrorProcedure
    ,@ErrorLine
    ,@ErrorMessageText
  )
END
GO
 
                    SET NOCOUNT ON
DECLARE 
   @ErrorInd        bit
  ,@ErrorMessageText nvarchar(4000)
  ,@ErrorNumber     int
  ,@ErrorSeverity   int
  ,@ErrorState      int
  ,@ErrorLine       int
  ,@ErrorProcedure  nvarchar(256)
SET @ErrorInd = 0
DECLARE
   @ExecResult int
  ,@XmlDocHandle int
  ,@XmlDocText nvarchar(max)
  
BEGIN TRY
  SET @XmlDocText = '&lt;Aggregations&gt;$Config/Aggregations$&lt;/Aggregations&gt;'
  EXEC @ExecResult = sp_xml_preparedocument @XmlDocHandle OUTPUT, @XmlDocText
  IF @ExecResult &lt;&gt; 0 RAISERROR(777971000, 16, 1, 'PerfAggregation', @ExecResult)
  INSERT StandardDatasetAggregationStorage
  (                               
     DatasetId
    ,AggregationTypeId
    ,BaseTableName
    ,DependentTableInd
    ,TableTemplate
    ,CoverViewSelectClause
    ,MaxTableRowCount
    ,MaxTableSizeKb 
  )
  SELECT
     '$Config/DatasetId$'
    ,CASE AggregationType
       WHEN 'Raw' THEN 0
       WHEN 'Subhourly' THEN 10
       WHEN 'Hourly' THEN 20
       WHEN 'Daily' THEN 30
     END
    ,BaseTableName
    ,0
    ,CASE AggregationType
       WHEN 'Raw' THEN '
                CREATE TABLE ' + QUOTENAME(d.SchemaName) + '.' + QUOTENAME(BaseTableName + '_$Guid$') + '
                (
                     ' + QUOTENAME(BaseTableName + 'RowId') + ' bigint  NOT NULL  IDENTITY(1, 1)
                    ,[DateTime]                     datetime  NOT NULL
                    ,PerformanceRuleInstanceRowId   int       NOT NULL
                    ,ManagedEntityRowId             int       NOT NULL
                    ,SampleValue                    float(53) NULL
                    
                    ,CONSTRAINT ' + QUOTENAME('PK_' + BaseTableName + '_$Guid$') + ' PRIMARY KEY CLUSTERED ('
                       + QUOTENAME(BaseTableName + 'RowId') + ') ON $DataFileGroupName$
                ) ON $DataFileGroupName$
       '
       ELSE '
                CREATE TABLE '  + QUOTENAME(d.SchemaName) + '.' + QUOTENAME(BaseTableName + '_$Guid$') + '
                (
                     ' + QUOTENAME(BaseTableName + 'RowId') + ' bigint  NOT NULL  IDENTITY(1, 1)
                    ,[DateTime]                     datetime  NOT NULL
                    ,PerformanceRuleInstanceRowId   int       NOT NULL
                    ,ManagedEntityRowId             int       NOT NULL
                    ,SampleCount                    int       NOT NULL
                    ,AverageValue                   float(53) NOT NULL
                    ,MinValue                       float(53) NOT NULL
                    ,MaxValue                       float(53) NOT NULL
                    ,StandardDeviation              float(53) NOT NULL
                    
                    ,CONSTRAINT ' + QUOTENAME('PK_' + BaseTableName + '_$Guid$') + ' PRIMARY KEY CLUSTERED ('
                       + QUOTENAME(BaseTableName + 'RowId') + ') ON $DataFileGroupName$
                ) ON $DataFileGroupName$
       '
     END
    ,CASE AggregationType
       WHEN 'Raw' THEN '
          SELECT
             [DateTime]
            ,PerformanceRuleInstanceRowId
            ,ManagedEntityRowId
            ,SampleValue
       '
       ELSE '
          SELECT
             [DateTime]
            ,PerformanceRuleInstanceRowId
            ,ManagedEntityRowId
            ,SampleCount
            ,AverageValue
            ,MinValue
            ,MaxValue
            ,StandardDeviation
       '
     END
    ,MaxTableRowCount
    ,MaxTableSizeKb 
  FROM OPENXML(@XmlDocHandle, 'Aggregations/*', 2) WITH (
       AggregationType      varchar(50)   '@mp:localname'
      ,BaseTableName        varchar(256)
      ,MaxTableRowCount     int
      ,MaxTableSizeKb       int
      ,DataFileGroupName    varchar(256)
      ,IndexFileGroupName    varchar(256)
  )
      CROSS JOIN StandardDataset d
  WHERE (d.DatasetId = '$Config/DatasetId$')
END TRY
BEGIN CATCH
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
END CATCH
IF (@XmlDocHandle IS NOT NULL)
  EXEC sp_xml_removedocument @XmlDocHandle
IF (@ErrorInd = 1)
BEGIN
  DECLARE @AdjustedErrorSeverity int
  SET @AdjustedErrorSeverity = CASE
                                 WHEN @ErrorSeverity &gt; 18 THEN 18
                                 ELSE @ErrorSeverity
                               END
  
  RAISERROR (777971002, @AdjustedErrorSeverity, 1
    ,@ErrorNumber
    ,@ErrorSeverity
    ,@ErrorState
    ,@ErrorProcedure
    ,@ErrorLine
    ,@ErrorMessageText
  )
END
GO
  
                    SET NOCOUNT ON
GO
-- create [DateTime] field indexes for all aggregation levels
DECLARE 
   @AggregationTypeId int
  ,@Statement nvarchar(max)
  ,@IndeGuid uniqueidentifier
SET @AggregationTypeId = -1
WHILE EXISTS (SELECT *
              FROM StandardDatasetAggregation
              WHERE (DatasetId = '$Config/DatasetId$')
                AND (AggregationTypeId &gt; @AggregationTypeId)
             )
BEGIN
  SELECT @IndeGuid = NEWID()
  
  SELECT TOP 1 
     @AggregationTypeId = AggregationTypeId
    ,@Statement = 
      ' EXEC StandardDatasetIndexDelete'
    + '    @DatasetId = ''$Config/DatasetId$'''
    + '   ,@IndexGuid = ''' + CAST(@IndeGuid AS varchar(100)) + ''''
	  + '   ,@DeleteIndexOnExistingTablesInd = 0'
    + ' EXEC StandardDatasetIndexInsert'
    + '    @DatasetId = ''$Config/DatasetId$'''
    + '   ,@AggregationTypeId = ' + CAST(AggregationTypeId AS varchar(10))
    + '   ,@DependentTableInd = 0'
    + '   ,@TableTag = NULL'
    + '   ,@UniqueInd = 0'
    + '   ,@IndexGuid = ''' + CAST(@IndeGuid AS varchar(100)) + ''''
    + '   ,@IndexDefinition = ''([DateTime])'''
    + '   ,@CreateIndexOnExistingTablesInd = 0'
  FROM StandardDatasetAggregation
  WHERE (DatasetId = '$Config/DatasetId$')
    AND (AggregationTypeId &gt; @AggregationTypeId)
  ORDER BY AggregationTypeId
  
  EXECUTE (@Statement)
END
GO
/* raw indexes for UI perf widget perf */
EXEC StandardDatasetIndexDelete
   @DatasetId = '$Config/DatasetId$'
  ,@IndexGuid = 'A136E27D-A83E-4F38-B9A3-35EAAFBFCBE8'
	,@DeleteIndexOnExistingTablesInd = 0
EXEC StandardDatasetIndexInsert
   @DatasetId = '$Config/DatasetId$'
  ,@AggregationTypeId = 0
  ,@DependentTableInd = 0
  ,@TableTag = NULL
  ,@UniqueInd = 0
  ,@IndexGuid = 'A136E27D-A83E-4F38-B9A3-35EAAFBFCBE8'
  ,@IndexDefinition = '(
	[ManagedEntityRowId],
	[PerformanceRuleInstanceRowId],
	[DateTime]
)
INCLUDE
(
	[SampleValue]
)
'
  ,@CreateIndexOnExistingTablesInd = 0
EXEC StandardDatasetIndexDelete
   @DatasetId = '$Config/DatasetId$'
  ,@IndexGuid = '7A6FE25B-785D-463b-AA56-98D36511DDDD'
	,@DeleteIndexOnExistingTablesInd = 0
EXEC StandardDatasetIndexInsert
   @DatasetId = '$Config/DatasetId$'
  ,@AggregationTypeId = 20
  ,@DependentTableInd = 0
  ,@TableTag = NULL
  ,@UniqueInd = 0
  ,@IndexGuid = '7A6FE25B-785D-463b-AA56-98D36511DDDD'
  ,@IndexDefinition = '(
	[ManagedEntityRowId],
	[PerformanceRuleInstanceRowId],
	[DateTime]
)
INCLUDE
(
	[SampleCount],
	[AverageValue],
	[MinValue],
	[MaxValue],
	[StandardDeviation]
)
'
  ,@CreateIndexOnExistingTablesInd = 0
/* hourly indexes for report perf */
EXEC StandardDatasetIndexDelete
   @DatasetId = '$Config/DatasetId$'
  ,@IndexGuid = '7A6FE25B-785D-463b-AA56-98D36511DDDD'
	,@DeleteIndexOnExistingTablesInd = 0
EXEC StandardDatasetIndexInsert
   @DatasetId = '$Config/DatasetId$'
  ,@AggregationTypeId = 20
  ,@DependentTableInd = 0
  ,@TableTag = NULL
  ,@UniqueInd = 0
  ,@IndexGuid = '7A6FE25B-785D-463b-AA56-98D36511DDDD'
  ,@IndexDefinition = '(
	[ManagedEntityRowId],
	[PerformanceRuleInstanceRowId],
	[DateTime]
)
INCLUDE
(
	[SampleCount],
	[AverageValue],
	[MinValue],
	[MaxValue],
	[StandardDeviation]
)
'
  ,@CreateIndexOnExistingTablesInd = 0
/* daily indexes for report perf */
EXEC StandardDatasetIndexDelete
   @DatasetId = '$Config/DatasetId$'
  ,@IndexGuid = '0DF81F2E-FB92-4451-8716-DCF777EDFA45'
	,@DeleteIndexOnExistingTablesInd = 0
EXEC StandardDatasetIndexInsert
   @DatasetId = '$Config/DatasetId$'
  ,@AggregationTypeId = 30
  ,@DependentTableInd = 0
  ,@TableTag = NULL
  ,@UniqueInd = 0
  ,@IndexGuid = '0DF81F2E-FB92-4451-8716-DCF777EDFA45'
  ,@IndexDefinition = '(
	[ManagedEntityRowId],
	[PerformanceRuleInstanceRowId],
	[DateTime]
)
INCLUDE
(
	[SampleCount],
	[AverageValue],
	[MinValue],
	[MaxValue],
	[StandardDeviation]
)
'
  ,@CreateIndexOnExistingTablesInd = 0
-- Hourly data index to support Top N reports and dashboards
EXEC StandardDatasetIndexDelete
   @DatasetId = '$Config/DatasetId$'
  ,@IndexGuid = '04DE2C08-6203-4DA1-8EED-A0984463C46E'
	,@DeleteIndexOnExistingTablesInd = 0
EXEC StandardDatasetIndexInsert
    @DatasetId = '$Config/DatasetId$'
  ,@AggregationTypeId = 20
  ,@DependentTableInd = 0
  ,@TableTag = NULL
  ,@UniqueInd = 0
  ,@IndexGuid = '04DE2C08-6203-4DA1-8EED-A0984463C46E'
  ,@IndexDefinition = '(
        [PerformanceRuleInstanceRowId]
        ,[DateTime]
      )
      INCLUDE
      (
        [ManagedEntityRowId]
        ,[SampleCount]
        ,[AverageValue]
      )
  '
,@CreateIndexOnExistingTablesInd = 0
-- Daily data index to support Top N reports and dashboards
EXEC StandardDatasetIndexDelete
   @DatasetId = '$Config/DatasetId$'
  ,@IndexGuid = '110C2981-0D21-4C6E-8185-49997A2BA0B5'
	,@DeleteIndexOnExistingTablesInd = 0
EXEC StandardDatasetIndexInsert
    @DatasetId = '$Config/DatasetId$'
  ,@AggregationTypeId = 30
  ,@DependentTableInd = 0
  ,@TableTag = NULL
  ,@UniqueInd = 0
  ,@IndexGuid = '110C2981-0D21-4C6E-8185-49997A2BA0B5'
  ,@IndexDefinition = '(
        [PerformanceRuleInstanceRowId]
        ,[DateTime]
      )
      INCLUDE
      (
        [ManagedEntityRowId]
        ,[SampleCount]
        ,[AverageValue]
      )
  '
,@CreateIndexOnExistingTablesInd = 0
                    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE [name] = 'Perf')
BEGIN
  EXECUTE('CREATE SCHEMA Perf')
END
GO
-- change schema ownership to allow index rebuild and reorganize
ALTER AUTHORIZATION ON SCHEMA::Perf TO OpsMgrWriter
GO
-- change schema alter to allow domain table index rebuild
GRANT ALTER ON SCHEMA::dbo TO OpsMgrWriter
GO
-- grant create table permissions
GRANT CREATE TABLE TO OpsMgrWriter
GO
SET NOCOUNT ON
DECLARE 
   @ErrorInd        bit
  ,@ErrorMessageText nvarchar(4000)
  ,@ErrorNumber     int
  ,@ErrorSeverity   int
  ,@ErrorState      int
  ,@ErrorLine       int
  ,@ErrorProcedure  nvarchar(256)
  
SET @ErrorInd = 0
DECLARE
   @ExecResult int
  ,@XmlDocHandle int
  ,@XmlDocText nvarchar(max)
  
BEGIN TRY
  SET @XmlDocText = '&lt;Aggregations&gt;$Config/Aggregations$&lt;/Aggregations&gt;'
  EXEC @ExecResult = sp_xml_preparedocument @XmlDocHandle OUTPUT, @XmlDocText
  IF @ExecResult &lt;&gt; 0 RAISERROR(777971000, 16, 1, 'PerfAggregation', @ExecResult)
  DECLARE
     @AggregationType varchar(50)
    ,@Statement nvarchar(max)
     
  SET @AggregationType = ''
  WHILE EXISTS (SELECT *
                FROM OPENXML(@XmlDocHandle, 'Aggregations/*', 2) WITH (
                      AggregationType      varchar(50)   '@mp:localname')
                WHERE AggregationType &gt; @AggregationType
               )
  BEGIN
    SELECT TOP 1 @AggregationType = AggregationType
    FROM OPENXML(@XmlDocHandle, 'Aggregations/*', 2) WITH (
          AggregationType      varchar(50)   '@mp:localname')
    WHERE AggregationType &gt; @AggregationType
    ORDER BY AggregationType
    
    SET @Statement = 'EXEC StandardDatasetAllocateStorage @DatasetId = ''$Config/DatasetId$'', @AggregationTypeId='
                    + CASE @AggregationType
                        WHEN 'Raw' THEN '0'
                        WHEN 'Subhourly' THEN '10'
                        WHEN 'Hourly' THEN '20'
                        WHEN 'Daily' THEN '30'
                      END
    EXECUTE (@Statement)
  END
END TRY
BEGIN CATCH
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
END CATCH
IF (@XmlDocHandle IS NOT NULL)
  EXEC sp_xml_removedocument @XmlDocHandle
IF (@ErrorInd = 1)
BEGIN
  DECLARE @AdjustedErrorSeverity int
  SET @AdjustedErrorSeverity = CASE
                                 WHEN @ErrorSeverity &gt; 18 THEN 18
                                 ELSE @ErrorSeverity
                               END
  
  RAISERROR (777971002, @AdjustedErrorSeverity, 1
    ,@ErrorNumber
    ,@ErrorSeverity
    ,@ErrorState
    ,@ErrorProcedure
    ,@ErrorLine
    ,@ErrorMessageText
  )
END
GO
                    
                    -- insert staging definition into StandardDatasetStagingArea
BEGIN TRAN
IF EXISTS (SELECT * FROM StandardDatasetStagingArea WHERE DatasetId = '$Config/DatasetId$')
BEGIN
  DELETE StandardDatasetStagingArea
  WHERE DatasetId = '$Config/DatasetId$'
END
INSERT StandardDatasetStagingArea
(
   DatasetId
  ,StagingTableColumnDefinition
  ,BatchedProcessingSupportedInd
  ,MaxRowsToProcessPerTransactionCount
)
VALUES
(
   '$Config/DatasetId$'
  ,'
   DatasetId					            uniqueidentifier  NOT NULL
  ,ManagementGroupGuid            uniqueidentifier  NOT NULL
  ,[DateTime]                     datetime          NOT NULL
  ,ManagedEntityRowId			        int               NOT NULL
  ,PerformanceRuleInstanceRowId   int               NOT NULL
  ,SampleValue                    float(53)         NOT NULL
  
  ,PerformanceStageRowId          bigint            NOT NULL    IDENTITY(1, 1)  PRIMARY KEY
  '
  ,1
  ,500000
)
COMMIT
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'PerformanceStage' AND TABLE_SCHEMA = 'Perf')
BEGIN
  DECLARE @Statement nvarchar(max)
  SELECT @Statement = 'CREATE TABLE Perf.PerformanceStage (' + StagingTableColumnDefinition + ')'
  FROM StandardDatasetStagingArea
  WHERE DatasetId = '$Config/DatasetId$'
  EXECUTE (@Statement)
END
GO
GRANT ALTER, SELECT, INSERT, UPDATE, DELETE ON Perf.PerformanceStage TO OpsMgrWriter
GO
                    IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'PerformanceRule' AND TABLE_SCHEMA = 'dbo')
BEGIN
  DROP TABLE dbo.PerformanceRule
END
GO
CREATE TABLE dbo.PerformanceRule
(                               
      RuleRowId                 int           NOT NULL
     ,ObjectName                nvarchar(256) NOT NULL
     ,CounterName               nvarchar(256) NOT NULL
     ,MultiInstanceInd          bit           NOT NULL    DEFAULT (0)
     ,LastReceivedDateTime      smalldatetime NOT NULL    DEFAULT (GETUTCDATE())
 
     ,CONSTRAINT PK_PerformanceRule PRIMARY KEY CLUSTERED (RuleRowId)
)
GO
CREATE INDEX IX_PerformanceRule_LastReceivedDateTime ON PerformanceRule (LastReceivedDateTime)
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'PerformanceRule'
      ,@DatasetId = '$Config/DatasetId$'
GO
                    IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'PerformanceRuleInstance' AND TABLE_SCHEMA = 'dbo')
BEGIN
  DROP TABLE dbo.PerformanceRuleInstance
END
GO
CREATE TABLE dbo.PerformanceRuleInstance
(                               
      PerformanceRuleInstanceRowId      int           NOT NULL    IDENTITY(1, 1)
     ,RuleRowId                         int           NOT NULL
     ,InstanceName                      nvarchar(256) NOT NULL
     ,LastReceivedDateTime              smalldatetime NOT NULL    DEFAULT (GETUTCDATE())
 
     ,CONSTRAINT PK_PerformanceRuleInstance PRIMARY KEY CLUSTERED (PerformanceRuleInstanceRowId)
     ,CONSTRAINT UN_PerformanceRuleInstance_Ruleinstance UNIQUE (RuleRowId, InstanceName)
)
GO
CREATE INDEX IX_PerformanceRuleInstance_RuleRowId ON PerformanceRuleInstance (RuleRowId)
GO
CREATE INDEX IX_PerformanceRuleInstance_LastReceivedDateTime ON PerformanceRuleInstance (LastReceivedDateTime)
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'PerformanceRuleInstance'
      ,@DatasetId = '$Config/DatasetId$'
GO
                    
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'V' AND name = 'vPerformanceRule')
BEGIN
  EXECUTE ('CREATE VIEW dbo.vPerformanceRule AS SELECT A = 1')
END
GO
ALTER VIEW dbo.vPerformanceRule
AS
  SELECT *
  FROM dbo.PerformanceRule (NOLOCK)
GO
GRANT SELECT ON dbo.vPerformanceRule TO OpsMgrReader, OpsMgrWriter
GO
 
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'V' AND name = 'vPerformanceRuleInstance')
BEGIN
  EXECUTE ('CREATE VIEW dbo.vPerformanceRuleInstance AS SELECT A = 1')
END
GO
ALTER VIEW dbo.vPerformanceRuleInstance
AS
  SELECT *
  FROM dbo.PerformanceRuleInstance (NOLOCK)
GO
GRANT SELECT ON dbo.vPerformanceRuleInstance TO OpsMgrReader, OpsMgrWriter
GO
                     IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'PerformanceAggregate')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.PerformanceAggregate AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.PerformanceAggregate
   @DatasetId   uniqueidentifier
  ,@AggregationTypeId int
  ,@InsertTableGuid varchar(256)
  ,@IntervalStartDateTime datetime
  ,@IntervalEndDateTime datetime
AS
BEGIN
  SET NOCOUNT ON
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(4000)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(4000)
  SET @ErrorInd = 0
  
  BEGIN TRY
    DECLARE
       @Statement nvarchar(max)
      ,@DebugLevel tinyint
      ,@InsertTableName sysname
      ,@DebugMessage nvarchar(max)
      ,@AggregationStartDateTime datetime
      ,@CoverViewName sysname
      ,@SchemaName sysname
      
    SELECT
       @DebugLevel = DebugLevel
      ,@SchemaName = SchemaName
    FROM StandardDataset
    WHERE DatasetId = @DatasetId
    
    SELECT @CoverViewName = 'v' + BaseTableName
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = 0)
      AND (DependentTableInd = 0)
      
    SELECT @InsertTableName = BaseTableName + '_' + REPLACE(CAST(@InsertTableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = @AggregationTypeId)
      AND (DependentTableInd = 0)
    
    IF (@DebugLevel &gt; 2)
    BEGIN
      SET @DebugMessage = 'Starting aggregation of type ' + CAST(@AggregationTypeId AS varchar(10)) + ' for interval from '
                         + CONVERT(varchar(20), @IntervalStartDateTime, 120) + 'UTC to '
                         + CONVERT(varchar(20), @IntervalEndDateTime, 120) + 'UTC'
      SET @AggregationStartDateTime = GETUTCDATE()
      
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 3
        ,@MessageText = @DebugMessage
    END
    
    SET @Statement =
        'INSERT ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@InsertTableName) + ' ('
      + '  [DateTime]'
      + ' ,PerformanceRuleInstanceRowId'
      + ' ,ManagedEntityRowId'
      + ' ,SampleCount'
      + ' ,AverageValue'
      + ' ,MinValue'
      + ' ,MaxValue'
      + ' ,StandardDeviation'
      + ')'
      + ' SELECT'
      + '    CONVERT(datetime, ''' + CONVERT(varchar(50), @IntervalStartDateTime, 120) + ''', 120)'
      + '   ,PerformanceRuleInstanceRowId'
      + '   ,ManagedEntityRowId'
      + '   ,COUNT(*)'
      + '   ,AVG(SampleValue)'
      + '   ,MIN(SampleValue)'
      + '   ,MAX(SampleValue)'
      + '   ,ISNULL(STDEV(SampleValue), 0)'
      + ' FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@CoverViewName)
      + ' WHERE ([DateTime] &gt;= CONVERT(datetime, ''' + CONVERT(varchar(50), @IntervalStartDateTime, 120) + ''', 120))'
      + '   AND ([DateTime] &lt; CONVERT(datetime, ''' + CONVERT(varchar(50), @IntervalEndDateTime, 120) + ''', 120))'
      + '   AND SampleValue BETWEEN -1E145 AND 1E145'  -- Prevent arithmetic overflow in STDEV
      + ' GROUP BY PerformanceRuleInstanceRowId, ManagedEntityRowId'
      
    EXECUTE (@Statement)
    IF (@DebugLevel &gt; 2)
    BEGIN
      SET @DebugMessage = 'Finished aggregation of type ' + CAST(@AggregationTypeId AS varchar(10)) + ' for interval from '
                         + CONVERT(varchar(20), @IntervalStartDateTime, 120) + 'UTC to '
                         + CONVERT(varchar(20), @IntervalEndDateTime, 120) + 'UTC'
      
      DECLARE @OperationDurationMs bigint
      SET @OperationDurationMs = ABS(DATEDIFF(ms, GETUTCDATE(), @AggregationStartDateTime))
      
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 3
        ,@MessageText = @DebugMessage
        ,@OperationDurationMs = @OperationDurationMs
    END
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
  
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    IF (@DebugLevel &gt; 0)
    BEGIN
      DECLARE @DebugMessageText nvarchar(max)
      SET @DebugMessageText = N'Failed to build aggregates for performance data set. Error ' + CAST(@ErrorNumber AS varchar(15))
                      + ', Procedure ' + @ErrorProcedure
                      + ', Line ' + CAST(@ErrorLine AS varchar(15))
                      + ', Message: '+ @ErrorMessageText
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 1
        ,@MessageText = @DebugMessageText
    END
      
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END
GO
 
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'PerformanceAggregationDelete')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.PerformanceAggregationDelete AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.PerformanceAggregationDelete
   @DatasetId   uniqueidentifier
  ,@AggregationTypeId tinyint
  ,@TableGuid uniqueidentifier
  ,@AggregationDateTime datetime
  ,@RowsDeleted int OUTPUT
AS
BEGIN
  SET NOCOUNT ON
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(4000)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(4000)
  SET @ErrorInd = 0
  
  DECLARE
     @TableName sysname
    ,@Statement nvarchar(max)
    ,@DebugMessage nvarchar(max)
    ,@DeleteStartedDateTime datetime
    ,@OperationDurationMs bigint
    ,@DebugLevel tinyint
    ,@SchemaName sysname
  
  BEGIN TRY
    SELECT
       @DebugLevel = DebugLevel
      ,@SchemaName = SchemaName
    FROM StandardDataset
    WHERE DatasetId = @DatasetId
    -- there are no dependent tables in state data set
    SELECT @TableName = BaseTableName + '_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = @AggregationTypeId)
      AND (DependentTableInd = 0)
    -- Index hint in the query below ensures that SQL won't
    -- consider index on DateTime field to be a good source
    -- to find rows to delete - it may happen periodically
    -- if SQL thinks there's no rows to delete due to
    -- lack of [recently updated] statistics    
    SET @Statement = 'DELETE t' + 
				   + ' FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@TableName) + ' t WITH (INDEX(1))'
                   + ' WHERE (t.[DateTime] = CONVERT(datetime, ''' + CONVERT(varchar(50), @AggregationDateTime, 120) + ''', 120))'
    IF (@DebugLevel &gt; 2)
    BEGIN
      SELECT @DebugMessage = 'Starting delete of existing performance aggregated data. Table: ' + @TableName + ', aggregation date: ' + CONVERT(varchar(20), @AggregationDateTime, 120)
      
      SET @DeleteStartedDateTime = GETUTCDATE()
      
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 3
        ,@MessageText = @DebugMessage
    END
   
    EXECUTE(@Statement)
    
    SET @RowsDeleted = @@ROWCOUNT
  
    IF (@DebugLevel &gt; 2)
    BEGIN
      SELECT @DebugMessage = 'Finished delete of existing performance aggregated data. Table: ' + @TableName + ', aggregation date: ' + CONVERT(varchar(20), @AggregationDateTime, 120)
      SET @OperationDurationMs = ABS(DATEDIFF(ms, GETUTCDATE(), @DeleteStartedDateTime))
      
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 3
        ,@MessageText = @DebugMessage
        ,@OperationDurationMs = @OperationDurationMs
    END
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
    
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    IF (@DebugLevel &gt; 0)
    BEGIN
      DECLARE @DebugMessageText nvarchar(max)
      SET @DebugMessageText = N'Failed to delete aggregated data for state data set. Error ' + CAST(@ErrorNumber AS varchar(15))
                      + ', Procedure ' + @ErrorProcedure
                      + ', Line ' + CAST(@ErrorLine AS varchar(15))
                      + ', Message: '+ @ErrorMessageText
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 1
        ,@MessageText = @ErrorMessageText
    END
      
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
  
  RETURN @RowsDeleted
END
GO
  
                    IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'PerformanceGroom')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.PerformanceGroom AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.PerformanceGroom
   @DatasetId   uniqueidentifier
  ,@AggregationTypeId tinyint
  ,@TableGuid uniqueidentifier
  ,@CutoffDateTime datetime
  ,@MaxRowsToGroom int
  ,@RowsDeleted int OUTPUT
AS
BEGIN
  SET NOCOUNT ON
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(4000)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(4000)
  SET @ErrorInd = 0
  
  DECLARE
     @TableName sysname
    ,@Statement nvarchar(max)
    ,@DebugLevel tinyint
    ,@SchemaName sysname
  
  BEGIN TRY
    SELECT
       @DebugLevel = DebugLevel
      ,@SchemaName = SchemaName
    FROM StandardDataset
    WHERE DatasetId = @DatasetId
    -- there are no dependent tables in perf data set
    SELECT @TableName = BaseTableName + '_' + REPLACE(CAST(@TableGuid AS varchar(50)), '-', '')
    FROM StandardDatasetAggregationStorage
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId = @AggregationTypeId)
      AND (DependentTableInd = 0)
    
    SET @Statement = 'DELETE TOP (' + CAST(@MaxRowsToGroom AS varchar(15)) + ')'
                   + ' FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@TableName)
                   + ' WHERE ([DateTime] &lt; CONVERT(datetime, ''' + CONVERT(varchar(50), @CutoffDateTime, 120) + ''', 120))'
    EXECUTE (@Statement)
    SET @RowsDeleted = @@ROWCOUNT
    
    -- groom dynamic dimentions
    DECLARE @MaxDataAgeDays int
    
    SELECT @MaxDataAgeDays = MAX(MaxDataAgeDays)
    FROM StandardDatasetAggregation
    WHERE (DatasetId = @DatasetId)
    
    DELETE pri
    FROM PerformanceRuleInstance pri
    WHERE LastReceivedDateTime &lt; DATEADD(day, -@MaxDataAgeDays, GETUTCDATE()) 
    OPTION (RECOMPILE)
    
    DELETE pr
    FROM PerformanceRule pr
    WHERE LastReceivedDateTime &lt; DATEADD(day, -@MaxDataAgeDays, GETUTCDATE()) 
    OPTION (RECOMPILE)
    
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()
    SET @ErrorInd = 1
  END CATCH
    
  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    IF (@DebugLevel &gt; 0)
    BEGIN
      DECLARE @DebugMessageText nvarchar(max)
      SET @DebugMessageText = N'Failed to groom data for performance data set. Error ' + CAST(@ErrorNumber AS varchar(15))
                      + ', Procedure ' + @ErrorProcedure
                      + ', Line ' + CAST(@ErrorLine AS varchar(15))
                      + ', Message: '+ @ErrorMessageText
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 1
        ,@MessageText = @DebugMessageText
    END
      
    DECLARE @AdjustedErrorSeverity int
    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity &gt; 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
  
  RETURN @RowsDeleted
END
GO
   
                     IF NOT EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'PerformanceObjectCounterInstanceRowIdResolve')
	BEGIN
		EXECUTE ('CREATE PROCEDURE dbo.PerformanceObjectCounterInstanceRowIdResolve AS RETURN 1')
	END
GO
ALTER PROCEDURE dbo.PerformanceObjectCounterInstanceRowIdResolve
   @ManagementGroupGuid         uniqueidentifier
  ,@ObjectKeyXml                ntext
AS
BEGIN
  SET NOCOUNT ON
  
  DECLARE @ManagementGroupRowId int
  -- check management group is connected to this DW
  DECLARE @CheckExecResult int
  
  EXEC @CheckExecResult = ManagementGroupAccessCheck @ManagementGroupGuid, @ManagementGroupRowId OUTPUT
  IF (@CheckExecResult &lt;&gt; 0) RETURN @CheckExecResult
  
  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)
  SET @ErrorInd = 0
  BEGIN TRY
    DECLARE 
       @ExecResult      int
      ,@XmlDocHandle    int
    EXEC @ExecResult = sp_xml_preparedocument @XmlDocHandle OUTPUT, @ObjectKeyXml
