<ManagementPack xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.0"><Manifest><Identity><ID>Microsoft.Windows.Server.2016.Monitoring</ID><Version>10.1.1.0</Version></Identity><Name>Microsoft Windows Server 2016 Monitoring MP</Name><References><Reference Alias="SCDW"><ID>Microsoft.SystemCenter.DataWarehouse.Library</ID><Version>6.0.6278.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="ReportLibrary"><ID>Microsoft.SystemCenter.DataWarehouse.Report.Library</ID><Version>6.0.6278.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="SC"><ID>Microsoft.SystemCenter.Library</ID><Version>6.0.6278.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference
Alias="Windows"><ID>Microsoft.Windows.Library</ID><Version>6.0.6278.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="SystemHealth"><ID>System.Health.Library</ID><Version>6.0.6278.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="System"><ID>System.Library</ID><Version>6.0.6278.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="SystemPerf"><ID>System.Performance.Library</ID><Version>6.0.6278.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="ServervNext"><ID>Microsoft.Windows.Server.2016.Discovery</ID><Version>10.0.8.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="WindowsServer"><ID>Microsoft.Windows.Server.Library</ID><Version>10.0.8.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference></References></Manifest><TypeDefinitions><ModuleTypes><DataSourceModuleType
ID="Microsoft.Windows.Server.10.0.OperatingSystem.PercentMemoryUsed.ModuleType" Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="PhysicalMemory" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Tolerance" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Frequency" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="MaximumSampleSeparation" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="Tolerance" Selector="$Config/Tolerance$" ParameterType="int" /><OverrideableParameter ID="Frequency" Selector="$Config/Frequency$" ParameterType="int" /><OverrideableParameter ID="NumOfSamples" Selector="$Config/MaximumSampleSeparation$" ParameterType="int" /></OverrideableParameters><ModuleImplementation
Isolation="Any"><Composite><MemberModules><DataSource ID="PerfDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><CounterName>Available MBytes</CounterName><ObjectName>Memory</ObjectName><InstanceName /><AllInstances>false</AllInstances><Frequency>$Config/Frequency$</Frequency><Tolerance>$Config/Tolerance$</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>$Config/MaximumSampleSeparation$</MaximumSampleSeparation></DataSource><ProbeAction ID="ScriptDS" TypeID="Microsoft.Windows.Server.10.0.PowerShellPropertyBagProbe"><ScriptName>Microsoft.Windows.Server.OperatingSystem.PercentMemoryUsed.ps1</ScriptName><PSparam>param ($nAvailableMBytes, $nPhysicalMemoryKBytes)</PSparam><ScriptBody>
#Copyright (c) Microsoft Corporation. All rights reserved.
#*************************************************************************
# $ScriptName: "Microsoft.Windows.Server.OperatingSystem.PercentMemoryUsed"$
#
#
# $File: Microsoft.Windows.Server.OperatingSystem.PercentMemoryUsed.ps1$
#*************************************************************************
# Parameters that should be passed to this script
# 0 Available Physical memory MBytes.
# 1 Total amount of Physical Memory in KBytes.
$sCounterName = "PercentMemoryUsed"
$sObjectName  = "Memory"
Function Main()
{
    $sErrorDescription = "Invalid arguments are detected: " + $nAvailableMBytes + " " + $nPhysicalMemoryKBytes
    $dblAvailableMBytes = $nAvailableMBytes -as [double]
    $dblPhysicalMemoryKBytes = $nPhysicalMemoryKBytes -as [double]
    if (($dblAvailableMBytes -eq $null) -or ($dblPhysicalMemoryKBytes -eq $null))
    {
        ThrowScriptError $sErrorDescription $null
    }
    $dblPhysicalMemoryMBytes = $dblPhysicalMemoryKBytes / 1024
    if ($dblAvailableMBytes -gt 0)
    {
        if ($dblAvailableMBytes -ge $dblPhysicalMemoryMBytes)
        {
            ThrowScriptError $sErrorDescription $null
        }
        $oBag = $momAPI.CreateTypedPropertyBag(2)
        $nResult = [double](100 - ($dblAvailableMBytes/$dblPhysicalMemoryMBytes)*100)
        $oBag.AddValue("PerfCounter", $sCounterName)
        $oBag.AddValue("PerfValue", $nResult)
        $oBag
    }
}
Main
</ScriptBody><Parameters><Parameter><Name>nAvailableMBytes</Name><Value>$Data/Value$</Value></Parameter><Parameter><Name>nPhysicalMemoryKBytes</Name><Value>$Config/PhysicalMemory$</Value></Parameter></Parameters><TimeoutSeconds>300</TimeoutSeconds></ProbeAction><ConditionDetection ID="PerfMapper" TypeID="SystemPerf!System.Performance.DataGenericMapper"><ObjectName>Memory</ObjectName><CounterName>$Data/Property[@Name='PerfCounter']$</CounterName><InstanceName /><Value>$Data/Property[@Name='PerfValue']$</Value></ConditionDetection><ConditionDetection ID="IsNullCD" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">/DataItem/IsNull</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">false</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><Composition><Node ID="PerfMapper"><Node ID="ScriptDS"><Node ID="IsNullCD"><Node ID="PerfDS"
/></Node></Node></Node></Composition></Composite></ModuleImplementation><OutputType>SystemPerf!System.Performance.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.Windows.Server.10.0.NetworkAdapter.BandwidthUsed.ModuleType" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IsDiscoverDisabled" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IsUseMacAddress" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="InstanceName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="CounterName" type="xsd:string"
/></Configuration><OverrideableParameters><OverrideableParameter ID="Interval" Selector="$Config/IntervalSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/IntervalSeconds$</Interval><SyncTime /></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="PA" TypeID="Microsoft.Windows.Server.10.0.PowerShellPropertyBagProbe"><ScriptName>Microsoft.Windows.Server.NetworkAdapter.BandwidthUsed.ModuleType.ps1</ScriptName><PSparam>param ($sTargetComputer, $IsUseMacAddress)</PSparam><ScriptBody>
#Copyright (c) Microsoft Corporation. All rights reserved.
                      
# Parameters that should be passed to this script
# 0 Computer name this rule is running against
# 1 Use MacAddress for discovery (true), otherwise NetConnectionID
$CN_PercentBandwidthUsedRead   = "PercentBandwidthUsedRead"
$CN_PercentBandwidthUsedWrite   = "PercentBandwidthUsedWrite"
$CN_PercentBandwidthUsedTotal   = "PercentBandwidthUsedTotal"
$WIN_SRV_VNEXT_OSVer = "6.3"
Function Main()
{   
	# Win32_NetworkAdapter is deprecated and not returning results on NanoServer
	# Need to use MSFT_NetAdapter
	    $bIsUseMacAddress = Convert-ToBoolean -sBool $IsUseMacAddress
		$bIsModuleLoaded = Load-Module -ModuleName "NetAdapter"
		$bHasItems = $false
        if ($false -eq $bIsModuleLoaded)
	    {
			$netAdapters = $null
		} 
	    else
	        { 
				# -Physical Corresponds to "ServiceName &lt;&gt; 'VMSMP'"
				$netAdapters = Get-NetAdapter -Physical | Where `
				 {($bIsUseMacAddress -eq $true -and $_.MacAddress -ne $null -and $false -eq [string]::IsNullOrEmpty($_.Name)) `
						-or ($bIsUseMacAddress -eq $false -and  $false -eq [string]::IsNullOrEmpty($_.Name))} 
			}
		foreach ($netAdapter in $netAdapters)
		{
			$bIsDisabled = $netAdapter.MediaConnectState -eq "2"
			$sPerfMonInstanceName = GetPerfmonInstance $netAdapter.InterfaceDescription
			$sQuery = "Win32_PerfFormattedData_Tcpip_NetworkAdapter Where Name ='" + $sPerfMonInstanceName + "'"
			$WMISet2 = WMIGetInstanceNoAbort $sTargetComputer "root\cimv2" $sQuery
			if ($null -ne $WMISet2 -and $null -eq $WMISet2.Count)
			{
			  $nCurrentBandwidth    = $WMISet2.CurrentBandwidth
			  $nBytesSentPersec     = $WMISet2.BytesSentPersec
			  $nBytesReceivedPersec = $WMISet2.BytesReceivedPersec
			  $nBytesTotalPersec    = $WMISet2.BytesTotalPersec
					if ($nCurrentBandwidth -ne $null -and $nBytesSentPersec -ne $null -and $nBytesReceivedPersec -ne $null -and $nBytesTotalPersec -ne $null)
					{
						$Counters = @{}
						$Counters[$CN_PercentBandwidthUsedRead] = CalculatePercent $nBytesReceivedPersec ($nCurrentBandwidth/8) # Divide CurrentBandwidth by 8 to convert it from bits to bytes.
						$Counters[$CN_PercentBandwidthUsedWrite] = CalculatePercent $nBytesSentPersec ($nCurrentBandwidth/8)
						$Counters[$CN_PercentBandwidthUsedTotal] = CalculatePercent $nBytesTotalPersec ($nCurrentBandwidth/8)
						$bHasItems = $true
						foreach ($oCounter in $Counters.Keys)
						{
							$oBag = $momAPI.CreateTypedPropertyBag(2)
							$oBag.AddValue("IsNotEmpty", $bHasItems)
							$oBag.AddValue("IsDisabled", $bIsDisabled)
							$oBag.AddValue("PerfInstance", $sPerfMonInstanceName)
							$oBag.AddValue("PerfCounter", $oCounter)
							$oBag.AddValue("PerfValue", $Counters.Item($oCounter))
							$oBag
						}
					}
		   }
			
		}
	    Add-EmptyBag -bHasItems $bHasItems 
}
Function Add-EmptyBag([bool]$bHasItems)
{
	if ($true -eq $bHasItems)
	{
		return
	}
	$ErrorActionPreference = 'SilentlyContinue' # Scoped only to function
	$error.Clear()
	$oEmptyBag = $momAPI.CreateTypedPropertyBag(2)
	$oEmptyBag.AddValue("IsNotEmpty", $bHasItems)
	$oEmptyBag.AddValue("PerfInstance", "")
	$oEmptyBag.AddValue("PerfCounter", "")
	$oEmptyBag.AddValue("PerfValue", "")
	$oEmptyBag
}
Function CalculatePercent($nDivident, $nDivider)
{
    $nResult = 0
    If (($nDivider -ne 0) -and ($nDivident -ne 0))
    {
        $nResult = $nDivident/$nDivider*100
    }
    return $nResult
}
Function GetPerfmonInstance($sName)
{
    $sName = $sName -replace("\(","[")
    $sName = $sName -replace("\)","]")
    $sName = $sName -replace("/","_")
    $sName = $sName -replace("#","_")
    return $sName
}
Main</ScriptBody><Parameters><Parameter><Name>sTargetComputer</Name><Value>$Config/ComputerName$</Value></Parameter><Parameter><Name>IsUseMacAddress</Name><Value>$Config/IsUseMacAddress$</Value></Parameter></Parameters><TimeoutSeconds>300</TimeoutSeconds></ProbeAction><ConditionDetection ID="PerfMapper" TypeID="SystemPerf!System.Performance.DataGenericMapper"><ObjectName>Network Adapter</ObjectName><CounterName>$Data/Property[@Name='PerfCounter']$</CounterName><InstanceName>$Data/Property[@Name='PerfInstance']$</InstanceName><Value>$Data/Property[@Name='PerfValue']$</Value></ConditionDetection><ConditionDetection ID="InstanceFilter" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='PerfInstance']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">$Config/InstanceName$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='PerfCounter']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/CounterName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="EmptyCondition" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='IsNotEmpty']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">true</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><Value Type="Boolean">$Config/IsDiscoverDisabled$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="Boolean">true</Value></ValueExpression></SimpleExpression></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><Value Type="Boolean">$Config/IsDiscoverDisabled$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">false</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='IsDisabled']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">false</Value></ValueExpression></SimpleExpression></Expression></And></Expression></Or></Expression></And></Expression></ConditionDetection></MemberModules><Composition><Node ID="PerfMapper"><Node ID="InstanceFilter"><Node ID="EmptyCondition"><Node ID="PA"><Node ID="Scheduler"
/></Node></Node></Node></Node></Composition></Composite></ModuleImplementation><OutputType>SystemPerf!System.Performance.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.Windows.Server.10.0.CPUUtilization.ModuleType" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="NumSamples" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CounterName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ObjectName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InstanceName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AllInstances" type="xsd:boolean"
/></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="NumSamples" Selector="$Config/NumSamples$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1" TypeID="SystemPerf!System.Performance.DataProvider"><ComputerName>$Config/TargetComputerName$</ComputerName><CounterName>$Config/CounterName$</CounterName><ObjectName>$Config/ObjectName$</ObjectName><InstanceName>$Config/InstanceName$</InstanceName><AllInstances>$Config/AllInstances$</AllInstances><Frequency>$Config/IntervalSeconds$</Frequency></DataSource><ConditionDetection ID="CDAverageThreshold" TypeID="SystemPerf!System.Performance.AveragerCondition"><NumSamples>$Config/NumSamples$</NumSamples></ConditionDetection></MemberModules><Composition><Node ID="CDAverageThreshold"><Node ID="DS1"
/></Node></Composition></Composite></ModuleImplementation><OutputType>SystemPerf!System.Performance.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.Windows.Server.10.0.FreeSpace.Moduletype" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="DiskLabel" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SystemDriveWarningMBytesThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SystemDriveWarningPercentThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SystemDriveErrorMBytesThreshold"
type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SystemDriveErrorPercentThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="NonSystemDriveWarningMBytesThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="NonSystemDriveWarningPercentThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="NonSystemDriveErrorMBytesThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="NonSystemDriveErrorPercentThreshold" type="xsd:double" /></Configuration><OverrideableParameters><OverrideableParameter ID="Interval" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="SystemDriveWarningMBytesThreshold" Selector="$Config/SystemDriveWarningMBytesThreshold$" ParameterType="double" /><OverrideableParameter
ID="SystemDriveWarningPercentThreshold" Selector="$Config/SystemDriveWarningPercentThreshold$" ParameterType="double" /><OverrideableParameter ID="SystemDriveErrorMBytesThreshold" Selector="$Config/SystemDriveErrorMBytesThreshold$" ParameterType="double" /><OverrideableParameter ID="SystemDriveErrorPercentThreshold" Selector="$Config/SystemDriveErrorPercentThreshold$" ParameterType="double" /><OverrideableParameter ID="NonSystemDriveWarningMBytesThreshold" Selector="$Config/NonSystemDriveWarningMBytesThreshold$" ParameterType="double" /><OverrideableParameter ID="NonSystemDriveWarningPercentThreshold" Selector="$Config/NonSystemDriveWarningPercentThreshold$" ParameterType="double" /><OverrideableParameter ID="NonSystemDriveErrorMBytesThreshold" Selector="$Config/NonSystemDriveErrorMBytesThreshold$" ParameterType="double" /><OverrideableParameter ID="NonSystemDriveErrorPercentThreshold" Selector="$Config/NonSystemDriveErrorPercentThreshold$" ParameterType="double"
/></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/IntervalSeconds$</Interval><SyncTime /></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="PA" TypeID="Microsoft.Windows.Server.10.0.PowerShellPropertyBagProbe"><ScriptName>Microsoft.Windows.Server.FreeSpace.ps1</ScriptName><PSparam>param ($TargetComputer, $DebugFlag, $SysWarningMB, $SysWarningPct, $SysErrorMB, $SysErrorPct, $NonSysWarningMB, $NonSysWarningPct, $NonSysErrorMB, $NonSysErrorPct)</PSparam><ScriptBody>
#Copyright (c) Microsoft Corporation. All rights reserved.
#
# Parameters that should be passed to this script
# 0 Computer (FQDN)
# 1 Debug Flag          - If True then script can output some trace information to event log.
# 2 System Drive Warning MBytes Threshold
# 3 System Drive Warning Percent Threshold
# 4 System Drive Error MBytes Threshold
# 5 System Drive Error Percent Threshold
# 6 Non System Drive Warning MBytes Threshold
# 7 Non System Drive Warning Percent Threshold
# 8 Non System Drive Error MBytes Threshold
# 9 Non System Drive Error Percent Threshold
$BYTES_IN_MB = 1048576 #=2^20
$DriveHealthyState            = 0
$DriveWarningState            = 1
$DriveErrorState              = 2
Function Main()
{
    $g_DebugFlag      = Convert-ToBoolean -sBool $DebugFlag
	$bBagIsNotEmpty = $false
	$IsNotEmpty     = $false
 	$IsNano = Is_NanoServer 
    $IsVolumeInfoSupported = Is_Win32_Volume_Supported $TargetComputer 
    $SystemDrive = Get_System_Drive $TargetComputer
  
   $oVolumes =  Get-Volumes -IsNano $IsNano -IsVolumeSupported $IsVolumeInfoSupported -TargetComputer $TargetComputer  
    
    foreach ($oVolume in $oVolumes)
    {
 		$VolumeId = Get-VolumeId -IsNano $IsNano -IsVolumeSupported $IsVolumeInfoSupported -Volume $oVolume
		if ($true -eq $IsNano)
		{
			$nFreeSpace = $oVolume.SizeRemaining
			$nMaxSize   = $oVolume.Size
		}
		else
		   {
				$nFreeSpace = $oVolume.FreeSpace
			   if ($IsVolumeInfoSupported)
			   {
				   $nMaxSize = $oVolume.Capacity
			   }
				else
					{
						$nMaxSize   = $oVolume.Size
					}
           }
 		    Create-PerfData -VolumeId $VolumeId -nMaxSize $nMaxSize -nFreeSpace $nFreeSpace -SystemDrive $SystemDrive -momAPI $momAPI  -bBagIsNotEmpty ([ref]$IsNotEmpty)
            if ($false -eq $bBagIsNotEmpty)
		    {
				if ($true -eq $IsNotEmpty)
				{
					$bBagIsNotEmpty = $true
				}
			}   
    }
    
    if ($false -eq $bBagIsNotEmpty)
    {
        $oBag = $momAPI.CreatePropertyBag()
        $oBag.AddValue("IsNotEmpty", "false")
        $oBag
    }
	Unload-Module -ModuleName "Storage"
	Unload-Module -ModuleName "CimCmdLets"
}
Function GetDriveHealthState
{
    param ($bIsSystem, $dSysWarnMB, $dSysWarnPct, $dSysErrorMB, $dSysErrorPct, $dNonSysWarnMB, $dNonSysWarnPct, $dNonSysErrorMB, $dNonSysErrorPct, $dPctFree, $dMBFree)
    $fResult = $DriveHealthyState
    If ($bIsSystem)
    {
        If (($dMBFree -le $dSysErrorMB) -and ($dPctFree -le $dSysErrorPct))
        {
            $fResult = $DriveErrorState
        }
        ElseIf (($dMBFree -le $dSysWarnMB) -and ($dPctFree -le $dSysWarnPct))
        {
            $fResult = $DriveWarningState
        }
    }
    Else
    {
        If (($dMBFree -le $dNonSysErrorMB) -and ($dPctFree -le $dNonSysErrorPct))
        {
            $fResult = $DriveErrorState
        }
        ElseIf (($dMBFree -le $dNonSysWarnMB) -and ($dPctFree -le $dNonSysWarnPct))
        {
            $fResult = $DriveWarningState
        }
    }
    return $fResult
}
Function Create-PerfData([string]$VolumeId,$nMaxSize,$nFreeSpace,[string]$SystemDrive,$momAPI, [ref]$bBagIsNotEmpty)
{
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	if ($null -eq $momAPI)
	{
		return
	}
	if ($nMaxSize -eq $null -or $nMaxSize -eq 0)
    {
		return
	}
    if ($nFreeSpace -eq $null) 
	{
		 $nFreeSpace = 0 
	}
    $nPctFree = [math]::Round($nFreeSpace / $nMaxSize * 100, 2)
    $nMBFree = [math]::Round($nFreeSpace / $BYTES_IN_MB, 0)
    
	if ($VolumeId -ieq $SystemDrive)
    {
        $bIsSystemDrive = $true
    }
    else
    {
        $bIsSystemDrive = $false
    }
	$State = GetDriveHealthState $bIsSystemDrive $SysWarningMB $SysWarningPct $SysErrorMB $SysErrorPct $NonSysWarningMB $NonSysWarningPct $NonSysErrorMB $NonSysErrorPct $nPctFree $nMBFree
	
	$oBag = $momAPI.CreatePropertyBag()
    $oBag.AddValue("IsNotEmpty", "true")
    $oBag.AddValue("PerfInstance", $VolumeId)
	$oBag.AddValue("DiskState",$State)
	if ($error.Count -eq 0)
	{
		$oBag
		$bBagIsNotEmpty.Value = $true
	}
} 
Main
</ScriptBody><Parameters><Parameter><Name>TargetComputer</Name><Value>$Config/ComputerName$</Value></Parameter><Parameter><Name>DebugFlag</Name><Value>false</Value></Parameter><Parameter><Name>SysWarningMB</Name><Value>$Config/SystemDriveWarningMBytesThreshold$</Value></Parameter><Parameter><Name>SysWarningPct</Name><Value>$Config/SystemDriveWarningPercentThreshold$</Value></Parameter><Parameter><Name>SysErrorMB</Name><Value>$Config/SystemDriveErrorMBytesThreshold$</Value></Parameter><Parameter><Name>SysErrorPct</Name><Value>$Config/SystemDriveErrorPercentThreshold$</Value></Parameter><Parameter><Name>NonSysWarningMB</Name><Value>$Config/NonSystemDriveWarningMBytesThreshold$</Value></Parameter><Parameter><Name>NonSysWarningPct</Name><Value>$Config/NonSystemDriveWarningPercentThreshold$</Value></Parameter><Parameter><Name>NonSysErrorMB</Name><Value>$Config/NonSystemDriveErrorMBytesThreshold$</Value></Parameter><Parameter><Name>NonSysErrorPct</Name><Value>$Config/NonSystemDriveErrorPerce
ntThreshold$</Value></Parameter></Parameters><TimeoutSeconds>300</TimeoutSeconds></ProbeAction><ConditionDetection ID="EmptyCD" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='IsNotEmpty']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">true</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="InstanceFilter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='DiskLabel']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/DiskLabel$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><Composition><Node ID="InstanceFilter"><Node ID="EmptyCD"><Node ID="PA"><Node ID="Scheduler"
/></Node></Node></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.BaseData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.Windows.Server.10.0.LogicalDisk.ModuleType" Accessibility="Internal" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:int" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler"
TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/IntervalSeconds$</Interval><SyncTime /></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="PA" TypeID="Microsoft.Windows.Server.10.0.PowerShellPropertyBagProbe"><ScriptName>Microsoft.Windows.Server.LogicalDiskHealthCheck.ps1</ScriptName><PSparam>param ($TargetComputer)</PSparam><ScriptBody>
#Copyright (c) Microsoft Corporation. All rights reserved.
                      
# Parameters that should be passed to this script
# 0 Computer (FQDN)
Function Main()
{
	$IsNano = Is_NanoServer 
    $IsVolumeInfoSupported = Is_Win32_Volume_Supported $TargetComputer    
	$states = @{$false = "OK"; $true = "BAD"}
    $oVolumes =  Get-Volumes -IsNano $IsNano -IsVolumeSupported $IsVolumeInfoSupported -TargetComputer $TargetComputer    
    foreach ($oVolume in $oVolumes)
    {
		 $VolumeId = Get-VolumeId -IsNano $IsNano -IsVolumeSupported $IsVolumeInfoSupported -Volume $oVolume
        if ($false -eq [string]::IsNullOrEmpty($VolumeId) )
        {  
            if ($false -eq $IsNano)
            {
                $DirtyBitSet = -Not([string]::IsNullOrEmpty($oVolume.DirtyBitSet))
				if ($true -eq $DirtyBitSet)
				{
						$DirtyBitSet = $oVolume.DirtyBitSet
				}
			}
            else
            {
				#Change for Test Monitor on Nano. -Not was removed
                $DirtyBitSet = -Not ($oVolume.HealthStatus -ieq "Healthy")
            }
         
            $State = $states[$DirtyBitSet]
			Create-State -VolumeId $VolumeId -State $State -momAPI $momAPI
        }
    }
	Unload-Module -ModuleName "Storage"
}
Function Create-State([string]$VolumeId,[string]$State,$momAPI)
{
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	if ($null -eq $momAPI)
	{
		return
	}
    $oBag = $momAPI.CreatePropertyBag()
    $oBag.AddValue("DiskLabel", $VolumeId)
    $oBag.AddValue("State", $State)
	if ($error.Count -eq 0)
	{
		$oBag
	}
} 
Main
</ScriptBody><Parameters><Parameter><Name>TargetComputer</Name><Value>$Config/TargetComputerName$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction></MemberModules><Composition><Node ID="PA"><Node ID="Scheduler" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.Windows.Server.10.0.MemoryAvailableMBytes.ModuleType" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="NumSamples" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CounterName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="ObjectName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InstanceName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AllInstances" type="xsd:boolean" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="NumSamples" Selector="$Config/NumSamples$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1" TypeID="SystemPerf!System.Performance.DataProvider"><ComputerName>$Config/TargetComputerName$</ComputerName><CounterName>$Config/CounterName$</CounterName><ObjectName>$Config/ObjectName$</ObjectName><InstanceName>$Config/InstanceName$</InstanceName><AllInstances>$Config/AllInstances$</AllInstances><Frequency>$Config/IntervalSeconds$</Frequency></DataSource><ConditionDetection ID="CDAverageThreshold"
TypeID="SystemPerf!System.Performance.AveragerCondition"><NumSamples>$Config/NumSamples$</NumSamples></ConditionDetection></MemberModules><Composition><Node ID="CDAverageThreshold"><Node ID="DS1" /></Node></Composition></Composite></ModuleImplementation><OutputType>SystemPerf!System.Performance.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.Windows.Server.10.0.DiskState.DS.Moduletype" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="DiskLabel" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="CounterName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter
ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/IntervalSeconds$</Interval><SyncTime /></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="PA" TypeID="Microsoft.Windows.Server.10.0.PowerShellPropertyBagProbe"><ScriptName>Microsoft.Windows.Server.DiskState.ps1</ScriptName><PSparam>param ($TargetComputer)</PSparam><ScriptBody>
#Copyright (c) Microsoft Corporation. All rights reserved.
#
# Parameters that should be passed to this script
# 0 Computer (FQDN)
$BYTES_IN_MB = 1048576 #=2^20
$LogicalObjectName     = "System Logical Disk"
$GeneralObjectName     = "Logical Disk"
$PrcFreeCounterName    = "PercentFree"
$MbFreeCounterName     = "MbFree"
Function Main()
{
	$bBagIsNotEmpty = $false
	$IsNotEmpty     = $false
 	$IsNano = Is_NanoServer 
    $IsVolumeInfoSupported = Is_Win32_Volume_Supported $TargetComputer 
    $SystemDrive = Get_System_Drive $TargetComputer
  
   $oVolumes =  Get-Volumes -IsNano $IsNano -IsVolumeSupported $IsVolumeInfoSupported -TargetComputer $TargetComputer  
    
    foreach ($oVolume in $oVolumes)
    {
         
		$VolumeId = Get-VolumeId -IsNano $IsNano -IsVolumeSupported $IsVolumeInfoSupported -Volume $oVolume
		if ($true -eq $IsNano)
		{
			$nFreeSpace = $oVolume.SizeRemaining
			$nMaxSize   = $oVolume.Size
		}
		else
		   {
				$nFreeSpace = $oVolume.FreeSpace
			   if ($IsVolumeInfoSupported)
			   {
				   $nMaxSize = $oVolume.Capacity
			   }
				else
					{
						$nMaxSize   = $oVolume.Size
					}
           }
            
		    
			Create-PerfData -VolumeId $VolumeId -nMaxSize $nMaxSize -nFreeSpace $nFreeSpace -SystemDrive $SystemDrive -momAPI $momAPI -bBagIsNotEmpty ([ref]$IsNotEmpty)
            if ($false -eq $bBagIsNotEmpty)
		    {
				if ($true -eq $IsNotEmpty)
				{
					$bBagIsNotEmpty = $true
				}
			}
        
    }
    
    if ($false -eq $bBagIsNotEmpty)
    {
		$ErrorActionPreference="SilentlyContinue"
		$error.Clear()
        $oBag = $momAPI.CreatePropertyBag()
        $oBag.AddValue("IsNotEmpty", "false")
        $oBag
    }
	Unload-Module -ModuleName "Storage"
	Unload-Module -ModuleName "CimCmdLets"
}
Function Create-PerfData([string]$VolumeId,$nMaxSize,$nFreeSpace,[string]$SystemDrive,$momAPI, [ref]$bBagIsNotEmpty)
{
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	if ($null -eq $momAPI)
	{
		return
	}
	if ($nMaxSize -eq $null -or $nMaxSize -eq 0)
    {
		return
	}
    if ($nFreeSpace -eq $null) 
	{
		 $nFreeSpace = 0 
	}
    $nPctFree = [math]::Round($nFreeSpace / $nMaxSize * 100, 2)
    $nMBFree = [math]::Round($nFreeSpace / $BYTES_IN_MB, 0)
    if ($VolumeId -ieq $SystemDrive)
    {
       $bIsSystemDrive = "true"
       $sPerfObject = $LogicalObjectName
    }
    else
    {
       $bIsSystemDrive = "false"
       $sPerfObject = $GeneralObjectName  
    }
    $oBag = $momAPI.CreateTypedPropertyBag(2) 
	$oBag.AddValue("IsNotEmpty", "true")
    $oBag.AddValue("PerfObject" ,  $sPerfObject)
    $oBag.AddValue("PerfCounter" , $PrcFreeCounterName)
    $oBag.AddValue("PerfInstance", $VolumeId)
    $oBag.AddValue("PerfValue", [string]$nPctFree)
	if ($error.Count -eq 0)
	{
		$oBag
		$bBagIsNotEmpty.Value = $true
	}
	$error.Clear()
    $oBag = $momAPI.CreateTypedPropertyBag(2) 
    $oBag.AddValue("IsNotEmpty", "true")
    $oBag.AddValue("PerfObject" ,  $sPerfObject)
    $oBag.AddValue("PerfCounter" , $MbFreeCounterName)
    $oBag.AddValue("PerfInstance", $VolumeId)
    $oBag.AddValue("PerfValue", [string]$nMBFree)
	if ($error.Count -eq 0)
	{
		$oBag
		$bBagIsNotEmpty.Value = $true
	}
} 
Main
</ScriptBody><Parameters><Parameter><Name>TargetComputer</Name><Value>$Config/ComputerName$</Value></Parameter></Parameters><TimeoutSeconds>300</TimeoutSeconds></ProbeAction><ConditionDetection ID="PerfMapper" TypeID="SystemPerf!System.Performance.DataGenericMapper"><ObjectName>$Data/Property[@Name='PerfObject']$</ObjectName><CounterName>$Data/Property[@Name='PerfCounter']$</CounterName><InstanceName>$Data/Property[@Name='PerfInstance']$</InstanceName><Value>$Data/Property[@Name='PerfValue']$</Value></ConditionDetection><ConditionDetection ID="EmptyCD" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='IsNotEmpty']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">true</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="InstanceFilter"
TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='PerfInstance']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/DiskLabel$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='PerfCounter']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/CounterName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection></MemberModules><Composition><Node ID="PerfMapper"><Node ID="InstanceFilter"><Node ID="EmptyCD"><Node ID="PA"><Node ID="Scheduler" /></Node></Node></Node></Node></Composition></Composite></ModuleImplementation><OutputType>SystemPerf!System.Performance.Data</OutputType></DataSourceModuleType><DataSourceModuleType
ID="Microsoft.Windows.Server.10.0.Legacy.LogicalDisk.FreeSpace.ModuleType" Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TargetComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="DebugFlag" type="xsd:boolean" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /><OverrideableParameter ID="DebugFlag" Selector="$Config/DebugFlag$" ParameterType="bool" /></OverrideableParameters><ModuleImplementation
Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/IntervalSeconds$</Interval><SyncTime /></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="PA" TypeID="Microsoft.Windows.Server.10.0.PowerShellPropertyBagProbe"><ScriptName>Microsoft.Windows.Server.Legacy.FreeSpace.ps1</ScriptName><PSparam>param ($TargetComputer, $DebugFlag)</PSparam><ScriptBody>
#Copyright (c) Microsoft Corporation. All rights reserved.
#
# Parameters that should be passed to this script
# 0 Computer (FQDN)
# 1 Debug Flag          - If True then script can output some trace information to event log.
# 2 System Drive Warning MBytes Threshold
# 3 System Drive Warning Percent Threshold
# 4 System Drive Error MBytes Threshold
# 5 System Drive Error Percent Threshold
# 6 Non System Drive Warning MBytes Threshold
# 7 Non System Drive Warning Percent Threshold
# 8 Non System Drive Error MBytes Threshold
# 9 Non System Drive Error Percent Threshold
$BYTES_IN_MB = 1048576 #=2^20
$DriveHealthyState            = 0
$DriveWarningState            = 1
$DriveErrorState              = 2
Function Main()
{
    $g_DebugFlag      = [System.Convert]::ToBoolean($DebugFlag)
	$IsNano = Is_NanoServer 
    $IsVolumeInfoSupported = Is_Win32_Volume_Supported $TargetComputer 
    $SystemDrive = Get_System_Drive $TargetComputer
  
    $bBagIsNotEmpty = $false
    $oVolumes =  Get-Volumes -IsNano $IsNano -IsVolumeSupported $IsVolumeInfoSupported -TargetComputer $TargetComputer  
    
    foreach ($oVolume in $oVolumes)
    {
		$VolumeId = Get-VolumeId -IsNano $IsNano -IsVolumeSupported $IsVolumeInfoSupported -Volume $oVolume
		if ($true -eq $IsNano)
		{
			$nFreeSpace = $oVolume.SizeRemaining
			$nMaxSize   = $oVolume.Size
		}
		else
		   {
				$nFreeSpace = $oVolume.FreeSpace
			   if ($IsVolumeInfoSupported)
			   {
				   $nMaxSize = $oVolume.Capacity
			   }
				else
					{
						$nMaxSize   = $oVolume.Size
					}
           }
			Create-PerfData -VolumeId $VolumeId -nMaxSize $nMaxSize -nFreeSpace $nFreeSpace -SystemDrive $SystemDrive -momAPI $momAPI   
    }
	Unload-Module -ModuleName "Storage"
	Unload-Module -ModuleName "CimCmdLets"
}
Function Create-PerfData([string]$VolumeId,$nMaxSize,$nFreeSpace,[string]$SystemDrive,$momAPI)
{
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	if ($null -eq $momAPI)
	{
		return
	}
	if ($nMaxSize -eq $null -or $nMaxSize -eq 0)
    {
		return
	}
    if ($nFreeSpace -eq $null) 
	{
		 $nFreeSpace = 0 
	}
    $nPctFree = [math]::Round($nFreeSpace / $nMaxSize * 100, 2)
    $nMBFree = [math]::Round($nFreeSpace / $BYTES_IN_MB, 0)
	
	$oBag = $momAPI.CreatePropertyBag()
	$oBag.AddValue("PctFree", [string]$nPctFree)
	$oBag.AddValue("MbFree", [string]$nMbFree)
	$oBag.AddValue("DiskLabel", $VolumeId)
    if ($VolumeId -ieq $SystemDrive)
    {
        $oBag.AddValue("IsSystem", "true")
    }
    else
    {
        $oBag.AddValue("IsSystem", "false")
    }
	if ($error.Count -eq 0)
	{
		$oBag
	}
} 
Main
</ScriptBody><Parameters><Parameter><Name>TargetComputer</Name><Value>$Config/TargetComputerName$</Value></Parameter><Parameter><Name>DebugFlag</Name><Value>$Config/DebugFlag$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction></MemberModules><Composition><Node ID="PA"><Node ID="Scheduler" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.Windows.Server.10.0.Processor.Performance.ModuleType" Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="CounterName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ObjectName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="InstanceName" type="xsd:string" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Frequency" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="TimeoutSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="Frequency" Selector="$Config/Frequency$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/Frequency$</Interval><SyncTime /></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="PerfPA" TypeID="Microsoft.Windows.Server.10.0.PowerShellPerformanceProbe"><ScriptName>Microsoft.Windows.Server.CPUSocket.Performance.ps1</ScriptName><PSparam /><ScriptBody>Function Main($objMomScriptAPI)
{
	$ErrorActionPreference = "SilentlyContinue"
	$error.Clear()
 
	$PerfList = New-Object System.Collections.ArrayList($null)  
	Get-PhysicalCpuPerfData -PerfList $PerfList
    if($PerfList.Count -ne $null -and $PerfList.Count -ne 0)
	{
		Set-PerfDataFromList -PerfList $PerfList -objMomScriptAPI $objMomScriptAPI
	}
	else
	{
			Create-EmptyPerfData -objMomScriptAPI $objMomScriptAPI
	}
	Unload-Module -ModuleName "CimCmdLets"
}
Function Get-PhysicalCpuPerfData($PerfList)
{
	$ErrorActionPreference = "SilentlyContinue"
	$error.Clear()
	if($sTargetComputer -eq $null -or $sTargetComputer -eq "")
	{
	$sTargetComputer="."
	}
    $WMISet = WMIGetInstanceNoAbort $sTargetComputer "root\cimv2" "Win32_Processor"
	$LCpuCountersSet = WMIGetInstanceNoAbort $sTargetComputer "root\cimv2" "Win32_PerfFormattedData_PerfOS_Processor"
	$LCpuCountersSet =  Create-LCPUPerfData -LCpuCountersSet $LCpuCountersSet
	$LcpuNumber = [UInt32]0
	foreach ($owObj in $WMISet)
    {
 		$PerfInstance  =  $owObj.DeviceID.Substring(3)
		$NumberOfLCpu  =  $owObj.NumberOfLogicalProcessors
		Get-CpuPerfData -CpuId $PerfInstance -lCpuId $LcpuNumber -LcpuNumber $NumberOfLCpu -lCpuPerfData $LCpuCountersSet -PerfList $PerfList
		$LcpuNumber    += $NumberOfLCpu
	}
}
Function Create-LCPUPerfData($LCpuCountersSet)
{
  $ErrorActionPreference = "SilentlyContinue"
  
  $lCpuSet = @{}
  $CpuNumber = [Uint32]0
  $error.Clear()
  foreach ($lCpuData in $LCpuCountersSet)
  {
	  if (-Not [UInt32]::TryParse($lCpuData.Name,[ref]$CpuNumber))
	  {
		  continue
	  }
	  $PercentProcessorTime    = $lCpuData.PercentProcessorTime
	  $PercentDPCTime          = $lCpuData.PercentDPCTime
	  $PercentInterruptTime    = $lCpuData.PercentInterruptTime
	  if ($null -eq $PercentProcessorTime)
	  {
		  $PercentProcessorTime = [UInt64]0
	  }
	  if ($null -eq $PercentDPCTime)
	  {
		  $PercentDPCTime = [UInt64]0
	  }
	  if ($null -eq  $PercentInterruptTime)
	  {
		   $PercentInterruptTime = [UInt64]0
	  }
	  $CpuPdata = New-Object -TypeName psobject -Property @{
	  "PercentProcessorTime" = $lCpuData.PercentProcessorTime
	  "PercentDPCTime"       = $lCpuData.PercentDPCTime
	  "PercentInterruptTime" = $lCpuData.PercentInterruptTime
	    
	  }
	  $lCpuSet[$CpuNumber] =  $CpuPdata
	  
  }
 return $lCpuSet  
}
Function Get-CpuPerfData($CpuId,$lCpuId,$LcpuNumber,$lCpuPerfData,$PerfList)
{
  $ErrorActionPreference = "SilentlyContinue"
  $error.Clear()
	 
	$MaxCpuNumber        = $lCpuId + [Uint32]$LcpuNumber
	$DPCTime             = [UInt64]0
	$ProcessorTime       = [UInt64]0
	$ProcessorInterrupt  = [UInt64]0
	$i = [UInt32]0
	for ($i = $lCpuId; $i -lt $MaxCpuNumber; $i++)
	{
		$ProcessorTime      += $lCpuPerfData[$i].PercentProcessorTime
		$DPCTime            +=  $lCpuPerfData[$i].PercentDPCTime
		$ProcessorInterrupt +=  $lCpuPerfData[$i].PercentInterruptTime 
	}
	#DPCTime
	[void]$PerfList.Add((CreatePerformanceCounterData -strObjectName "Processor" -strCounterName "% DPC Time" -strInstanceName "$CpuId" -varValue ([math]::Round($DPCTime/$LcpuNumber,2)) ) )
	#Processor Time
	[void]$PerfList.Add((CreatePerformanceCounterData -strObjectName "Processor" -strCounterName "% Processor Time" -strInstanceName "$CpuId" -varValue ([math]::Round($ProcessorTime /$LcpuNumber,2)) ) )
	#Processor Interrupt Time
	[void]$PerfList.Add((CreatePerformanceCounterData -strObjectName "Processor" -strCounterName "% Interrupt Time" -strInstanceName "$CpuId" -varValue ([math]::Round($ProcessorInterrupt/$LcpuNumber,2)) ) )
}
Function Set-PerfDataFromList($PerfList,   $objMomScriptAPI)
{
	    if ($null -eq    $objMomScriptAPI)
	    {
		   return
 		}
		$ErrorActionPreference = 'SilentlyContinue' # Scoped only to function
		$Error.Clear()
		foreach($data in $PerfList)
		{
				#Add the values for the perf counter#s object name, counter name, instance name and the value)
				if([string]::IsNullOrEmpty($data.PerfObject) )
				{
					continue
				}
			Create-PerformancePropertyBag -strObjectName $data.PerfObject -strCounterName $data.PerfCounter -strInstanceName $data.PerfInstance  -varValue $data.PerfValue -objMomScriptAPI $objMomScriptAPI
		}
}
Main -objMomScriptAPI $momAPI</ScriptBody><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction><ConditionDetection ID="CD" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">ObjectName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/ObjectName$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">CounterName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/CounterName$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">InstanceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">$Config/InstanceName$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection></MemberModules><Composition><Node ID="CD"><Node ID="PerfPA"><Node ID="Scheduler" /></Node></Node></Composition></Composite></ModuleImplementation><OutputType>SystemPerf!System.Performance.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.Windows.Server.10.0.TimeOffset.ModuleType" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="NumSamples" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CounterName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ObjectName" type="xsd:string" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InstanceName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AllInstances" type="xsd:boolean" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="NumSamples" Selector="$Config/NumSamples$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1" TypeID="SystemPerf!System.Performance.DataProvider"><ComputerName>$Config/TargetComputerName$</ComputerName><CounterName>$Config/CounterName$</CounterName><ObjectName>$Config/ObjectName$</ObjectName><InstanceName>$Config/InstanceName$</InstanceName><AllInstances>$Config/AllInstances$</AllInstances><Frequency>$Config/IntervalSeconds$</Frequency></DataSource><ConditionDetection ID="CDAverageThreshold"
TypeID="SystemPerf!System.Performance.AveragerCondition"><NumSamples>$Config/NumSamples$</NumSamples></ConditionDetection></MemberModules><Composition><Node ID="CDAverageThreshold"><Node ID="DS1" /></Node></Composition></Composite></ModuleImplementation><OutputType>SystemPerf!System.Performance.Data</OutputType></DataSourceModuleType><ProbeActionModuleType ID="Microsoft.Windows.Server.10.0.Monitoring.BPA.Task.ModuleType" Accessibility="Internal" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IncludeCompliant" type="xsd:boolean" /></Configuration><OverrideableParameters><OverrideableParameter ID="IncludeCompliant" Selector="$Config/IncludeCompliant$" ParameterType="bool" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /><ProbeAction ID="PA"
TypeID="Microsoft.Windows.Server.10.0.BPA.PowerShellPropertyBagProbe"><ScriptName>Microsoft.Windows.Server.10.0.Monitoring.BPA.ShowBPAresults.Script.ps1</ScriptName><PSparam>
Param($IncludeCompliant)
</PSparam><ScriptBody>function WriteBPAResult
{
        param ([Microsoft.BestPractices.CoreInterface.Result]$BPAResult, [boolean]$IncludeAll)
        $Delimiter = New-Object String("-",12)
        if ($BPAResult.Problem -eq $null)
        {
            if ($IncludeAll)
            {
                Write-Host $(-Join("Title      : ", $BPAResult.Title))
                Write-Host $(-Join("Compliance : ", $BPAResult.Compliance))
        	    Write-Host $Delimiter
            }
        }
        else
        {
            Write-Host $(-Join("Title      : ", $BPAResult.Title))
            Write-Host $(-Join("Problem    : ", $BPAResult.Problem))
            Write-Host $(-Join("Impact     : ", $BPAResult.Impact))
            Write-Host $(-Join("Resolution : ", $BPAResult.Resolution))
    	    Write-Host $Delimiter
        }
 }
    
function WriteModelResults
    {
        param ([string]$BPAModel, [boolean]$IncludeAll)
        $ErrorActionPreference = "SilentlyContinue"
		$error.Clear()
        $BPAResults = Get-BPAResult -ModelId $BPAModel -ErrorAction SilentlyContinue
		if (0 -ne $error.Count -and $null -eq $BPAResults)
		{
			
			if ($BpaCategoryError -ieq $error[0].CategoryInfo.Category)
			{
				Write-Host $BpaScanNotRun 
				Write-Host $BpaScanMonitor
			}
			else 
			    {
					$msg = $error[0].Exception.Message
					$msg = $BpaErrorResults  -f $msg
					Write-Host $msg
				}
			return
		}
        if ($null -eq $BPAResults )
        {
				Write-Host $BpaEmptyResults 
			    return
		}
            $NotCompliantResults = $BPAResults | Where-Object {$_.Problem -ne $null}
            
            [boolean] $IsModelCompliant = [boolean]($NotCompliantResults -eq $null)
            
            if ($false -eq $IsModelCompliant -or $true -eq $IncludeAll)
            {
                Write-Host "Server Role: "  $BPAModel
                $RoleSeparator = New-Object String("=", [int] (14 + $BPAModel.Id.Length))
                Write-Host $RoleSeparator
            }
            
            foreach ($BPAResult in $BPAResults)
            {
               WriteBPAResult -BPAResult $BPAResult -IncludeAll $IncludeAll
            }
            
    }
Function Run-BPAResult()
{
	$ErrorActionPreference = "SilentlyContinue"
	$error.Clear()
	$BpaModels          = New-Object System.Collections.ArrayList($null) 
	$ImportedAssemblies = New-Object System.Collections.ArrayList($null)
	
	if (0 -ne $error.Count)
	{
      Write-Host $BpaInitFailed 
	  return
	}
	$iResult = Check-BpaRequirement -ModelsToRun $BpaModels -ImportedAssemblies $ImportedAssemblies
	if ($BpaSuccess -ne $iResult)
	{
		if ($BpaModelLoadProblem -eq $iResult)
		{
            Unload-Modules -ImportedAssemblies $ImportedAssemblies
	    }
		return
	}
	$IncludeAll = Convert-ToBoolean -sBool $IncludeCompliant
	foreach ($BPAModel in $BPAModels)
	{
		WriteModelResults -BPAModel $BPAModel -IncludeAll $IncludeAll
	}
	Unload-Modules -ImportedAssemblies $ImportedAssemblies
}
Run-BPAResult</ScriptBody><Parameters><Parameter><Name>IncludeCompliant</Name><Value>$Config/IncludeCompliant$</Value></Parameter></Parameters><TimeoutSeconds>300</TimeoutSeconds></ProbeAction></MemberModules><Composition><Node ID="PA"><Node ID="PassThrough" /></Node></Composition></Composite></ModuleImplementation><OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType><TriggerOnly>true</TriggerOnly></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.Windows.Server.10.0.Cmd.Probe" Accessibility="Public" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ApplicationName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CommandLine" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer"
/></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="Probe" TypeID="System!System.CommandExecuterProbe"><ApplicationName>$Config/ApplicationName$</ApplicationName><WorkingDirectory /><CommandLine>$Config/CommandLine$</CommandLine><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><RequireOutput>true</RequireOutput><Files /></ProbeAction><ProbeAction ID="RegistryProbe" TypeID="Windows!Microsoft.Windows.RegistryProbe"><ComputerName>$Config/ComputerName$</ComputerName><RegistryAttributeDefinitions><RegistryAttributeDefinition><AttributeName>SERVER_VERSION_IS_NANO</AttributeName><Path>SOFTWARE\Microsoft\Windows
NT\CurrentVersion\Server\ServerLevels\NanoServer</Path><PathType>1</PathType><AttributeType>2</AttributeType></RegistryAttributeDefinition></RegistryAttributeDefinitions></ProbeAction><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /><ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter"><Expression><Not><Expression><SimpleExpression><ValueExpression><XPathQuery>Values/SERVER_VERSION_IS_NANO</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>1</Value></ValueExpression></SimpleExpression></Expression></Not></Expression></ConditionDetection></MemberModules><Composition><Node ID="Probe"><Node ID="Filter"><Node ID="RegistryProbe"><Node ID="PassThrough" /></Node></Node></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.CommandOutput</OutputType><TriggerOnly>true</TriggerOnly></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.Windows.Server.10.0.Cmd.Probe.Nano" Accessibility="Public"
Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ApplicationName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CommandLine" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="Probe" TypeID="System!System.CommandExecuterProbe"><ApplicationName>$Config/ApplicationName$</ApplicationName><WorkingDirectory /><CommandLine>$Config/CommandLine$</CommandLine><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><RequireOutput>true</RequireOutput><Files /></ProbeAction><ProbeAction
ID="RegistryProbe" TypeID="Windows!Microsoft.Windows.RegistryProbe"><ComputerName>$Config/ComputerName$</ComputerName><RegistryAttributeDefinitions><RegistryAttributeDefinition><AttributeName>SERVER_VERSION_IS_NANO</AttributeName><Path>SOFTWARE\Microsoft\Windows NT\CurrentVersion\Server\ServerLevels\NanoServer</Path><PathType>1</PathType><AttributeType>2</AttributeType></RegistryAttributeDefinition></RegistryAttributeDefinitions></ProbeAction><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /><ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery>Values/SERVER_VERSION_IS_NANO</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>1</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><Composition><Node ID="Probe"><Node ID="Filter"><Node ID="RegistryProbe"><Node ID="PassThrough"
/></Node></Node></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.CommandOutput</OutputType><TriggerOnly>true</TriggerOnly></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.Windows.Server.10.0.PowerShellPropertyBagProbe" Accessibility="Public" Batching="false" PassThrough="false"><Configuration><IncludeSchemaTypes><SchemaType>Windows!Microsoft.Windows.PowerShellSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ScriptName" type="NonNullString" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="PSparam" type="xsd:string" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ScriptBody" type="NonNullString" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SnapIns" type="SnapInsType" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Parameters" type="NamedParametersType"
minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="StrictErrorHandling" type="xsd:boolean" minOccurs="0" maxOccurs="1" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="PowerShellPA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe"><ScriptName>$Config/ScriptName$</ScriptName><ScriptBody>
                      
                                $Config/PSparam$
                                
$ErrorActionPreference = "Stop"
# Event type constants
$EVENT_TYPE_LOG = 0
$EVENT_TYPE_ERROR = 1
$EVENT_TYPE_WARNING = 2
$EVENT_TYPE_INFORMATION = 4
# Typed property bag constants
$PROPERTY_TYPE_ALERT = 0
$PROPERTY_TYPE_EVENT = 1
$PROPERTY_TYPE_PERFORMANCE = 2
$PROPERTY_TYPE_STATE = 3
# State type constants
$STATE_SUCCESS = "Success"
$STATE_WARNING = "Warning"
$STATE_ERROR = "Error"
$momAPI = New-Object -ComObject Mom.ScriptAPI 
if ($null -eq $momAPI)
{
   exit -1
}
Function Load-CimModules
{
	$ErrorActionPreference = 'SilentlyContinue' 
	$error.Clear()
	$CimModule = Get-Module CimCmdlets
	if ($null -eq $CimModule)
	{
			Import-Module CimCmdlets
	}
}
Load-CimModules
# WMI Constant
$wbemCimtypeUseDefault        = 0   #Use Default Type CIM type - Custom
$wbemCimtypeSint16            = 2   #Signed 16-bit integer 
$wbemCimtypeSint32            = 3   #Signed 32-bit integer 
$wbemCimtypeReal32            = 4   #32-bit real number 
$wbemCimtypeReal64            = 5   #64-bit real number 
$wbemCimtypeString            = 8   #String 
$wbemCimtypeBoolean           = 11  #Boolean value 
$wbemCimtypeObject            = 13  #CIM object 
$wbemCimtypeSint8             = 16  #Signed 8-bit integer 
$wbemCimtypeUint8             = 17  #Unsigned 8-bit integer 
$wbemCimtypeUint16            = 18  #Unsigned 16-bit integer 
$wbemCimtypeUint32            = 19  #Unsigned 32-bit integer 
$wbemCimtypeSint64            = 20  #Signed 64-bit integer  
$wbemCimtypeUint64            = 21  #Unsigned 64-bit integer 
$wbemCimtypeDatetime          = 101 #Date/time value 
$wbemCimtypeReference         = 102 #Reference to a CIM object 
$wbemCimtypeChar16            = 103 #16-bit character 
$ErrAction_None               = 0
$ErrAction_Trace              = 1
$ErrAction_ThrowError         = 16
$ErrAction_Abort              = 32
$ErrAction_ThrowErrorAndAbort = 48
$DISKSIZE_BYTES_IN_MB = 1048576
$g_ErrorEventNumber = 4001
$g_TraceEventNumber = 4002
$g_DebugFlag = $false
#---------------------------------------------------------------------------
# Returns WMI Instance requested. Tries to execute WMI query a N times.
#---------------------------------------------------------------------------
Function WMIGetInstanceExTryN
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery, 
           [int]$N)
    for ($i = 0; $i -lt $N; $i++)
    {
        $error.Clear();
        
		Load-CimModules
		try
        {
		    $cimSessionOption = New-CimSessionOption -Protocol DCOM
		    $cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
            $oInstance = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
        }
        catch
        {
             $oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue 
        }
        Finally
        {
            Get-CimSession | Remove-CimSession
		    $cimsession =$null
		    $cimSessionOption = $null 
        }
        if ($error.Count -gt 0)
        {
            if ($i -eq ($N-1))
            {
                ThrowScriptError ("The class name '" + $sInstanceQuery + "' returned no instances.  Please check to see if this is a valid WMI class name.") $error[0]
            }
        }
        else
        {
            break;
        }
        sleep -m 1000
    }
    return $oInstance
}
#---------------------------------------------------------------------------
# Returns WMI Instance requested.
#---------------------------------------------------------------------------
Function WMIGetInstanceEx
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery)
    $error.Clear();
	Load-CimModules
	try
    {
		$cimSessionOption = New-CimSessionOption -Protocol DCOM
		$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
        $oInstance = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
    }
    catch
    {
            $oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue 
    }
    Finally
    {
        Get-CimSession | Remove-CimSession
		$cimsession =$null
		$cimSessionOption = $null 
    }
    if ($error.Count -gt 0)
    {
        ThrowScriptError ("The class name '" + $sInstanceQuery + "' returned no instances.  Please check to see if this is a valid WMI class name.") $error[0]
    }
    return $oInstance
}
#---------------------------------------------------------------------------
# Connect to WMI.
#---------------------------------------------------------------------------
Function WMIConnect
{
    param ([string]$sTargetComputer,
           [string]$sNamespace)
    $error.Clear()
    # !!! Refactoring comment: 
    # Original VBScript only tries to connect to the namespace. Piping to get only the first one saves time. 
    
	Load-CimModules
	try
	{
		$cimSessionOption = New-CimSessionOption -Protocol DCOM
		$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
		$oWMI = Get-CimClass -CimSession $cimsession -Namespace $sNamespace -ErrorAction SilentlyContinue | select -First 1
	}
	Finally
	{
		Get-CimSession | Remove-CimSession
		$cimsession =$null
		$cimSessionOption = $null 
	}
    
    if ($error.Count -gt 0)
    {
        $msg = "Unable to open WMI Namespace 'winmgmts:\\" + $sTargetComputer + "\" + $sNamespace + "'. Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists."
        ThrowScriptError $msg $error[0]
    }
}
#---------------------------------------------------------------------------
# Returns WMI Instance requested.
#---------------------------------------------------------------------------
Function WMIGetInstance
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery)
    WMIConnect $sTargetComputer $sNamespace
    $oInstance = WMIGetInstanceEx $sTargetComputer $sNamespace $sInstanceQuery
    return $oInstance
}
#---------------------------------------------------------------------------
# Returns WMI Instance requested.
#---------------------------------------------------------------------------
Function WMIGetInstanceNoAbort
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery)
	Load-CimModules
	try
    {
		$cimSessionOption = New-CimSessionOption -Protocol DCOM
		$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
        $oInstance = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
    }
    catch
    {
        $oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue 
    }
    Finally
    {
        Get-CimSession | Remove-CimSession
		$cimsession =$null
		$cimSessionOption = $null 
    }
    return $oInstance
}
#---------------------------------------------------------------------------
# Executes the WMI query and returns the result set.
#---------------------------------------------------------------------------
Function WMIExecQuery
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sQuery)
    $error.Clear()
    # !!! Refactoring comment: 
    # Original VBScript only tries to connect to the namespace. Piping to get only the first one saves time. 
	Load-CimModules
	try
	{
		$cimSessionOption = New-CimSessionOption -Protocol DCOM
		$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
		$oWMI = Get-CimClass -CimSession $cimsession -Namespace $sNamespace -ErrorAction SilentlyContinue | select -First 1
	}
	Finally
	{
		Get-CimSession | Remove-CimSession
		$cimsession =$null
		$cimSessionOption = $null 
	}
    if ($error.Count -gt 0)
    {
        $msg = "Unable to open WMI Namespace 'winmgmts:\\" + $sTargetComputer + "\" + $sNamespace + "'. Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists."
        ThrowScriptError $msg, $error[0]
    }
	Load-CimModules
	try
    {
		$cimSessionOption = New-CimSessionOption -Protocol DCOM
		$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
        $oQuery = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
    }
    catch
    {
        $oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue 
    }
    Finally
    {
        Get-CimSession | Remove-CimSession
		$cimsession =$null
		$cimSessionOption = $null 
    }
    if ($error.Count -gt 0)
    {
        ThrowScriptError ("The Query '" + $sQuery + "' returned an invalid result set.  Please check to see if this is a valid WMI Query.") $error[0]
    }
    return $oQuery
}
#---------------------------------------------------------------------------
# Executes the WMI query and returns the result set, no abort version.
#---------------------------------------------------------------------------
Function WMIExecQueryNoAbort
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sQuery)    
    
	Load-CimModules
	try
    {
		$cimSessionOption = New-CimSessionOption -Protocol DCOM
		$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
        $oQuery = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
    }
    catch
    {
        $oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue 
    }
    Finally
    {
        Get-CimSession | Remove-CimSession
		$cimsession =$null
		$cimSessionOption = $null 
    }
    return $oQuery
}
#---------------------------------------------------------------------------
# Creates an event and sends it back to the mom server.
#---------------------------------------------------------------------------
Function ThrowScriptErrorNoAbort
{
    param ([string]$sMessage, 
           [System.Management.Automation.ErrorRecord]$oErr)
    # Retrieve the name of this (running) script
    $ScriptFileName = $MyInvocation.ScriptName
    
    if ($oErr -ne $null)
    {
        $sMessage = $sMessage + ". " + $oErr.ErrorDetails
    }
    
    $momAPI.LogScriptEvent($ScriptFileName, $g_ErrorEventNumber, $EVENT_TYPE_ERROR, $sMessage)
    
    Write-Host $sMessage
}
#---------------------------------------------------------------------------
# Creates an event and sends it back to the mom server.
#---------------------------------------------------------------------------
Function ThrowScriptError
{
    param ([string]$sMessage, 
           [System.Management.Automation.ErrorRecord]$oErr)
    ThrowScriptErrorNoAbort $sMessage $oErr
    exit
}
#---------------------------------------------------------------------------
# Verifies that number of arguments is correct
#---------------------------------------------------------------------------
Function VerifyNumberOfArguments
{
    param ($NumberOfArguments)
    if ($args.Length -ne $NumberOfArguments)
    {
       $sArgs = ""
       foreach ($argument in $args)
       {
           $sArgs += " {" + $argument + "}"
       }
       ThrowScriptError ("Invalid number of arguments (" + $args.Length + " instead of " + $NumberOfArguments + "). Arguments:" + $sArgs) $null
    }
}
#---------------------------------------------------------------------------
# Outputs to file and echo for debugging purposes
#---------------------------------------------------------------------------
Function TraceLogMessage
{
    param ([string]$sMessage)
    Write-Host $sMessage
    
    If ($g_DebugFlag -eq $true)
    {
        # Retrieve the name of this (running) script
        $ScriptFileName = $MyInvocation.ScriptName
        
        $momAPI.LogScriptEvent($ScriptFileName, $g_TraceEventNumber, $EVENT_TYPE_INFORMATION, $sMessage)
    }
}
#---------------------------------------------------------------------------
# Verifies the expression. If equals to False then generates an error and quits the script
#   Usage:
#     Verify Not WMISet Is Nothing, "WMISet is invalid!"
#     Verify WMISet.Count = 1, "Invalid quantity of services with name 'Server' (qty = " &amp; WMISet.Count &amp; ")."
#---------------------------------------------------------------------------
Function Verify
{
    param ([bool]$bBool, 
           [string]$sMessage)
    If ($bBool -eq $false)
    {
        ThrowScriptError $sMessage $null
    }
}
Function GetRegistryKeyValue
{
    param ([string]$keyPath, 
           [string]$key)
    $error.Clear()
    $strKeyValue = Get-ItemProperty -Path $keyPath -Name $key -ErrorAction SilentlyContinue
    if ($error.Count -gt 0)
    {
        ThrowScriptError ("An error occurred while reading the registry: '" + $keyPath + $key + "'") $error[0]
    }
    return $strKeyValue.$key
}
#---------------------------------------------------------------------------
# Function: ExpressedInMB
#   Usage:
#     Parameter (SizeInBytes) 
#     Returns the Size Expressed in MBytes
#---------------------------------------------------------------------------
Function ExpressedInMB
{
    param ($SizeInBytes)
    $NumberSizeExpInMB = [math]::Round($SizeInBytes / $DISKSIZE_BYTES_IN_MB, 0)
    return $NumberSizeExpInMB
}
Function Is_Win32_Volume_Supported($TargetComputer)
{
    $blnRet = $false
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	$IsNano = Is_NanoServer
	
	if ($true -eq $IsNano)
	{
		return $blnRet #NanoServer does not support Win32_Volume
	}
    $objWMISet = WMIGetInstance $TargetComputer "root\cimv2" "Win32_OperatingSystem"
    foreach ($objWMIOS in $objWMISet)
    {
        if ([int]$objWMIOS.BuildNumber -ge 3624) 
		{
			 $blnRet = $true 
		}
    }
    return $blnRet
}
Function Get_System_Drive($TargetComputer)
{
    $objWMISet = WMIGetInstance $TargetComputer "root\cimv2" "Win32_OperatingSystem"
    foreach ($objWMIOS in $objWMISet)
    {
        return $objWMIOS.SystemDirectory.SubString(0,2)
    }
}
Function Is_NanoServer
{
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	$IsNano = (Get-Item "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Server\ServerLevels").GetValue("NanoServer")
	
	$IsNano = $IsNano -eq 1
	$error.Clear()
	return $IsNano
}
#---------------------------------------------------------------------------
# Function: StripEndChar
#   Usage:
#     Parameter (sName) 
#     Returns the sName without last special Character "\"
#---------------------------------------------------------------------------
Function StripEndChar([string]$sName)
{
    if ([string]::IsNullOrEmpty($sName))
    { 
        return [string]::Empty
    }
    else
    {
        return $sName.Substring(0, $sName.Length-1)
    }
}
Function Load-Module ([string] $ModuleName)
{
	if ([string]::IsNullOrEmpty($ModuleName) )
	{
		return $false
	}
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	$retval = $false
	$cim = Get-Module -Name $ModuleName
	########Check for powershell 1.0
	if ($error.Count -ne 0)
	{
	   $type = $error[0].Exception.GetType()
	   if ([System.Management.Automation.CommandNotFoundException] -eq $type)
	   {
		   $error.Clear()
		   return $retval
	   }
       $error.Clear()
	}
	if ($null -eq $cim)
	{
			Import-Module $ModuleName
		    if ($error.Count -eq 0)
		    {
				$retval = $true
			}
			
		   $error.Clear()
	}
	else
	    {
			$retval = $true
		}
	return $retval
}
Function Get-Volumes([bool]$IsNano,[bool]$IsVolumeSupported,[string] $TargetComputer)
{
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	$oVolumes = $null
	if ($true -eq $IsNano)
	{
		$bLoadModule = Load-Module -ModuleName "Storage"
		if($false -eq $bLoadModule)
        {
			return $null
		} 
		$oVolumes =  Get-Volume | where {$_.DriveType -eq "Fixed" -and $false -eq [string]::IsNullOrEmpty($_.FileSystem )}
	}
	else 
		{
			if ($true -eq $IsVolumeSupported)
			{
				 $oVolumes = WMIGetInstanceNoAbort $TargetComputer "root\cimv2" "Win32_Volume where (DriveType=3) and FileSystem!=null" 
			}
			else
			   {
				   $oVolumes = WMIGetInstanceNoAbort $TargetComputer "root\cimv2" "Win32_LogicalDisk where (DriveType=3) and FileSystem!=null"  
			   }
		}
	return $oVolumes
} 
Function Get-VolumeId([bool]$IsNano,[bool]$IsVolumeSupported,$Volume)
{
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	if ($null -eq $Volume)
	{
		return $null
	}
	if ($true -eq $IsVolumeSupported)
	{
		$VolumeId = $Volume.DriveLetter
		if([string]::IsNullOrEmpty($VolumeId) )
		{
			$VolumeId = StripEndChar -sName $Volume.Name 
		}
	}
	else
	    {
			if ($true -eq $IsNano )
			{
				$VolumeId = $Volume.DriveLetter
				if([string]::IsNullOrEmpty($VolumeId) )
				{
					$VolumeId = StripEndChar -sName $Volume.UniqueId 
				}
				else
				{
					if (1 -eq $VolumeId.Length)
					{
						$VolumeId = $VolumeId + ":" 
					}
				}
			}
			else
			    {
					$VolumeId = $Volume.DeviceId
				}
			
		}
	return $VolumeId
} 
Function CreatePerformanceCounterData($strObjectName, $strCounterName, $strInstanceName, $varValue)
{
									return @{ "PerfObject"  = $strObjectName;
                                             "PerfCounter"  = $strCounterName;
                                             "PerfInstance" = $strInstanceName;
                                             "PerfValue"     =  $varValue;
                                             }
}
Function Create-PerformancePropertyBag ($strObjectName, $strCounterName, $strInstanceName, $varValue,$objMomScriptAPI)
{
				$ErrorActionPreference = "SilentlyContinue"
				$error.Clear()
				if ([string]::IsNullOrEmpty($varValue))
	            {
					$varValue = 0
				}	
	            if ($null -eq $objMomScriptAPI)
				{
					return
				}
				$objTypedPropertyBag = $objMomScriptAPI.CreateTypedPropertyBag($PROPERTY_TYPE_PERFORMANCE)
				$objTypedPropertyBag.AddValue("PerfObject"   ,$strObjectName)
				$objTypedPropertyBag.AddValue("PerfCounter"  ,$strCounterName)
				$objTypedPropertyBag.AddValue("PerfInstance" ,$strInstanceName)
				$objTypedPropertyBag.AddValue("PerfValue"    ,$varValue)
				$objTypedPropertyBag
     
}
Function Create-EmptyPerfData ($objMomScriptAPI)
{
	 if ($null -eq $objMomScriptAPI)
  	 {
		return
 
	 }
		$ErrorActionPreference = 'SilentlyContinue' # Scoped only to function
		$error.Clear()
		$objTypedPropertyBag = $objMomScriptAPI.CreateTypedPropertyBag($PROPERTY_TYPE_PERFORMANCE)
		$objTypedPropertyBag.AddValue("PerfObject"   ,"EMPTY")
		$objTypedPropertyBag.AddValue("PerfCounter"  ,"EMPTY")
		$objTypedPropertyBag.AddValue("PerfInstance" ,"EMPTY")
		$objTypedPropertyBag.AddValue("PerfValue"    ,"EMPTY")
		#Add the property bag to the script#s XML output
		$objTypedPropertyBag
	   
	   $error.Clear()
}
Function Convert-ToBoolean([string] $sBool)
 {
    [bool] $result  = $false
    [bool] $iresult = $false
    if ($false -eq [string]::IsNullOrEmpty($sBool) )
    {
       $result  = $sBool.Equals("true",[System.StringComparison]::InvariantCultureIgnoreCase)
       $iresult = $sBool.Equals("1",[System.StringComparison]::InvariantCultureIgnoreCase)
       $result  = $result -or $iresult
    }
    
    return $result
 }
 Function Unload-Module([string]$ModuleName)
 {
		$ErrorActionPreference = 'SilentlyContinue' # Scoped only to function
		$error.Clear()
	    if ([string]::IsNullOrEmpty($ModuleName))
		{
			return
		}
	    $module = Get-Module $ModuleName  
	    if ($null -eq $module)
		{
		   return
		}
		Remove-Module -Name $ModuleName -Force 
 }
Function Load-CimModules
{
	$error.Clear()
	$CimModule = Get-Module CimCmdlets
	if ($null -eq $CimModule)
	{
			Import-Module CimCmdlets
			$error.Clear()
	}
}
                                $Config/ScriptBody$
                               
                    </ScriptBody><SnapIns>$Config/SnapIns$</SnapIns><Parameters>$Config/Parameters$</Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><StrictErrorHandling>$Config/StrictErrorHandling$</StrictErrorHandling></ProbeAction></MemberModules><Composition><Node ID="PowerShellPA" /></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.Windows.Server.10.0.BPA.PowerShellPropertyBagProbe" Accessibility="Public" Batching="false" PassThrough="false"><Configuration><IncludeSchemaTypes><SchemaType>Windows!Microsoft.Windows.PowerShellSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ScriptName" type="NonNullString" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="PSparam" type="xsd:string" minOccurs="0" maxOccurs="1" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ScriptBody" type="NonNullString" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SnapIns" type="SnapInsType" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Parameters" type="NamedParametersType" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="StrictErrorHandling" type="xsd:boolean" minOccurs="0" maxOccurs="1" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="PowerShellPA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe"><ScriptName>$Config/ScriptName$</ScriptName><ScriptBody>
                      
                                $Config/PSparam$
                                # State type constants
$STATE_SUCCESS = "Success"
$STATE_WARNING = "Warning"
$STATE_ERROR = "Analysis"
$WarningRulesCount     = 0
$ErrorRulesCount       = 0
$BpaNotSupportedStatus = 1
$BpaNotLoadedStatus    = 2
$BpaModelsNotLoaded    = 3
$BpaSuccess            = 0
$SrvModule             = "ServerManager"
$BpaModule             = "BestPractices"
$BpaInitFailed         = "BPA Task Initialization failed." 
$BpaNotSupported       = "There are no Best Practices Analyzer modules found. Scan result is not supported on this Operating System." 
$BpaLoadProblem        = "Can not load BPA Scan Module"
$BpaModelLoadProblem   = "Can not get BPA Models"
$Description           = "There are no Best Practices Analyzer modules found."
$DESCRIPTION_NOMODULES = "There are no Best Practices Analyzer modules found."
$DESCRIPTION_WARNING   = "Best Practices Analyzer compliance verification was completed successfully with {0} warnings and {1} errors."
$DESCRIPTION_ERROR     = "Best Practices Analyzer can not complete compliance verification."
$BpaResultLoadFailed   = "Best Practices Analyzer can not get result"
$BpaCategoryError      = "ResourceUnavailable"
$BpaScanNotRun         = "BPA scan was not run or was not completed successfuly."
$BpaScanMonitor        = "Enable Windows Server 2016 Operating System BPA Monitor"
$BpaEmptyResults       = "BPA scan does not return any result."
$BpaErrorResults       = "Can not get Best Practices Analyzer compliance result. Command was completed with errors. Error: {0} ."
$BpaScanMode           = "Analysis"
Function Get-BpaWarningsAndErrorCounts($Detail,[ref]$WarningRulesCount,[ref]$ErrorRulesCount)
{
	if([string]::IsNullOrEmpty($Detail))
	{
		return
	}
	$WarningCount = 0
	$ErrorCount  = 0
	foreach($scanDetail in $Detail)
	{
		if ($BpaScanMode -eq $scanDetail.ScanMode)
		{
			$tWarninCount = 0
			$tErrorCount  = 0
		  	Get-BpaCountFromDetail -Detail $scanDetail -WarningMessages ([ref] $tWarninCount) -ErrorMessages ([ref] $tErrorCount)
			$WarningCount += $tWarninCount
			$ErrorCount   += $tErrorCount
		}
		else
		    {
				continue
			}
	}
	$WarningRulesCount.Value = $WarningCount
	$ErrorRulesCount.Value   = $ErrorCount
}
Function Get-BpaCountFromDetail($Detail,[ref]$WarningMessages,[ref]$ErrorMessages)
{
	if([string]::IsNullOrEmpty($Detail))
	{
		return $null
	}
   if([Microsoft.BestPractices.CoreInterface.InvokeBpaModelOutputDetail] -ne $Detail.GetType())
   {
	   retrun $null
   }
	$WarnCount  = 0
	$ErrorCount = 0
	[int]::TryParse($Detail.WarningMessages,[ref]$WarnCount)
	[int]::TryParse($Detail.ErrorMessages,[ref]$WarnCount)
	$WarningMessages.Value = $WarnCount
	$ErrorMessages.Value   = $ErrorCount
	return 0
}
Function Convert-ToBoolean([string] $sBool)
 {
    [bool] $result  = $false
    [bool] $iresult = $false
    if ($false -eq [string]::IsNullOrEmpty($sBool) )
    {
       $result  = $sBool.Equals("true",[System.StringComparison]::InvariantCultureIgnoreCase)
       $iresult = $sBool.Equals("1",[System.StringComparison]::InvariantCultureIgnoreCase)
       $result  = $result -or $iresult
    }
    
    return $result
 }
Function Load-Module ([string] $ModuleName)
{
	if ([string]::IsNullOrEmpty($ModuleName) )
	{
		return $false
	}
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	$retval = $false
	$cim = Get-Module -Name $ModuleName
	########Check for powershell 1.0
	if ($error.Count -ne 0)
	{
	   $type = $error[0].Exception.GetType()
	   if ([System.Management.Automation.CommandNotFoundException] -eq $type)
	   {
		   $error.Clear()
		   return $retval
	   }
       $error.Clear()
	}
	if ($null -eq $cim)
	{
			Import-Module $ModuleName
		    if ($error.Count -eq 0)
		    {
				$retval = $true
			}
			
		   $error.Clear()
	}
	else
	    {
			$retval = $true
		}
	return $retval
}
Function Check-Module([string] $ModuleName)
{
	$IsExist = $false
	if ([string]::IsNullOrEmpty($ModuleName) )
	{
		return $IsExist
	}
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	$module = Get-Module -ListAvailable -Name $ModuleName
	if ($error.Count -ne 0)
	{
	   $type = $error[0].Exception.GetType()
	   if ([System.Management.Automation.CommandNotFoundException] -eq $type)
	   {
		   $error.Clear()
		   return $IsExist
	   }
       $error.Clear()
	}
	$IsExist = $module -ne $null
	return $IsExist
}
Function Check-BpaRequirement($ModelsToRun,$ImportedAssemblies) 
{
    $IsSrvManager       = Check-Module -ModuleName $SrvModule
	$IsBpaModule        = Check-Module -ModuleName $BpaModule
	$IsSrvManagerLoaded = $false
	$IsBpaModuleLoaded  = $false
	if ($false -eq $IsBpaModule)
	{
		Write-Host $BpaNotSupported 
		return $BpaNotSupportedStatus
	}
	 SafeImportModule -ModuleName $BpaModule -LoadedAssemblies $ImportedAssemblies
	if ( 0 -eq $ImportedAssemblies.Count)
	{
		Write-Host $BpaLoadProblem
		return $BpaNotLoadedStatus
	}
 	if ($true -eq $IsSrvManager)
	{
		$IsSrvManagerLoaded = Load-Module -ModuleName $SrvModule
		if($true -eq $IsSrvManagerLoaded)
		{
			Get-InstalledFeatures -ModelsToRun $ModelsToRun
			
		}
		else
		    {
				$IsModelsLoaded = Get-BpaModels -ModelsToRun $ModelsToRun
				if($false -eq $IsModelsLoaded)
				{
					return $BpaModelsNotLoaded
				}
			}
	}
	else
	    {
				$IsModelsLoaded = Get-BpaModels -ModelsToRun $ModelsToRun
				if($false -eq $IsModelsLoaded)
				{
					return $BpaModelsNotLoaded
				}
		}
	return $BpaSuccess
}
Function Get-BpaModels($ModelsToRun)
{
					$ErrorActionPreference="SilentlyContinue"
					$error.Clear()
	                if($null -eq $ModelsToRun)
					{
						return
					} 
				    $BpaModels = Get-BpaModel
				    if (0 -ne $error.Count)
				    {
						Write-Host $BpaModelLoadProblem
						return $false
					} 
				   
				    foreach($BpaModel in $BpaModels)
					{
						if ([string]::IsNullOrEmpty($BpaModel.Id) )
						{
							continue
						}
						[void]$ModelsToRun.Add($BpaModel.Id) 
					}   
				   
				    return $true
}
Function Get-InstalledFeatures($ModelsToRun)
{
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	if($null -eq $ModelsToRun)
	{
		return
	}
  $WinFeatureToBPAmodel = @{
   "ADRMS"                   = "Microsoft/Windows/ADRMS";
   "Application-Server"      = "Microsoft/Windows/ApplicationServer";
   "AD-Certificate"          = "Microsoft/Windows/CertificateServices";
   "DHCP"                    = "Microsoft/Windows/DHCPServer";
   "AD-Domain-Services"      = "Microsoft/Windows/ADRMS";
   "DNS"                     = "Microsoft/Windows/DNSServer";
   "File-Services"           = "Microsoft/Windows/FileServices";
   "Hyper-V"                 = "Microsoft/Windows/Hyper-V";
   "ADLDS"                   = "Microsoft/Windows/LightweightDirectoryServices" ;
   "NPAS"                    = "Microsoft/Windows/NPAS";
   "Remote-Desktop-Services" = "Microsoft/Windows/TerminalServices";
   "Web-Server"              = "Microsoft/Windows/WebServer";
   "UpdateServices"          = "Microsoft/Windows/UpdateServices";
   "VolumeActivation"        = "Microsoft/Windows/VolumeActivation";
   "Failover-Clustering"     = "Microsoft/Windows/ClusterAwareUpdating";
   "RemoteAccess"            = "Microsoft/Windows/RemoteAccessServer";
   "MSMQ"                    = "Microsoft/Windows/MSMQ";
   "OOB-WSUS"                = "Microsoft/Windows/WSUS";
  }
	foreach ($feature in $WinFeatureToBPAmodel.Keys)
	{
		if ($true -eq (Get-WindowsFeature $feature).Installed)
		{
			$BpaModel = $WinFeatureToBPAmodel[$feature]
			if($false -eq [string]::IsNullOrEmpty($BpaModel) )
			{
				if ($feature -ieq "Failover-Clustering")
				{
					$ClusterName = (Get-ItemProperty -Path "HKLM:\Cluster" -Name "ClusterName").ClusterName
					if ([string]::IsNullOrEmpty($ClusterName))
					{
						continue
					}
				}
				[void]$ModelsToRun.Add($BpaModel)
			}
		}
	}
	$error.Clear()
}
function CreateStatePropertyBag
{
  param ($StateProperty = $StateProperty, $Message = $Message,$momAPI)
  if($null -eq $momAPI)
  {
	  return
  } 
  $SCRIPT_NAME = $MyInvocation.ScriptName
  if ($StateProperty -ne $STATE_SUCCESS -and $StateProperty -ne $STATE_WARNING -and $StateProperty -ne $STATE_ERROR)
  {
    Write-Warning "$SCRIPT_NAME - State property is not properly defined: $StateProperty"
    return
  }
  $ErrorActionPreference="SilentlyContinue"
  $error.Clear()
  $StatePropertyBag = $momAPI.CreateTypedPropertyBag($PROPERTY_TYPE_STATE)
  if ($StatePropertyBag -eq $null)
  {
    Write-Warning "$SCRIPT_NAME - Unable to create state property bag"
    return
  }
  $StatePropertyBag.AddValue('State', $StateProperty)
  Write-Verbose "$SCRIPT_NAME - added state property bag value for state $StateProperty"
  if ($Message -ne $null)
  {
    $StatePropertyBag.AddValue('Message', $Message)
    Write-Verbose "$SCRIPT_NAME - added state property bag value for message $Message"
  }
  # Submitting state property bag
  $StatePropertyBag
  #Write-Host "$SCRIPT_NAME - state property bag returned"
}
Function Get-BpaResults
{
        param ([string]$BPAModel,[ref]$WarnCount,[ref]$ErrorCount)
        $ErrorActionPreference = "SilentlyContinue"
		$error.Clear()
        $BPAResults = (Get-BPAResult -ModelId $BPAModel ) | Where-Object {$_.Severity -eq "Warning" -or $_.Severity -eq "Error"}
        $WarnCount.Value  = 0
	    $ErrorCount.Value = 0
	    $wCount = 0
	    $eCount = 0 
	     
		if (0 -ne $error.Count -and $null -eq $BPAResults)
		{
			
			return
		}
	    $Warnings = $BPAResults | Where-Object {$_.Severity -eq "Warning"}
	    $Errors   = $BPAResults | Where-Object {$_.Severity -eq "Errors"}
        if ($null -ne  $Warnings )
        {
			$wCount =  $Warnings.Count
			$WarnCount.Value = $wCount
		}
        if ($null -ne  $Errors )
        {
			$eCount =  $Errors.Count
			$ErrorCount.Value = $eCount
		}
            
}
Function Get-AllBpaResults 
{
        param ($BPAModels,[ref]$WarnCount,[ref]$ErrorCount)
        $ErrorActionPreference = "SilentlyContinue"
		$error.Clear()
	    $Warn  = 0 
		$Err   = 0
	    $Warns = 0
	    $Errors = 0    
        foreach($BPAModel in $BPAModels)
		{
		  Get-BpaResults -BPAModel $BPAModel -WarnCount ([ref]$Warn) -ErrorCount ([ref]$Err)
          $Warns  = $Warns + $Warn
          $Errors = $Errrors + $Err
		}
	    
	   $WarnCount.Value   = $Warns
	   $ErrorCount.Value  = $Errors
}
function SafeImportModule()
{
  param ($ModuleName = $ModuleName,$LoadedAssemblies)
  $LOCAL_SYSTEM_SRC = "SafetyImportModule"
  $LOCAL_SYSTEM_ID = 104
  $NestedModulesMarker = "NestedModules*"
  $AssemblyMarker = "dll"
  $ErrorActionPreference = "SilentlyContinue"
  $error.Clear()
  $SCRIPT_NAME = $MyInvocation.ScriptName
  if ($null -eq $LoadedAssemblies -or [string]::IsNullOrEmpty($ModuleName) )
  {
	  return 
  }
  $Module = Get-Module -ListAvailable -Name $ModuleName
  if ($null -eq $Module )
  {
	  return 
  }
  $NestedModulesString = cat $Module.Path | Where-object {$_ -like $NestedModulesMarker}
 
	if ([string]::IsNullOrEmpty($NestedModulesString))
	{
	  return 
	}
     $AssemblyCollection = $NestedModulesString.Split((",","'"),[System.StringSplitOptions]::RemoveEmptyEntries) | Where-Object {$_.Contains($AssemblyMarker)}
     foreach ($AssemblyName in $AssemblyCollection) 
     {
       $AssemblyFullPath = Join-Path $Module.ModuleBase $AssemblyName
       try
       { 
         $Assembly = [System.Reflection.Assembly]::LoadFile($AssemblyFullPath)
         Import-Module -Assembly $Assembly
         [void]$LoadedAssemblies.Add($Assembly.Location)
       }
       catch [System.IO.FileLoadException]
       {
          $momAPI.LogScriptEvent($LOCAL_SYSTEM_SRC, $LOCAL_SYSTEM_ID, $EVENT_TYPE_ERROR, $SCRIPT_NAME + "Could not load {0}" -f $AssemblyFullPath)
		  $LoadedAssemblies.Clear()
		  break
       }
       catch [System.IO.FileNotFoundException]
       {
          $momAPI.LogScriptEvent($LOCAL_SYSTEM_SRC, $LOCAL_SYSTEM_ID, $EVENT_TYPE_ERROR, $SCRIPT_NAME + "File {0} Not Found" -f $AssemblyFullPath)
		  $LoadedAssemblies.Clear()
		  break
       }
     }
  
}
function RemoveImportedAssembly
{
  param ($AssemblyName = $AssemblyName)
  $Modules = Get-Module
  foreach($Module in $Modules)
  {
    if ($Module.Path -ieq $AssemblyName)
      {
        Remove-Module $Module 
      }
  }
}
Function Unload-Modules($ImportedAssemblies)
{
 	foreach ($ImportedAssembly in $ImportedAssemblies)
	{
		RemoveImportedAssembly($ImportedAssembly)
	}
}
                                $Config/ScriptBody$
                               
                    </ScriptBody><SnapIns>$Config/SnapIns$</SnapIns><Parameters>$Config/Parameters$</Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><StrictErrorHandling>$Config/StrictErrorHandling$</StrictErrorHandling></ProbeAction></MemberModules><Composition><Node ID="PowerShellPA" /></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.Windows.Server.10.0.PowerShellPerformanceProbe" Accessibility="Public" Batching="false" PassThrough="false"><Configuration><IncludeSchemaTypes><SchemaType>Windows!Microsoft.Windows.PowerShellSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ScriptName" type="NonNullString" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="PSparam" type="xsd:string" minOccurs="0" maxOccurs="1" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ScriptBody" type="NonNullString" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SnapIns" type="SnapInsType" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Parameters" type="NamedParametersType" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="StrictErrorHandling" type="xsd:boolean" minOccurs="0" maxOccurs="1" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="PowerShellPA"
TypeID="Microsoft.Windows.Server.10.0.PowerShellPropertyBagProbe"><ScriptName>$Config/ScriptName$</ScriptName><PSparam>$Config/PSparam$</PSparam><ScriptBody>$Config/ScriptBody$</ScriptBody><SnapIns>$Config/SnapIns$</SnapIns><Parameters>$Config/Parameters$</Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><StrictErrorHandling>$Config/StrictErrorHandling$</StrictErrorHandling></ProbeAction><ConditionDetection ID="PerfMapper" TypeID="SystemPerf!System.Performance.DataGenericMapper"><ObjectName>$Data/Property[@Name='PerfObject']$</ObjectName><CounterName>$Data/Property[@Name='PerfCounter']$</CounterName><InstanceName>$Data/Property[@Name='PerfInstance']$</InstanceName><Value>$Data/Property[@Name='PerfValue']$</Value></ConditionDetection></MemberModules><Composition><Node ID="PerfMapper"><Node ID="PowerShellPA"
/></Node></Composition></Composite></ModuleImplementation><OutputType>SystemPerf!System.Performance.Data</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.HealthService.UpdateAgent.ProbScript.Action" Accessibility="Public" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetVersion" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" maxOccurs="1" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AgentVersion" type="xsd:string" /></Configuration><OverrideableParameters><OverrideableParameter ID="TargetVersion" Selector="$Config/TargetVersion$" ParameterType="string" /><OverrideableParameter
ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /><ProbeAction ID="Script" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe"><ScriptName>UpdateAgentCheck.ps1</ScriptName><ScriptBody>
									
                  Param( $TargetVersion, $AgentVersion)
                  $SCRIPT_NAME = "UpdateAgentCheck.ps1"
				  try {
				  $momAPI = New-Object -comObject 'MOM.ScriptAPI'
					$bag = $momAPI.CreatePropertyBag()
					$bag.AddValue("AgentVersion",$AgentVersion)
					
					if (-not ([string]::IsNullOrEmpty($AgentVersion)))
						{
						   if ([System.Version]$AgentVersion -lt [System.Version]$targetVersion)
						   {
								$AgentCfg = New-Object -ComObject AgentConfigManager.MgmtSvcCfg
								$AgentSupportsOMS = $AgentCfg | Get-Member -Name ‘GetCloudWorkspaces’
										 # Get all configured OMS Workspaces
										  $Var = $AgentCfg.GetCloudWorkspaces()
										  if($var -ne $null)
										  {
											$bag.AddValue("UpdateAgentRequired", "True")
											$bag.AddValue("State", "Warning")
												$momAPI.LogScriptEvent($SCRIPT_NAME,1238, 0, $AgentVersion);
										  }
										  else
										  {
  											$bag.AddValue("UpdateAgentRequired", "False")
											 $bag.AddValue("State", "Healthy")
										  }
						   }
						   else
						   {
							$bag.AddValue("UpdateAgentRequired", "False")
							 $bag.AddValue("State", "Healthy") 
						   }
					   }
				   }
				   catch
				   {
				   	$momAPI.LogScriptEvent($SCRIPT_NAME,1235, 0, $_.Exception.Message);	
				    $bag.AddValue("UpdateAgentRequired", "False")
					$bag.AddValue("State", "Healthy")
				   }
     $bag
                  
								</ScriptBody><Parameters><Parameter><Name>TargetVersion</Name><Value>$Config/TargetVersion$</Value></Parameter><Parameter><Name>AgentVersion</Name><Value>$Config/AgentVersion$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><StrictErrorHandling>true</StrictErrorHandling></ProbeAction></MemberModules><Composition><Node ID="Script"><Node ID="PassThrough" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.PropertyBagData</OutputType><TriggerOnly>true</TriggerOnly></ProbeActionModuleType><ConditionDetectionModuleType ID="Microsoft.Windows.Server.10.0.NetworkAdapter.BandwidthUsed.ConditionDetection.ModuleType" Accessibility="Internal" Batching="false" Stateful="true" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Tolerance" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1"
name="ToleranceType"><xsd:simpleType><xsd:restriction base="xsd:string"><xsd:enumeration value="Absolute" /><xsd:enumeration value="Percentage" /></xsd:restriction></xsd:simpleType></xsd:element><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="MaximumSampleSeparation" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ReturnedObjectName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="MonitoringObjectName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Frequency" type="xsd:integer" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><ConditionDetection ID="TargetExpression"
TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery>$Config/ReturnedObjectName$</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>$Config/MonitoringObjectName$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="OptimizedFilter" TypeID="SystemPerf!System.Performance.OptimizedCollectionFilter"><Tolerance>$Config/Tolerance$</Tolerance><ToleranceType>$Config/ToleranceType$</ToleranceType><MaximumSampleSeparation>$Config/MaximumSampleSeparation$</MaximumSampleSeparation><SamplingPeriodInSeconds>$Config/Frequency$</SamplingPeriodInSeconds></ConditionDetection></MemberModules><Composition><Node ID="OptimizedFilter"><Node ID="TargetExpression"
/></Node></Composition></Composite></ModuleImplementation><OutputType>SystemPerf!System.Performance.Data</OutputType><InputTypes><InputType>SystemPerf!System.Performance.Data</InputType></InputTypes></ConditionDetectionModuleType><WriteActionModuleType ID="Microsoft.Windows.PSScriptWriteAction" Accessibility="Public" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>System!System.ParamListSchema</SchemaType><SchemaType>System!System.CommandExecuterSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ScriptName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Arguments" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ScriptBody" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SecureInput" minOccurs="0" maxOccurs="1"><xsd:simpleType><xsd:restriction base="xsd:string"><xsd:maxLength value="256"
/></xsd:restriction></xsd:simpleType></xsd:element><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="0" maxOccurs="1" name="EventPolicy" type="CommandExecuterEventPolicyType" /></Configuration><OverrideableParameters><OverrideableParameter ID="Arguments" Selector="$Config/Arguments$" ParameterType="string" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA1" TypeID="System!System.CommandExecuter"><ApplicationName>%WINDIR%\system32\WindowsPowerShell\v1.0\powershell.exe</ApplicationName><WorkingDirectory /><CommandLine>-nologo -command "&amp; '$File/$Config/ScriptName$$'"
$Config/Arguments$</CommandLine><SecureInput>$Config/SecureInput$</SecureInput><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><RequireOutput>true</RequireOutput><Files><File><Name>$Config/ScriptName$</Name><Contents>$Config/ScriptBody$</Contents><Unicode>true</Unicode></File></Files><DefaultEventPolicy><StdOutMatches /><StdErrMatches>\a+</StdErrMatches><ExitCodeMatches>[^0]+</ExitCodeMatches></DefaultEventPolicy><EventPolicy>$Config/EventPolicy$</EventPolicy></WriteAction></MemberModules><Composition><Node ID="WA1" /></Composition></Composite></ModuleImplementation><OutputType>System!System.CommandOutput</OutputType><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.Windows.Server.10.0.Monitoring.BPA.Task.WA.ModuleType" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IncludeCompliant" type="xsd:boolean"
/></Configuration><OverrideableParameters><OverrideableParameter ID="IncludeCompliant" Selector="$Config/IncludeCompliant$" ParameterType="bool" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA" TypeID="Microsoft.Windows.PSScriptWriteAction"><ScriptName>Microsoft.Windows.Server.10.0.Monitoring.BPA.ShowBPAresults.Script.ps1</ScriptName><Arguments>"-IncludeCompliant '$Config/IncludeCompliant$'"</Arguments><ScriptBody>
Param($IncludeCompliant)
# State type constants
$STATE_SUCCESS = "Success"
$STATE_WARNING = "Warning"
$STATE_ERROR = "Analysis"
$WarningRulesCount     = 0
$ErrorRulesCount       = 0
$BpaNotSupportedStatus = 1
$BpaNotLoadedStatus    = 2
$BpaModelsNotLoaded    = 3
$BpaSuccess            = 0
$SrvModule             = "ServerManager"
$BpaModule             = "BestPractices"
$BpaInitFailed         = "BPA Task Initialization failed." 
$BpaNotSupported       = "There are no Best Practices Analyzer modules found. Scan result is not supported on this Operating System." 
$BpaLoadProblem        = "Can not load BPA Scan Module"
$BpaModelLoadProblem   = "Can not get BPA Models"
$Description           = "There are no Best Practices Analyzer modules found."
$DESCRIPTION_NOMODULES = "There are no Best Practices Analyzer modules found."
$DESCRIPTION_WARNING   = "Best Practices Analyzer compliance verification was completed successfully with {0} warnings and {1} errors."
$DESCRIPTION_ERROR     = "Best Practices Analyzer can not complete compliance verification."
$BpaResultLoadFailed   = "Best Practices Analyzer can not get result"
$BpaCategoryError      = "ResourceUnavailable"
$BpaScanNotRun         = "BPA scan was not run or was not completed successfuly."
$BpaScanMonitor        = "Enable Windows Server 2016 Operating System BPA Monitor"
$BpaEmptyResults       = "BPA scan does not return any result."
$BpaErrorResults       = "Can not get Best Practices Analyzer compliance result. Command was completed with errors. Error: {0} ."
$BpaScanMode           = "Analysis"
Function Get-BpaWarningsAndErrorCounts($Detail,[ref]$WarningRulesCount,[ref]$ErrorRulesCount)
{
	if([string]::IsNullOrEmpty($Detail))
	{
		return
	}
	$WarningCount = 0
	$ErrorCount  = 0
	foreach($scanDetail in $Detail)
	{
		if ($BpaScanMode -eq $scanDetail.ScanMode)
		{
			$tWarninCount = 0
			$tErrorCount  = 0
		  	Get-BpaCountFromDetail -Detail $scanDetail -WarningMessages ([ref] $tWarninCount) -ErrorMessages ([ref] $tErrorCount)
			$WarningCount += $tWarninCount
			$ErrorCount   += $tErrorCount
		}
		else
		    {
				continue
			}
	}
	$WarningRulesCount.Value = $WarningCount
	$ErrorRulesCount.Value   = $ErrorCount
}
Function Get-BpaCountFromDetail($Detail,[ref]$WarningMessages,[ref]$ErrorMessages)
{
	if([string]::IsNullOrEmpty($Detail))
	{
		return $null
	}
   if([Microsoft.BestPractices.CoreInterface.InvokeBpaModelOutputDetail] -ne $Detail.GetType())
   {
	   retrun $null
   }
	$WarnCount  = 0
	$ErrorCount = 0
	[int]::TryParse($Detail.WarningMessages,[ref]$WarnCount)
	[int]::TryParse($Detail.ErrorMessages,[ref]$WarnCount)
	$WarningMessages.Value = $WarnCount
	$ErrorMessages.Value   = $ErrorCount
	return 0
}
Function Convert-ToBoolean([string] $sBool)
 {
    [bool] $result  = $false
    [bool] $iresult = $false
    if ($false -eq [string]::IsNullOrEmpty($sBool) )
    {
       $result  = $sBool.Equals("true",[System.StringComparison]::InvariantCultureIgnoreCase)
       $iresult = $sBool.Equals("1",[System.StringComparison]::InvariantCultureIgnoreCase)
       $result  = $result -or $iresult
    }
    
    return $result
 }
Function Load-Module ([string] $ModuleName)
{
	if ([string]::IsNullOrEmpty($ModuleName) )
	{
		return $false
	}
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	$retval = $false
	$cim = Get-Module -Name $ModuleName
	########Check for powershell 1.0
	if ($error.Count -ne 0)
	{
	   $type = $error[0].Exception.GetType()
	   if ([System.Management.Automation.CommandNotFoundException] -eq $type)
	   {
		   $error.Clear()
		   return $retval
	   }
       $error.Clear()
	}
	if ($null -eq $cim)
	{
			Import-Module $ModuleName
		    if ($error.Count -eq 0)
		    {
				$retval = $true
			}
			
		   $error.Clear()
	}
	else
	    {
			$retval = $true
		}
	return $retval
}
Function Check-Module([string] $ModuleName)
{
	$IsExist = $false
	if ([string]::IsNullOrEmpty($ModuleName) )
	{
		return $IsExist
	}
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	$module = Get-Module -ListAvailable -Name $ModuleName
	if ($error.Count -ne 0)
	{
	   $type = $error[0].Exception.GetType()
	   if ([System.Management.Automation.CommandNotFoundException] -eq $type)
	   {
		   $error.Clear()
		   return $IsExist
	   }
       $error.Clear()
	}
	$IsExist = $module -ne $null
	return $IsExist
}
Function Check-BpaRequirement($ModelsToRun,$ImportedAssemblies) 
{
    $IsSrvManager       = Check-Module -ModuleName $SrvModule
	$IsBpaModule        = Check-Module -ModuleName $BpaModule
	$IsSrvManagerLoaded = $false
	$IsBpaModuleLoaded  = $false
	if ($false -eq $IsBpaModule)
	{
		Write-Host $BpaNotSupported 
		return $BpaNotSupportedStatus
	}
	 SafeImportModule -ModuleName $BpaModule -LoadedAssemblies $ImportedAssemblies
	if ( 0 -eq $ImportedAssemblies.Count)
	{
		Write-Host $BpaLoadProblem
		return $BpaNotLoadedStatus
	}
 	if ($true -eq $IsSrvManager)
	{
		$IsSrvManagerLoaded = Load-Module -ModuleName $SrvModule
		if($true -eq $IsSrvManagerLoaded)
		{
			Get-InstalledFeatures -ModelsToRun $ModelsToRun
			
		}
		else
		    {
				$IsModelsLoaded = Get-BpaModels -ModelsToRun $ModelsToRun
				if($false -eq $IsModelsLoaded)
				{
					return $BpaModelsNotLoaded
				}
			}
	}
	else
	    {
				$IsModelsLoaded = Get-BpaModels -ModelsToRun $ModelsToRun
				if($false -eq $IsModelsLoaded)
				{
					return $BpaModelsNotLoaded
				}
		}
	return $BpaSuccess
}
Function Get-BpaModels($ModelsToRun)
{
					$ErrorActionPreference="SilentlyContinue"
					$error.Clear()
	                if($null -eq $ModelsToRun)
					{
						return
					} 
				    $BpaModels = Get-BpaModel
				    if (0 -ne $error.Count)
				    {
						Write-Host $BpaModelLoadProblem
						return $false
					} 
				   
				    foreach($BpaModel in $BpaModels)
					{
						if ([string]::IsNullOrEmpty($BpaModel.Id) )
						{
							continue
						}
						[void]$ModelsToRun.Add($BpaModel.Id) 
					}   
				   
				    return $true
}
Function Get-InstalledFeatures($ModelsToRun)
{
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	if($null -eq $ModelsToRun)
	{
		return
	}
  $WinFeatureToBPAmodel = @{
   "ADRMS"                   = "Microsoft/Windows/ADRMS";
   "Application-Server"      = "Microsoft/Windows/ApplicationServer";
   "AD-Certificate"          = "Microsoft/Windows/CertificateServices";
   "DHCP"                    = "Microsoft/Windows/DHCPServer";
   "AD-Domain-Services"      = "Microsoft/Windows/ADRMS";
   "DNS"                     = "Microsoft/Windows/DNSServer";
   "File-Services"           = "Microsoft/Windows/FileServices";
   "Hyper-V"                 = "Microsoft/Windows/Hyper-V";
   "ADLDS"                   = "Microsoft/Windows/LightweightDirectoryServices" ;
   "NPAS"                    = "Microsoft/Windows/NPAS";
   "Remote-Desktop-Services" = "Microsoft/Windows/TerminalServices";
   "Web-Server"              = "Microsoft/Windows/WebServer";
   "UpdateServices"          = "Microsoft/Windows/UpdateServices";
   "VolumeActivation"        = "Microsoft/Windows/VolumeActivation";
   "Failover-Clustering"     = "Microsoft/Windows/ClusterAwareUpdating";
   "RemoteAccess"            = "Microsoft/Windows/RemoteAccessServer";
   "MSMQ"                    = "Microsoft/Windows/MSMQ";
   "OOB-WSUS"                = "Microsoft/Windows/WSUS";
  }
	foreach ($feature in $WinFeatureToBPAmodel.Keys)
	{
		if ($true -eq (Get-WindowsFeature $feature).Installed)
		{
			$BpaModel = $WinFeatureToBPAmodel[$feature]
			if($false -eq [string]::IsNullOrEmpty($BpaModel) )
			{
				if ($feature -ieq "Failover-Clustering")
				{
					$ClusterName = (Get-ItemProperty -Path "HKLM:\Cluster" -Name "ClusterName").ClusterName
					if ([string]::IsNullOrEmpty($ClusterName))
					{
						continue
					}
				}
				[void]$ModelsToRun.Add($BpaModel)
			}
		}
	}
	$error.Clear()
}
function CreateStatePropertyBag
{
  param ($StateProperty = $StateProperty, $Message = $Message,$momAPI)
  if($null -eq $momAPI)
  {
	  return
  } 
  $SCRIPT_NAME = $MyInvocation.ScriptName
  if ($StateProperty -ne $STATE_SUCCESS -and $StateProperty -ne $STATE_WARNING -and $StateProperty -ne $STATE_ERROR)
  {
    Write-Warning "$SCRIPT_NAME - State property is not properly defined: $StateProperty"
    return
  }
  $ErrorActionPreference="SilentlyContinue"
  $error.Clear()
  $StatePropertyBag = $momAPI.CreateTypedPropertyBag($PROPERTY_TYPE_STATE)
  if ($StatePropertyBag -eq $null)
  {
    Write-Warning "$SCRIPT_NAME - Unable to create state property bag"
    return
  }
  $StatePropertyBag.AddValue('State', $StateProperty)
  Write-Verbose "$SCRIPT_NAME - added state property bag value for state $StateProperty"
  if ($Message -ne $null)
  {
    $StatePropertyBag.AddValue('Message', $Message)
    Write-Verbose "$SCRIPT_NAME - added state property bag value for message $Message"
  }
  # Submitting state property bag
  $StatePropertyBag
  #Write-Host "$SCRIPT_NAME - state property bag returned"
}
Function Get-BpaResults
{
        param ([string]$BPAModel,[ref]$WarnCount,[ref]$ErrorCount)
        $ErrorActionPreference = "SilentlyContinue"
		$error.Clear()
        $BPAResults = (Get-BPAResult -ModelId $BPAModel ) | Where-Object {$_.Severity -eq "Warning" -or $_.Severity -eq "Error"}
        $WarnCount.Value  = 0
	    $ErrorCount.Value = 0
	    $wCount = 0
	    $eCount = 0 
	     
		if (0 -ne $error.Count -and $null -eq $BPAResults)
		{
			
			return
		}
	    $Warnings = $BPAResults | Where-Object {$_.Severity -eq "Warning"}
	    $Errors   = $BPAResults | Where-Object {$_.Severity -eq "Errors"}
        if ($null -ne  $Warnings )
        {
			$wCount =  $Warnings.Count
			$WarnCount.Value = $wCount
		}
        if ($null -ne  $Errors )
        {
			$eCount =  $Errors.Count
			$ErrorCount.Value = $eCount
		}
            
}
Function Get-AllBpaResults 
{
        param ($BPAModels,[ref]$WarnCount,[ref]$ErrorCount)
        $ErrorActionPreference = "SilentlyContinue"
		$error.Clear()
	    $Warn  = 0 
		$Err   = 0
	    $Warns = 0
	    $Errors = 0    
        foreach($BPAModel in $BPAModels)
		{
		  Get-BpaResults -BPAModel $BPAModel -WarnCount ([ref]$Warn) -ErrorCount ([ref]$Err)
          $Warns  = $Warns + $Warn
          $Errors = $Errrors + $Err
		}
	    
	   $WarnCount.Value   = $Warns
	   $ErrorCount.Value  = $Errors
}
function SafeImportModule()
{
  param ($ModuleName = $ModuleName,$LoadedAssemblies)
  $LOCAL_SYSTEM_SRC = "SafetyImportModule"
  $LOCAL_SYSTEM_ID = 104
  $NestedModulesMarker = "NestedModules*"
  $AssemblyMarker = "dll"
  $ErrorActionPreference = "SilentlyContinue"
  $error.Clear()
  $SCRIPT_NAME = $MyInvocation.ScriptName
  if ($null -eq $LoadedAssemblies -or [string]::IsNullOrEmpty($ModuleName) )
  {
	  return 
  }
  $Module = Get-Module -ListAvailable -Name $ModuleName
  if ($null -eq $Module )
  {
	  return 
  }
  $NestedModulesString = cat $Module.Path | Where-object {$_ -like $NestedModulesMarker}
 
	if ([string]::IsNullOrEmpty($NestedModulesString))
	{
	  return 
	}
     $AssemblyCollection = $NestedModulesString.Split((",","'"),[System.StringSplitOptions]::RemoveEmptyEntries) | Where-Object {$_.Contains($AssemblyMarker)}
     foreach ($AssemblyName in $AssemblyCollection) 
     {
       $AssemblyFullPath = Join-Path $Module.ModuleBase $AssemblyName
       try
       { 
         $Assembly = [System.Reflection.Assembly]::LoadFile($AssemblyFullPath)
         Import-Module -Assembly $Assembly
         [void]$LoadedAssemblies.Add($Assembly.Location)
       }
       catch [System.IO.FileLoadException]
       {
          $momAPI.LogScriptEvent($LOCAL_SYSTEM_SRC, $LOCAL_SYSTEM_ID, $EVENT_TYPE_ERROR, $SCRIPT_NAME + "Could not load {0}" -f $AssemblyFullPath)
		  $LoadedAssemblies.Clear()
		  break
       }
       catch [System.IO.FileNotFoundException]
       {
          $momAPI.LogScriptEvent($LOCAL_SYSTEM_SRC, $LOCAL_SYSTEM_ID, $EVENT_TYPE_ERROR, $SCRIPT_NAME + "File {0} Not Found" -f $AssemblyFullPath)
		  $LoadedAssemblies.Clear()
		  break
       }
     }
  
}
function RemoveImportedAssembly
{
  param ($AssemblyName = $AssemblyName)
  $Modules = Get-Module
  foreach($Module in $Modules)
  {
    if ($Module.Path -ieq $AssemblyName)
      {
        Remove-Module $Module 
      }
  }
}
Function Unload-Modules($ImportedAssemblies)
{
 	foreach ($ImportedAssembly in $ImportedAssemblies)
	{
		RemoveImportedAssembly($ImportedAssembly)
	}
}
function WriteBPAResult
{
        param ([Microsoft.BestPractices.CoreInterface.Result]$BPAResult, [boolean]$IncludeAll)
        $Delimiter = New-Object String("-",12)
        if ($BPAResult.Problem -eq $null)
        {
            if ($IncludeAll)
            {
                Write-Host $(-Join("Title      : ", $BPAResult.Title))
                Write-Host $(-Join("Compliance : ", $BPAResult.Compliance))
        	    Write-Host $Delimiter
            }
        }
        else
        {
            Write-Host $(-Join("Title      : ", $BPAResult.Title))
            Write-Host $(-Join("Problem    : ", $BPAResult.Problem))
            Write-Host $(-Join("Impact     : ", $BPAResult.Impact))
            Write-Host $(-Join("Resolution : ", $BPAResult.Resolution))
    	    Write-Host $Delimiter
        }
 }
    
function WriteModelResults
    {
        param ([string]$BPAModel, [boolean]$IncludeAll)
        $ErrorActionPreference = "SilentlyContinue"
		$error.Clear()
        $BPAResults = Get-BPAResult -ModelId $BPAModel -ErrorAction SilentlyContinue
		if (0 -ne $error.Count -and $null -eq $BPAResults)
		{
			
			if ($BpaCategoryError -ieq $error[0].CategoryInfo.Category)
			{
				Write-Host $BpaScanNotRun 
				Write-Host $BpaScanMonitor
			}
			else 
			    {
					$msg = $error[0].Exception.Message
					$msg = $BpaErrorResults  -f $msg
					Write-Host $msg
				}
			return
		}
        if ($null -eq $BPAResults )
        {
				Write-Host $BpaEmptyResults 
			    return
		}
            $NotCompliantResults = $BPAResults | Where-Object {$_.Problem -ne $null}
            
            [boolean] $IsModelCompliant = [boolean]($NotCompliantResults -eq $null)
            
            if ($false -eq $IsModelCompliant -or $true -eq $IncludeAll)
            {
                Write-Host "Server Role: "  $BPAModel
                $RoleSeparator = New-Object String("=", [int] (14 + $BPAModel.Id.Length))
                Write-Host $RoleSeparator
            }
            
            foreach ($BPAResult in $BPAResults)
            {
               WriteBPAResult -BPAResult $BPAResult -IncludeAll $IncludeAll
            }
            
    }
Function Run-BPAResult()
{
	$ErrorActionPreference = "SilentlyContinue"
	$error.Clear()
	$BpaModels          = New-Object System.Collections.ArrayList($null) 
	$ImportedAssemblies = New-Object System.Collections.ArrayList($null)
	
	if (0 -ne $error.Count)
	{
      Write-Host $BpaInitFailed 
	  return
	}
	$iResult = Check-BpaRequirement -ModelsToRun $BpaModels -ImportedAssemblies $ImportedAssemblies
	if ($BpaSuccess -ne $iResult)
	{
		if ($BpaModelLoadProblem -eq $iResult)
		{
            Unload-Modules -ImportedAssemblies $ImportedAssemblies
	    }
		return
	}
	$IncludeAll = Convert-ToBoolean -sBool $IncludeCompliant
	foreach ($BPAModel in $BPAModels)
	{
		WriteModelResults -BPAModel $BPAModel -IncludeAll $IncludeAll
	}
	Unload-Modules -ImportedAssemblies $ImportedAssemblies
}
Run-BPAResult</ScriptBody><TimeoutSeconds>300</TimeoutSeconds></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><OutputType>System!System.CommandOutput</OutputType><InputType>System!System.BaseData</InputType></WriteActionModuleType></ModuleTypes><MonitorTypes><UnitMonitorType ID="Microsoft.SystemCenter.HealthService.UpdateAgent.ProbScript" Accessibility="Internal" RunAs="System!System.PrivilegedMonitoringAccount"><MonitorTypeStates><MonitorTypeState ID="Error" NoDetection="false" /><MonitorTypeState ID="Warning" NoDetection="false" /><MonitorTypeState ID="Success" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetVersion" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SyncTime" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AgentVersion" type="xsd:string" /></Configuration><OverrideableParameters><OverrideableParameter ID="TargetVersion" Selector="$Config/TargetVersion$" ParameterType="string" /><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="Schedule" TypeID="System!System.SimpleScheduler"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><SyncTime>$Config/SyncTime$</SyncTime></DataSource><ProbeAction ID="Probe"
TypeID="Microsoft.SystemCenter.HealthService.UpdateAgent.ProbScript.Action"><TargetVersion>$Config/TargetVersion$</TargetVersion><ComputerName>$Config/ComputerName$</ComputerName><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><AgentVersion>$Config/AgentVersion$</AgentVersion></ProbeAction><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /><ConditionDetection ID="InstanceFilter" TypeID="System!System.ExpressionFilter"><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='UpdateAgentRequired']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">True</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='UpdateAgentRequired']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">False</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></ConditionDetection><ConditionDetection ID="ErrorFilter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='UpdateAgentRequired']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">True</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="WarningFilter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='UpdateAgentRequired']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">True</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="SuccessFilter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="String">Property[@Name='UpdateAgentRequired']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">False</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="Warning"><Node ID="WarningFilter"><Node ID="InstanceFilter"><Node ID="Probe"><Node ID="Schedule" /></Node></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="Success"><Node ID="SuccessFilter"><Node ID="InstanceFilter"><Node ID="Probe"><Node ID="Schedule" /></Node></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.Windows.Server.10.0.NetworkAdapter.PercentBandwidthUsed.MonitorType" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="HealthyState" NoDetection="false" /><MonitorTypeState ID="WarningState" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="InstanceName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="CounterName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Threshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="NumOfSamples" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IsDiscoverDisabled" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IsUseMacAddress" type="xsd:boolean" /></Configuration><OverrideableParameters><OverrideableParameter ID="Threshold"
Selector="$Config/Threshold$" ParameterType="double" /><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="NumOfSamples" Selector="$Config/NumOfSamples$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS" TypeID="Microsoft.Windows.Server.10.0.NetworkAdapter.BandwidthUsed.ModuleType"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><IsDiscoverDisabled>$Config/IsDiscoverDisabled$</IsDiscoverDisabled><IsUseMacAddress>$Config/IsUseMacAddress$</IsUseMacAddress><ComputerName>$Config/ComputerName$</ComputerName><InstanceName>$Config/InstanceName$</InstanceName><CounterName>$Config/CounterName$</CounterName></DataSource><ConditionDetection ID="TargetFilter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="String">/DataItem/InstanceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/InstanceName$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="SamplesCondition" TypeID="SystemPerf!System.Performance.ConsecutiveSamplesCondition"><Threshold>$Config/Threshold$</Threshold><Direction>greaterequal</Direction></ConditionDetection><ConditionDetection ID="FilterOk" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">Value</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Integer">$Config/NumOfSamples$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="FilterNotOk" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="Integer">Value</XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value Type="Integer">$Config/NumOfSamples$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="HealthyState"><Node ID="FilterOk"><Node ID="SamplesCondition"><Node ID="TargetFilter"><Node ID="DS" /></Node></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="WarningState"><Node ID="FilterNotOk"><Node ID="SamplesCondition"><Node ID="TargetFilter"><Node ID="DS" /></Node></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.Windows.Server.10.0.CPUUtilization.Monitortype" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="CPUUtilizationNormal" NoDetection="false" /><MonitorTypeState ID="CPUUtilizationHigh" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CPUPercentageThreshold" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CPUQueueLengthThreshold" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="NumSamples" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CounterName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ObjectName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InstanceName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AllInstances" type="xsd:boolean"
/></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /><OverrideableParameter ID="CPUPercentageThreshold" Selector="$Config/CPUPercentageThreshold$" ParameterType="int" /><OverrideableParameter ID="CPUQueueLengthThreshold" Selector="$Config/CPUQueueLengthThreshold$" ParameterType="int" /><OverrideableParameter ID="NumSamples" Selector="$Config/NumSamples$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS1"
TypeID="Microsoft.Windows.Server.10.0.CPUUtilization.ModuleType"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><TargetComputerName>$Config/TargetComputerName$</TargetComputerName><NumSamples>$Config/NumSamples$</NumSamples><CounterName>$Config/CounterName$</CounterName><ObjectName>$Config/ObjectName$</ObjectName><InstanceName>$Config/InstanceName$</InstanceName><AllInstances>$Config/AllInstances$</AllInstances></DataSource><ProbeAction ID="ProbeActionDS" TypeID="Microsoft.Windows.Server.10.0.PowerShellPropertyBagProbe"><ScriptName>Microsoft.Windows.Server.CPUUtilization.Monitortype.ps1</ScriptName><PSparam>param ($CPU_PERCENTAGE_THRESHOLD, $CPU_QUEUELEN_THRESHOLD, $TargetComputer, $CPU_USAGE)</PSparam><ScriptBody>
#Copyright (c) Microsoft Corporation. All rights reserved.
                      
# Parameters that should be passed to this script
# 0 CPU_PERCENTAGE_THRESHOLD
# 1 CPU_QUEUELEN_THRESHOLD
# 2 Computer (FQDN)
# 3 CPU_USAGE
Function Main()
{    
    if ($CPU_USAGE -lt 0 -or ($CPU_USAGE - $CPU_PERCENTAGE_THRESHOLD -lt 0))
    {
        ReturnResults "GOOD" 0 $CPU_USAGE
        exit
    }
    #
    # Sample the queue length. If we exceed threshold, then we will wait and sample agian
    # to avoid sampling a cpu spike, both have exceeded, then we have a runaway cpu.
    #
    
    $lNumProcessors = GetNumProcessors $TargetComputer
    $nQueueLength = GetCpuQueueLength $TargetComputer
    if ($nQueueLength -gt [long]$CPU_QUEUELEN_THRESHOLD * $lNumProcessors)
    {
        sleep -m 500
        $nQueueLength = GetCpuQueueLength $TargetComputer
        if ($nQueueLength -gt [long]$CPU_QUEUELEN_THRESHOLD * $lNumProcessors)
        {
            ReturnResults "BAD" $nQueueLength $CPU_USAGE
            exit
        }
    }
    ReturnResults "GOOD" $nQueueLength $CPU_USAGE
	Unload-Module -ModuleName "CimCmdLets"
}
Function ReturnResults
{
    param ($State, $QueueLength, $PctUsage)
    $oBag = $momAPI.CreatePropertyBag()
    $oBag.AddValue("State", $State)
    $oBag.AddValue("QueueLength", $QueueLength)
    $oBag.AddValue("PctUsage", $PctUsage)
    $oBag
}
# Windows Server 2003, Windows XP, and Windows 2000: Because the NumberOfLogicalProcessors property
# is not available, NumberOfProcessors indicates the number of logical processors available in the
# system. In the case of a computer system that has two physical processors each containing two
# logical processors, the value of NumberOfProcessors is 4.
# For more information see "http://msdn2.microsoft.com/en-us/library/aa394102(VS.85).aspx"
Function GetNumProcessors($TargetComputer)
{
    $WMISet = WMIGetInstanceEx $TargetComputer "root\cimv2" "Win32_ComputerSystem"
    foreach ($owObj in $WMISet)
    {
        $error.Clear()
        return $owObj.NumberOfLogicalProcessors
        if ($error.Count -ne 0)
        {
            return $owObj.NumberOfProcessors
        }
    }
}
Function GetCpuQueueLength($TargetComputer)
{
    $WMISet = WMIGetInstanceEx $TargetComputer "root\cimv2" "Win32_PerfRawData_PerfOS_System"
    foreach ($owObj in $WMISet)
    {
        return $owObj.ProcessorQueueLength
    }
}
Main
</ScriptBody><Parameters><Parameter><Name>CPU_PERCENTAGE_THRESHOLD</Name><Value>$Config/CPUPercentageThreshold$</Value></Parameter><Parameter><Name>CPU_QUEUELEN_THRESHOLD</Name><Value>$Config/CPUQueueLengthThreshold$</Value></Parameter><Parameter><Name>TargetComputer</Name><Value>$Config/TargetComputerName$</Value></Parameter><Parameter><Name>CPU_USAGE</Name><Value>$Data/Value$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction><ConditionDetection ID="FilterOK" TypeID="System!System.ExpressionFilter"><Expression><RegExExpression><ValueExpression><XPathQuery>Property[@Name='State']</XPathQuery></ValueExpression><Operator>ContainsSubstring</Operator><Pattern>GOOD</Pattern></RegExExpression></Expression></ConditionDetection><ConditionDetection ID="FilterNotOK"
TypeID="System!System.ExpressionFilter"><Expression><RegExExpression><ValueExpression><XPathQuery>Property[@Name='State']</XPathQuery></ValueExpression><Operator>ContainsSubstring</Operator><Pattern>BAD</Pattern></RegExExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="CPUUtilizationNormal"><Node ID="FilterOK"><Node ID="ProbeActionDS"><Node ID="DS1" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="CPUUtilizationHigh"><Node ID="FilterNotOK"><Node ID="ProbeActionDS"><Node ID="DS1" /></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.Windows.Server.10.0.FreeSpace.Monitortype" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="UnderWarningThresholds" NoDetection="false" /><MonitorTypeState ID="OverWarningUnderErrorThresholds" NoDetection="false" /><MonitorTypeState ID="OverErrorThresholds" NoDetection="false"
/></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="DiskLabel" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SystemDriveWarningMBytesThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SystemDriveWarningPercentThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SystemDriveErrorMBytesThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SystemDriveErrorPercentThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1"
name="NonSystemDriveWarningMBytesThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="NonSystemDriveWarningPercentThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="NonSystemDriveErrorMBytesThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="NonSystemDriveErrorPercentThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="NumSamples" type="xsd:double" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="SystemDriveWarningMBytesTheshold" Selector="$Config/SystemDriveWarningMBytesThreshold$" ParameterType="double" /><OverrideableParameter ID="SystemDriveWarningPercentThreshold" Selector="$Config/SystemDriveWarningPercentThreshold$"
ParameterType="double" /><OverrideableParameter ID="SystemDriveErrorMBytesThreshold" Selector="$Config/SystemDriveErrorMBytesThreshold$" ParameterType="double" /><OverrideableParameter ID="SystemDriveErrorPercentThreshold" Selector="$Config/SystemDriveErrorPercentThreshold$" ParameterType="double" /><OverrideableParameter ID="NonSystemDriveWarningMBytesThreshold" Selector="$Config/NonSystemDriveWarningMBytesThreshold$" ParameterType="double" /><OverrideableParameter ID="NonSystemDriveWarningPercentThreshold" Selector="$Config/NonSystemDriveWarningPercentThreshold$" ParameterType="double" /><OverrideableParameter ID="NonSystemDriveErrorMBytesThreshold" Selector="$Config/NonSystemDriveErrorMBytesThreshold$" ParameterType="double" /><OverrideableParameter ID="NonSystemDriveErrorPercentThreshold" Selector="$Config/NonSystemDriveErrorPercentThreshold$" ParameterType="double" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS"
TypeID="Microsoft.Windows.Server.10.0.FreeSpace.Moduletype"><ComputerName>$Config/ComputerName$</ComputerName><DiskLabel>$Config/DiskLabel$</DiskLabel><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><SystemDriveWarningMBytesThreshold>$Config/SystemDriveWarningMBytesThreshold$</SystemDriveWarningMBytesThreshold><SystemDriveWarningPercentThreshold>$Config/SystemDriveWarningPercentThreshold$</SystemDriveWarningPercentThreshold><SystemDriveErrorMBytesThreshold>$Config/SystemDriveErrorMBytesThreshold$</SystemDriveErrorMBytesThreshold><SystemDriveErrorPercentThreshold>$Config/SystemDriveErrorPercentThreshold$</SystemDriveErrorPercentThreshold><NonSystemDriveWarningMBytesThreshold>$Config/NonSystemDriveWarningMBytesThreshold$</NonSystemDriveWarningMBytesThreshold><NonSystemDriveWarningPercentThreshold>$Config/NonSystemDriveWarningPercentThreshold$</NonSystemDriveWarningPercentThreshold><NonSystemDriveErrorMBytesThreshold>$Config/NonSystemDriveErrorMBytesThreshold$</NonSystemDriveEr
rorMBytesThreshold><NonSystemDriveErrorPercentThreshold>$Config/NonSystemDriveErrorPercentThreshold$</NonSystemDriveErrorPercentThreshold></DataSource><ConditionDetection ID="ErrorSamplesCD" TypeID="SystemPerf!System.Performance.ConsecutiveSamplesCondition"><Threshold>2</Threshold><Direction>greaterequal</Direction></ConditionDetection><ConditionDetection ID="HealthySamplesCD" TypeID="SystemPerf!System.Performance.ConsecutiveSamplesCondition"><Threshold>0</Threshold><Direction>lessequal</Direction></ConditionDetection><ConditionDetection ID="SamplesCounter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value Type="Double">$Config/NumSamples$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="WarningCD"
TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Double">1</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="PerfMapper" TypeID="SystemPerf!System.Performance.DataGenericMapper"><ObjectName>Logical Disk</ObjectName><CounterName>Free Space Counter</CounterName><InstanceName>$Config/DiskLabel$</InstanceName><Value>$Data/Property[@Name='DiskState']$</Value></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="UnderWarningThresholds"><Node ID="SamplesCounter"><Node ID="HealthySamplesCD"><Node ID="PerfMapper"><Node ID="DS" /></Node></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="OverWarningUnderErrorThresholds"><Node ID="WarningCD"><Node ID="PerfMapper"><Node ID="DS" /></Node></Node></RegularDetection><RegularDetection
MonitorTypeStateID="OverErrorThresholds"><Node ID="SamplesCounter"><Node ID="ErrorSamplesCD"><Node ID="PerfMapper"><Node ID="DS" /></Node></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.Windows.Server.10.0.LogicalDisk.Monitortype" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="Good" NoDetection="false" /><MonitorTypeState ID="Bad" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DiskLabel" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:int" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds"
Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="ScriptDS" TypeID="Microsoft.Windows.Server.10.0.LogicalDisk.ModuleType"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><TargetComputerName>$Config/TargetComputerName$</TargetComputerName><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></DataSource><ConditionDetection ID="FilterOK" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><RegExExpression><ValueExpression><XPathQuery>Property[@Name='State']</XPathQuery></ValueExpression><Operator>ContainsSubstring</Operator><Pattern>OK</Pattern></RegExExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='DiskLabel']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">$Config/DiskLabel$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="FilterNotOK" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><RegExExpression><ValueExpression><XPathQuery>Property[@Name='State']</XPathQuery></ValueExpression><Operator>ContainsSubstring</Operator><Pattern>BAD</Pattern></RegExExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='DiskLabel']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/DiskLabel$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="Good"><Node ID="FilterOK"><Node ID="ScriptDS" /></Node></RegularDetection><RegularDetection MonitorTypeStateID="Bad"><Node ID="FilterNotOK"><Node ID="ScriptDS"
/></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.Windows.Server.10.0.LogicalDisk.DefragAnalysis.Monitortype" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="Warning" NoDetection="false" /><MonitorTypeState ID="Success" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SchedulerStart" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SchedulerDaysOfWeekMask" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="FilePercentFragmentationThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="UseOSRecommendation" type="xsd:boolean" /></Configuration><OverrideableParameters><OverrideableParameter ID="SchedulerStart" Selector="$Config/SchedulerStart$" ParameterType="string"
/><OverrideableParameter ID="SchedulerDaysOfWeekMask" Selector="$Config/SchedulerDaysOfWeekMask$" ParameterType="int" /><OverrideableParameter ID="FilePercentFragmentationThreshold" Selector="$Config/FilePercentFragmentationThreshold$" ParameterType="double" /><OverrideableParameter ID="UseOSRecommendation" Selector="$Config/UseOSRecommendation$" ParameterType="bool" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Scheduler"><Scheduler><WeeklySchedule><Windows><Daily><Start>$Config/SchedulerStart$</Start><End>$Config/SchedulerStart$</End><DaysOfWeekMask>$Config/SchedulerDaysOfWeekMask$</DaysOfWeekMask></Daily></Windows></WeeklySchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="Script" TypeID="Microsoft.Windows.Server.10.0.PowerShellPropertyBagProbe"><ScriptName>Microsoft.Windows.Server.LogicalDisk.DefragAnalysis.ps1</ScriptName><PSparam>param ($TargetComputer)</PSparam><ScriptBody>
#Copyright (c) Microsoft Corporation. All rights reserved.
                      
# Parameters that should be passed to this script
# 0 Computer (FQDN)
Function Main()
{   
    # Fragmentation analysis requires lots of time and consumes lots of CPU.
    # So it is important to trace such activity in events log in order to be able
    # to understand what is going on.
    $g_DebugFlag = $true
	$IsMsftVolumeSupported = Is_MSFT_Volume_Supported_On_NanoServer $TargetComputer
	$IsVolumeInfoSupported = Is_Win32_Volume_Supported $TargetComputer
	if ($IsMsftVolumeSupported -eq $true) # Win32_Volume is not supported on NanoServer
	{
		Start-DefragAnalysisOnNano -TargetComputer $TargetComputer -momAPI $momAPI
	}
	else
       {
		   if ($false -eq $IsVolumeInfoSupported)
			{ 
				TraceLogMessage ("This Operating System doesn't support volumes WMI class.")
				return
			}
           
		    Start-DefragAnalysis -TargetComputer $TargetComputer -momAPI $momAPI
	   }
   
    Unload-Module -ModuleName "CimCmdLets"
 
}
Function Is_MSFT_Volume_Supported_On_NanoServer($TargetComputer)
{
	$ErrorActionPreference = "SilentlyContinue"
	$error.Clear()
	$bRet = $false
	$IsNano = Is_NanoServer 
	if ($true -eq $IsNano)
	{
		Load-CimModules
	    try
		{
			$cimSessionOption = New-CimSessionOption -Protocol DCOM
			$cimsession = New-CimSession -SessionOption $cimSessionOption 
			$oWMI = Get-CimClass -CimSession $cimsession -NameSpace "root\microsoft\windows\storage" MSFT_Volume -ErrorAction SilentlyContinue
		}
		Finally
		{
			Get-CimSession | Remove-CimSession
			$cimsession =$null
			$cimSessionOption = $null 
		}
		if ($oWMI -ne $null)
		{
			$bRet = $true
		}
	}
	return $bRet
}
Function Start-DefragAnalysisOnNano($TargetComputer,$momAPI)
{
	$ErrorActionPreference = "SilentlyContinue"
	$error.Clear()
	$IsDiskFound = $false
		$oWmiDiskSet = WMIGetInstanceNoAbort $TargetComputer "root\microsoft\windows\storage" "MSFT_Volume WHERE (DriveType=3 or DriveType=6) and FileSystem!=null"
		foreach ($oWmiDisk in $oWmiDiskSet)
		{
			$sDriveLetter = $oWmiDisk.DriveLetter
			if ([string]::IsNullOrEmpty($sDriveLetter))
			{
				$sDriveLetter = $oWmiDisk.UniqueId
			}
			if ([string]::IsNullOrEmpty($sDriveLetter))
			{
				continue
			}
			TraceLogMessage ("Running DefragAnalysis (disk: " + $sDriveLetter + "; computer: " + $TargetComputer + ").")
			$error.Clear()
			Load-CimModules
			try
			{
				$cimSessionOption = New-CimSessionOption -Protocol DCOM
				$cimsession = New-CimSession -SessionOption $cimSessionOption 
				$ret = Invoke-CimMethod -CimSession $cimsession -CimInstance $oWmiDisk -MethodName Optimize -Arguments @{ReTrim=$false;Analyze=$true;Defrag=$false;SlabConsolidate=$false;TierOptimize=$false} -ErrorAction SilentlyContinue
			}
			Finally
			{
				Get-CimSession | Remove-CimSession
				$cimsession =$null
				$cimSessionOption = $null 
			}
			TraceLogMessage ("DefragAnalysis results (return code: " + $ret.ReturnValue + ")(disk: " + $sDriveLetter + "; computer: " + $TargetComputer + ")")
                
			If ($ret.ReturnValue -ne 0 -or $error.Count -ne 0)
			{
				$pctFrag = 25
				$DefragRecomend = $true
				Add-BagData -sDriveLetter $sDriveLetter -pctFrag $pctFrag -DefragRecomend $DefragRecomend -objMomApi $momAPI	
			}
 
		}
		return
}
Function Start-DefragAnalysis($TargetComputer,$momAPI)
{
	$ErrorActionPreference = "SilentlyContinue"
	$error.Clear()
    $oWmiDiskSet = WMIGetInstanceNoAbort $TargetComputer "root\cimv2" "Win32_Volume WHERE (DriveType=3 or DriveType=6) and FileSystem!=null"
		foreach ($oWmiDisk in $oWmiDiskSet)
		{
			$sDriveLetter = $oWmiDisk.DriveLetter
			if ([string]::IsNullOrEmpty($sDriveLetter))
			{
				            $sDriveLetter = $oWmiDisk.Name
							$sDriveLetter = StripEndChar -sName $sDriveLetter
			}
			if ([string]::IsNullOrEmpty($sDriveLetter))
			{
				continue
			}
			TraceLogMessage ("Running DefragAnalysis (disk: " + $sDriveLetter + "; computer: " + $TargetComputer + ").")
			$error.Clear()
			Load-CimModules
			try
			{
				$cimSessionOption = New-CimSessionOption -Protocol DCOM
				$cimsession = New-CimSession -SessionOption $cimSessionOption 
				$ret = Invoke-CimMethod -CimSession $cimsession -CimInstance $oWmiDisk -MethodName DefragAnalysis -ErrorAction SilentlyContinue
			}
			Finally
			{
				Get-CimSession | Remove-CimSession
				$cimsession =$null
				$cimSessionOption = $null 
			}
			TraceLogMessage ("DefragAnalysis results (return code: " + $ret.ReturnValue + ")(disk: " + $sDriveLetter + "; computer: " + $TargetComputer + "): OSRecommended = " + $ret.DefragRecommended + "; FilePercentFragmentation = " + $ret.DefragAnalysis.FilePercentFragmentation + ".")
                  
			$pctFrag        = $ret.DefragAnalysis.FilePercentFragmentation
			$DefragRecomend = $ret.DefragRecommended
			Add-BagData -sDriveLetter $sDriveLetter -pctFrag $pctFrag -DefragRecomend $DefragRecomend -objMomApi $momAPI
 
		}
		return
}
Function Add-BagData($sDriveLetter,$pctFrag,$DefragRecomend,$objMomApi)
{
	$ErrorActionPreference = "SilentlyContinue"
	$error.Clear()
	if ($null -eq $sDriveLetterobjMomApi)
	{
		return
	}
	$oBag = $momAPI.CreatePropertyBag()
	if ($Null -eq $oBag)
	{
		return
	}
	$oBag.AddValue("DiskLabel", $sDriveLetter)
	$oBag.AddValue("OSRecommended", $DefragRecomend)
	$oBag.AddValue("FilePercentFragmentation", $pctFrag )
	$oBag
}
Function Load-CimModules
{
	$error.Clear()
	$CimModule = Get-Module CimCmdlets
	if ($null -eq $CimModule)
	{
			Import-Module CimCmdlets
			$error.Clear()
	}
}
Main
</ScriptBody><Parameters><Parameter><Name>TargetComputer</Name><Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</Value></Parameter></Parameters><TimeoutSeconds>3600</TimeoutSeconds></ProbeAction><ConditionDetection ID="FilterDrive" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='DiskLabel']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="ErrorFilter" TypeID="System!System.ExpressionFilter"><Expression><Or><Expression><And><Expression><SimpleExpression><ValueExpression><Value Type="Boolean">$Config/UseOSRecommendation$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="Boolean">false</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='FilePercentFragmentation']</XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value Type="Double">$Config/FilePercentFragmentationThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><Value Type="Boolean">$Config/UseOSRecommendation$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">true</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='OSRecommended']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="Boolean">true</Value></ValueExpression></SimpleExpression></Expression></And></Expression></Or></Expression></ConditionDetection><ConditionDetection ID="SuccessFilter" TypeID="System!System.ExpressionFilter"><Expression><Not><Expression><Or><Expression><And><Expression><SimpleExpression><ValueExpression><Value Type="Boolean">$Config/UseOSRecommendation$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">false</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='FilePercentFragmentation']</XPathQuery></ValueExpression><Operator>LessEqual</Operator><ValueExpression><Value Type="Double">$Config/FilePercentFragmentationThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><Value
Type="Boolean">$Config/UseOSRecommendation$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">true</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='OSRecommended']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">false</Value></ValueExpression></SimpleExpression></Expression></And></Expression></Or></Expression></Not></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="Warning"><Node ID="ErrorFilter"><Node ID="FilterDrive"><Node ID="Script"><Node ID="Scheduler" /></Node></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="Success"><Node ID="SuccessFilter"><Node ID="FilterDrive"><Node ID="Script"><Node ID="Scheduler"
/></Node></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.Windows.Server.10.0.MemoryAvailableMBytes.Monitortype" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="MemoryAvailableMBytesNormal" NoDetection="false" /><MonitorTypeState ID="MemoryAvailableMBytesLow" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MemoryThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="NumSamples" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CounterName"
type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ObjectName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InstanceName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AllInstances" type="xsd:boolean" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /><OverrideableParameter ID="MemoryThreshold" Selector="$Config/MemoryThreshold$" ParameterType="double" /><OverrideableParameter ID="NumSamples" Selector="$Config/NumSamples$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="ScriptDS"
TypeID="Microsoft.Windows.Server.10.0.MemoryAvailableMBytes.ModuleType"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><TargetComputerName>$Config/TargetComputerName$</TargetComputerName><NumSamples>$Config/NumSamples$</NumSamples><CounterName>$Config/CounterName$</CounterName><ObjectName>$Config/ObjectName$</ObjectName><InstanceName>$Config/InstanceName$</InstanceName><AllInstances>$Config/AllInstances$</AllInstances></DataSource><ProbeAction ID="ProbeActionDS" TypeID="Microsoft.Windows.Server.10.0.PowerShellPropertyBagProbe"><ScriptName>MemoryUtilization.ps1</ScriptName><PSparam>param ($MEMORY_THRESHOLD, $TargetComputer, $AvailableMBytes)</PSparam><ScriptBody>
# ##### Scripts\PowerShell\MemoryUtilization.ps1
#Copyright (c) Microsoft Corporation. All rights reserved.
                      
# Parameters that should be passed to this script
# 0 MEMORY_THRESHOLD
# 1 Computer (FQDN) that the Mount Point will be hosted on
Function Main()
{
	$ErrorActionPreference = "SilentlyContinue"
    $oBag = $momAPI.CreatePropertyBag()
    $ERROR_KEY_NOT_FOUND = 2
	Load-CimModules
	try
	{
		$cimSessionOption = New-CimSessionOption -Protocol DCOM
		$cimsession = New-CimSession -ComputerName $TargetComputer -SessionOption $cimSessionOption 
		$ret = Invoke-CimMethod -CimSession $cimsession -ClassName StdRegProv -NameSpace root/default -MethodName GetStringValue -Arguments @{sSubKeyName="SYSTEM\CurrentControlSet\Services\MSExchangeSA";sValueName=""}
	}
	Finally
	{
		Get-CimSession | Remove-CimSession
		$cimsession =$null
		$cimSessionOption = $null 
	}
    if ($ret.ReturnValue -eq $ERROR_KEY_NOT_FOUND)
    {
	    if ([double]$AvailableMBytes -ge [double]$MEMORY_THRESHOLD)
        {
            $oBag.AddValue("State", "GOOD")
			$oBag.AddValue("AvailableMBytes", $AvailableMBytes + "")
            $oBag
        }
	    else
        {
            $oBag.AddValue("State", "BAD")
            $oBag.AddValue("AvailableMBytes", $AvailableMBytes + "")
            $oBag
	    }
	}
    else
    {
	    # FIXME Should We have to generate the event? 
      $oBag.AddValue("State", "GOOD")
      $oBag.AddValue("AvailableMBytes", $AvailableMBytes + "")
      $oBag
	}
	Unload-Module -ModuleName "CimCmdlets"
}
Function Load-CimModules
{
	$error.Clear()
	$CimModule = Get-Module CimCmdlets
	if ($null -eq $CimModule)
	{
			Import-Module CimCmdlets
			$error.Clear()
	}
}
Main</ScriptBody><Parameters><Parameter><Name>MEMORY_THRESHOLD</Name><Value>$Config/MemoryThreshold$</Value></Parameter><Parameter><Name>TargetComputer</Name><Value>$Config/TargetComputerName$</Value></Parameter><Parameter><Name>AvailableMBytes</Name><Value>$Data/Value$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction><ConditionDetection ID="FilterOK" TypeID="System!System.ExpressionFilter"><Expression><RegExExpression><ValueExpression><XPathQuery>Property[@Name='State']</XPathQuery></ValueExpression><Operator>ContainsSubstring</Operator><Pattern>GOOD</Pattern></RegExExpression></Expression></ConditionDetection><ConditionDetection ID="FilterNotOK"
TypeID="System!System.ExpressionFilter"><Expression><RegExExpression><ValueExpression><XPathQuery>Property[@Name='State']</XPathQuery></ValueExpression><Operator>ContainsSubstring</Operator><Pattern>BAD</Pattern></RegExExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="MemoryAvailableMBytesNormal"><Node ID="FilterOK"><Node ID="ProbeActionDS"><Node ID="ScriptDS" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="MemoryAvailableMBytesLow"><Node ID="FilterNotOK"><Node ID="ProbeActionDS"><Node ID="ScriptDS" /></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.Windows.Server.10.0.NetworkAdapter.Monitortype" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="Good" NoDetection="false" /><MonitorTypeState ID="Bad" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DeviceName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MonitorMediaDisconnection" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MonitorDisconnection" type="xsd:boolean" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MonitorHardwareMalfunction" type="xsd:boolean" /></Configuration><OverrideableParameters><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /><OverrideableParameter ID="MonitorMediaDisconnection" Selector="$Config/MonitorMediaDisconnection$" ParameterType="bool" /><OverrideableParameter ID="MonitorDisconnection" Selector="$Config/MonitorDisconnection$" ParameterType="bool"
/><OverrideableParameter ID="MonitorHardwareMalfunction" Selector="$Config/MonitorHardwareMalfunction$" ParameterType="bool" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Config/ComputerName$</ComputerName><LogName>System</LogName><Expression><Or><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Tcpip</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>4201</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>4202</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>
Equal</Operator><ValueExpression><Value>Microsoft-Windows-Iphlpsvc</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>4200</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>4201</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></Or></Expression></DataSource><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /><ProbeAction ID="ProbeActionGoodDS" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe"><ScriptName>NetworkAdapterCheck.ps1</ScriptName><ScriptBody>
                
                                    param ($TargetComputer, $MediaDisconnectionFlag, $DisconnectionFlag, $HardwareFlag)
                                    
$ErrorActionPreference = "Stop"
# Event type constants
$EVENT_TYPE_LOG = 0
$EVENT_TYPE_ERROR = 1
$EVENT_TYPE_WARNING = 2
$EVENT_TYPE_INFORMATION = 4
# Typed property bag constants
$PROPERTY_TYPE_ALERT = 0
$PROPERTY_TYPE_EVENT = 1
$PROPERTY_TYPE_PERFORMANCE = 2
$PROPERTY_TYPE_STATE = 3
# State type constants
$STATE_SUCCESS = "Success"
$STATE_WARNING = "Warning"
$STATE_ERROR = "Error"
$momAPI = New-Object -ComObject Mom.ScriptAPI 
if ($null -eq $momAPI)
{
   exit -1
}
Function Load-CimModules
{
	$ErrorActionPreference = 'SilentlyContinue' 
	$error.Clear()
	$CimModule = Get-Module CimCmdlets
	if ($null -eq $CimModule)
	{
			Import-Module CimCmdlets
	}
}
Load-CimModules
# WMI Constant
$wbemCimtypeUseDefault        = 0   #Use Default Type CIM type - Custom
$wbemCimtypeSint16            = 2   #Signed 16-bit integer 
$wbemCimtypeSint32            = 3   #Signed 32-bit integer 
$wbemCimtypeReal32            = 4   #32-bit real number 
$wbemCimtypeReal64            = 5   #64-bit real number 
$wbemCimtypeString            = 8   #String 
$wbemCimtypeBoolean           = 11  #Boolean value 
$wbemCimtypeObject            = 13  #CIM object 
$wbemCimtypeSint8             = 16  #Signed 8-bit integer 
$wbemCimtypeUint8             = 17  #Unsigned 8-bit integer 
$wbemCimtypeUint16            = 18  #Unsigned 16-bit integer 
$wbemCimtypeUint32            = 19  #Unsigned 32-bit integer 
$wbemCimtypeSint64            = 20  #Signed 64-bit integer  
$wbemCimtypeUint64            = 21  #Unsigned 64-bit integer 
$wbemCimtypeDatetime          = 101 #Date/time value 
$wbemCimtypeReference         = 102 #Reference to a CIM object 
$wbemCimtypeChar16            = 103 #16-bit character 
$ErrAction_None               = 0
$ErrAction_Trace              = 1
$ErrAction_ThrowError         = 16
$ErrAction_Abort              = 32
$ErrAction_ThrowErrorAndAbort = 48
$DISKSIZE_BYTES_IN_MB = 1048576
$g_ErrorEventNumber = 4001
$g_TraceEventNumber = 4002
$g_DebugFlag = $false
#---------------------------------------------------------------------------
# Returns WMI Instance requested. Tries to execute WMI query a N times.
#---------------------------------------------------------------------------
Function WMIGetInstanceExTryN
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery, 
           [int]$N)
    for ($i = 0; $i -lt $N; $i++)
    {
        $error.Clear();
        
		Load-CimModules
		try
        {
		    $cimSessionOption = New-CimSessionOption -Protocol DCOM
		    $cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
            $oInstance = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
        }
        catch
        {
             $oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue 
        }
        Finally
        {
            Get-CimSession | Remove-CimSession
		    $cimsession =$null
		    $cimSessionOption = $null 
        }
        if ($error.Count -gt 0)
        {
            if ($i -eq ($N-1))
            {
                ThrowScriptError ("The class name '" + $sInstanceQuery + "' returned no instances.  Please check to see if this is a valid WMI class name.") $error[0]
            }
        }
        else
        {
            break;
        }
        sleep -m 1000
    }
    return $oInstance
}
#---------------------------------------------------------------------------
# Returns WMI Instance requested.
#---------------------------------------------------------------------------
Function WMIGetInstanceEx
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery)
    $error.Clear();
	Load-CimModules
	try
    {
		$cimSessionOption = New-CimSessionOption -Protocol DCOM
		$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
        $oInstance = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
    }
    catch
    {
            $oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue 
    }
    Finally
    {
        Get-CimSession | Remove-CimSession
		$cimsession =$null
		$cimSessionOption = $null 
    }
    if ($error.Count -gt 0)
    {
        ThrowScriptError ("The class name '" + $sInstanceQuery + "' returned no instances.  Please check to see if this is a valid WMI class name.") $error[0]
    }
    return $oInstance
}
#---------------------------------------------------------------------------
# Connect to WMI.
#---------------------------------------------------------------------------
Function WMIConnect
{
    param ([string]$sTargetComputer,
           [string]$sNamespace)
    $error.Clear()
    # !!! Refactoring comment: 
    # Original VBScript only tries to connect to the namespace. Piping to get only the first one saves time. 
    
	Load-CimModules
	try
	{
		$cimSessionOption = New-CimSessionOption -Protocol DCOM
		$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
		$oWMI = Get-CimClass -CimSession $cimsession -Namespace $sNamespace -ErrorAction SilentlyContinue | select -First 1
	}
	Finally
	{
		Get-CimSession | Remove-CimSession
		$cimsession =$null
		$cimSessionOption = $null 
	}
    
    if ($error.Count -gt 0)
    {
        $msg = "Unable to open WMI Namespace 'winmgmts:\\" + $sTargetComputer + "\" + $sNamespace + "'. Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists."
        ThrowScriptError $msg $error[0]
    }
}
#---------------------------------------------------------------------------
# Returns WMI Instance requested.
#---------------------------------------------------------------------------
Function WMIGetInstance
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery)
    WMIConnect $sTargetComputer $sNamespace
    $oInstance = WMIGetInstanceEx $sTargetComputer $sNamespace $sInstanceQuery
    return $oInstance
}
#---------------------------------------------------------------------------
# Returns WMI Instance requested.
#---------------------------------------------------------------------------
Function WMIGetInstanceNoAbort
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sInstanceQuery)
	Load-CimModules
	try
    {
		$cimSessionOption = New-CimSessionOption -Protocol DCOM
		$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
        $oInstance = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue
    }
    catch
    {
        $oInstance = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query ("Select * from "+$sInstanceQuery) -ErrorAction SilentlyContinue 
    }
    Finally
    {
        Get-CimSession | Remove-CimSession
		$cimsession =$null
		$cimSessionOption = $null 
    }
    return $oInstance
}
#---------------------------------------------------------------------------
# Executes the WMI query and returns the result set.
#---------------------------------------------------------------------------
Function WMIExecQuery
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sQuery)
    $error.Clear()
    # !!! Refactoring comment: 
    # Original VBScript only tries to connect to the namespace. Piping to get only the first one saves time. 
	Load-CimModules
	try
	{
		$cimSessionOption = New-CimSessionOption -Protocol DCOM
		$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
		$oWMI = Get-CimClass -CimSession $cimsession -Namespace $sNamespace -ErrorAction SilentlyContinue | select -First 1
	}
	Finally
	{
		Get-CimSession | Remove-CimSession
		$cimsession =$null
		$cimSessionOption = $null 
	}
    if ($error.Count -gt 0)
    {
        $msg = "Unable to open WMI Namespace 'winmgmts:\\" + $sTargetComputer + "\" + $sNamespace + "'. Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists."
        ThrowScriptError $msg, $error[0]
    }
	Load-CimModules
	try
    {
		$cimSessionOption = New-CimSessionOption -Protocol DCOM
		$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
        $oQuery = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
    }
    catch
    {
        $oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue 
    }
    Finally
    {
        Get-CimSession | Remove-CimSession
		$cimsession =$null
		$cimSessionOption = $null 
    }
    if ($error.Count -gt 0)
    {
        ThrowScriptError ("The Query '" + $sQuery + "' returned an invalid result set.  Please check to see if this is a valid WMI Query.") $error[0]
    }
    return $oQuery
}
#---------------------------------------------------------------------------
# Executes the WMI query and returns the result set, no abort version.
#---------------------------------------------------------------------------
Function WMIExecQueryNoAbort
{
    param ([string]$sTargetComputer,
           [string]$sNamespace,
           [string]$sQuery)    
    
	Load-CimModules
	try
    {
		$cimSessionOption = New-CimSessionOption -Protocol DCOM
		$cimsession = New-CimSession -ComputerName $sTargetComputer -SessionOption $cimSessionOption 
        $oQuery = Get-CimInstance -CimSession $cimsession -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue
    }
    catch
    {
        $oQuery = Get-WMIObject -ComputerName $sTargetComputer -Namespace $sNamespace -Query $sQuery -ErrorAction SilentlyContinue 
    }
    Finally
    {
        Get-CimSession | Remove-CimSession
		$cimsession =$null
		$cimSessionOption = $null 
    }
    return $oQuery
}
#---------------------------------------------------------------------------
# Creates an event and sends it back to the mom server.
#---------------------------------------------------------------------------
Function ThrowScriptErrorNoAbort
{
    param ([string]$sMessage, 
           [System.Management.Automation.ErrorRecord]$oErr)
    # Retrieve the name of this (running) script
    $ScriptFileName = $MyInvocation.ScriptName
    
    if ($oErr -ne $null)
    {
        $sMessage = $sMessage + ". " + $oErr.ErrorDetails
    }
    
    $momAPI.LogScriptEvent($ScriptFileName, $g_ErrorEventNumber, $EVENT_TYPE_ERROR, $sMessage)
    
    Write-Host $sMessage
}
#---------------------------------------------------------------------------
# Creates an event and sends it back to the mom server.
#---------------------------------------------------------------------------
Function ThrowScriptError
{
    param ([string]$sMessage, 
           [System.Management.Automation.ErrorRecord]$oErr)
    ThrowScriptErrorNoAbort $sMessage $oErr
    exit
}
#---------------------------------------------------------------------------
# Verifies that number of arguments is correct
#---------------------------------------------------------------------------
Function VerifyNumberOfArguments
{
    param ($NumberOfArguments)
    if ($args.Length -ne $NumberOfArguments)
    {
       $sArgs = ""
       foreach ($argument in $args)
       {
           $sArgs += " {" + $argument + "}"
       }
       ThrowScriptError ("Invalid number of arguments (" + $args.Length + " instead of " + $NumberOfArguments + "). Arguments:" + $sArgs) $null
    }
}
#---------------------------------------------------------------------------
# Outputs to file and echo for debugging purposes
#---------------------------------------------------------------------------
Function TraceLogMessage
{
    param ([string]$sMessage)
    Write-Host $sMessage
    
    If ($g_DebugFlag -eq $true)
    {
        # Retrieve the name of this (running) script
        $ScriptFileName = $MyInvocation.ScriptName
        
        $momAPI.LogScriptEvent($ScriptFileName, $g_TraceEventNumber, $EVENT_TYPE_INFORMATION, $sMessage)
    }
}
#---------------------------------------------------------------------------
# Verifies the expression. If equals to False then generates an error and quits the script
#   Usage:
#     Verify Not WMISet Is Nothing, "WMISet is invalid!"
#     Verify WMISet.Count = 1, "Invalid quantity of services with name 'Server' (qty = " &amp; WMISet.Count &amp; ")."
#---------------------------------------------------------------------------
Function Verify
{
    param ([bool]$bBool, 
           [string]$sMessage)
    If ($bBool -eq $false)
    {
        ThrowScriptError $sMessage $null
    }
}
Function GetRegistryKeyValue
{
    param ([string]$keyPath, 
           [string]$key)
    $error.Clear()
    $strKeyValue = Get-ItemProperty -Path $keyPath -Name $key -ErrorAction SilentlyContinue
    if ($error.Count -gt 0)
    {
        ThrowScriptError ("An error occurred while reading the registry: '" + $keyPath + $key + "'") $error[0]
    }
    return $strKeyValue.$key
}
#---------------------------------------------------------------------------
# Function: ExpressedInMB
#   Usage:
#     Parameter (SizeInBytes) 
#     Returns the Size Expressed in MBytes
#---------------------------------------------------------------------------
Function ExpressedInMB
{
    param ($SizeInBytes)
    $NumberSizeExpInMB = [math]::Round($SizeInBytes / $DISKSIZE_BYTES_IN_MB, 0)
    return $NumberSizeExpInMB
}
Function Is_Win32_Volume_Supported($TargetComputer)
{
    $blnRet = $false
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	$IsNano = Is_NanoServer
	
	if ($true -eq $IsNano)
	{
		return $blnRet #NanoServer does not support Win32_Volume
	}
    $objWMISet = WMIGetInstance $TargetComputer "root\cimv2" "Win32_OperatingSystem"
    foreach ($objWMIOS in $objWMISet)
    {
        if ([int]$objWMIOS.BuildNumber -ge 3624) 
		{
			 $blnRet = $true 
		}
    }
    return $blnRet
}
Function Get_System_Drive($TargetComputer)
{
    $objWMISet = WMIGetInstance $TargetComputer "root\cimv2" "Win32_OperatingSystem"
    foreach ($objWMIOS in $objWMISet)
    {
        return $objWMIOS.SystemDirectory.SubString(0,2)
    }
}
Function Is_NanoServer
{
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	$IsNano = (Get-Item "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Server\ServerLevels").GetValue("NanoServer")
	
	$IsNano = $IsNano -eq 1
	$error.Clear()
	return $IsNano
}
#---------------------------------------------------------------------------
# Function: StripEndChar
#   Usage:
#     Parameter (sName) 
#     Returns the sName without last special Character "\"
#---------------------------------------------------------------------------
Function StripEndChar([string]$sName)
{
    if ([string]::IsNullOrEmpty($sName))
    { 
        return [string]::Empty
    }
    else
    {
        return $sName.Substring(0, $sName.Length-1)
    }
}
Function Load-Module ([string] $ModuleName)
{
	if ([string]::IsNullOrEmpty($ModuleName) )
	{
		return $false
	}
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	$retval = $false
	$cim = Get-Module -Name $ModuleName
	########Check for powershell 1.0
	if ($error.Count -ne 0)
	{
	   $type = $error[0].Exception.GetType()
	   if ([System.Management.Automation.CommandNotFoundException] -eq $type)
	   {
		   $error.Clear()
		   return $retval
	   }
       $error.Clear()
	}
	if ($null -eq $cim)
	{
			Import-Module $ModuleName
		    if ($error.Count -eq 0)
		    {
				$retval = $true
			}
			
		   $error.Clear()
	}
	else
	    {
			$retval = $true
		}
	return $retval
}
Function Get-Volumes([bool]$IsNano,[bool]$IsVolumeSupported,[string] $TargetComputer)
{
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	$oVolumes = $null
	if ($true -eq $IsNano)
	{
		$bLoadModule = Load-Module -ModuleName "Storage"
		if($false -eq $bLoadModule)
        {
			return $null
		} 
		$oVolumes =  Get-Volume | where {$_.DriveType -eq "Fixed" -and $false -eq [string]::IsNullOrEmpty($_.FileSystem )}
	}
	else 
		{
			if ($true -eq $IsVolumeSupported)
			{
				 $oVolumes = WMIGetInstanceNoAbort $TargetComputer "root\cimv2" "Win32_Volume where (DriveType=3) and FileSystem!=null" 
			}
			else
			   {
				   $oVolumes = WMIGetInstanceNoAbort $TargetComputer "root\cimv2" "Win32_LogicalDisk where (DriveType=3) and FileSystem!=null"  
			   }
		}
	return $oVolumes
} 
Function Get-VolumeId([bool]$IsNano,[bool]$IsVolumeSupported,$Volume)
{
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	if ($null -eq $Volume)
	{
		return $null
	}
	if ($true -eq $IsVolumeSupported)
	{
		$VolumeId = $Volume.DriveLetter
		if([string]::IsNullOrEmpty($VolumeId) )
		{
			$VolumeId = StripEndChar -sName $Volume.Name 
		}
	}
	else
	    {
			if ($true -eq $IsNano )
			{
				$VolumeId = $Volume.DriveLetter
				if([string]::IsNullOrEmpty($VolumeId) )
				{
					$VolumeId = StripEndChar -sName $Volume.UniqueId 
				}
				else
				{
					if (1 -eq $VolumeId.Length)
					{
						$VolumeId = $VolumeId + ":" 
					}
				}
			}
			else
			    {
					$VolumeId = $Volume.DeviceId
				}
			
		}
	return $VolumeId
} 
Function CreatePerformanceCounterData($strObjectName, $strCounterName, $strInstanceName, $varValue)
{
									return @{ "PerfObject"  = $strObjectName;
                                             "PerfCounter"  = $strCounterName;
                                             "PerfInstance" = $strInstanceName;
                                             "PerfValue"     =  $varValue;
                                             }
}
Function Create-PerformancePropertyBag ($strObjectName, $strCounterName, $strInstanceName, $varValue,$objMomScriptAPI)
{
				$ErrorActionPreference = "SilentlyContinue"
				$error.Clear()
				if ([string]::IsNullOrEmpty($varValue))
	            {
					$varValue = 0
				}	
	            if ($null -eq $objMomScriptAPI)
				{
					return
				}
				$objTypedPropertyBag = $objMomScriptAPI.CreateTypedPropertyBag($PROPERTY_TYPE_PERFORMANCE)
				$objTypedPropertyBag.AddValue("PerfObject"   ,$strObjectName)
				$objTypedPropertyBag.AddValue("PerfCounter"  ,$strCounterName)
				$objTypedPropertyBag.AddValue("PerfInstance" ,$strInstanceName)
				$objTypedPropertyBag.AddValue("PerfValue"    ,$varValue)
				$objTypedPropertyBag
     
}
Function Create-EmptyPerfData ($objMomScriptAPI)
{
	 if ($null -eq $objMomScriptAPI)
  	 {
		return
 
	 }
		$ErrorActionPreference = 'SilentlyContinue' # Scoped only to function
		$error.Clear()
		$objTypedPropertyBag = $objMomScriptAPI.CreateTypedPropertyBag($PROPERTY_TYPE_PERFORMANCE)
		$objTypedPropertyBag.AddValue("PerfObject"   ,"EMPTY")
		$objTypedPropertyBag.AddValue("PerfCounter"  ,"EMPTY")
		$objTypedPropertyBag.AddValue("PerfInstance" ,"EMPTY")
		$objTypedPropertyBag.AddValue("PerfValue"    ,"EMPTY")
		#Add the property bag to the script#s XML output
		$objTypedPropertyBag
	   
	   $error.Clear()
}
Function Convert-ToBoolean([string] $sBool)
 {
    [bool] $result  = $false
    [bool] $iresult = $false
    if ($false -eq [string]::IsNullOrEmpty($sBool) )
    {
       $result  = $sBool.Equals("true",[System.StringComparison]::InvariantCultureIgnoreCase)
       $iresult = $sBool.Equals("1",[System.StringComparison]::InvariantCultureIgnoreCase)
       $result  = $result -or $iresult
    }
    
    return $result
 }
 Function Unload-Module([string]$ModuleName)
 {
		$ErrorActionPreference = 'SilentlyContinue' # Scoped only to function
		$error.Clear()
	    if ([string]::IsNullOrEmpty($ModuleName))
		{
			return
		}
	    $module = Get-Module $ModuleName  
	    if ($null -eq $module)
		{
		   return
		}
		Remove-Module -Name $ModuleName -Force 
 }
Function Load-CimModules
{
	$error.Clear()
	$CimModule = Get-Module CimCmdlets
	if ($null -eq $CimModule)
	{
			Import-Module CimCmdlets
			$error.Clear()
	}
}
#Copyright (c) Microsoft Corporation. All rights reserved.
                      
# Parameters that should be passed to this script
# 0 Computer (FQDN)
# 1 Media Disconnection Flag
# 2 Disconnection Flag
# 3 Hardware Flag
Function Main()
{
    $MediaDisconnectionFlag = Convert-ToBoolean -sBool $MediaDisconnectionFlag
    $DisconnectionFlag      = Convert-ToBoolean -sBool $DisconnectionFlag
    $HardwareFlag           = Convert-ToBoolean -sBool $HardwareFlag
	$ErrorActionPreference="SilentlyContinue"
	$error.Clear()
	# Win32_NetworkAdapter is deprecated and not returning results on NanoServer
	# Need to use MSFT_NetAdapter
	$IsModuleLoaded = Load-Module -ModuleName "NetAdapter"
	if ($false -eq $IsModuleLoaded)
	{
		return
	}
	$error.Clear()
	
	$netAdapters = Get-NetAdapter
		foreach ($netAdapter in $netAdapters)
		{
			$oBag = $momAPI.CreatePropertyBag()
        
			$oBag.AddValue("DeviceName", $netAdapter.DeviceID)
			If ( (($MediaDisconnectionFlag -eq $true) -and ($netAdapter.MediaConnectState -eq 2)) -or
			   (($DisconnectionFlag -eq $true) -and ($netAdapter.MediaConnectState -eq 2)) -or
			   (($HardwareFlag -eq $true) -and ($netAdapter.MediaConnectState -eq 2)))
			{
			   $oBag.AddValue("State", "BAD")
			}
			else
			{
			   $oBag.AddValue("State", "GOOD")
			}
        
			$oBag
		}
	 Unload-Module -ModuleName "NetAdapter"
}
Main
</ScriptBody><Parameters><Parameter><Name>TargetComputer</Name><Value>$Config/ComputerName$</Value></Parameter><Parameter><Name>MediaDisconnectionFlag</Name><Value>$Config/MonitorMediaDisconnection$</Value></Parameter><Parameter><Name>DisconnectionFlag</Name><Value>$Config/MonitorDisconnection$</Value></Parameter><Parameter><Name>HardwareFlag</Name><Value>$Config/MonitorHardwareMalfunction$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction><ConditionDetection ID="FilterOK"
TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>Property[@Name='DeviceName']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>$Config/DeviceName$</Value></ValueExpression></SimpleExpression></Expression><Expression><RegExExpression><ValueExpression><XPathQuery>Property[@Name='State']</XPathQuery></ValueExpression><Operator>ContainsSubstring</Operator><Pattern>GOOD</Pattern></RegExExpression></Expression></And></Expression></ConditionDetection><ConditionDetection ID="FilterNotOK"
TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>Property[@Name='DeviceName']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>$Config/DeviceName$</Value></ValueExpression></SimpleExpression></Expression><Expression><RegExExpression><ValueExpression><XPathQuery>Property[@Name='State']</XPathQuery></ValueExpression><Operator>ContainsSubstring</Operator><Pattern>BAD</Pattern></RegExExpression></Expression></And></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="Good"><Node ID="FilterOK"><Node ID="ProbeActionGoodDS"><Node ID="DS" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="Bad"><Node ID="FilterNotOK"><Node ID="ProbeActionGoodDS"><Node ID="DS" /></Node></Node></RegularDetection></RegularDetections><OnDemandDetections><OnDemandDetection MonitorTypeStateID="Good"><Node ID="FilterOK"><Node
ID="ProbeActionGoodDS"><Node ID="PassThrough" /></Node></Node></OnDemandDetection><OnDemandDetection MonitorTypeStateID="Bad"><Node ID="FilterNotOK"><Node ID="ProbeActionGoodDS"><Node ID="PassThrough" /></Node></Node></OnDemandDetection></OnDemandDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.Windows.Server.10.0.Monitoring.MonitorType" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="Healthy" NoDetection="false" /><MonitorTypeState ID="Warning" NoDetection="false" /><MonitorTypeState ID="Error" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Interval" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="Interval" Selector="$Config/Interval$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="Scheduler"
TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/Interval$</Interval><SyncTime /></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ProbeAction ID="PA" TypeID="Microsoft.Windows.Server.10.0.BPA.PowerShellPropertyBagProbe"><ScriptName>Microsoft.Windows.Server.10.0.Monitoring.BPA.RunBPA.Script.ps1</ScriptName><PSparam /><ScriptBody>Function Main()
{
	$State = $STATE_SUCCESS
	$ErrorActionPreference = "SilentlyContinue"
	$momAPI = New-Object -ComObject Mom.ScriptAPI
	if ($null -eq $momAPI)
	{
	  return
	}
	$error.Clear()
	$Models             = New-Object System.Collections.ArrayList($null) 
	$ImportedAssemblies = New-Object System.Collections.ArrayList($null)
	
	if (0 -ne $error.Count)
	{
      CreateStatePropertyBag -StateProperty $State -Message $BpaInitFailed  -momAPI $momAPI
	  return
	}
	$iResult = Check-BpaRequirement -ModelsToRun $Models -ImportedAssemblies $ImportedAssemblies
    
	if ($BpaNotSupportedStatus -eq $iResult)
	{
        CreateStatePropertyBag -StateProperty $State -Message $Description -momAPI $momAPI
		return
	}
	if ($BpaNotLoadedStatus  -eq $iResult)
	{
        CreateStatePropertyBag -StateProperty $State -Message $BpaLoadProblem -momAPI $momAPI
		return
	}
	if ($BpaModelLoadProblem  -eq $iResult)
	{
        CreateStatePropertyBag -StateProperty $State -Message $BpaModelLoadProblem -momAPI $momAPI
	    
		Unload-Modules -ImportedAssemblies $ImportedAssemblies
	
		return
	}
	$ErrorActionPreference = "Stop"
	$WarningRulesCount = 0
	$ErrorRulesCount   = 0
    try
    {
        $Details = $Models | Invoke-BPAModel 
        foreach ($Detail in $Details)
        {
            If ($State -ne $STATE_ERROR)
            {
                if ($false -eq $Detail.Success)
                {
                    $State       = $STATE_ERROR
    				$Description = $DESCRIPTION_ERROR
                }
                else
                {
					$tWarningRulesCount = 0
					$tErrorRulesCount   = 0
					Get-BpaWarningsAndErrorCounts -Detail $Detail.Detail -WarningRulesCount ([ref] $tWarningRulesCount)  -ErrorRulesCount ([ref] $tErrorRulesCount)
                    if (($tWarningRulesCount -ne 0) -or ($tErrorRulesCount -ne 0))
					{
						$State              = $STATE_WARNING
    					$WarningRulesCount += $tWarningRulesCount
    					$ErrorRulesCount   += $tErrorRulesCount
					}
                }
            }
        }
        If ($State -eq $STATE_WARNING)
        {
    		$Description = $DESCRIPTION_WARNING -f $WarningRulesCount, $ErrorRulesCount
        }
    }
    catch [System.Exception]
    {
        $Description = $_.ToString()
        $State = $STATE_ERROR
    }
    finally
    {
		$ErrorActionPreference = "SilentlyContinue"
		if ($State -eq $STATE_SUCCESS)
		{
			$WarningRulesCount = 0
			$ErrorRulesCount   = 0
			Get-AllBpaResults -BPAModels $Models -WarnCount ([ref]$WarningRulesCount) -ErrorCount ([ref]$ErrorRulesCount)
			if (($WarningRulesCount -ne 0) -or ($ErrorRulesCount -ne 0))
			{
						$State              = $STATE_WARNING
						$Description        = $DESCRIPTION_WARNING -f $WarningRulesCount, $ErrorRulesCount
			}
		}
        Unload-Modules -ImportedAssemblies $ImportedAssemblies
        CreateStatePropertyBag -StateProperty $State -Message $Description -momAPI $momAPI
    }
}
Main
</ScriptBody><TimeoutSeconds>300</TimeoutSeconds></ProbeAction><ProbeAction ID="PassThrough" TypeID="System!System.PassThroughProbe" /><ConditionDetection ID="FilterHealthy" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='State']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Success</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="FilterWarning" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='State']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Warning</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="FilterError" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="String">Property[@Name='State']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Error</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="Healthy"><Node ID="FilterHealthy"><Node ID="PA"><Node ID="Scheduler" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="Warning"><Node ID="FilterWarning"><Node ID="PA"><Node ID="Scheduler" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="Error"><Node ID="FilterError"><Node ID="PA"><Node ID="Scheduler" /></Node></Node></RegularDetection></RegularDetections><OnDemandDetections><OnDemandDetection MonitorTypeStateID="Healthy"><Node ID="FilterHealthy"><Node ID="PA"><Node ID="PassThrough" /></Node></Node></OnDemandDetection><OnDemandDetection MonitorTypeStateID="Warning"><Node ID="FilterWarning"><Node ID="PA"><Node ID="PassThrough"
/></Node></Node></OnDemandDetection><OnDemandDetection MonitorTypeStateID="Error"><Node ID="FilterError"><Node ID="PA"><Node ID="PassThrough" /></Node></Node></OnDemandDetection></OnDemandDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.Windows.Server.10.0.DiskState.Monitortype" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="UnderWarningThresholds" NoDetection="false" /><MonitorTypeState ID="OverWarningUnderErrorThresholds" NoDetection="false" /><MonitorTypeState ID="OverErrorThresholds" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="DiskLabel" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="CounterName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
minOccurs="1" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="NumSamples" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SystemDriveWarningThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SystemDriveErrorThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="NonSystemDriveWarningThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="NonSystemDriveErrorThreshold" type="xsd:double" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="NumSamples" Selector="$Config/NumSamples$" ParameterType="int" /><OverrideableParameter ID="SystemDriveWarningThreshold"
Selector="$Config/SystemDriveWarningThreshold$" ParameterType="double" /><OverrideableParameter ID="SystemDriveErrorThreshold" Selector="$Config/SystemDriveErrorThreshold$" ParameterType="double" /><OverrideableParameter ID="NonSystemDriveWarningThreshold" Selector="$Config/NonSystemDriveWarningThreshold$" ParameterType="double" /><OverrideableParameter ID="NonSystemDriveErrorThreshold" Selector="$Config/NonSystemDriveErrorThreshold$" ParameterType="double" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS" TypeID="Microsoft.Windows.Server.10.0.DiskState.DS.Moduletype"><ComputerName>$Config/ComputerName$</ComputerName><DiskLabel>$Config/DiskLabel$</DiskLabel><CounterName>$Config/CounterName$</CounterName><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds></DataSource><ConditionDetection ID="SamplesCD"
TypeID="SystemPerf!System.Performance.ConsecutiveSamplesCondition"><Threshold>0</Threshold><Direction>greaterequal</Direction></ConditionDetection><ConditionDetection ID="SamplesCounter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value Type="Double">$Config/NumSamples$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="HealthyCD" TypeID="System!System.ExpressionFilter"><Expression><Or><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">ObjectName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">System Logical Disk</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="Double">SampleValue</XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value Type="Double">$Config/SystemDriveErrorThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">SampleValue</XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value Type="Double">$Config/SystemDriveWarningThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">ObjectName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Logical Disk</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">SampleValue</XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value
Type="Double">$Config/NonSystemDriveErrorThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">SampleValue</XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value Type="Double">$Config/NonSystemDriveWarningThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></Or></Expression></ConditionDetection><ConditionDetection ID="WarningCD" TypeID="System!System.ExpressionFilter"><Expression><Or><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">ObjectName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">System Logical Disk</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">SampleValue</XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value
Type="Double">$Config/SystemDriveErrorThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">SampleValue</XPathQuery></ValueExpression><Operator>LessEqual</Operator><ValueExpression><Value Type="Double">$Config/SystemDriveWarningThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">ObjectName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Logical Disk</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">SampleValue</XPathQuery></ValueExpression><Operator>Greater</Operator><ValueExpression><Value
Type="Double">$Config/NonSystemDriveErrorThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">SampleValue</XPathQuery></ValueExpression><Operator>LessEqual</Operator><ValueExpression><Value Type="Double">$Config/NonSystemDriveWarningThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></Or></Expression></ConditionDetection><ConditionDetection ID="ErrorCD" TypeID="System!System.ExpressionFilter"><Expression><Or><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">ObjectName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">System Logical Disk</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">SampleValue</XPathQuery></ValueExpression><Operator>LessEqual</Operator><ValueExpression><Value
Type="Double">$Config/SystemDriveErrorThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">ObjectName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Logical Disk</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">SampleValue</XPathQuery></ValueExpression><Operator>LessEqual</Operator><ValueExpression><Value Type="Double">$Config/NonSystemDriveErrorThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></Or></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="UnderWarningThresholds"><Node ID="HealthyCD"><Node ID="SamplesCD"><Node ID="DS" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="OverWarningUnderErrorThresholds"><Node
ID="WarningCD"><Node ID="SamplesCounter"><Node ID="SamplesCD"><Node ID="DS" /></Node></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="OverErrorThresholds"><Node ID="ErrorCD"><Node ID="SamplesCounter"><Node ID="SamplesCD"><Node ID="DS" /></Node></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.Windows.Server.10.0.Legacy.LogicalDisk.FreeSpace.Monitortype" Accessibility="Public"><MonitorTypeStates><MonitorTypeState ID="UnderWarningThresholds" NoDetection="false" /><MonitorTypeState ID="OverWarningUnderErrorThresholds" NoDetection="false" /><MonitorTypeState ID="OverErrorThresholds" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetComputerName" type="xsd:string" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SystemDriveWarningMBytesThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SystemDriveWarningPercentThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SystemDriveErrorMBytesThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SystemDriveErrorPercentThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="NonSystemDriveWarningMBytesThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="NonSystemDriveWarningPercentThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="NonSystemDriveErrorMBytesThreshold" type="xsd:double" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="NonSystemDriveErrorPercentThreshold" type="xsd:double" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DiskLabel" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DebugFlag" type="xsd:boolean" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="SystemDriveWarningMBytesThreshold" Selector="$Config/SystemDriveWarningMBytesThreshold$" ParameterType="double" /><OverrideableParameter ID="SystemDriveWarningPercentThreshold" Selector="$Config/SystemDriveWarningPercentThreshold$" ParameterType="double" /><OverrideableParameter ID="SystemDriveErrorMBytesThreshold" Selector="$Config/SystemDriveErrorMBytesThreshold$" ParameterType="double" /><OverrideableParameter ID="SystemDriveErrorPercentThreshold" Selector="$Config/SystemDriveErrorPercentThreshold$" ParameterType="double" /><OverrideableParameter
ID="NonSystemDriveWarningMBytesThreshold" Selector="$Config/NonSystemDriveWarningMBytesThreshold$" ParameterType="double" /><OverrideableParameter ID="NonSystemDriveWarningPercentThreshold" Selector="$Config/NonSystemDriveWarningPercentThreshold$" ParameterType="double" /><OverrideableParameter ID="NonSystemDriveErrorMBytesThreshold" Selector="$Config/NonSystemDriveErrorMBytesThreshold$" ParameterType="double" /><OverrideableParameter ID="NonSystemDriveErrorPercentThreshold" Selector="$Config/NonSystemDriveErrorPercentThreshold$" ParameterType="double" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /><OverrideableParameter ID="DebugFlag" Selector="$Config/DebugFlag$" ParameterType="bool" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="ScriptDS"
TypeID="Microsoft.Windows.Server.10.0.Legacy.LogicalDisk.FreeSpace.ModuleType"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><TargetComputerName>$Config/TargetComputerName$</TargetComputerName><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><DebugFlag>$Config/DebugFlag$</DebugFlag></DataSource><ConditionDetection ID="FilterOK" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='DiskLabel']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/DiskLabel$</Value></ValueExpression></SimpleExpression></Expression><Expression><Not><Expression><Or><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='IsSystem']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="Boolean">true</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='PctFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/SystemDriveErrorPercentThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='MbFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/SystemDriveErrorMBytesThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='IsSystem']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="Boolean">false</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='PctFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/NonSystemDriveErrorPercentThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='MbFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/NonSystemDriveErrorMBytesThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></Or></Expression></Not></Expression><Expression><Not><Expression><Or><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='IsSystem']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="Boolean">true</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='PctFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/SystemDriveWarningPercentThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='MbFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/SystemDriveWarningMBytesThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='IsSystem']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="Boolean">false</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='PctFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/NonSystemDriveWarningPercentThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='MbFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/NonSystemDriveWarningMBytesThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></Or></Expression></Not></Expression></And></Expression></ConditionDetection><ConditionDetection ID="FilterWarning" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="String">Property[@Name='DiskLabel']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/DiskLabel$</Value></ValueExpression></SimpleExpression></Expression><Expression><Not><Expression><Or><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='IsSystem']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">true</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='PctFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/SystemDriveErrorPercentThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='MbFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value
Type="Double">$Config/SystemDriveErrorMBytesThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='IsSystem']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">false</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='PctFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/NonSystemDriveErrorPercentThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='MbFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value
Type="Double">$Config/NonSystemDriveErrorMBytesThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></Or></Expression></Not></Expression><Expression><Or><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='IsSystem']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">true</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='PctFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/SystemDriveWarningPercentThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='MbFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value
Type="Double">$Config/SystemDriveWarningMBytesThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='IsSystem']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">false</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='PctFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/NonSystemDriveWarningPercentThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='MbFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value
Type="Double">$Config/NonSystemDriveWarningMBytesThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></Or></Expression></And></Expression></ConditionDetection><ConditionDetection ID="FilterNotOK" TypeID="System!System.ExpressionFilter"><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Property[@Name='DiskLabel']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">$Config/DiskLabel$</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='IsSystem']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">true</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="Double">Property[@Name='PctFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/SystemDriveErrorPercentThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='MbFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/SystemDriveErrorMBytesThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Boolean">Property[@Name='IsSystem']</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Boolean">false</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='PctFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value
Type="Double">$Config/NonSystemDriveErrorPercentThreshold$</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Property[@Name='MbFree']</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/NonSystemDriveErrorMBytesThreshold$</Value></ValueExpression></SimpleExpression></Expression></And></Expression></Or></Expression></And></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="UnderWarningThresholds"><Node ID="FilterOK"><Node ID="ScriptDS" /></Node></RegularDetection><RegularDetection MonitorTypeStateID="OverWarningUnderErrorThresholds"><Node ID="FilterWarning"><Node ID="ScriptDS" /></Node></RegularDetection><RegularDetection MonitorTypeStateID="OverErrorThresholds"><Node ID="FilterNotOK"><Node ID="ScriptDS"
/></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.Windows.Server.10.0.Processor.Monitortype" Accessibility="Public"><MonitorTypeStates><MonitorTypeState ID="UnderThreshold" NoDetection="false" /><MonitorTypeState ID="OverThreshold" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CounterName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ObjectName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InstanceName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Frequency" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Threshold" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="NumSamples" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="TimeoutSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="Frequency" Selector="$Config/Frequency$" ParameterType="int" /><OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="int" /><OverrideableParameter ID="NumSamples" Selector="$Config/NumSamples$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS" TypeID="Microsoft.Windows.Server.10.0.Processor.Performance.ModuleType"><CounterName>$Config/CounterName$</CounterName><ObjectName>$Config/ObjectName$</ObjectName><InstanceName>$Config/InstanceName$</InstanceName><Frequency>$Config/Frequency$</Frequency><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></DataSource><ConditionDetection ID="SamplesCD"
TypeID="SystemPerf!System.Performance.ConsecutiveSamplesCondition"><Threshold>$Config/Threshold$</Threshold><Direction>greaterequal</Direction></ConditionDetection><ConditionDetection ID="ErrorCD" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>GreaterEqual</Operator><ValueExpression><Value Type="Double">$Config/NumSamples$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="HealthyCD" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Double">Value</XPathQuery></ValueExpression><Operator>Less</Operator><ValueExpression><Value Type="Double">$Config/NumSamples$</Value></ValueExpression></SimpleExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="UnderThreshold"><Node ID="HealthyCD"><Node ID="SamplesCD"><Node
ID="DS" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="OverThreshold"><Node ID="ErrorCD"><Node ID="SamplesCD"><Node ID="DS" /></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType><UnitMonitorType ID="Microsoft.Windows.Server.10.0.TimeOffset.Monitortype" Accessibility="Internal"><MonitorTypeStates><MonitorTypeState ID="TimeOffsetNormal" NoDetection="false" /><MonitorTypeState ID="TimeOffsetHigh" NoDetection="false" /></MonitorTypeStates><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Threshold" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="NumSamples"
type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="CounterName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ObjectName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="InstanceName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="AllInstances" type="xsd:boolean" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /><OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="string" /><OverrideableParameter ID="NumSamples" Selector="$Config/NumSamples$" ParameterType="int" /></OverrideableParameters><MonitorImplementation><MemberModules><DataSource ID="DS1"
TypeID="Microsoft.Windows.Server.10.0.TimeOffset.ModuleType"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><TargetComputerName>$Config/TargetComputerName$</TargetComputerName><NumSamples>$Config/NumSamples$</NumSamples><CounterName>$Config/CounterName$</CounterName><ObjectName>$Config/ObjectName$</ObjectName><InstanceName>$Config/InstanceName$</InstanceName><AllInstances>$Config/AllInstances$</AllInstances></DataSource><ProbeAction ID="ProbeActionDS" TypeID="Microsoft.Windows.Server.10.0.PowerShellPropertyBagProbe"><ScriptName>Microsoft.Windows.Server.TimeOffset.Monitortype.ps1</ScriptName><PSparam>param ($TimeOffSet_THRESHOLD, $TargetComputer, $Time_Offset)</PSparam><ScriptBody>
#Copyright (c) Microsoft Corporation. All rights reserved.
                      
# Parameters that should be passed to this script
# 0 TimeOffSet_THRESHOLD
# 1 Time_Offset
[Decimal]$thold 
[Decimal]$toffset
	
$useCulture = New-Object System.Globalization.CultureInfo("en-US")
[Decimal]$toffset = [convert]::ToDecimal($Time_Offset,$useCulture)
# default threshold value in a form of MilliSeconds
# we can change threshold values to in form of Microseconds, Ex: threshold = 0.001 is a 1 Microsecond
# Converting threshold value in milliseconds  to microseconds. Hence we need to convert to decimal.
[Decimal]$thold = [convert]::ToDecimal($TimeOffSet_THRESHOLD,$useCulture)
Function Main()
{    
TraceLogMessage("Computed Time Offset " + $Time_Offset.ToString())
   $thold = $thold * 1000
    if ($toffset -le 0 )
    {
		ReturnResults "GOOD" $toffset
    }
	elseif($toffset - $thold -ge 0)
	{
		ReturnResults "BAD" $toffset
	}
	else
	{
		 ReturnResults "GOOD" $toffset
	}
}
Function ReturnResults
{
    param ($State, [Decimal]$toffset)
	[string]$message1 = $toffset.ToString()  + " Micro Seconds"
    $oBag = $momAPI.CreatePropertyBag()
    $oBag.AddValue("State", $State)
    #$oBag.AddValue("TimeOffset", $toffset)
	
	$oBag.AddValue("TimeOffset", $message1)
	if($State -eq "BAD")
	{
	  $oBag.AddValue("Description", "Time Accuracy Out of Range")
	}
    $oBag
}
Main
</ScriptBody><Parameters><Parameter><Name>TimeOffSet_THRESHOLD</Name><Value>$Config/Threshold$</Value></Parameter><Parameter><Name>TargetComputer</Name><Value>$Config/TargetComputerName$</Value></Parameter><Parameter><Name>Time_Offset</Name><Value>$Data/Value$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></ProbeAction><ConditionDetection ID="FilterOK" TypeID="System!System.ExpressionFilter"><Expression><RegExExpression><ValueExpression><XPathQuery>Property[@Name='State']</XPathQuery></ValueExpression><Operator>ContainsSubstring</Operator><Pattern>GOOD</Pattern></RegExExpression></Expression></ConditionDetection><ConditionDetection ID="FilterNotOK"
TypeID="System!System.ExpressionFilter"><Expression><RegExExpression><ValueExpression><XPathQuery>Property[@Name='State']</XPathQuery></ValueExpression><Operator>ContainsSubstring</Operator><Pattern>BAD</Pattern></RegExExpression></Expression></ConditionDetection></MemberModules><RegularDetections><RegularDetection MonitorTypeStateID="TimeOffsetNormal"><Node ID="FilterOK"><Node ID="ProbeActionDS"><Node ID="DS1" /></Node></Node></RegularDetection><RegularDetection MonitorTypeStateID="TimeOffsetHigh"><Node ID="FilterNotOK"><Node ID="ProbeActionDS"><Node ID="DS1" /></Node></Node></RegularDetection></RegularDetections></MonitorImplementation></UnitMonitorType></MonitorTypes></TypeDefinitions><Categories><Category ID="Cat.Microsoft.Windows.Server.10.0.DiskPartition.ComputerManagement.Task" Target="Microsoft.Windows.Server.10.0.DiskPartition.ComputerManagement.Task" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category
ID="Cat.Microsoft.Windows.Server.10.0.LogicalDisk.ComputerManagement.Task" Target="Microsoft.Windows.Server.10.0.LogicalDisk.ComputerManagement.Task" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.Windows.Server.10.0.NetworkAdapter.ComputerManagement.Task" Target="Microsoft.Windows.Server.10.0.NetworkAdapter.ComputerManagement.Task" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.Windows.Server.10.0.OperatingSystem.ComputerManagement.Task" Target="Microsoft.Windows.Server.10.0.OperatingSystem.ComputerManagement.Task" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category ID="Cat.Microsoft.Windows.Server.10.0.PhysicalDisk.ComputerManagement.Task" Target="Microsoft.Windows.Server.10.0.PhysicalDisk.ComputerManagement.Task" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /><Category
ID="Cat.Microsoft.Windows.Server.10.0.Processor.ComputerManagement.Task" Target="Microsoft.Windows.Server.10.0.Processor.ComputerManagement.Task" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" /></Categories><Monitoring><Rules><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.CheckingFileSystemOccuredOnStartup.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Application</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Wininit</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>1001</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.CleanShutdown.Collection" Enabled="false"
Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Eventlog</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>6006</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectEvent"
/><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.DirtyShutdown.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Eventlog</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>6008</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.EventLogFull.Alert" Enabled="true"
Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Microsoft-Windows-Eventlog</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>6000</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="GenerateAlert"
TypeID="SystemHealth!System.Health.GenerateAlert"><Priority>1</Priority><Severity>1</Severity><AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.10.0.OperatingSystem.EventLogFull.Alert.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue /></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.IPAddressConflict.Alert" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>TCPIP</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>4198</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>4199</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="GenerateAlert"
TypeID="SystemHealth!System.Health.GenerateAlert"><Priority>1</Priority><Severity>2</Severity><AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.10.0.OperatingSystem.IPAddressConflict.Alert.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue /></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.LDMCantReadDisk.Alert" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>DISK</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>31</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="GenerateAlert"
TypeID="SystemHealth!System.Health.GenerateAlert"><Priority>1</Priority><Severity>1</Severity><AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.10.0.OperatingSystem.LDMCantReadDisk.Alert.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue /></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.NetworkAdapterDisconnected.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>TCPIP</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>4202</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.NTFSDelayedWriteLost.Alert" Enabled="true"
Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>DISK</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Ntfs</Value></ValueExpression></SimpleExpression></Expression></Or></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>11</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpr
ession><Operator>Equal</Operator><ValueExpression><Value>50</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="GenerateAlert" TypeID="SystemHealth!System.Health.GenerateAlert"><Priority>1</Priority><Severity>1</Severity><AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.10.0.OperatingSystem.NTFSDelayedWriteLost.Alert.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue /></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.NTFSFileSystemCorrupt.Alert" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>DISK</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Ntfs</Value></ValueExpression></SimpleExpression></Expression></Or></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">41</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">55</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="GenerateAlert" TypeID="SystemHealth!System.Health.GenerateAlert"><Priority>1</Priority><Severity>1</Severity><AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.10.0.OperatingSystem.NTFSFileSystemCorrupt.Alert.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue /></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.NTFSQuotaThresholdLimitReached.Collection" Enabled="false"
Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>DISK</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>40</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectEvent"
/><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.NTFSQuotaThresholdReached.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>DISK</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>36</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.PerfCounterDataRequestTimeOut.Alert" Enabled="true"
Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Application</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Perflib</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>1015</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="GenerateAlert"
TypeID="SystemHealth!System.Health.GenerateAlert"><Priority>1</Priority><Severity>2</Severity><AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.10.0.OperatingSystem.PerfCounterDataRequestTimeOut.Alert.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue /></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.PerformanceRegistryCorruption.Alert" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Application</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>loadperf</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><Or><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>2004</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>2006</Value></ValueExpression></SimpleExpression></Expression></Or></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQu
ery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>2007</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>3000</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></Or></Expression><Expression><Or><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>3001</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>3002</Value></ValueExpression></SimpleExpression></Expression></Or></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNu
mber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>3012</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>3018</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>3015</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></Or></Expression></Or></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="GenerateAlert"
TypeID="SystemHealth!System.Health.GenerateAlert"><Priority>1</Priority><Severity>1</Severity><AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.10.0.OperatingSystem.PerformanceRegistryCorruption.Alert.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue /></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.RebootFromBugCheck.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>BugCheck</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>1000</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>1001</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB"
TypeID="SC!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.RestartEvent.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Eventlog</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>6005</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.ServiceEnteredUnpredictableState.Alert"
Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Service Control
Manager</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7037</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7030</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="GenerateAlert" TypeID="SystemHealth!System.Health.GenerateAlert"><Priority>1</Priority><Severity>2</Severity><AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.10.0.OperatingSystem.ServiceEnteredUnpredictableState.Alert.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue
/></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.ServiceMisconfigured.Alert" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Service Control
Manager</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7015</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7017</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7018</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7019</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExp
ression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7020</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="GenerateAlert" TypeID="SystemHealth!System.Health.GenerateAlert"><Priority>1</Priority><Severity>2</Severity><AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.10.0.OperatingSystem.ServiceMisconfigured.Alert.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue /></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.ServiceOrDriverFailedToStart.Alert" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal"
DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Service Control
Manager</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7000</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7001</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7002</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7003</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExp
ression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7008</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7022</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7023</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7025</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7
026</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7038</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7041</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="GenerateAlert" TypeID="SystemHealth!System.Health.GenerateAlert"><Priority>1</Priority><Severity>1</Severity><AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.10.0.OperatingSystem.ServiceOrDriverFailedToStart.Alert.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue
/></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.ServiceOrDriverFailedToStart.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Service Control
Manager</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7000</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7001</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7002</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7003</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExp
ression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7008</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7022</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7023</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7025</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7
026</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7038</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7041</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.ServiceTerminatedUnexpextedly.Alert" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true"
Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Service Control
Manager</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7021</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7024</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7031</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7032</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExp
ression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7033</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7034</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="GenerateAlert" TypeID="SystemHealth!System.Health.GenerateAlert"><Priority>1</Priority><Severity>1</Severity><AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.10.0.OperatingSystem.ServiceTerminatedUnexpextedly.Alert.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue /></Suppression></WriteAction></WriteActions></Rule><Rule
ID="Microsoft.Windows.Server.10.0.OperatingSystem.ServiceTerminatedUnexpextedly.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Service Control
Manager</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7021</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7024</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7031</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7032</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExp
ression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7033</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>7034</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.ShareConfigurationInvalid.Alert" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Server</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>2507</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>2511</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="GenerateAlert"
TypeID="SystemHealth!System.Health.GenerateAlert"><Priority>1</Priority><Severity>1</Severity><AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.10.0.OperatingSystem.ShareConfigurationInvalid.Alert.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue /></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.ShareConfigurationInvalid.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Server</Value></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>2507</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>2511</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB"
TypeID="SC!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.SoftwareUpdateInstallationFailed.Alert" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Microsoft-Windows-WindowsUpdateClient</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>20</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="GenerateAlert"
TypeID="SystemHealth!System.Health.GenerateAlert"><Priority>1</Priority><Severity>2</Severity><AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.10.0.OperatingSystem.SoftwareUpdateInstallationFailed.Alert.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue /></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.SoftwareUpdateInstallationFailed.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Microsoft-Windows-WindowsUpdateClient</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>20</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule
ID="Microsoft.Windows.Server.10.0.OperatingSystem.SoftwareUpdatesInstalled.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Microsoft-Windows-WindowsUpdateClient</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>19</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule
ID="Microsoft.Windows.Server.10.0.OperatingSystem.SoftwareUpdatesScheduledForInstallation.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS"
TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Microsoft-Windows-WindowsUpdateClient</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>18</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectEvent" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /></WriteActions></Rule><Rule
ID="Microsoft.Windows.Server.10.0.LogicalDisk.NTFSFileSystemCorrupt.Alert" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Microsoft-Windows-Ntfs</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="UnsignedInteger">98</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Value Type="String">$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/Name$</Value></ValueExpression><Operator>Equal</Operator><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression></SimpleExpression></Expression><Expression><Or><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">Params/Param[3]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">1</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">Params/Param[3]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">2</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="UnsignedInteger">Params/Param[3]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">3</Value></ValueExpression></SimpleExpression></Expression></Or></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="GenerateAlert" TypeID="SystemHealth!System.Health.GenerateAlert"><Priority>1</Priority><Severity>1</Severity><AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.10.0.LogicalDisk.NTFSFileSystemCorrupt.Alert.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1><AlertParameter2>$Data/Params/Param[1]$</AlertParameter2><AlertParameter3>$Data/Params/Param[2]$</AlertParameter3><AlertParameter4>$Data/Params/Param[3]$</AlertParameter4></AlertParameters></WriteAction></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.ServerServiceConfiguration.Rule" Enabled="true"
Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>EventCollection</Category><DataSources><DataSource ID="EventDS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>System</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery>EventSourceName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>Server</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery>EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>2506</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectEvent"
/><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" /><WriteAction ID="GenerateAlert" TypeID="SystemHealth!System.Health.GenerateAlert"><Priority>1</Priority><Severity>1</Severity><AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.10.0.OperatingSystem.ServerServiceConfiguration.Rule.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/Context/EventDescription$</AlertParameter1></AlertParameters></WriteAction></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.PercentMemoryUsed.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="DS"
TypeID="Microsoft.Windows.Server.10.0.OperatingSystem.PercentMemoryUsed.ModuleType"><PhysicalMemory>$Target/Property[Type="Windows!Microsoft.Windows.OperatingSystem"]/PhysicalMemory$</PhysicalMemory><Tolerance>50</Tolerance><Frequency>300</Frequency><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.NetworkAdapter.CurrentBandwidth.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.NetworkAdapter" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS"
TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetbiosComputerName$</ComputerName><CounterName>Current Bandwidth</CounterName><ObjectName>Network Adapter</ObjectName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.NetworkAdapter"]/PerfmonInstance$</InstanceName><AllInstances>false</AllInstances><Frequency>600</Frequency><Tolerance>10</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>100</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.NetworkAdapter.OutputQueueLength.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.NetworkAdapter"
ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetbiosComputerName$</ComputerName><CounterName>Output Queue Length</CounterName><ObjectName>Network Adapter</ObjectName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.NetworkAdapter"]/PerfmonInstance$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>2</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule
ID="Microsoft.Windows.Server.10.0.NetworkAdapter.PercentBandwidthUsedReads.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.NetworkAdapter" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.Windows.Server.10.0.NetworkAdapter.BandwidthUsed.ModuleType"><IntervalSeconds>300</IntervalSeconds><IsDiscoverDisabled>true</IsDiscoverDisabled><IsUseMacAddress>true</IsUseMacAddress><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetbiosComputerName$</ComputerName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.NetworkAdapter"]/PerfmonInstance$</InstanceName><CounterName>PercentBandwidthUsedRead</CounterName></DataSource></DataSources><ConditionDetection ID="CD"
TypeID="Microsoft.Windows.Server.10.0.NetworkAdapter.BandwidthUsed.ConditionDetection.ModuleType"><Tolerance>10</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation><ReturnedObjectName>/DataItem/InstanceName</ReturnedObjectName><MonitoringObjectName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.NetworkAdapter"]/PerfmonInstance$</MonitoringObjectName><Frequency>300</Frequency></ConditionDetection><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.NetworkAdapter.PercentBandwidthUsedTotal.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.NetworkAdapter" ConfirmDelivery="true" Remotable="true" Priority="Normal"
DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.Windows.Server.10.0.NetworkAdapter.BandwidthUsed.ModuleType"><IntervalSeconds>300</IntervalSeconds><IsDiscoverDisabled>true</IsDiscoverDisabled><IsUseMacAddress>true</IsUseMacAddress><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetbiosComputerName$</ComputerName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.NetworkAdapter"]/PerfmonInstance$</InstanceName><CounterName>PercentBandwidthUsedTotal</CounterName></DataSource></DataSources><ConditionDetection ID="CD"
TypeID="Microsoft.Windows.Server.10.0.NetworkAdapter.BandwidthUsed.ConditionDetection.ModuleType"><Tolerance>10</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation><ReturnedObjectName>/DataItem/InstanceName</ReturnedObjectName><MonitoringObjectName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.NetworkAdapter"]/PerfmonInstance$</MonitoringObjectName><Frequency>300</Frequency></ConditionDetection><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.NetworkAdapter.PercentBandwidthUsedWrites.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.NetworkAdapter" ConfirmDelivery="true" Remotable="true" Priority="Normal"
DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.Windows.Server.10.0.NetworkAdapter.BandwidthUsed.ModuleType"><IntervalSeconds>300</IntervalSeconds><IsDiscoverDisabled>true</IsDiscoverDisabled><IsUseMacAddress>true</IsUseMacAddress><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetbiosComputerName$</ComputerName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.NetworkAdapter"]/PerfmonInstance$</InstanceName><CounterName>PercentBandwidthUsedWrite</CounterName></DataSource></DataSources><ConditionDetection ID="CD"
TypeID="Microsoft.Windows.Server.10.0.NetworkAdapter.BandwidthUsed.ConditionDetection.ModuleType"><Tolerance>10</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation><ReturnedObjectName>/DataItem/InstanceName</ReturnedObjectName><MonitoringObjectName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.NetworkAdapter"]/PerfmonInstance$</MonitoringObjectName><Frequency>300</Frequency></ConditionDetection><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.LogicalDisk.AvgDiskQueueLength.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource
ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Avg. Disk Queue Length</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>15</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.LogicalDisk.AvgDiskSecPerRead.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false"
Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Avg. Disk sec/Read</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>0.026</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule
ID="Microsoft.Windows.Server.10.0.LogicalDisk.AvgDiskSecPerTransfer.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Avg. Disk sec/Transfer</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>0.026</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction
ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.LogicalDisk.AvgDiskSecPerWrite.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Avg. Disk
sec/Write</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>0.026</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.LogicalDisk.CurrentDiskQueueLength.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS"
TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Current Disk Queue Length</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>32</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.LogicalDisk.DiskBytesPerSec.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false" Remotable="true"
Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Disk Bytes/sec</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>10</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.LogicalDisk.DiskReadsPerSec.Collection" Enabled="false"
Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Disk Reads/sec</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>10</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData"
/></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.LogicalDisk.DiskWritesPerSec.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Disk Writes/sec</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>10</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB"
TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.LogicalDisk.FreeMB.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Free
Megabytes</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>600</Frequency><Tolerance>10</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>6</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.LogicalDisk.FreeSpace.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS"
TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>% Free Space</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>600</Frequency><Tolerance>10</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>6</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.LogicalDisk.PercentIdle.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal"
DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>% Idle Time</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>50</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.LogicalDisk.DiskReadBytesPerSec.Collection" Enabled="false"
Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Disk Read Bytes/sec</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>10</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData"
/></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.LogicalDisk.DiskWriteBytesPerSec.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Disk Write Bytes/sec</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>10</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB"
TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.LogicalDisk.AverageDiskReadQueueLength.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Avg. Disk Read Queue
Length</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>15</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.LogicalDisk.AverageDiskWriteQueueLength.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS"
TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Avg. Disk Write Queue Length</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>15</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.LogicalDisk.SplitIOPerSec.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.LogicalDisk" ConfirmDelivery="false" Remotable="true"
Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Split IO/Sec</CounterName><ObjectName>LogicalDisk</ObjectName><InstanceName>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</InstanceName><AllInstances>false</AllInstances><Frequency>600</Frequency><Tolerance>10</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>6</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.NetworkAdapter.BytesReceivedPerSec.Collection"
Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.NetworkAdapter" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Bytes Received/sec</CounterName><ObjectName>Network Adapter</ObjectName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.NetworkAdapter"]/PerfmonInstance$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>25</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW"
TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.NetworkAdapter.BytesSentPerSec.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.NetworkAdapter" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Bytes Sent/sec</CounterName><ObjectName>Network
Adapter</ObjectName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.NetworkAdapter"]/PerfmonInstance$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>25</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.NetworkAdapter.BytesTotalPerSec.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.NetworkAdapter" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS"
TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Bytes Total/sec</CounterName><ObjectName>Network Adapter</ObjectName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.NetworkAdapter"]/PerfmonInstance$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>25</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.MemoryAvailableMBytes.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem"
ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Available MBytes</CounterName><ObjectName>Memory</ObjectName><InstanceName /><AllInstances>false</AllInstances><Frequency>600</Frequency><Tolerance>10</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>6</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.MemoryPageReadsPerSec.Collection" Enabled="false"
Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Page Reads/sec</CounterName><ObjectName>Memory</ObjectName><InstanceName /><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>250</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule
ID="Microsoft.Windows.Server.10.0.OperatingSystem.MemoryPagesPerSec.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Pages/sec</CounterName><ObjectName>Memory</ObjectName><InstanceName /><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>250</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData"
/></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.MemoryPageWritesPerSec.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Page Writes/sec</CounterName><ObjectName>Memory</ObjectName><InstanceName /><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>250</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW"
TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.MemoryPercentCommittedBytesInUse.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>% Committed Bytes In Use</CounterName><ObjectName>Memory</ObjectName><InstanceName /><AllInstances>false</AllInstances><Frequency>600</Frequency><Tolerance>10</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>6</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB"
TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.MemoryPoolNonPagedBytes.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Pool Nonpaged Bytes</CounterName><ObjectName>Memory</ObjectName><InstanceName
/><AllInstances>false</AllInstances><Frequency>600</Frequency><Tolerance>2000000</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>6</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.MemoryPoolPagedBytes.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Pool Paged
Bytes</CounterName><ObjectName>Memory</ObjectName><InstanceName /><AllInstances>false</AllInstances><Frequency>600</Frequency><Tolerance>2000000</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>6</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.PageFilePercentUsage.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS"
TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>% Usage</CounterName><ObjectName>Paging File</ObjectName><InstanceName>_Total</InstanceName><AllInstances>false</AllInstances><Frequency>600</Frequency><Tolerance>10</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>6</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.SystemContextSwitchesPerSec.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal"
DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Context Switches/sec</CounterName><ObjectName>System</ObjectName><InstanceName /><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>50</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.SystemProcessorQueueLength.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="false"
Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Processor Queue Length</CounterName><ObjectName>System</ObjectName><InstanceName /><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>10</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.TotalPercentDPCTime.Collection" Enabled="false"
Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>% DPC Time</CounterName><ObjectName>Processor Information</ObjectName><InstanceName>_Total</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>10</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule
ID="Microsoft.Windows.Server.10.0.OperatingSystem.TotalPercentInterruptTime.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>% Interrupt Time</CounterName><ObjectName>Processor Information</ObjectName><InstanceName>_Total</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>10</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW"
TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.OperatingSystem.TotalPercentProcessorTime.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>% Processor Time</CounterName><ObjectName>Processor Information</ObjectName><InstanceName>_Total</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>5</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB"
TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.PhysicalDisk.AvgDiskQueueLength.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.PhysicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Avg. Disk Queue
Length</CounterName><ObjectName>PhysicalDisk</ObjectName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.PhysicalDisk"]/PerfmonInstance$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>15</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.PhysicalDisk.AvgDiskSecPerRead.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.PhysicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS"
TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Avg. Disk sec/Read</CounterName><ObjectName>PhysicalDisk</ObjectName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.PhysicalDisk"]/PerfmonInstance$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>0.026</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.PhysicalDisk.AvgDiskSecPerTransfer.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.PhysicalDisk" ConfirmDelivery="false"
Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Avg. Disk sec/Transfer</CounterName><ObjectName>PhysicalDisk</ObjectName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.PhysicalDisk"]/PerfmonInstance$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>0.026</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule
ID="Microsoft.Windows.Server.10.0.PhysicalDisk.AvgDiskSecPerWrite.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.PhysicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Avg. Disk sec/Write</CounterName><ObjectName>PhysicalDisk</ObjectName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.PhysicalDisk"]/PerfmonInstance$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>0.026</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB"
TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.PhysicalDisk.CurrentDiskQueueLength.Collection" Enabled="true" Target="ServervNext!Microsoft.Windows.Server.10.0.PhysicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Current Disk Queue
Length</CounterName><ObjectName>PhysicalDisk</ObjectName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.PhysicalDisk"]/PerfmonInstance$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>32</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.PhysicalDisk.DiskBytesPerSec.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.PhysicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS"
TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Disk Bytes/sec</CounterName><ObjectName>PhysicalDisk</ObjectName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.PhysicalDisk"]/PerfmonInstance$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>10</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.PhysicalDisk.DiskReadsPerSec.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.PhysicalDisk" ConfirmDelivery="false"
Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Disk Reads/sec</CounterName><ObjectName>PhysicalDisk</ObjectName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.PhysicalDisk"]/PerfmonInstance$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>10</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule
ID="Microsoft.Windows.Server.10.0.PhysicalDisk.DiskWritesPerSec.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.PhysicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Disk Writes/sec</CounterName><ObjectName>PhysicalDisk</ObjectName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.PhysicalDisk"]/PerfmonInstance$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>10</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData"
/><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.PhysicalDisk.PercentIdle.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.PhysicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS" TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>% Idle
Time</CounterName><ObjectName>PhysicalDisk</ObjectName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.PhysicalDisk"]/PerfmonInstance$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>50</Tolerance><ToleranceType>Absolute</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.PhysicalDisk.DiskReadBytesPerSec.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.PhysicalDisk" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>PerformanceCollection</Category><DataSources><DataSource ID="PerformanceDS"
TypeID="SystemPerf!System.Performance.OptimizedDataProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><CounterName>Disk Read Bytes/sec</CounterName><ObjectName>PhysicalDisk</ObjectName><InstanceName>$Target/Property[Type="WindowsServer!Microsoft.Windows.Server.PhysicalDisk"]/PerfmonInstance$</InstanceName><AllInstances>false</AllInstances><Frequency>300</Frequency><Tolerance>10</Tolerance><ToleranceType>Percentage</ToleranceType><MaximumSampleSeparation>12</MaximumSampleSeparation></DataSource></DataSources><WriteActions><WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" /><WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" /></WriteActions></Rule><Rule ID="Microsoft.Windows.Server.10.0.PhysicalDisk.DiskWriteBytesPerSec.Collection" Enabled="false" Target="ServervNext!Microsoft.Windows.Server.10.0.PhysicalDisk" ConfirmDelivery="false"
