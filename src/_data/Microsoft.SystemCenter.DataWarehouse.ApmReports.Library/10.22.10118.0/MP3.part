        SUM(SUM(ServerTime)) OVER(PARTITION BY PageUri) AS AvgPageServerTime,
        SUM(SUM(DOMTime)) OVER(PARTITION BY PageUri) AS AvgPageDOMTime,
        SUM(SUM(PeripheralTime)) OVER(PARTITION BY PageUri) AS AvgPagePeripheralTime,
        SUM(SUM(OnLoadTime)) OVER(PARTITION BY PageUri) AS AvgPageOnLoadTime,
        COUNT(UserId) OVER(PARTITION BY PageUri) AS AffectedUserCount
    FROM
          (
                SELECT
                    e.CSEventId,
                    MAX(e.PageUri) AS PageUri,
                    MAX(e.UserId) AS UserId,
                    MAX(e.CSEventGroupId) AS CSEventGroup,
                    MAX(COALESCE(p.NetworkTime,0))/1000 AS NetworkTime,
                    MAX(COALESCE(p.ServerTime,0))/1000 AS ServerTime,
                    MAX(COALESCE(p.DOMTime,0))/1000 AS DOMTime,
                    MAX(COALESCE(p.PeripheralTime,0))/1000 AS PeripheralTime,
                    MAX(COALESCE(p.OnLoadTime,0))/1000 AS OnLoadTime,
                    MAX(p.TotalTime)/1000 AS TotalTime,
                    MAX(COALESCE(CAST(p.TotalSize AS DECIMAL(35,2)),0))/1024 + SUM(COALESCE(CAST(a.ResponseSize AS DECIMAL(35,2)),0) + COALESCE(CAST(a.REQUESTSIZE AS DECIMAL(35,2)),0))/1024 AS TotalSize
                FROM
                    apm.CSEvent AS e (NOLOCK)
                    JOIN #SOURCEMACHINEFILTERTABLE AS f1 ON (f1.VALUEID = e.SourceId AND f1.TYPEID = 1)
                    JOIN #SOURCEMACHINEFILTERTABLE AS f2 ON (f2.VALUEID = e.MachineId AND f2.TYPEID = 2)
                    JOIN #SUBNETCFILTERTABLE AS f3 ON e.ipid = f3.IPID
					JOIN #PMSTATUSFILTERTABLE AS f4 ON (f4.VALUEID = e.PMStatus)                     
                    JOIN apm.CSPageEvent AS p (NOLOCK) ON e.CSEventId = p.CSEventId
                    LEFT OUTER JOIN apm.CSAjax AS a (NOLOCK) ON e.CSEventId = a.CSEventId
                WHERE
                    e.UTCDate &gt;= @STARTDATE
                    AND e.UTCDate &lt; @ENDDATE 
                    AND e.UserId IS NOT NULL
                    AND e.PageUri IS NOT NULL
                    AND p.TotalTime/1000.0 &gt;= @THRESHOLD
                GROUP BY
                    E.CSEventId /* Grouping by Id of the specific event to be able to
                                   summarize data of page event with Ajax ones which
                                   were generated by it. */
          ) AS pe
    GROUP BY
          PageUri,
          UserId
),
-- Calculating information about Java script and Ajax events
JSandAjaxEvents AS
(
    SELECT
        classType,
        ROW_NUMBER() OVER(PARTITION BY UserId ORDER BY COUNT(EventId) DESC, PageUri, [Action] ASC) AS RowId,
        UserId,
        PageUri,
        [Action],
        COUNT(*) AS EventCount,     
        COUNT(DISTINCT EventGroupId) AS ProblemCount,
        AVG(NetworkTime) AS NetworkTime,
        AVG(ServerTime) AS ServerTime,
        AVG(TotalTime - NetworkTime - ServerTime) AS ClientTime,
        AVG(TotalTime) AS TotalTime,
        -- This value is needed for ordering by maximum total time in the summary table
        MAX(MAX(TotalTime)) OVER(PARTITION BY UserId) AS MaxTotalTime,
        AVG(TotalSize) AS TotalSize,
        SUM(SUM(TotalSize)) OVER(PARTITION BY UserId) AS UserSumSize,
        SUM(SUM(NetworkTime)) OVER(PARTITION BY PageUri,[Action]) AS AllNetworkTime,
        SUM(SUM(ServerTime)) OVER(PARTITION BY PageUri,[Action]) AS AllServerTime,
        SUM(SUM(TotalTime - NetworkTime - ServerTime)) OVER(PARTITION BY PageUri,[Action]) AS AllClientTime,
        SUM(SUM(TotalTime)) OVER(PARTITION BY PageUri,[Action]) AS AllTotalTime,
        SUM(SUM(TotalTime)) OVER(PARTITION BY UserId) AS UserSumTime,
        COUNT(UserId) OVER(PARTITION BY PageUri,[Action]) AS AffectedUserCount,
        SUM(COUNT(*)) OVER(PARTITION BY UserId) AS TotalUserEventCount,
        SUM(COUNT(*)) OVER(PARTITION BY PageUri,[Action]) AS TotalPageEventCount
    FROM
        (
            SELECT
                MAX(CASE WHEN COALESCE(a.Synchronous,1) = 0 THEN 1 ELSE 2 END) AS classType, 
                e.CSEventId AS EventId,
                MAX(e.UserId) AS UserId,
                MAX(e.CSEventGroupId) AS EventGroupId,
                MAX(e.PageUri) AS PageUri,
                MAX(CASE WHEN COALESCE(a.Synchronous,1) = 0 THEN a.Uri ELSE j.Action END) AS [Action],
                SUM((COALESCE(a.NetworkTime,0) + COALESCE(a.ResponseTime,0))/1000) AS NetworkTime,
                SUM(COALESCE(a.ServerTime,0))/1000 AS ServerTime,
                MAX(COALESCE(j.TotalTime, a.TotalTime))/1000 AS TotalTime,
                CAST(SUM(COALESCE(a.REQUESTSIZE,0) + COALESCE(a.ResponseSize,0)) AS DECIMAL(35,2))/1024 AS TotalSize
            FROM
                apm.CSEvent (NOLOCK) as e
                JOIN #SOURCEMACHINEFILTERTABLE AS f1 ON (f1.VALUEID = e.SourceId AND f1.TYPEID = 1)
                JOIN #SOURCEMACHINEFILTERTABLE AS f2 ON (f2.VALUEID = e.MachineId AND f2.TYPEID = 2)
                JOIN #SUBNETCFILTERTABLE AS f3 ON e.ipid = f3.IPID
				JOIN #PMSTATUSFILTERTABLE AS f4 ON (f4.VALUEID = e.PMStatus)                 
                LEFT OUTER JOIN apm.CSJScriptEvent AS j ON e.CSEventId = j.CSEventId
                LEFT OUTER JOIN apm.CSAjax AS a ON e.CSEventId = a.CSEventId
            WHERE
                e.UTCDate &gt;= @STARTDATE
                AND e.UTCDate &lt; @ENDDATE
                AND e.UserId IS NOT NULL
                AND e.PageUri IS NOT NULL
                AND e.EventClass &lt;&gt; N'CSMPMonitorLog'
                AND e.CLassType = N'performance'
                AND COALESCE(j.TotalTime, a.TotalTime)/1000.0 &gt;= @THRESHOLD
            GROUP BY
                e.CSEventId  
        ) AS jsax
    GROUP BY
        jsax.UserId,
        jsax.PageUri,
        jsax.Action,
        jsax.classType
),
-- Prepairing template in which every user will have exactly five rows for top page, exceptionevents
PreResultTemplate AS
(
    SELECT
        UserId
    FROM
        apm.CSEvent (NOLOCK) AS e
        JOIN #SOURCEMACHINEFILTERTABLE AS f1 ON (f1.VALUEID = e.SourceId AND f1.TYPEID = 1)
        JOIN #SOURCEMACHINEFILTERTABLE AS f2 ON (f2.VALUEID = e.MachineId AND f2.TYPEID = 2)
        JOIN #SUBNETCFILTERTABLE AS f3 ON e.ipid = f3.IPID      
		JOIN #PMSTATUSFILTERTABLE AS f4 ON (f4.VALUEID = e.PMStatus)         
    WHERE
        UTCDate &gt;= @STARTDATE
        AND UTCDate &lt; @ENDDATE
        AND PageUri IS NOT NULL
        AND UserId IS NOT NULL
    GROUP BY 
        UserId
),
ResultTemplate AS -- Template which has exactly 5 rows for each user
(
    SELECT 
        pr.UserId,
        n.n AS RowId
    FROM
        PreResultTemplate as pr 
        CROSS JOIN APM.fn_numS(5) AS n
),
-- Calculating information about Exception events
ExceptionEvents AS
(
      SELECT
            4 AS classType,
            ROW_NUMBER() OVER(PARTITION BY UserId ORDER BY COUNT(CSEventId) DESC, [Description] ASC) AS RowId,
            UserId,
            Description,
            COUNT(CSEventId) AS EventCount,
            COUNT(DISTINCT CSEventGroupId) AS ProblemCount,
            COUNT(CASE WHEN CHARINDEX(N'MSIE', E.Browser) &gt; 0 THEN E.CSEventId END) AS IEEventCount,
            COUNT(CASE WHEN CHARINDEX(N'Firefox', E.Browser) &gt; 0 THEN E.CSEventId END) AS FirefoxEventCount,
            AVG(COUNT(CSEventId)*1.0) OVER(PARTITION BY [Description]) AS AllEventCount,
            AVG(COUNT(CASE WHEN CHARINDEX(N'MSIE', E.Browser) &gt; 0 THEN E.CSEventId END)*1.0) OVER(PARTITION BY [Description]) AS AllIEEventCount,
            AVG(COUNT(CASE WHEN CHARINDEX(N'Firefox', E.Browser) &gt; 0 THEN E.CSEventId END)*1.0) OVER(PARTITION BY [Description]) AS AllFirefoxEventCount,
            COUNT(UserId) OVER(PARTITION BY [Description]) AS AffectedUserCount,
            SUM(COUNT(CSEventId)) OVER(PARTITION BY UserId) AS UserEventCount
      FROM
            apm.CSEvent (NOLOCK) AS e
            JOIN #SOURCEMACHINEFILTERTABLE AS f1 ON (f1.VALUEID = e.SourceId AND f1.TYPEID = 1)
            JOIN #SOURCEMACHINEFILTERTABLE AS f2 ON (f2.VALUEID = e.MachineId AND f2.TYPEID = 2)
            JOIN #SUBNETCFILTERTABLE AS f3 ON e.ipid = f3.IPID
            JOIN #PMSTATUSFILTERTABLE AS f4 ON (f4.VALUEID = e.PMStatus) 
      WHERE
            e.UTCDate &gt;= @STARTDATE
            AND e.UTCDate &lt; @ENDDATE 
            AND e.UserId IS NOT NULL
            AND e.PageUri IS NOT NULL
            AND e.ClassType = N'exception'
      GROUP BY
            UserId,
            [Description]
),
-- Summarizing data from PageEvents, ExceptionEvents and JSandAjaxEvents CTE's
ResultTable AS
(
SELECT
        /* Create additional field to have an ability to sort out the unusual events when
        creating URLs*/
        js.classType,   
        /* Create additional field for sorting according to the @ORDERBY input parameter.
           Selecting maximum value of selected field for each user.                    */
        CASE @ORDERBY
            WHEN 1 THEN MAX(COALESCE(ex.UserEventCount,0) + COALESCE(pg.UserPageEventCount,0) + COALESCE(js.TotalUserEventCount,0)) OVER(PARTITION BY rt.UserId)
            WHEN 2 THEN SUM(COALESCE(ex.ProblemCount,0) + COALESCE(pg.ProblemCount,0) + COALESCE(js.ProblemCount,0)) OVER(PARTITION BY rt.UserId)
            WHEN 3 THEN MAX(COALESCE(pg.EventCount,0)) OVER(PARTITION BY rt.UserId)
            WHEN 4 THEN MAX(COALESCE(ex.EventCount,0)) OVER(PARTITION BY rt.UserId)
            -- Choosing the maximum value from the page and javascript event
            WHEN 5 THEN 
                    MAX(CASE WHEN COALESCE(pg.MaxTotalTime,0) &gt;= COALESCE(js.MaxTotalTime,0) 
                            THEN COALESCE(pg.MaxTotalTime,0)
                            ELSE COALESCE(js.MaxTotalTime,0)
                            END) OVER(PARTITION BY rt.UserId)
            -- Caculating average user page, ajax and javascript event time
            WHEN 6 THEN
                   (CASE WHEN  (MAX(COALESCE(pg.UserPageEventCount,0) + COALESCE(js.TotalUserEventCount,0))OVER(PARTITION BY rt.UserId)) &gt; 0
                            THEN (MAX(COALESCE(pg.UserSumTime,0) + COALESCE(js.UserSumTime,0)) OVER(PARTITION BY rt.UserId))/(MAX(COALESCE(pg.UserPageEventCount,0) + COALESCE(js.TotalUserEventCount,0))  OVER(PARTITION BY rt.UserId))
                            ELSE 0
                            END)
            -- Calculating average user page, ajax and javascript event size
            WHEN 7 THEN
                    (CASE WHEN (MAX(COALESCE(pg.UserPageEventCount,0) + COALESCE(js.TotalUserEventCount,0)) OVER(PARTITION BY rt.UserId))&gt; 0
                            THEN (MAX(COALESCE(pg.UserSumSize,0) + COALESCE(js.UserSumSize,0)) OVER(PARTITION BY rt.UserId))/(max(COALESCE(pg.UserPageEventCount,0)+COALESCE(js.TotalUserEventCount,0))OVER(PARTITION BY rt.UserId))
                            ELSE 0
                            END) 
      END   AS OrderData,
      rt.RowId,
      rt.UserId,
      (CASE WHEN (MAX(COALESCE(pg.UserPageEventCount,0) + COALESCE(js.TotalUserEventCount,0)) OVER(PARTITION BY rt.UserId))&gt; 0
                            THEN (MAX(COALESCE(pg.UserSumSize,0) + COALESCE(js.UserSumSize,0)) OVER(PARTITION BY rt.UserId))/(max(COALESCE(pg.UserPageEventCount,0)+COALESCE(js.TotalUserEventCount,0))OVER(PARTITION BY rt.UserId))
                            ELSE 0
                            END) AS UserAvgSize,
      (CASE WHEN  (MAX(COALESCE(pg.UserPageEventCount,0) + COALESCE(js.TotalUserEventCount,0))OVER(PARTITION BY rt.UserId)) &gt; 0
                            THEN (MAX(COALESCE(pg.UserSumTime,0) + COALESCE(js.UserSumTime,0)) OVER(PARTITION BY rt.UserId))/(MAX(COALESCE(pg.UserPageEventCount,0) + COALESCE(js.TotalUserEventCount,0))  OVER(PARTITION BY rt.UserId))
                            ELSE 0
                            END) AS UserAvgTime,
	-- Summarize problems count between all issues as this information is shown in summary table for user
      SUM(COALESCE(ex.ProblemCount,0) + COALESCE(pg.ProblemCount,0) + COALESCE(js.ProblemCount,0)) OVER(PARTITION BY rt.UserId) AS ProblemCount,
      MAX((COALESCE(ex.UserEventCount,0) + COALESCE(pg.UserPageEventCount,0) + COALESCE(js.TotalUserEventCount,0))) OVER(PARTITION BY rt.UserId) AS EventCount,
        -- Exception events details --
      (ex.Description) AS Ex_Description,
      (ex.EventCount) AS Ex_EventCount,
      (ex.IEEventCount) AS Ex_IEEventCount,
      (ex.FireFoxEventCount) AS Ex_FireFoxEventCount,
      (ex.AllEventCount) AS Ex_AllEventCount,
      (ex.AllIEEventCount) AS Ex_AllIEEventCount,
      (ex.AllFirefoxEventCount) AS Ex_AllFirefoxEventCount,
      (ex.AffectedUserCount) AS Ex_AffectedUserCount,
      MAX(COALESCE(ex.UserEventCount,0)) OVER(PARTITION BY rt.UserId) AS Ex_UserEventCount,
        -- Page events details --
      (pg.PageUri) AS Pg_PageUri,
      (pg.MaxTotalTime) AS Pg_MaxTotalTime,
      (pg.EventCount) AS Pg_EventCount,
      (pg.NetworkTime) AS Pg_NetworkTime,
      (pg.ServerTime) AS Pg_ServerTime,
      (pg.DOMTime) AS Pg_DOMTime,
      (pg.PeripheralTime) AS Pg_PeripheralTime,
      (pg.OnLoadTime) AS Pg_OnLoadTime,
      (pg.TotalTime) AS Pg_TotalTime,
      (pg.TotalSize) AS Pg_TotalSize,
      (pg.AvgPageNetworkTime / pg.SamePageEventCount) AS Pg_AvgPageNetworkTime,
      (pg.AvgPageServerTime / pg.SamePageEventCount) AS Pg_AvgPageServerTime,
      (pg.AvgPageDOMTime / pg.SamePageEventCount) AS Pg_AvgPageDOMTime,
      (pg.AvgPagePeripheralTime / pg.SamePageEventCount) AS Pg_AvgPagePeripheralTime,
      (pg.AvgPageOnLoadTime / pg.SamePageEventCount) AS Pg_AvgPageOnLoadTime,
      (pg.AffectedUserCount) AS Pg_AffectedUserCount,
      (pg.UserSumTime / pg.UserPageEventCount) AS Pg_AvgUserTime,
      (pg.UserSumSize / pg.UserPageEventCount) AS Pg_AvgUserSize,
      MAX(pg.UserPageEventCount) OVER(PARTITION BY rt.UserId) AS Pg_UserPageEventCount,
        -- Javascript and Ajax events details --
      (js.PageUri) AS Js_PageUri,
      (js.Action) AS Js_Action,
      (js.MaxTotalTime) AS Js_MaxTotalTime,
      (js.EventCount) AS Js_EventCount,
      (js.NetworkTime) AS Js_NetworkTime,
      (js.ServerTime) AS Js_ServerTime,
      (js.ClientTime) AS Js_ClientTime,
      (js.TotalTime) AS Js_TotalTime,
      (js.TotalSize) AS Js_TotalSize,
      (js.AllNetworkTime / js.TotalPageEventCount) AS Js_AllNetworkTime,
      (js.AllServerTime / js.TotalPageEventCount) AS Js_AllServerTime,
      (js.AllClientTime / js.TotalPageEventCount) AS Js_AllClientTime,
      (js.AllTotalTime / js.TotalPageEventCount) AS Js_AllTotalTime,
      js.AffectedUserCount AS Js_AffectedUserCount,
      MAX(COALESCE(js.TotalUserEventCount,0)) OVER(PARTITION BY rt.UserId) AS Js_TotalUserEventCount
FROM
      ResultTemplate AS rt
      LEFT OUTER JOIN ExceptionEvents AS ex ON ex.UserId = rt.UserId AND ex.RowId = rt.RowId
      LEFT OUTER JOIN PageEvents AS pg ON pg.UserId = rt.UserId AND pg.RowId = rt.RowId
      LEFT OUTER JOIN JSandAjaxEvents AS js ON js.UserId = rt.UserId AND js.RowId = rt.RowId
)
SELECT 
    TOP 50 
    res.classType,
    res.OrderData, -- As we have exactly 5 rows for each user, we select the first ten of them.
    res.RowId,
    u.Name,
    res.ProblemCount,
    res.EventCount,
    res.UserAvgSize,
    res.UserAvgTime,
    res.Ex_Description,
    res.Ex_EventCount,
    res.Ex_IEEventCount,
    res.Ex_FireFoxEventCount,
    res.Ex_AllEventCount,
    res.Ex_AllIEEventCount,
    res.Ex_AllFirefoxEventCount,
    res.Ex_AffectedUserCount,
    res.Ex_UserEventCount,
    res.Pg_PageUri,
    res.Pg_MaxTotalTime,
    res.Pg_EventCount,
    res.Pg_NetworkTime,
    res.Pg_ServerTime,
    res.Pg_DOMTime,
    res.Pg_PeripheralTime,
    res.Pg_OnLoadTime,
    res.Pg_TotalTime,
    res.Pg_TotalSize,
    res.Pg_AvgPageNetworkTime,
    res.Pg_AvgPageServerTime,
    res.Pg_AvgPageDOMTime,
    res.Pg_AvgPagePeripheralTime,
    res.Pg_AvgPageOnLoadTime,
    res.Pg_AffectedUserCount,
    res.Pg_AvgUserTime,
    res.Pg_AvgUserSize,
    res.Pg_UserPageEventCount,
    res.Js_PageUri,
    res.Js_Action,
    res.Js_MaxTotalTime,
    res.Js_EventCount,
    res.Js_NetworkTime,
    res.Js_ServerTime,
    res.Js_ClientTime,
    res.Js_TotalTime,
    res.Js_TotalSize,
    res.Js_AllNetworkTime,
    res.Js_AllServerTime,
    res.Js_AllClientTime,
    res.Js_AllTotalTime,
    res.Js_AffectedUserCount,
    res.Js_TotalUserEventCount
FROM
    ResultTable AS res
    JOIN apm.Users AS u ON u.UserId = res.UserId
WHERE   
-- This condition is set as users where not filtered by threshold, and ther could be situations when there is no events at all
-- for some user. Such users should not be selected. It wouldn't have affect on ordering as for such users all other values is 0
    res.EventCount &gt; 0
ORDER BY
    res.OrderData DESC,u.Name,res.Rowid
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PCType_ConfigSync'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.PCType_ConfigSync AS RETURN 1')
  END
GO
/****************************************************************************************/
/* OBJECT: Stored Procedure                                                             */
/* NAME: PCType_ConfigSync                                                              */
/* USED IN: transfer routine : task=ConfigSynchronization;action=SyncPerfCountersAction */
/* DESCRIPTION: updates INSTANCEFUNCTION, DATEFUNCTION for counters, that are listed    */
/*  in configuration file                                                               */
/* INPUT PARAMETERS:                                                                    */
/*      @DESCRIPTORS    - List of counters in XML format (aggregation/perfcounterSet    */
/*      @TRACELEVEL     - service variable (error tracing level)                        */
/****************************************************************************************/
alter  PROCEDURE APM.PCType_ConfigSync
   @DESCRIPTORS NTEXT
  ,@TRACELEVEL INT
AS
BEGIN
  SET NOCOUNT ON
  DECLARE 
     @ERRORIND        BIT
    ,@ERRORMESSAGE    NVARCHAR(MAX)
    ,@ERRORNUMBER     INT
    ,@ERRORSEVERITY   INT
    ,@ERRORSTATE      INT
    ,@ERRORLINE       INT
    ,@ERRORPROCEDURE  NVARCHAR(256)
    ,@ERRORMESSAGETEXT NVARCHAR(MAX)
  BEGIN TRY
      DECLARE @EXECRESULT INT
      DECLARE @ROWCOUNT INT
      DECLARE @HANDLER INT
      -- Prepare xml document
      EXEC SP_XML_PREPAREDOCUMENT @HANDLER OUTPUT, @DESCRIPTORS
      IF @EXECRESULT &lt;&gt; 0 
      BEGIN
          SELECT  @ERRORMESSAGE = message FROM APM.messages WHERE id = 50002   
          RAISERROR(@ERRORMESSAGE, 16, 1, 'PCType_ConfigSync', @EXECRESULT)
      END
      -- Create temporary table for counters
      CREATE TABLE #DESCRIPTORSET (
        DESCRIPTOR NVARCHAR(255) collate database_default NOT NULL,
        INSTANCEFUNCTION NVARCHAR(50) collate database_default NOT NULL,
        DATEFUNCTION NVARCHAR(50) collate database_default NOT NULL
      )
      -- Fill table with date from xml
      INSERT INTO #DESCRIPTORSET
        SELECT NAME, COALESCE(INSTANCEFUNC,'AVG'), COALESCE(DATEFUNC,'AVG')
          FROM OPENXML (@HANDLER, '/perfcounterSet/perfcounter', 1)
            WITH (NAME  NVARCHAR(255), INSTANCEFUNC NVARCHAR(50) , DATEFUNC NVARCHAR(50))
      SET @ROWCOUNT = @@ROWCOUNT
      EXEC SP_XML_REMOVEDOCUMENT @HANDLER
      -- Update PCTYPE table with new aggregate function values
      UPDATE T
      SET   T.INSTANCEFUNCTION = sync.INSTANCEFUNCTION,
            T.DATEFUNCTION = sync.DATEFUNCTION
      FROM  apm.PCTYPE T 
            JOIN #DESCRIPTORSET sync ON sync.DESCRIPTOR = T.TYPE
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT &gt; 0)
      ROLLBACK TRAN
  
    SELECT 
       @ERRORNUMBER = ERROR_NUMBER()
      ,@ERRORSEVERITY = ERROR_SEVERITY()
      ,@ERRORSTATE = ERROR_STATE()
      ,@ERRORLINE = ERROR_LINE()
      ,@ERRORPROCEDURE = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ERRORMESSAGETEXT = ERROR_MESSAGE()
    SET @ERRORIND = 1
  END CATCH
  -- report error if any
  IF (@ERRORIND = 1)
  BEGIN
    DECLARE @ADJUSTEDERRORSEVERITY int
    SET @ADJUSTEDERRORSEVERITY = CASE
                                   WHEN @ERRORSEVERITY = 2601 OR @ERRORSEVERITY = 2627 THEN 0
                                   WHEN @ERRORSEVERITY &gt; 18 THEN 18
                                   ELSE @ERRORSEVERITY
                                 END
    
    SELECT @ERRORMESSAGE = message FROM APM.Messages WHERE id = 50004
    RAISERROR (@ERRORMESSAGE
      ,@ADJUSTEDERRORSEVERITY
      ,1
      ,@ERRORNUMBER
      ,@ERRORSEVERITY
      ,@ERRORSTATE
      ,@ERRORPROCEDURE
      ,@ERRORLINE
      ,@ERRORMESSAGETEXT
    )
  END
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.DeleteEventsOrEventGroups'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.DeleteEventsOrEventGroups AS RETURN 1')
  END
GO
/****************************************************************************************/
/* OBJECT: Stored Procedure                                                             */
/* NAME: DeleteEventsOrEventGroups                                                      */
/* DESCRIPTION:																			*/
/* Delete events using #EVENTGROOM(eventid) table or delete eventgroup that hot have    */				
/* events and older @LASTKEEPDATE. Events will be delete if #EVENTGROOM table is not    */
/* empty otherwise event groups will be deleted											*/
/* INPUT PARAMETERS:																    */
/*   @ROWSPERITERATION - number of records that have been deleted by one delete			*/
/*                       instruction		                                            */  
/*   @CLIENT - 1:client events 0:server events											*/
/*   @LASTKEEPDATE - last keep date. It use for delete event groups						*/
/* OUTPUT PARAMETERS:                                                                   */
/*   @ROWSAFFECTED  - Number of deleted  events or event groups						    */
/****************************************************************************************/
alter PROCEDURE APM.DeleteEventsOrEventGroups 
    @ROWSPERITERATION int
   ,@CLIENT bit
   ,@LASTKEEPDATE datetime
   ,@ROWSAFFECTED int OUTPUT	
AS
    SET @ROWSAFFECTED = 0
    IF @CLIENT = 0  
    BEGIN
        --delete server events
        IF EXISTS(SELECT * FROM #EVENTGROOM)
        BEGIN                
			--- Grooming performance node ---------
			DELETE pn
			FROM APM.PerformanceNode AS pn
				JOIN #EVENTGROOM AS eventFilter ON pn.eventid = eventFilter.EVENTID
			--- Grooming resource group node ---------
			DELETE rgn
			FROM APM.ResourceGroupNode AS rgn
				JOIN #EVENTGROOM AS eventFilter ON rgn.eventid = eventFilter.EVENTID
			--- Grooming exception node ---------
			DELETE en
			FROM APM.ExceptionNode AS en
				JOIN #EVENTGROOM AS eventFilter ON en.eventid = eventFilter.EVENTID
		        
			 -- Grooming server detail events --- 
			 DELETE ed
			 FROM APM.eventdetail AS ed
				JOIN #EVENTGROOM AS eventFilter ON ed.eventid = eventFilter.EVENTID                    
		    
			 DELETE e
			 FROM APM.Event AS e
				JOIN #EVENTGROOM AS eventFilter ON e.eventid = eventFilter.EVENTID
 			 SELECT @ROWSAFFECTED = @@ROWCOUNT
		END
		ELSE 
		BEGIN
		    -- delete server event groups
			WHILE EXISTS (SELECT * FROM APM.EventGroup G
							WHERE G.LASTEVENTDATE &lt; @LASTKEEPDATE
					 AND NOT EXISTS(SELECT * FROM EVENT e WHERE e.eventgroupId = G.EventGroupId)
				)           
			BEGIN
				DELETE TOP (@ROWSPERITERATION) g
					FROM APM.EventGroup AS g
				WHERE G.LASTEVENTDATE &lt; @LASTKEEPDATE
					 AND NOT EXISTS(SELECT * FROM EVENT e WHERE e.eventgroupId = G.EventGroupId)
				SELECT @ROWSAFFECTED = @ROWSAFFECTED + @@ROWCOUNT
			END
        END
	END	
    IF @CLIENT = 1  
    BEGIN
      -- delete client events
      IF EXISTS(SELECT * FROM #EVENTGROOM)
      BEGIN
		  -- Grooming PageEvent-----                  
		  DELETE pe
			 FROM APM.cspageevent AS pe
				JOIN #EVENTGROOM AS eventFilter ON pe.cseventid = eventFilter.EVENTID
		  -- Grooming Peripheral Details -----                
		  DELETE pd
			 FROM APM.csperipheraldetail AS pd
				JOIN APM.csperipheral AS pe ON pe.csperipheralId = pd.csperipheralId
				JOIN #EVENTGROOM AS eventFilter ON pe.cseventid = eventFilter.EVENTID
		  -- Grooming Peripheral ------ 
		  DELETE pe
			 FROM APM.csperipheral AS pe
				JOIN #EVENTGROOM AS eventFilter ON pe.cseventid = eventFilter.EVENTID
		  -- Grooming csHeaviestResource --- 
		  DELETE hr
			 FROM APM.csHeaviestResource AS hr
				JOIN #EVENTGROOM AS eventFilter ON hr.cseventid = eventFilter.EVENTID
		  -- Grooming ajax events --- 
		  DELETE aj
			 FROM APM.csAjax AS aj
				JOIN #EVENTGROOM AS eventFilter ON aj.cseventid = eventFilter.EVENTID
		  -- Grooming async ajax events --- 
		  DELETE aj
			 FROM APM.csAsyncAjax AS aj
				JOIN #EVENTGROOM AS eventFilter ON aj.cseventid = eventFilter.EVENTID
		  -- Grooming async jscript events --- 
		  DELETE js
			 FROM APM.csJScriptEvent AS js
				JOIN #EVENTGROOM AS eventFilter ON js.cseventid = eventFilter.EVENTID
		  -- Grooming client exception events --- 
		  DELETE ex
			 FROM APM.csexevent AS ex
				JOIN #EVENTGROOM AS eventFilter ON ex.cseventid = eventFilter.EVENTID
		  -- Grooming client detail events --- 
		  DELETE ed
			 FROM APM.cseventdetail AS ed
				JOIN #EVENTGROOM AS eventFilter ON ed.cseventid = eventFilter.EVENTID
	            
		  -- Grooming client events --- 
		  DELETE ev 
			 FROM APM.csEvent ev
				JOIN #EVENTGROOM AS eventFilter ON ev.cseventid = eventFilter.EVENTID
	            
		  SELECT @ROWSAFFECTED = @@ROWCOUNT
	  END
	  ELSE 
	  BEGIN
		  --delete client groups
		  WHILE EXISTS (SELECT * FROM APM.csEventGroup g
							WHERE g.lasteventdate &lt; @LASTKEEPDATE
					 AND NOT EXISTS(SELECT * FROM csEvent e WHERE e.cseventgroupId = g.csEventGroupId)
				)           
		  BEGIN
			DELETE TOP (@ROWSPERITERATION) g
				FROM APM.csEventGroup AS g
			WHERE g.lasteventdate &lt; @LASTKEEPDATE
				 AND NOT EXISTS(SELECT * FROM csEVENT e WHERE e.cseventgroupId = g.csEventGroupId)
			SELECT @ROWSAFFECTED = @ROWSAFFECTED + @@ROWCOUNT
		  END		
      END
    END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ExtractEventGroomingRows'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.ExtractEventGroomingRows AS RETURN 1')
  END
GO
/****************************************************************************************/
/* OBJECT: Stored Procedure                                                             */
/* NAME: ExtractEventGroomingRows                                                       */
/* DESCRIPTION:																			*/
/* It fill #EVENTGROOM(eventid) table from server or client events by date and status   */				
/* INPUT PARAMETERS:																    */
/*   @ROWSPERITERATION - number of records that have been selected from underline table */
/*   @LASTKEEPDATE     - last keep date.												*/
/*	 @DATABASEID       - database primary key from seviewerdb table						*/
/*   @CLIENT           - 1:client events 0:server events								*/
/*   @PMSTATUS	       - problem management												*/
/****************************************************************************************/
alter PROCEDURE [APM].[ExtractEventGroomingRows] 
    @ROWSPERITERATION int
   ,@LASTKEEPDATE datetime
   ,@DATABASEID int
   ,@CLIENT bit
   ,@PMSTATUS tinyint 
AS
	SET NOCOUNT ON
	
	IF @CLIENT = 0 
	BEGIN
	   --server events
	   IF @PMSTATUS IS null
		   INSERT #EVENTGROOM 
			 SELECT TOP(@ROWSPERITERATION) e.EventId
				FROM APM.event (NOLOCK) AS e
				  WHERE 
					 e.SEVIEWERDBID = @DATABASEID AND 
					 e.UTCEVENTDATE &lt; @LASTKEEPDATE
	   ELSE
		   INSERT #EVENTGROOM 
              SELECT TOP(@ROWSPERITERATION)  e.EventId 
                 FROM APM.EVENT (NOLOCK) E 
                     JOIN apm.PMSERVEREVENTTRACE (NOLOCK) ET ON E.EVENTID = ET.EVENTID 
                                       JOIN apm.PMTRACE PT (NOLOCK) ON PT.PMTRACEID = ET.PMTRACEID 
                      WHERE 
						e.PMSTATUS = @PMSTATUS AND 
						e.UTCEVENTDATE &lt; @LASTKEEPDATE AND 
						e.SEVIEWERDBID = @DATABASEID
                      GROUP BY 
						E.EVENTID
                      HAVING 
						MAX(PT.UTCDATE) &lt; @LASTKEEPDATE
                      ORDER BY 
						E.EVENTID ASC
	   	  			 
    END             
	ELSE 	
	BEGIN
	   --client events
	   IF @PMSTATUS IS null
		  INSERT #EVENTGROOM 
            SELECT TOP(@ROWSPERITERATION) e.cseventId
				FROM APM.csevent (NOLOCK) AS e
                  WHERE 
                    e.SEVIEWERDBID = @DATABASEID AND 
                    e.utcDate &lt; @LASTKEEPDATE
       ELSE
		  INSERT #EVENTGROOM 
              SELECT TOP(@ROWSPERITERATION)  e.csEventId 
                 FROM APM.CSEVENT (NOLOCK) E 
                     JOIN apm.PMCLIENTEVENTTRACE (NOLOCK) ET ON E.CSEVENTID = ET.CSEVENTID 
                        JOIN apm.PMTRACE PT (NOLOCK) ON PT.PMTRACEID = ET.PMTRACEID 
                      WHERE 
						e.PMSTATUS = @PMSTATUS AND 
						e.utcDate &lt; @LASTKEEPDATE AND 
						e.SEVIEWERDBID = @DATABASEID
                      GROUP BY 
                        E.CSEVENTID
                      HAVING 
                        MAX(PT.UTCDATE) &lt; @LASTKEEPDATE
                      ORDER BY 
                        E.csEVENTID ASC
    END             
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GroomingWorkTables'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.GroomingWorkTables AS RETURN 1')
  END
GO
/* PROCEDURE GROOM SERVER EVENTS, CLIENT EVENTS AND PERFORMANCE COUNTERS.           */  
/* Description: 																    */
/* The stored proc  delete old events and performance counters. It also delete      */
/* events with status 'Deleted' or 'By design' using parameters from config table.  */
/* INPUT PARAMETERS:                                                                */
/*   @TABLENAME:                                                                    */
/*      'Event' - grooming server and client events                                 */
/*      'PerfHourly'- grooming performance counters for the perfhourly table        */
/*      'PerfDaily'- grooming performance counters for the perfDaily table          */
/*   @DATABASEID: database identifier                                               */
/*   @RECORDCOUNT: batch record size                                                */
/*   @TRACELEVEL: trace level                                                       */
alter PROCEDURE [APM].[GroomingWorkTables]
        @TABLENAME nvarchar(255),
        @RECORDCOUNT INT, 
        @DATABASEID INT,
        @POSTGROOMINGPERIOD INT,
        @TRACELEVEL INT 
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @MESSAGE nvarchar(MAX)
    DECLARE @ROWSAFFECTED int
    DECLARE @TMPROWSAFFECTED int
    DECLARE 
         @ERRORIND        bit
        ,@ERRORMESSAGE    nvarchar(4000)
        ,@ERRORNUMBER     int
        ,@ERRORSEVERITY   int
        ,@ERRORSTATE      int
        ,@ERRORLINE       int
        ,@ERRORPROCEDURE  sysname
        ,@ERRORMESSAGETEXT nvarchar(4000)
    SET @ERRORIND = 0
    BEGIN TRY
        IF @TRACELEVEL = 4 
        BEGIN
          DECLARE 
             @PERIODDATESTR nvarchar(20)
          SET @PERIODDATESTR = CONVERT(nvarchar(20), DATEADD(Day, -@POSTGROOMINGPERIOD, GETUTCDATE()), 110)
          SELECT @MESSAGE = MESSAGE FROM APM.MESSAGES WHERE ID = 50033
          RAISERROR (@MESSAGE, 0, 1, @RECORDCOUNT, @POSTGROOMINGPERIOD, @PERIODDATESTR) WITH NOWAIT;      
        END 
        
        CREATE TABLE #EVENTGROOM (
            EVENTID BIGINT
        )
        
        --clear old events 
        IF @TABLENAME = N'Event'
        BEGIN
            -- create event groom settings
            DECLARE @EVENTGROOMSETTINGS TABLE 
				    (
				       id int IDENTITY(1,1)
					  ,configName nvarchar(50) -- configuration parameter
				      ,pmstatus tinyint -- problem management status id
					  ,client bit -- client or server event (1- client, 0 - server)
					  ,defaultLifeTime int -- default life time in hours
					)
            INSERT @EVENTGROOMSETTINGS(configName, pmstatus, client, defaultLifeTime) 
				SELECT N'PMLifeTimeInHoursForDeletedEvents' AS configName, 2 AS pmstatus, 0 AS client, 24 AS defaultLifeTime 
					UNION ALL 
				SELECT N'PMLifeTimeInHoursForDeletedEvents', 2, 1, 24 
					UNION ALL 
				SELECT N'PMLifeTimeInHoursForByDesignEvents', 3, 0, 72 
					UNION ALL 
				SELECT N'PMLifeTimeInHoursForByDesignEvents', 3, 1, 72 
					UNION ALL 
				SELECT NULL, NULL, 0, NULL  
					UNION ALL 
				SELECT NULL, NULL, 1, NULL 
				
			DECLARE 
			   @CONFIGNAME nvarchar(50)
			  ,@LASTKEEPDATE datetime
			  ,@CLIENT bit 
			  ,@PMSTATUS tinyint
			  ,@LIFETIMEINHOURS int
			  ,@DISPLAYTABLENAME sysname
			  ,@EVENTGROOMSETTINGSID int
			
			-- cycle by event groomsetting
			WHILE EXISTS(SELECT * FROM @EVENTGROOMSETTINGS) 
			BEGIN
			  --get first settings
			  SELECT TOP (1) 
			    @EVENTGROOMSETTINGSID = id 
			   ,@CONFIGNAME = configName
			   ,@PMSTATUS = pmstatus
			   ,@CLIENT = client
			   ,@LIFETIMEINHOURS = defaultLifeTime
			  FROM 
			    @EVENTGROOMSETTINGS 
			    
			  --calculate last keep date  
			  SELECT @LASTKEEPDATE = DATEADD(Day, -@POSTGROOMINGPERIOD, GETUTCDATE())
			  IF @CONFIGNAME IS NOT NULL  
			  BEGIN
			    SELECT @LIFETIMEINHOURS = CAST(CAST(configvalue AS nvarchar(10)) AS int) FROM APM.CONFIG (NOLOCK)
					WHERE configname = @CONFIGNAME
				SELECT @LASTKEEPDATE = DATEADD(hh, -@LIFETIMEINHOURS, GETUTCDATE()) 	   
			  END 								
			  			  
			  --trace grooming settings
			  DECLARE @LASTKEEPDATESTR nvarchar(50)
              SELECT @LASTKEEPDATESTR = CONVERT(nvarchar(50), @LASTKEEPDATE, 100)
              SELECT @MESSAGE = message FROM APM.MESSAGES (NOLOCK)  WHERE id = 50034 
              RAISERROR (@MESSAGE, 0, 1, 
				@PMSTATUS, @LIFETIMEINHOURS, @LASTKEEPDATESTR) WITH NOWAIT;  			  
			 
			  -- execute event grooming 			  
			  SELECT @ROWSAFFECTED = 0
			  WHILE 1 = 1
			  BEGIN
				TRUNCATE TABLE #EVENTGROOM
				--fill #EVENTGROOM
			    EXEC APM.ExtractEventGroomingRows 
			                   @RECORDCOUNT
                              ,@LASTKEEPDATE
                              ,@DATABASEID 
                              ,@CLIENT
                              ,@PMSTATUS
                --delete events if #EVENTGROOM is not empty otherwise delete old event groups              
				EXEC APM.DeleteEventsOrEventGroups 
				          @RECORDCOUNT
						 ,@CLIENT 
						 ,@LASTKEEPDATE
                         ,@TMPROWSAFFECTED OUTPUT	
                
                IF EXISTS(SELECT * FROM #EVENTGROOM)                    
                  -- calculate rows affected   
					SELECT @ROWSAFFECTED = @TMPROWSAFFECTED + @@ROWCOUNT
				ELSE	
                -- break if #EVENTGROOM is empty                       
					BREAK
			  END						  			  	
			  
			  DELETE @EVENTGROOMSETTINGS WHERE 
			    id = @EVENTGROOMSETTINGSID
			   
				----- Trace for events ------
			  IF @TRACELEVEL = 4 
			  BEGIN
 		        SELECT @DISPLAYTABLENAME =  CASE when @CLIENT = 1 THEN N'csEvent' ELSE N'Event' END
				SELECT @MESSAGE = MESSAGE FROM APM.MESSAGES WHERE ID = 50023
				RAISERROR (@MESSAGE, 0, 1, @ROWSAFFECTED, @DISPLAYTABLENAME) WITH NOWAIT;      
		      END 	
		      		      
			  ----- Trace for  groups ------
			  IF @TRACELEVEL = 4 
			  BEGIN
		        SELECT @DISPLAYTABLENAME =  CASE when @CLIENT = 1 THEN N'csEventGroup' ELSE N'EventGroup' END
			    SELECT @MESSAGE = MESSAGE FROM APM.MESSAGES WHERE ID = 50023
			    RAISERROR (@MESSAGE, 0, 1, @ROWSAFFECTED, @DISPLAYTABLENAME) WITH NOWAIT;     
			  END 		      		   					    
			END	
        END
        
        DROP TABLE #EVENTGROOM
        
        --clear PerfHourly table 
        IF @TABLENAME = N'PerfHourly'
        BEGIN 
            WHILE EXISTS (SELECT * FROM APM.PerfHourly 
                            WHERE UTCDate &lt; DATEADD(Day, -@POSTGROOMINGPERIOD, GETUTCDATE()))
            BEGIN
                DELETE TOP(@RECORDCOUNT) FROM APM.PerfHourly 
                    WHERE utcdate &lt; DATEADD(Day, -@POSTGROOMINGPERIOD, GETUTCDATE())            
                SELECT @ROWSAFFECTED = @ROWSAFFECTED + @@ROWCOUNT
            END
            IF @TRACELEVEL = 4 
            BEGIN
              SELECT @MESSAGE = MESSAGE FROM APM.MESSAGES WHERE ID = 50023
              RAISERROR (@MESSAGE, 0, 1, @ROWSAFFECTED, @TABLENAME) WITH NOWAIT;      
            END 
        END
        --clear PerfDaily table 
        IF @TABLENAME = N'PerfDaily'
        BEGIN 
            WHILE EXISTS (SELECT * FROM APM.PerfDaily 
                            WHERE UTCDATE &lt; DATEADD(Day, -@POSTGROOMINGPERIOD, GETUTCDATE()))
            BEGIN
                DELETE TOP(@RECORDCOUNT) FROM APM.PerfDaily 
                    WHERE UTCDATE &lt; DATEADD(Day, -@POSTGROOMINGPERIOD, GETUTCDATE())        
                SELECT @ROWSAFFECTED = @ROWSAFFECTED + @@ROWCOUNT
            END
            IF @TRACELEVEL = 4 
            BEGIN
              SELECT @MESSAGE = MESSAGE FROM APM.MESSAGES WHERE ID = 50023
              RAISERROR (@MESSAGE, 0, 1, @ROWSAFFECTED, @TABLENAME) WITH NOWAIT;      
            END 
        END
    END TRY
    BEGIN CATCH
        IF (@@TRANCOUNT &gt; 0)
            ROLLBACK TRAN
        SELECT 
            @ERRORNUMBER = ERROR_NUMBER()
            ,@ERRORSEVERITY = ERROR_SEVERITY()
            ,@ERRORSTATE = ERROR_STATE()
            ,@ERRORLINE = ERROR_LINE()
            ,@ERRORPROCEDURE = ISNULL(ERROR_PROCEDURE(), '-')
            ,@ERRORMESSAGETEXT = ERROR_MESSAGE()
        
        SET @ERRORIND = 1
    END CATCH
    IF (@ERRORIND = 1)
    BEGIN
        DECLARE 
            @ADJUSTEDERRORSEVERITY   INT
           ,@ERROR_MESSAGE            nvarchar(max)
        SET @ADJUSTEDERRORSEVERITY = CASE
                                        WHEN @ERRORSEVERITY &gt; 18 THEN 18
                                        ELSE @ERRORSEVERITY
                                      END
        
        SELECT @ERROR_MESSAGE = message FROM APM.Messages WHERE id = 50004
        RAISERROR (@ERROR_MESSAGE, @ADJUSTEDERRORSEVERITY, 1
          ,@ERRORNUMBER
          ,@ERRORSEVERITY
          ,@ERRORSTATE
          ,@ERRORPROCEDURE
          ,@ERRORLINE
          ,@ERRORMESSAGETEXT
    )
    END
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GetOldComputersOrSources'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.GetOldComputersOrSources AS RETURN 1')
  END
GO
alter PROCEDURE APM.GetOldComputersOrSources
        @ISCOMPUTER bit, @DEBUG bit
AS
BEGIN
    SET NOCOUNT ON
    DECLARE 
        @SQL nvarchar(MAX)  
       ,@FROMITEMTABLE nvarchar(1000)
       ,@FROMPCITEMTABLE nvarchar(1000)
       ,@EVENTFIELDS nvarchar(1000)
       ,@PCFIELDS nvarchar(1000)
       ,@WHEREITEM nvarchar(1000)
       ,@WHEREPCITEM nvarchar(1000)
        
    SELECT
         @EVENTFIELDS = CASE @ISCOMPUTER WHEN 1 
                        THEN N'm.MACHINEID AS Id, m.MACHINE AS ItemName, t.utceventdate AS LastRefreshDate' 
                        ELSE N's.SOURCEID AS Id, s.SOURCE AS ItemName, t.utceventdate AS LastRefreshDate' 
                   END
        ,@PCFIELDS = CASE @ISCOMPUTER WHEN 1 
                        THEN N'm.MACHINEID AS Id, m.MACHINE AS ItemName, t.utcdate AS LastRefreshDate' 
                        ELSE N's.SOURCEID AS Id, s.SOURCE AS ItemName, t.utcdate AS LastRefreshDate ' 
                   END      
        ,@FROMITEMTABLE = CASE @ISCOMPUTER WHEN 1 
                        THEN N'APM.MACHINE m (NOLOCK)' 
                        ELSE N'APM.SOURCE s (NOLOCK)' 
                   END
                   
        ,@WHEREITEM = CASE @ISCOMPUTER WHEN 1 
                        THEN N'WHERE t.MACHINEID = m.MACHINEID' 
                        ELSE N'WHERE t.SOURCEID = s.SOURCEID' 
                   END
                   
        ,@SQL = N'
  ;WITH AllItemsSet AS
  (  
        SELECT {0} 
            FROM {2}
                OUTER APPLY (
                    SELECT TOP 1 t.UTCEVENTDATE FROM APM.EVENT t (NOLOCK)
                        {3}
                    ORDER BY t.UTCEVENTDATE DESC
                ) t         
        UNION ALL 
        SELECT {1} 
            FROM {2}
                OUTER APPLY (
                    SELECT TOP 1 t.UTCDATE FROM APM.csEVENT t (NOLOCK)
                        {3}
                    ORDER BY t.UTCDATE DESC
                ) t         
        UNION ALL 
        
        SELECT {1} 
            FROM {2}
                OUTER APPLY (
                    SELECT TOP 1 t.UTCDATE FROM APM.PerfHourly t (NOLOCK)
                        {3}
                    ORDER BY t.UTCDATE DESC 
                ) t         
   )
   SELECT 0 AS Checked, Min(Id) AS Id, ItemName, MAX(LastRefreshDate) AS LastRefreshDate 
      FROM AllItemsSet
            GROUP BY 
              ItemName  
            ORDER BY 
               LastRefreshDate
   '
      SELECT @SQL = REPLACE(@SQL, N'{0}', @EVENTFIELDS)     
      SELECT @SQL = REPLACE(@SQL, N'{1}', @PCFIELDS)    
      SELECT @SQL = REPLACE(@SQL, N'{2}', @FROMITEMTABLE)   
      SELECT @SQL = REPLACE(@SQL, N'{3}', @WHEREITEM)
      IF @DEBUG = 1
        PRINT @SQL  
      EXEC sp_executesql @SQL, N''
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CalculateOldComputersOrSources'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.CalculateOldComputersOrSources AS RETURN 1')
  END
GO
alter PROCEDURE APM.CalculateOldComputersOrSources
        @ISCOMPUTER bit, @ITEMS nvarchar(MAX), @DEBUG bit, @RECCOUNT int OUTPUT
AS
BEGIN
    SET NOCOUNT ON
    IF LEN(@ITEMS) = 0  
    BEGIN 
      RAISERROR('Parameter @ITEMS is empty.', 16, 1, 'CalculateOldComputersOrSources')
      RETURN
    END
    DECLARE 
        @SQL nvarchar(MAX)  
       ,@JOINITEMTABLE nvarchar(1000)
       ,@JOINFILTER nvarchar(1000)
        
    SELECT
         @JOINITEMTABLE = CASE @ISCOMPUTER WHEN 1 
                        THEN N'JOIN APM.MACHINE m (NOLOCK) ON m.MachineId = t.MachineId' 
                        ELSE N'JOIN APM.SOURCE s (NOLOCK) ON s.SourceId = t.SourceId' 
                   END
        ,@JOINFILTER = CASE @ISCOMPUTER WHEN 1 
                        THEN N'JOIN APM.GetMultiParameters(@ITEMS, @EMPTY) f ON f.VALUE = m.MachineId' 
                        ELSE N'JOIN APM.GetMultiParameters(@ITEMS, @EMPTY) f ON f.VALUE = s.SourceId' 
                   END
        ,@SQL = N'
          ;WITH AllItemsSet AS
          (  
                SELECT COUNT(t.eventId) AS recCount 
                    FROM APM.EVENT t(NOLOCK) 
                        {0}
                        {1}
                UNION ALL 
                SELECT COUNT(t.cseventId) AS recCount 
                    FROM APM.csEVENT t(NOLOCK) 
                        {0}
                        {1}
                UNION ALL 
                
                SELECT COUNT(t.perfhourlyId) AS recCount
                    FROM APM.PERFHOURLY t (NOLOCK)
                        {0}
                        {1}
                UNION ALL 
                
                SELECT COUNT(t.perfdailyId) AS recCount
                    FROM APM.PERFDAILY t (NOLOCK)
                        {0}
                        {1}
           )
           SELECT @RECCOUNT=SUM(recCount) FROM AllItemsSet
       '
  DECLARE @PARAMS nvarchar(MAX)
  SELECT @SQL = REPLACE(@SQL, N'{0}', @JOINITEMTABLE)   
  SELECT @SQL = REPLACE(@SQL, N'{1}', @JOINFILTER)  
  IF @DEBUG = 1       
    PRINT @SQL  
  SELECT @PARAMS = N'@ITEMS nvarchar(max), @EMPTY nvarchar(10), @RECCOUNT int OUTPUT'
  EXEC sp_executesql @SQL, @PARAMS, @ITEMS, N'', @RECCOUNT = @RECCOUNT OUTPUT
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GroomingOldComputersOrSources'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.GroomingOldComputersOrSources AS RETURN 1')
  END
GO
ALTER PROCEDURE [apm].[GroomingOldComputersOrSources]
        @ISCOMPUTER BIT,
        @DELETEPERITERATION INT,
        @DELETEPERREQUEST int,
        @ITEMS nvarchar(MAX),
        @DEBUG bit,
        @DELETEDCOUNT int OUTPUT,
        @DONE bit OUTPUT 
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE 
        @SERVEREVENTDELETED int
       ,@CLIENTEVENTDELETED int
       ,@COUNTERDELETED int
    
    
    IF @DELETEPERITERATION &lt;= 0  
    BEGIN 
      RAISERROR('Parameter @DELETEPERITERATION is less or it is equal to zero.', 16, 1, 'GroomingOldComputersOrSources')
      RETURN
    END
    IF @DELETEPERREQUEST &lt;= 0  
    BEGIN 
      RAISERROR('Parameter @DELETEPERREQUEST is less or it is equal to zero.', 16, 1, 'GroomingOldComputersOrSources')
      RETURN
    END
    IF @DELETEPERREQUEST &lt; @DELETEPERITERATION 
    BEGIN 
      RAISERROR('Parameter @DELETEPERREQUEST should be greater @DELETEPERITERATION parameter.', 16, 1, 'GroomingOldComputersOrSources')
      RETURN
    END
    
    IF LEN(@ITEMS) = 0  
    BEGIN 
      RAISERROR('Parameter @ITEMS is empty.', 16, 1, 'GroomingOldComputersOrSources')
      RETURN
    END
        
    DECLARE @ROWSAFFECTED INT
    DECLARE 
         @ERRORIND        bit
        ,@ERRORMESSAGE    nvarchar(4000)
        ,@ERRORNUMBER     int
        ,@ERRORSEVERITY   int
        ,@ERRORSTATE      int
        ,@ERRORLINE       int
        ,@ERRORPROCEDURE  sysname
        ,@ERRORMESSAGETEXT nvarchar(4000)
        
	CREATE TABLE #ItemsToDelete
	(
		[Value] NVARCHAR(255) collate database_default
	)
	INSERT INTO #ItemsToDelete
		SELECT [Value]
		FROM APM.GETMULTIPARAMETERS(@ITEMS, N'')        
        
        DECLARE 
            @SQL nvarchar(MAX)  
           ,@JOINITEMTABLE nvarchar(1000)
           ,@JOINFILTER nvarchar(1000)
            
        SELECT
             @JOINITEMTABLE = CASE @ISCOMPUTER WHEN 1 
                            THEN N'JOIN APM.MACHINE m (NOLOCK) ON m.MachineId = t.MachineId' 
                            ELSE N'JOIN APM.SOURCE s (NOLOCK) ON s.SourceId = t.SourceId' 
                       END
            ,@JOINFILTER = CASE @ISCOMPUTER WHEN 1 
                            THEN N'JOIN #ItemsToDelete AS f ON f.VALUE = m.MachineId' 
                            ELSE N'JOIN #ItemsToDelete AS f ON f.VALUE = s.SourceId' 
                       END
    SET @ERRORIND = 0
    BEGIN TRY
    
        DECLARE @DELETEHISTORY TABLE (affected int)
        
        --clear client events events and related referencing tables
        SELECT @ROWSAFFECTED = 0
        
        CREATE TABLE #EVENTGROOM (
            EVENTID INT
        )
        
        CREATE TABLE #TMPPROBINGAPPLICATION (APPLICATIONID int) 
        
        
        SELECT @DELETEDCOUNT = 0
    
        WHILE 1 = 1
        BEGIN       
        
          SELECT @DONE = 1
          -- clear iteration result
          DELETE @DELETEHISTORY
          TRUNCATE TABLE #EVENTGROOM
          
          SELECT @ROWSAFFECTED = 0
        
          SELECT @SQL = N'
            INSERT #EVENTGROOM (EVENTID)
                SELECT TOP(@DELETEPERITERATION) t.cseventId 
                    FROM APM.csevent t (nolock)
                        {0}
                        {1}                     
            '
           SELECT @SQL = REPLACE(@SQL, N'{0}', @JOINITEMTABLE)  
           SELECT @SQL = REPLACE(@SQL, N'{1}', @JOINFILTER)     
        
           IF @DEBUG = 1
             PRINT @SQL     
           DECLARE @PARAMS nvarchar(MAX)
           SELECT @PARAMS = N'@DELETEPERITERATION int'
           EXEC sp_executesql @SQL, @PARAMS, @DELETEPERITERATION
           -- Grooming PageEvent-----                  
           DELETE pe
             FROM APM.cspageevent AS pe  
                JOIN #EVENTGROOM AS eventFilter ON pe.cseventid = eventFilter.EVENTID
            -- Grooming Peripheral Details -----                
            DELETE pd
              FROM APM.csperipheraldetail AS pd  
                JOIN APM.csperipheral AS pe ON pe.csperipheralId = pd.csperipheralId
                JOIN #EVENTGROOM AS eventFilter ON pe.cseventid = eventFilter.EVENTID
            -- Grooming Peripheral ------ 
            DELETE pe
              FROM APM.csperipheral AS pe  
                JOIN #EVENTGROOM AS eventFilter ON pe.cseventid = eventFilter.EVENTID
            -- Grooming csHeaviestResource --- 
            DELETE hr
              FROM APM.csHeaviestResource AS hr  
                JOIN #EVENTGROOM AS eventFilter ON hr.cseventid = eventFilter.EVENTID
            -- Grooming ajax events --- 
            DELETE aj
              FROM APM.csAjax AS aj  
                JOIN #EVENTGROOM AS eventFilter ON aj.cseventid = eventFilter.EVENTID
             -- Grooming async ajax events --- 
             DELETE aj
               FROM APM.csAsyncAjax AS aj  
                 JOIN #EVENTGROOM AS eventFilter ON aj.cseventid = eventFilter.EVENTID
             -- Grooming async jscript events --- 
             DELETE js
                FROM APM.csJScriptEvent AS js  
                  JOIN #EVENTGROOM AS eventFilter ON js.cseventid = eventFilter.EVENTID
              -- Grooming client exception events --- 
             DELETE ex
                FROM APM.csexevent AS ex  
                  JOIN #EVENTGROOM AS eventFilter ON ex.cseventid = eventFilter.EVENTID
              -- Grooming client event detail --- 
             DELETE ed
                FROM APM.CSEVENTDETAIL AS ed
                  JOIN #EVENTGROOM AS eventFilter ON ed.cseventid = eventFilter.EVENTID
                  
              -- Grooming client events --- 
             DELETE ev 
                FROM APM.csEvent ev  
                  JOIN #EVENTGROOM AS eventFilter ON ev.cseventid = eventFilter.EVENTID
                
             SELECT @ROWSAFFECTED = @@ROWCOUNT                    
          
             INSERT @DELETEHISTORY(affected) SELECT @ROWSAFFECTED
             
             --- Save deleted client events --      
             SELECT @CLIENTEVENTDELETED = @ROWSAFFECTED
          
             TRUNCATE TABLE #EVENTGROOM              
            
             --clear server events events and related referencing tables
             SELECT @SQL = N'
                INSERT #EVENTGROOM (EVENTID)
                    SELECT TOP(@DELETEPERITERATION) t.eventId 
                        FROM APM.event t (nolock)
                            {0}
                            {1}
                '
        
             SELECT @SQL = REPLACE(@SQL, N'{0}', @JOINITEMTABLE)    
             SELECT @SQL = REPLACE(@SQL, N'{1}', @JOINFILTER)   
             IF @DEBUG = 1
                PRINT @SQL  
             SELECT @PARAMS = N'@DELETEPERITERATION int'
             EXEC sp_executesql @SQL, @PARAMS, @DELETEPERITERATION
                    
             --- Grooming performance node ---------
             DELETE pn
               FROM APM.PerformanceNode AS pn  
                 JOIN #EVENTGROOM AS eventFilter ON pn.eventid = eventFilter.EVENTID
             DELETE rgn
               FROM APM.ResourceGroupNode AS rgn  
                JOIN #EVENTGROOM AS eventFilter ON rgn.eventid = eventFilter.EVENTID
             DELETE en
               FROM APM.ExceptionNode AS en  
                JOIN #EVENTGROOM AS eventFilter ON en.eventid = eventFilter.EVENTID
            
             DELETE ed
               FROM APM.EVENTDETAIL AS ed  
                JOIN #EVENTGROOM AS eventFilter ON ed.eventid = eventFilter.EVENTID
                
             DELETE e
               FROM APM.Event AS e  
                JOIN #EVENTGROOM AS eventFilter ON e.eventid = eventFilter.EVENTID
             SELECT @ROWSAFFECTED = @@ROWCOUNT
            
             INSERT @DELETEHISTORY(affected) SELECT @ROWSAFFECTED
             
             -- save deleted server events
             SELECT @SERVEREVENTDELETED = @ROWSAFFECTED
                                    
             --clear PerfHourly table 
            
             SELECT @SQL = N'
                DELETE TOP(@DELETEPERITERATION) t
                    FROM APM.PerfHourly t  
                            {0}
                            {1}
                SELECT @ROWSAFFECTED = @@ROWCOUNT                           
                '
             SELECT @SQL = REPLACE(@SQL, N'{0}', @JOINITEMTABLE)    
             SELECT @SQL = REPLACE(@SQL, N'{1}', @JOINFILTER)   
             IF @DEBUG = 1
                PRINT @SQL  
             SELECT @PARAMS = N'@DELETEPERITERATION int, @ROWSAFFECTED int OUTPUT'
             EXEC sp_executesql @SQL, @PARAMS, @DELETEPERITERATION, @ROWSAFFECTED = @ROWSAFFECTED OUTPUT 
            
             INSERT @DELETEHISTORY(affected) SELECT @ROWSAFFECTED
            
             -- save deleted counters
             SELECT @COUNTERDELETED = @ROWSAFFECTED
             --clear PerfDaily table 
            
             SELECT @SQL = N'
                DELETE TOP(@DELETEPERITERATION) t
                    FROM APM.PerfDaily t  
                            {0}
                            {1}
                SELECT @ROWSAFFECTED = @@ROWCOUNT                           
                '
             SELECT @SQL = REPLACE(@SQL, N'{0}', @JOINITEMTABLE)    
             SELECT @SQL = REPLACE(@SQL, N'{1}', @JOINFILTER)   
             IF @DEBUG = 1
                PRINT @SQL  
             SELECT @PARAMS = N'@DELETEPERITERATION int, @ROWSAFFECTED int OUTPUT'
             EXEC sp_executesql @SQL, @PARAMS, @DELETEPERITERATION, @ROWSAFFECTED = @ROWSAFFECTED OUTPUT 
            
             INSERT @DELETEHISTORY(affected) SELECT @ROWSAFFECTED
                        
             --clear APPLICATIONSOURCEMACHINE table
             TRUNCATE TABLE #TMPPROBINGAPPLICATION 
             
             SELECT @SQL = N'
                DELETE TOP(@DELETEPERITERATION) t OUTPUT DELETED.ApplicationId INTO #TMPPROBINGAPPLICATION
                    FROM APM.APPLICATIONSOURCEMACHINE t   
                            {0}
                            {1}
                SELECT @ROWSAFFECTED = @@ROWCOUNT                               
                '
             SELECT @SQL = REPLACE(@SQL, N'{0}', @JOINITEMTABLE)    
             SELECT @SQL = REPLACE(@SQL, N'{1}', @JOINFILTER)   
             IF @DEBUG = 1
                PRINT @SQL  
             SELECT @PARAMS = N'@DELETEPERITERATION int, @ROWSAFFECTED int OUTPUT'
             EXEC sp_executesql @SQL, @PARAMS, @DELETEPERITERATION, @ROWSAFFECTED = @ROWSAFFECTED OUTPUT  
            
             INSERT @DELETEHISTORY(affected) SELECT @ROWSAFFECTED
            
             IF EXISTS(SELECT * FROM @DELETEHISTORY WHERE affected = @DELETEPERITERATION)
                SELECT @DONE = 0
                
             SELECT @DELETEDCOUNT = @DELETEDCOUNT + @SERVEREVENTDELETED 
                            + @CLIENTEVENTDELETED + @COUNTERDELETED
             ------------------- try delete applications ----------         
             IF @DONE = 1
             BEGIN
            
             --clear Resource table
                IF @ISCOMPUTER = 0
                    WHILE EXISTS
                    (
                        SELECT * FROM APM.RESOURCE R
                            JOIN #ItemsToDelete AS f ON f.VALUE = r.sourceId
                    )
                    BEGIN
                        DELETE TOP(@DELETEPERITERATION) r 
                            FROM APM.Resource R     
                                JOIN #ItemsToDelete AS f ON f.VALUE = r.sourceId
                    END                             
            
                DELETE A
                    FROM APM.APPLICATION A   
                        WHERE 
                            EXISTS
                            (
                                SELECT * FROM #TMPPROBINGAPPLICATION tmp 
                                    WHERE tmp.APPLICATIONID = A.ApplicationId
                            ) AND 
                            NOT EXISTS
                            (
                                SELECT * FROM APM.APPLICATIONSOURCEMACHINE l WITH (NOLOCK)
                                    WHERE l.ApplicationId = A.ApplicationId
                            )
                
                ------------------- try delete machines ----------          
                IF  @ISCOMPUTER = 1 
                    DELETE m 
                        FROM APM.MACHINE m      
                            JOIN #ItemsToDelete AS f ON f.VALUE = m.MachineId
                ------------------- try delete sources ----------           
                IF  @ISCOMPUTER = 0
                    DELETE s 
                        FROM APM.Source s   
                            JOIN #ItemsToDelete AS f ON f.VALUE = s.SourceId
                BREAK                           
             END
             
             --- Check request result       
             SELECT @DELETEPERREQUEST = @DELETEPERREQUEST - @SERVEREVENTDELETED 
                            - @CLIENTEVENTDELETED - @COUNTERDELETED
        
             IF @DELETEPERREQUEST &lt;= 0 
              BREAK
        END  
    END TRY
    BEGIN CATCH
        IF (@@TRANCOUNT &gt; 0)
            ROLLBACK TRAN
        SELECT 
            @ERRORNUMBER = ERROR_NUMBER()
            ,@ERRORSEVERITY = ERROR_SEVERITY()
            ,@ERRORSTATE = ERROR_STATE()
            ,@ERRORLINE = ERROR_LINE()
            ,@ERRORPROCEDURE = ISNULL(ERROR_PROCEDURE(), '-')
            ,@ERRORMESSAGETEXT = ERROR_MESSAGE()
        
        SET @ERRORIND = 1
    END CATCH
    IF (@ERRORIND = 1)
    BEGIN
        DECLARE 
            @ADJUSTEDERRORSEVERITY   INT
           ,@ERROR_MESSAGE            nvarchar(max)
        SET @ADJUSTEDERRORSEVERITY = CASE
                                        WHEN @ERRORSEVERITY &gt; 18 THEN 18
                                        ELSE @ERRORSEVERITY
                                      END
        
        SELECT @ERROR_MESSAGE = message FROM APM.Messages WHERE id = 50004
        RAISERROR (@ERROR_MESSAGE, @ADJUSTEDERRORSEVERITY, 1
          ,@ERRORNUMBER
          ,@ERRORSEVERITY
          ,@ERRORSTATE
          ,@ERRORPROCEDURE
          ,@ERRORLINE
          ,@ERRORMESSAGETEXT
    )
    END
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GetApplicationGroups'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.GetApplicationGroups AS RETURN 1')
  END
GO
/**************************************************************************************************/
/* Procedure return application groups                                                            */
/**************************************************************************************************/
alter PROCEDURE APM.GetApplicationGroups 
AS
BEGIN
    SET NOCOUNT ON
    SELECT 0 AS Checked, a.APPLICATIONID AS Id, a.APPLICATION AS ItemName 
        FROM APM.APPLICATION a (NOLOCK)
            WHERE a.APPLICATION != 'All'    
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GroomingOldApplicationGroup'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.GroomingOldApplicationGroup AS RETURN 1')
  END
GO
/**************************************************************************************************/
/* Procedure delete unused application groups                                                     */
/* Parameters:                                                                                    */    
/* @ITEM - Application Group                                                                      */
/**************************************************************************************************/
alter PROCEDURE APM.GroomingOldApplicationGroup
        @ITEM int
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS(SELECT * FROM APM.APPLICATION (NOLOCK) 
                    WHERE APPLICATIONID = @ITEM  AND APPLICATION = N'All')
    BEGIN    
      RAISERROR('It is forbidden to delete ''All'' aplication group ', 16, 1, 'GroomingOldApplicationGroup')
      RETURN
    END
        
    DECLARE @ROWSAFFECTED INT
    DECLARE 
         @ERRORIND        bit
        ,@ERRORMESSAGE    nvarchar(4000)
        ,@ERRORNUMBER     int
        ,@ERRORSEVERITY   int
        ,@ERRORSTATE      int
        ,@ERRORLINE       int
        ,@ERRORPROCEDURE  sysname
        ,@ERRORMESSAGETEXT nvarchar(4000)
        
    SET @ERRORIND = 0
    BEGIN TRY
    
    DELETE t 
         FROM APM.APPLICATIONSOURCEMACHINE t
              JOIN APM.APPLICATION a (NOLOCK) ON a.APPLICATIONID = T.APPLICATIONID
    WHERE
        a.ApplicationId = @ITEM     
    
    DELETE APM.APPLICATION WHERE APPLICATIONID = @ITEM 
    
    END TRY
    BEGIN CATCH
        IF (@@TRANCOUNT &gt; 0)
            ROLLBACK TRAN
        SELECT 
            @ERRORNUMBER = ERROR_NUMBER()
            ,@ERRORSEVERITY = ERROR_SEVERITY()
            ,@ERRORSTATE = ERROR_STATE()
            ,@ERRORLINE = ERROR_LINE()
            ,@ERRORPROCEDURE = ISNULL(ERROR_PROCEDURE(), '-')
            ,@ERRORMESSAGETEXT = ERROR_MESSAGE()
        
        SET @ERRORIND = 1
    END CATCH
    IF (@ERRORIND = 1)
    BEGIN
        DECLARE 
            @ADJUSTEDERRORSEVERITY   INT
           ,@ERROR_MESSAGE            nvarchar(max)
        SET @ADJUSTEDERRORSEVERITY = CASE
                                        WHEN @ERRORSEVERITY &gt; 18 THEN 18
                                        ELSE @ERRORSEVERITY
                                      END
        
        SELECT @ERROR_MESSAGE = message FROM APM.Messages WHERE id = 50004
        RAISERROR (@ERROR_MESSAGE, @ADJUSTEDERRORSEVERITY, 1
          ,@ERRORNUMBER
          ,@ERRORSEVERITY
          ,@ERRORSTATE
          ,@ERRORPROCEDURE
          ,@ERRORLINE
          ,@ERRORMESSAGETEXT
    )
    END
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusClient'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.ApplicationStatusClient AS RETURN 1')
  END
GO
/****************************************************************************************/
/* OBJECT: Stored Procedure                                                             */
/* NAME: ApplicationStatusClient                                                        */
/* USED IN: Application Status Client Report                                            */
/* INPUT PARAMETERS:                                                                    */
/*      @SOURCEIDS      - List of the source id, separated by comma. Exp: '1,2,3'       */
/*      @COMPUTERIDS    - List of the computer id, separated by comma. Exp: '1,2,3'     */
/*      @ENDDATE        - End date of the period (in Client timezone)                   */
/*      @PERIOD         - Period type(Day, Week or Month).                              */  
/*                      - Use for the Start Date calculate of the period                */
/*      @AVERAGEINTERVAL- This value specifies interval, for which average values will  */
/*                          be calculated. Possible values: 1(1 month), 2(2 month),     */
/*                          3(3 month), 6(6 month), 17 (7 day)                          */
/*      @TRESHOLD       - Event duration treshold                                       */
/*      @PROBLEM        - Event problem type (all, critical)                            */
/*      @INCLUDESUBNET - List masks, which should be included                           */
/*      @EXCLUDESUBNET - List masks, which should be excluded                           */
/*      @WARNINGTHRESHOLD - Threshold specified by user to notify about warning     */
/*      @ERRORTHRESHOLD - Threshold specified by user to notify about errors        */
/*      @TIMEZONE       - correlate parameter (timezone by min) to return result        */
/*                          in clien timezone                                           */
/****************************************************************************************/
alter PROCEDURE APM.ApplicationStatusClient
    @SOURCEIDS NVARCHAR(MAX),
    @COMPUTERIDS NVARCHAR(MAX),
    @ENDDATE DATETIME,
    @PERIOD INT,
    @AVERAGEINTERVAL INT,
    @THRESHOLD INT,
    @PROBLEM NVARCHAR(10),
    @INCLUDESUBNET NVARCHAR(MAX),
    @EXCLUDESUBNET NVARCHAR(MAX),
    @ERRORTHRESHOLD INT,
    @WARNINGTHRESHOLD INT,    
    @TIMEZONE INT,
    @PMSTATUS NVARCHAR(50)
WITH RECOMPILE    
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT
      @INCLUDESUBNET = REPLACE(@INCLUDESUBNET, N'*', N'%'),
      @EXCLUDESUBNET = REPLACE(@EXCLUDESUBNET, N'*', N'%')    
    
/************************************************************************************/
/*  Prepare auxiliary variables for the further calculation                         */
/************************************************************************************/
    DECLARE @CLIENTENDDATE DateTime
    SET @CLIENTENDDATE = @ENDDATE
    
    --Convert End date to UTC
    SET @ENDDATE = DATEADD(minute, -@TIMEZONE, @CLIENTENDDATE)
    --Used for counting average value for last three months
    DECLARE @PERIODDAYSCOUNT int
    SET @PERIODDAYSCOUNT = (CASE    
                                WHEN @PERIOD = 1 THEN 1
                                WHEN @PERIOD = 2 THEN 7
                                WHEN @PERIOD = 3 THEN 31
                            END)
    DECLARE @STARTDATE DateTime
    SET @STARTDATE = DATEADD(d, -@PERIODDAYSCOUNT, @ENDDATE)    
    DECLARE @CLIENTSTARTDATE DateTime
    SET @CLIENTSTARTDATE = DATEADD(d, -@PERIODDAYSCOUNT, @CLIENTENDDATE)    
    
    DECLARE @HOURSCOUNT int
    SET @HOURSCOUNT = (CASE 
                                WHEN @PERIOD = 1 THEN 24
                                WHEN @PERIOD = 2 THEN 24
                                WHEN @PERIOD = 3 THEN 1 -- Every day of the month have one hour - 00:00
                            END)                            
                            
    DECLARE @LASTPERIODSTARTDATE DateTime
    SET @LASTPERIODSTARTDATE = DATEADD(d, -@PERIODDAYSCOUNT, @STARTDATE)
    DECLARE @AVERAGEPERIODSTARTDATE DateTime
    SET @AVERAGEPERIODSTARTDATE = (CASE 
                                        WHEN @AVERAGEINTERVAL &lt; 10 THEN DATEADD(month, -@AVERAGEINTERVAL, @STARTDATE)
                                        ELSE DATEADD(day, -(@AVERAGEINTERVAL-10), @STARTDATE)
                                   END)
    
    DECLARE @PROCESSORCOUNTERID INT
    SELECT @PROCESSORCOUNTERID = PCtypeId FROM apm.PCType (NOLOCK) WHERE type = N'\Process\% Processor Time'
    DECLARE @MEMORYCOUNTERID INT
    SELECT @MEMORYCOUNTERID = PCtypeId FROM apm.PCType (NOLOCK) WHERE type = N'\Process\Private Bytes'
    DECLARE @IOCOUNTERID INT
    SELECT @IOCOUNTERID = PCtypeId FROM apm.PCType (NOLOCK) WHERE type = N'\Process\IO Data Bytes/sec'
    DECLARE @MONITOREDREQUESTCOUNTERID INT
    SELECT @MONITOREDREQUESTCOUNTERID = PCtypeId FROM apm.PCType (NOLOCK) WHERE type = N'\Apps\Monitored Requests'
    DECLARE @REQUESTTIMECOUNTERID INT
    SELECT @REQUESTTIMECOUNTERID = PCtypeId FROM apm.PCType (NOLOCK) WHERE type = N'\Apps\Avg. Request Time'
/************************************************************************************/
/*                          ASSISTING TEMP TABLES                                   */
/************************************************************************************/
    -- Filter table, which contains machine ids and source ids
    -- typeid defines filter type - 1 for source and 2 for machine
    -- valueId filter value - source id and machine id 
    CREATE TABLE #SOURCEMACHINEFILTERTABLE(
        TYPEID INT, 
        VALUEID INT
    )
    -- Fill table #SOURCEMACHINEFILTERTABLE
    INSERT 
        INTO #SOURCEMACHINEFILTERTABLE
            SELECT 
                p.typeId AS TYPEID,
                CAST(p.value AS INT) AS VALUEID
            FROM 
                --GetMultiParameters function splits incoming strings. It uses comma as substring delimiter 
                APM.GetMultiParameters(@SOURCEIDS, @COMPUTERIDS) AS p
    -- Filter table, which contains PM Statuses of Events
    CREATE TABLE #PMSTATUSFILTERTABLE(
        VALUEID INT
    )
    -- Fill table #PMSTATUSFILTERTABLE
    INSERT 
        INTO #PMSTATUSFILTERTABLE
            SELECT 
                CAST(p.VALUE AS INT) AS VALUEID
            FROM 
                --GetMultiParameters function splits incoming strings. It uses comma as substring delimiter 
                APM.GetMultiParameters(@PMSTATUS, N'') AS p
    -- Filter table for SubnetC values
    CREATE TABLE #SUBNETCFILTERTABLE
    (
        IPID INT,
        SUBNETC NVARCHAR(50) collate database_default  
    )
    -- Insert into filter id of the SubnetC to increase performance for event table
    INSERT INTO #SUBNETCFILTERTABLE
    SELECT DISTINCT
        ipid,
        SubNetC
    FROM
        apm.IP AS ip (NOLOCK)
        JOIN APM.GetMultiParameters(CASE WHEN LEN(@INCLUDESUBNET) &gt; 0 THEN @INCLUDESUBNET ELSE N'%' END, N'') AS p1 ON (ip.SubnetC LIKE p1.Value)
        LEFT OUTER JOIN APM.GetMultiParameters(CASE WHEN LEN(@EXCLUDESUBNET) &gt; 0 THEN @EXCLUDESUBNET ELSE N'Fake' END, N'') AS p2 ON (ip.SubnetC LIKE p2.Value)
    WHERE
    --Exclude subnets which have correspondance in @EXCLUDESUBNET parameter
        p2.typeId IS NULL
    
    -- To form application pool with all sources run in it, it is need to get all sources and its process
    CREATE TABLE #PROCESSFORSOURCE
    (
        SOURCEID INT,
        PCPROCESSID INT,
        MACHINEID INT,
        EXTRAINFO NVARCHAR(255) collate database_default,
        PROCESS NVARCHAR(255) collate database_default
    )
    
    INSERT INTO #PROCESSFORSOURCE
        SELECT
            ph.SourceId,
            ph.PCProcessId,
            ph.MachineId,
            COALESCE(p.Extrainfo, N'') AS EXTRAINFO,
            --Select process name till # symbol (w3wp#1 -&gt; w3wp, w3wp -&gt; w3wp)
            APM.RemoveProcessIdFromName(p.Process) AS Process           
        FROM
            (
                SELECT DISTINCT
                    ph.SourceId,
                    ph.pcprocessId,
                    ph.MachineId
                FROM
                    apm.PerfHourly AS ph (NOLOCK)
                WHERE
                    ph.pcprocessId IS NOT NULL
                    AND ph.UTCDate &gt;= @STARTDATE
                    AND ph.UTCDate &lt; @ENDDATE
            ) AS ph
            JOIN apm.PCProcess AS p (NOLOCK) ON p.pcprocessId = ph.pcprocessId 
            JOIN #SOURCEMACHINEFILTERTABLE AS f ON (f.TYPEID = 2 AND ph.MachineId = f.VALUEID)
/************************************************************************************/
/*                          Main query                                              */
/************************************************************************************/
-- Report frame. It contains all sources, for which values sould be selected, 
-- and dates for the specified period (StartDate : EndDate)  
;WITH SourcesDates AS
(
    SELECT
        s.SourceId,
        s.source AS source,
        s.RowId,
        s.IsClient,
        -- Select 1, 7 or 31 day from end date in ClientTime zone, without hours. 
        -- After that add appropriate hours
        DATEADD(HOUR, h.n-1, CONVERT(NVARCHAR, DATEADD(d, -d.n, @CLIENTENDDATE), 112)) AS ClientDate
    FROM
        (SELECT
                ROW_NUMBER() OVER(
                                PARTITION BY 
                                        CASE WHEN s.Source like N'%(Client)' THEN 1
                                            ELSE 0
                                        END
                                ORDER BY
                                    S.Source
                                ) AS RowId,
                                
                s.Source,
                S.SourceId,
                (CASE WHEN s.Source like N'%(Client)' THEN 1
                    ELSE 0
                END ) AS IsClient
            FROM
                apm.SOURCE AS s
                JOIN #SOURCEMACHINEFILTERTABLE AS sourceFilter ON s.SourceId = sourceFilter.VALUEID     
            WHERE
                sourceFilter.TYPEID = 1             
        ) AS S 
        CROSS JOIN APM.fn_nums(@PERIODDAYSCOUNT) AS d
        CROSS JOIN APM.fn_nums(@HOURSCOUNT) AS h
),
-- Get sources name, ids list separated by comma per app pool
-- This info should be selected for all sources, even they are in the same application pool
-- as in this report grouping by source is applied not by application pool.
    AppPoolInfo AS 
    (
        SELECT 
            c.SOURCEID,
            c.EXTRAINFO,
            c.PROCESS,
            -- all source names which have the same process name as passed in @SOURCEIDS
            (SELECT A.source AS [data()]
                FROM 
                (
                    SELECT DISTINCT 
                        N'''' + s.source + N'''' +  N',' AS source
                    FROM 
                        #PROCESSFORSOURCE AS c1
                        JOIN Source AS s ON c1.SOURCEID = s.SourceId
                    WHERE 
                        c1.EXTRAINFO = c.EXTRAINFO 
                        AND c1.PROCESS = c.PROCESS
                        AND c1.MACHINEID = c.MACHINEID
                ) AS A
                FOR XML PATH ('') 
            ) AS AppPoolSources
        FROM
            #PROCESSFORSOURCE AS c
            JOIN #SOURCEMACHINEFILTERTABLE AS f ON (f.TYPEID = 1 AND f.VALUEID = c.SOURCEID)
        GROUP BY
            c.SOURCEID, 
            c.MACHINEID,
            c.EXTRAINFO,
            c.PROCESS
    ),
    --Add Pool name in-front of source list, if it is executable application, then app pool countains source name
    PrepareAppPoolInfo AS (
        SELECT DISTINCT
            CASE 
                WHEN COALESCE(info.ExtraInfo,'') = '' THEN CASE info.AppPoolSources WHEN '' THEN '' ELSE LEFT(info.AppPoolSources, LEN(info.AppPoolSources)-1) END
                ELSE info.ExtraInfo + CASE info.AppPoolSources WHEN '' THEN '' ELSE ' (' + LEFT(info.AppPoolSources, LEN(info.AppPoolSources) - 1) + ')' END
            END AppPool,
            info.SourceId,
            info.ExtraInfo
        FROM 
            AppPoolInfo AS info
    ),
-- Forms application pool list for each source
-- Format: AppPool1 ('Source1', 'Source2', Source3), AppPool2 ('Source1', 'Source4')
    SourceAppPools AS (
        SELECT 
            s.SourceId,
            s.Source,
            COALESCE((SELECT a.AppPool AS [data()]
                FROM 
                (
                    SELECT DISTINCT 
                        info.AppPool +  N',' AS AppPool
                    FROM 
                        PrepareAppPoolInfo as info
                    WHERE 
                        info.Sourceid = s.Sourceid 
                ) AS A
                FOR XML PATH ('') 
            ),s.Source +  '-') AS AppPoolInfo
        FROM 
            apm.Source AS s
            JOIN #SOURCEMACHINEFILTERTABLE AS f ON (f.TYPEID = 1 AND f.VALUEID = s.SourceId)
    ),    
    --Prepares and filters server events for further manipulations
    ApplicationStatusClient_EventsFiltered AS
    (
        SELECT
            e.sourceid,
            e.eventid,
            -- this field is need to determine number of days when 
            -- there were some events in DB. If number of days is less than 7, 
            -- then it is supposed that average valu is not correct enought
            DATEDIFF(DAY, DATEADD(mi, @TIMEZONE, e.utceventdate), @CLIENTSTARTDATE) AS EventFillFactor,
            --Removing APM.GetDatePart replacing the execution by the code below. 
            --It boosts the overall performance as it reduces the number of calls of scalar function
            CASE @PERIOD 
                WHEN 3 THEN CONVERT(NVARCHAR, DATEADD(mi, @TIMEZONE, e.utceventdate), 112)
                ELSE DATEADD(hh, 
                            DATEPART(hh, DATEADD(mi, CAST(@TIMEZONE AS int), e.utceventdate)), 
                    CONVERT(NVARCHAR, DATEADD(mi, @TIMEZONE, e.utceventdate), 112))
            END as Date,
            --hour is taken as DateDifference in day between 05/04/2009 9:00AM and 05/03/2009 9:00PM is one day,
            --despite in case of @PERIOD = 'Day' it can be interpretated as one day (if 05/04/2009 9:00AM is end date), so difference should be taken as 0
            (DATEDIFF(hour, e.utceventdate, @ENDDATE)-1) / (@PERIODDAYSCOUNT*24) AS PeriodId
        FROM
            apm.Event AS e (NOLOCK)
            JOIN #SOURCEMACHINEFILTERTABLE AS f1 ON (f1.VALUEID = e.sourceid and f1.TYPEID = 1)          
            JOIN #SOURCEMACHINEFILTERTABLE AS f2 ON (f2.VALUEID = e.machineid and f2.TYPEID = 2)
            JOIN #PMSTATUSFILTERTABLE AS f3 ON (f3.VALUEID = e.PMStatus) 
        WHERE
            ((e.EventClassType = N'Performance' AND e.eventduration/1000000.0 &gt;= @THRESHOLD ) 
            OR e.EventClassType = N'exception')
            AND (e.category LIKE @PROBLEM OR e.category IS NULL)
            AND e.utceventdate &gt;= @AVERAGEPERIODSTARTDATE
            AND e.utceventdate &lt; @ENDDATE
    ),
    PrepareEventsServerAvg AS
    (
        SELECT
            e.sourceid AS sourceid,
            e.PeriodId,
            -- PeriodId is 0 for the current period, 1 for last and 1..n for average
            -- This manipulation should shift Client date to current period for 
            -- other periods - average and last. Client date is in client time zone
            DATEADD(day, e.PeriodId*@PERIODDAYSCOUNT, e.Date) AS ClientDate,
            MAX(EventFillFactor) AS EventFillFactor,
            COUNT(CASE WHEN e.PeriodId = 0 THEN eventid END) AS CurrentEventsCount,
            COUNT(CASE WHEN e.PeriodId = 1 THEN eventid END) AS LastEventsCount,
            COUNT(CASE WHEN PeriodId &gt; 0 THEN eventid END) AS AvgEventsCount
        FROM
            ApplicationStatusClient_EventsFiltered AS e
        GROUP BY 
            e.SourceId,
            e.PeriodId,
            e.Date
    ),
    EventsServer AS
    (
        SELECT
            e.sourceid AS sourceid,
            e.ClientDate,
            MAX(EventFillFactor) AS EventFillFactor,            
            MAX(CurrentEventsCount) AS CurrentEventsCount,
            MAX(LastEventsCount) AS LastEventsCount,
            AVG(CASE WHEN PeriodId &gt; 0 THEN AvgEventsCount*1.0 END) AS AvgEventsCount
        FROM
            PrepareEventsServerAvg AS e
        GROUP BY 
            sourceid,
            e.ClientDate
    ),
    
/****************************************************************************************************************/
/*                          Section selects client events                                                       */  
/****************************************************************************************************************/
    -- Select Client Side events
    ApplicationStatusClient_ClientEventsFiltered AS
    (   
        SELECT
            e.SourceId,
            e.CSEventId AS EventId,
            -- this field is need to determine number of days when 
            -- there were some events in DB. If number of days is less than 7, 
            -- then it is supposed that average value is not correct enought
            DATEDIFF(DAY, DATEADD(mi, @TIMEZONE, e.utcdate), @CLIENTSTARTDATE) AS EventFillFactor,          
            -- If specified period is Month then take only date part
            -- In other cases round date to hours, without minutes and seconds
            CASE @PERIOD 
                WHEN 3 THEN CONVERT(NVARCHAR, DATEADD(mi, @TIMEZONE, e.utcdate), 112)
                ELSE DATEADD(hh, 
                            DATEPART(hh, DATEADD(mi, CAST(@TIMEZONE AS int), e.utcdate)), 
                    CONVERT(NVARCHAR, DATEADD(mi, @TIMEZONE, e.utcdate), 112))
            END as Date,
            --hour is taken as DateDifference in day between 05/04/2009 9:00AM and 05/03/2009 9:00PM is one day,
            --despite in case of @PERIOD = 'Day' it can be interpretated as one day (if 05/04/2009 9:00AM is end date), so difference should be taken as 0
            (DATEDIFF(hour, e.utcdate, @ENDDATE)- 1) / (@PERIODDAYSCOUNT*24) AS PeriodId
        FROM
            apm.CSEvent AS e (NOLOCK)
            JOIN #SOURCEMACHINEFILTERTABLE AS f1 ON (f1.VALUEID = e.sourceid and f1.TYPEID = 1)          
            JOIN #SOURCEMACHINEFILTERTABLE AS f2 ON (f2.VALUEID = e.machineid and f2.TYPEID = 2)
            JOIN #SUBNETCFILTERTABLE AS f3 ON e.ipid = f3.IPID
			JOIN #PMSTATUSFILTERTABLE AS f4 ON (f4.VALUEID = e.PMStatus)             
        WHERE
            e.utcdate &gt;= @AVERAGEPERIODSTARTDATE
            AND e.utcdate &lt; @ENDDATE
            AND e.PageUri IS NOT NULL
            AND (e.ClassType = N'exception' OR e.TotalTime/1000.0 &gt;= @THRESHOLD)
    ),
    -- Group by date (rounded in previous step) and count events
    PrepareEventsClientAvg AS
    (
        SELECT
            e.sourceid AS sourceid,
            e.PeriodId,
            DATEADD(day, e.PeriodId*@PERIODDAYSCOUNT, e.Date) AS ClientDate,
            MAX(EventFillFactor) AS EventFillFactor,
            COUNT(CASE WHEN e.PeriodId = 0 THEN eventid END) AS CurrentEventsCount,
            COUNT(CASE WHEN e.PeriodId = 1 THEN eventid END) AS LastEventsCount,
            COUNT(CASE WHEN PeriodId &gt; 0 THEN eventid END) AS AvgEventsCount
        FROM
            ApplicationStatusClient_ClientEventsFiltered AS e
        GROUP BY 
            e.SourceId,
            e.PeriodId,
            e.[Date]
    ),
    -- This step is meaningful only for average period AS all events are averaged between "average" period days
    EventsClient AS
    (
        SELECT
            e.sourceid AS sourceid,
            e.ClientDate,
            MAX(EventFillFactor) AS EventFillFactor,
            MAX(CurrentEventsCount) AS CurrentEventsCount,
            MAX(LastEventsCount) AS LastEventsCount,
            AVG(CASE WHEN PeriodId &gt; 0 THEN AvgEventsCount*1.0 END) AS AvgEventsCount
        FROM
            PrepareEventsClientAvg AS e
        GROUP BY 
            e.SourceId,
            e.ClientDate
    ),
    /*************************************************************************************/
    /*                          Activity pcounter queries                                */
    /************************************************************************************/
    -- Select Pcounters with specified filtering for activity statistics
    ApplicationStatusActivityPerHour AS
    (
        SELECT
            ph.MachineId,
            ph.SourceId,
            -- this field is need to determine number of days when 
            -- there were some pc in DB. If number of days is less than 7, 
            -- then it is supposed that average valu is not correct enought
            DATEDIFF(DAY, DATEADD(mi, @TIMEZONE, ph.UTCDate), @CLIENTSTARTDATE) AS ActivityPCFillFactor,                    
            CASE @PERIOD 
                WHEN 3 THEN CONVERT(NVARCHAR, DATEADD(mi, @TIMEZONE, ph.UTCDate), 112)
                ELSE DATEADD(mi, CAST(@TIMEZONE AS int), ph.UTCDate)
            END as ClientDate,
            (CASE WHEN ph.PCTypeId = @MONITOREDREQUESTCOUNTERID THEN ph.SumValue END) AS MonRequest,
            (CASE WHEN ph.PCTypeId = @REQUESTTIMECOUNTERID THEN ph.SumValue / ph.SampleCount END) AS RequestTime,
            (DATEDIFF(hour, ph.utcdate, @ENDDATE) - 1) / (@PERIODDAYSCOUNT*24) AS PeriodId
        FROM
            apm.PerfHourly AS ph (NOLOCK)
            JOIN #SOURCEMACHINEFILTERTABLE AS f1 ON (f1.TYPEID = 1 AND ph.SourceId = f1.VALUEID)
            JOIN #SOURCEMACHINEFILTERTABLE AS f2 ON (f2.TYPEID = 2 AND f2.VALUEID = ph.MachineId)
        WHERE
            ph.UTCDate &gt;= @AVERAGEPERIODSTARTDATE
            AND ph.UTCDate &lt; @ENDDATE
            AND ph.PCTypeID IN (@REQUESTTIMECOUNTERID, @MONITOREDREQUESTCOUNTERID)
    ),
    -- Next step aggregates data only then period is one month. 
    -- After this step data are aggregated by days. 
    -- For other periods this step is only pivots data by periods.
    ApplicationStatusActivityByDay AS
    (
         SELECT
            MachineId,
            SourceId,
            PeriodId,
            MAX(ActivityPCFillFactor) AS ActivityPCFillFactor,
            DATEADD(day, PeriodId*@PERIODDAYSCOUNT, ClientDate) AS ClientDate,
            SUM(CASE WHEN PeriodId = 0 THEN MonRequest END) AS CurrentRequestCount,
            SUM(CASE WHEN PeriodId = 1 THEN MonRequest END) AS LastRequestCount,
            SUM(CASE WHEN PeriodId &gt; 0 THEN MonRequest END) AS AvgRequestCount,
            AVG(CASE WHEN PeriodId = 0 THEN RequestTime END) AS CurrentRequestTime,
            AVG(CASE WHEN PeriodId = 1 THEN RequestTime END) AS LastRequestTime,
            AVG(CASE WHEN PeriodId &gt; 0 THEN RequestTime END) AS AvgRequestTime
        FROM
            ApplicationStatusActivityPerHour
        GROUP BY
            MachineId,
            SourceId,
            PeriodId,
            ClientDate
    ),
    -- This step is meaningful only for average period AS all counters are averaged between "average" period dates
    ApplicationStatusActivityByPeriod AS
    (
         SELECT
            MachineId,
            SourceId,
            ClientDate,
            MAX(ActivityPCFillFactor) AS ActivityPCFillFactor,
            MAX(CurrentRequestCount) AS CurrentRequestCount,
            MAX(LastRequestCount) AS LastRequestCount,
            AVG(CASE WHEN PeriodId &gt; 0 THEN AvgRequestCount*1.0 END) AS AvgRequestCount,
            MAX(CurrentRequestTime) AS CurrentRequestTime,
            MAX(LastRequestTime) AS LastRequestTime,
            AVG(CASE WHEN PeriodId &gt; 0 THEN AvgRequestTime END) AS AvgRequestTime
        FROM
            ApplicationStatusActivityByDay
        GROUP BY
            MachineId,
            SourceId,
            ClientDate
    ),
    --Aggregate data between machines
    ApplicationStatusActivityBySource AS
    (
         SELECT
            SourceId,
            ClientDate,
            MAX(ActivityPCFillFactor) AS ActivityPCFillFactor,
            SUM(CurrentRequestCount) AS CurrentRequestCount,
            SUM(LastRequestCount) AS LastRequestCount,
            SUM(AvgRequestCount) AS AvgRequestCount,
            AVG(CurrentRequestTime) AS CurrentRequestTime,
            AVG(LastRequestTime) AS LastRequestTime,
            AVG(AvgRequestTime) AS AvgRequestTime
        FROM
            ApplicationStatusActivityByPeriod
        GROUP BY
            SourceId,
            ClientDate
    ),
    /************************************************************************************/
    /*                          Resources pcounter queries                              */
    /************************************************************************************/
    -- Filter resource counters
    ApplicationStatusResourcesPerHour AS
    (
        SELECT
            ph.MachineId,
            ph.SourceId,
            -- this field is need to determine number of days when 
            -- there were some pc in DB. If number of days is less than 7, 
            -- then it is supposed that average valu is not correct enought
            DATEDIFF(DAY, DATEADD(mi, @TIMEZONE, ph.UTCDate), @CLIENTSTARTDATE) AS ResourcePCFillFactor,            
            CASE @PERIOD 
                WHEN 3 THEN CONVERT(NVARCHAR, DATEADD(mi, @TIMEZONE, ph.UTCDate), 112)
                ELSE DATEADD(mi, CAST(@TIMEZONE AS int), ph.UTCDate)
            END as ClientDate,
            (CASE WHEN ph.PCTypeId = @PROCESSORCOUNTERID THEN SUM(ph.SumValue)/SUM(ph.SampleCount) END) AS CPUUsage,
            (CASE WHEN ph.PCTypeId = @IOCOUNTERID THEN SUM(ph.SumValue)/SUM(ph.SampleCount) END) AS IOUsage,
            (CASE WHEN ph.PCTypeId = @MEMORYCOUNTERID THEN SUM(ph.SumValue)/SUM(ph.SampleCount) END) AS MemoryUsage,
            (DATEDIFF(hour, ph.utcdate, @ENDDATE)-1) / (@PERIODDAYSCOUNT*24) AS PeriodId
        FROM
            apm.PerfHourly AS ph (NOLOCK)
            JOIN #SOURCEMACHINEFILTERTABLE AS f1 ON (f1.TYPEID = 1 AND ph.SourceId = f1.VALUEID)
            JOIN #SOURCEMACHINEFILTERTABLE AS f2 ON (f2.TYPEID = 2 AND f2.VALUEID = ph.MachineId)
        WHERE
            ph.UTCDate &gt;= @AVERAGEPERIODSTARTDATE
            AND ph.UTCDate &lt; @ENDDATE
            AND ph.PCTypeID IN (@PROCESSORCOUNTERID, @IOCOUNTERID, @MEMORYCOUNTERID)
        GROUP BY
            ph.UTCDate,
            ph.PCTypeId,
            ph.MachineId,
            ph.SourceId     
     ),
    -- Group resources by date defined by user. For Period = Week and day this step only devides data by period  
    ApplicationStatusResourcesByDay AS
    (
         SELECT
            MachineId,
            SourceId,
            PeriodId,
            MAX(ResourcePCFillFactor) AS ResourcePCFillFactor,
            DATEADD(day, PeriodId*@PERIODDAYSCOUNT, ClientDate) AS ClientDate,
            AVG(CASE WHEN PeriodId = 0 THEN CPUUsage END) AS CurrentCPUUsage,
            AVG(CASE WHEN PeriodId = 1 THEN CPUUsage END) AS LastCPUUsage,
            AVG(CASE WHEN PeriodId &gt; 0 THEN CPUUsage END) AS AvgCPUUsage,
            AVG(CASE WHEN PeriodId = 0 THEN IOUsage END) AS CurrentIOUsage,
            AVG(CASE WHEN PeriodId = 1 THEN IOUsage END) AS LastIOUsage,
            AVG(CASE WHEN PeriodId &gt; 0 THEN IOUsage END) AS AvgIOUsage,     
            AVG(CASE WHEN PeriodId = 0 THEN MemoryUsage END) AS CurrentMemoryUsage,
            AVG(CASE WHEN PeriodId = 1 THEN MemoryUsage END) AS LastMemoryUsage,
            AVG(CASE WHEN PeriodId &gt; 0 THEN MemoryUsage END) AS AvgMemoryUsage
        FROM
            ApplicationStatusResourcesPerHour
        GROUP BY
            MachineId,
            SourceId,
            PeriodId,
            ClientDate
    ),
    --This step aggregates data for "average" period, for other periods it is meaningful
    ApplicationStatusResourcesByPeriod AS
    (
         SELECT
            SourceId,
            ClientDate,
            MAX(ResourcePCFillFactor) AS ResourcePCFillFactor,
            MAX(CurrentCPUUsage/ COALESCE(m.CPUCount, 1)) AS CurrentCPUUsage,
            MAX(LastCPUUsage/ COALESCE(m.CPUCount, 1)) AS LastCPUUsage,
            AVG(CASE WHEN PeriodId &gt; 0 THEN AvgCPUUsage/ COALESCE(m.CPUCount, 1) END) AS AvgCPUUsage,
            MAX(CurrentIOUsage) AS CurrentIOUsage,
            MAX(LastIOUsage) AS LastIOUsage,
            AVG(CASE WHEN PeriodId &gt; 0 THEN AvgIOUsage END) AS AvgIOUsage,
            MAX(CurrentMemoryUsage) AS CurrentMemoryUsage,
            MAX(LastMemoryUsage) AS LastMemoryUsage,
            AVG(CASE WHEN PeriodId &gt; 0 THEN AvgMemoryUsage END) AS AvgMemoryUsage       
        FROM
            ApplicationStatusResourcesByDay AS r
            JOIN apm.Machine AS m ON m.MachineId = r.MachineId
        GROUP BY
            r.MachineId,
            SourceId,
            ClientDate
    ),
    -- Aggregate values between machines    
    ApplicationStatusResourcesBySource AS
    (
         SELECT
            SourceId,
            ClientDate,
            MAX(ResourcePCFillFactor) AS ResourcePCFillFactor,
            AVG(CurrentCPUUsage) AS CurrentCPUUsage,
            AVG(LastCPUUsage) AS LastCPUUsage,
            AVG(AvgCPUUsage) AS AvgCPUUsage,
            AVG(CurrentIOUsage) AS CurrentIOUsage,
            AVG(LastIOUsage) AS LastIOUsage,
            AVG(AvgIOUsage) AS AvgIOUsage,
            AVG(CurrentMemoryUsage) AS CurrentMemoryUsage,
            AVG(LastMemoryUsage) AS LastMemoryUsage,
            AVG(AvgMemoryUsage) AS AvgMemoryUsage
        FROM
            ApplicationStatusResourcesByPeriod
        GROUP BY
            SourceId,
            ClientDate
    ),
    --Check if for some of the machines cpu count is not defined
    MachineCPUUndefinedFlag AS
    (
        SELECT
            sf.SOURCEID,
            MIN(COALESCE(m.CPUCount, -1)) AS CPUUndefinedFlag
        FROM
            #PROCESSFORSOURCE AS sf
            JOIN apm.Machine AS m (NOLOCK) ON sf.MACHINEID = m.MachineId
        GROUP BY
            sf.SOURCEID
    ),
    --Combine all data together
    CombinedData AS
    (
        SELECT
            SourcesDates.RowId AS RowId,
            SourcesDates.IsClient,
            SourcesDates.ClientDate,
            SourcesDates.Source,
            SourcesDates.SourceId,
            AppPool.AppPoolInfo,
            rpc.CurrentCPUUsage,
            rpc.LastCPUUsage,
            rpc.AvgCPUUsage,
            MAX(rpc.ResourcePCFillFactor) OVER(PARTITION BY SourcesDates.SourceId) AS ResourcePCFillFactor,             
            (CASE WHEN COALESCE(rpc.AvgCPUUsage, 0) &gt; 0 
                    THEN
                        ABS(COALESCE(rpc.CurrentCPUUsage,0) - COALESCE(rpc.AvgCPUUsage, 0))*1.0/rpc.AvgCPUUsage
                    ELSE 0
            END) AS CpuStatus,
            rpc.CurrentIOUsage/(1024.0) AS CurrentIOUsage,
            rpc.LastIOUsage/(1024.0) AS LastIOUsage,
            rpc.AvgIOUsage/(1024.0) AS AvgIOUsage,
            (CASE WHEN COALESCE(rpc.AvgIOUsage, 0) &gt; 0 
                    THEN
                        ABS(COALESCE(rpc.CurrentIOUsage,0) - COALESCE(rpc.AvgIOUsage, 0))*1.0/rpc.AvgIOUsage
                    ELSE 0
            END) AS IOStatus,       
            rpc.CurrentMemoryUsage/(1024.0*1024) AS CurrentMemoryUsage,
            rpc.LastMemoryUsage/(1024.0*1024) AS LastMemoryUsage,
            rpc.AvgMemoryUsage/(1024.0*1024) AS AvgMemoryUsage,
            (CASE WHEN COALESCE(rpc.AvgMemoryUsage, 0) &gt; 0 
                    THEN
                        ABS(COALESCE(rpc.CurrentMemoryUsage,0) - COALESCE(rpc.AvgMemoryUsage, 0))*1.0/rpc.AvgMemoryUsage
                    ELSE 0
            END) AS MemoryStatus,       
            MAX(apc.ActivityPCFillFactor) OVER(PARTITION BY SourcesDates.SourceId) AS ActivityPCFillFactor,         
            apc.CurrentRequestCount,
            apc.LastRequestCount,
            apc.AvgRequestCount,
            (CASE WHEN COALESCE(apc.AvgRequestCount, 0) &gt; 0 
                    THEN
                        ABS(COALESCE(apc.CurrentRequestCount,0) - COALESCE(apc.AvgRequestCount, 0))*1.0/apc.AvgRequestCount
                    ELSE 0
            END) AS RequestStatus,      
            apc.CurrentRequestTime/1000.0 AS CurrentRequestTime,
            apc.LastRequestTime/1000.0 AS LastRequestTime,
            apc.AvgRequestTime/1000.0 AS AvgRequestTime,
            (CASE WHEN COALESCE(apc.AvgRequestTime, 0) &gt; 0 
                    THEN
                        ABS(COALESCE(apc.CurrentRequestTime,0) - COALESCE(apc.AvgRequestTime, 0))*1.0/apc.AvgRequestTime
                    ELSE 0
            END) AS RequestTimeStatus,
            MAX(COALESCE(E.EventFillFactor, cs.EventFillFactor)) OVER(PARTITION BY SourcesDates.SourceId) AS EventFillFactor,           
            COALESCE(E.CurrentEventsCount, cs.CurrentEventsCount) AS CurrentEventsCount,
            COALESCE(E.LastEventsCount, cs.LastEventsCount) AS LastEventsCount,     
            COALESCE(E.AvgEventsCount, cs.AvgEventsCount) AS AvgEventsCount,
            (CASE WHEN COALESCE(COALESCE(E.AvgEventsCount, cs.AvgEventsCount), 0) &gt; 0 
                    THEN
                        ABS(COALESCE(COALESCE(E.CurrentEventsCount, cs.CurrentEventsCount),0) - COALESCE(COALESCE(E.AvgEventsCount, cs.AvgEventsCount), 0))*1.0/COALESCE(E.AvgEventsCount, cs.AvgEventsCount)
                    ELSE 0
            END) AS EventStatus
        FROM 
            SourcesDates
            JOIN SourceAppPools AS AppPool ON (AppPool.Sourceid = SourcesDates.Sourceid)        
            LEFT OUTER JOIN MachineCPUUndefinedFlag AS cpuFlag ON SourcesDates.Sourceid = cpuFlag.Sourceid
            LEFT OUTER JOIN ApplicationStatusResourcesBySource AS rpc ON (rpc.ClientDate = SourcesDates.ClientDate AND rpc.SourceId = SourcesDates.Sourceid)
            LEFT OUTER JOIN ApplicationStatusActivityBySource AS apc ON (apc.ClientDate = SourcesDates.ClientDate AND apc.SourceId = SourcesDates.Sourceid)
            LEFT OUTER JOIN EventsServer AS e ON (e.ClientDate = SourcesDates.ClientDate AND e.SourceId = SourcesDates.Sourceid)
            LEFT OUTER JOIN EventsClient AS cs ON (cs.ClientDate = SourcesDates.ClientDate AND cs.SourceId = SourcesDates.Sourceid)     
    )    
    SELECT 
        RowId,
        IsClient,
        ClientDate,
        Source,
        SourceId,
        AppPoolInfo,
        CurrentCPUUsage,
        LastCPUUsage,
        AvgCPUUsage,
        -- If resource counters are presents not more than for 7 day, then don't show threshold message
        (CASE WHEN CpuStatus*100 &gt;= @WARNINGTHRESHOLD AND ResourcePCFillFactor &gt;= 7 THEN ClientDate END) AS CPUWarningDate,
        (CASE WHEN CpuStatus*100 &gt;= @ERRORTHRESHOLD AND ResourcePCFillFactor &gt;= 7 THEN ClientDate END) AS CPUErrorDate,         
        CurrentIOUsage,
        LastIOUsage,
        AvgIOUsage,
        -- If resource counters are presents not more than for 7 day, then don't show threshold message
        (CASE WHEN IOStatus*100 &gt;= @WARNINGTHRESHOLD AND ResourcePCFillFactor &gt;= 7 THEN ClientDate END) AS IOWarningDate,
        (CASE WHEN IOStatus*100 &gt;= @ERRORTHRESHOLD AND ResourcePCFillFactor &gt;= 7 THEN ClientDate END) AS IOErrorDate,
        CurrentMemoryUsage,
        LastMemoryUsage,
        AvgMemoryUsage,
        -- If resource counters are presents not more than for 7 day, then don't show threshold message
        (CASE WHEN MemoryStatus*100 &gt;= @WARNINGTHRESHOLD AND ResourcePCFillFactor &gt;= 7 THEN ClientDate END) AS MemoryWarningDate,
        (CASE WHEN MemoryStatus*100 &gt;= @ERRORTHRESHOLD AND ResourcePCFillFactor &gt;= 7 THEN ClientDate END) AS MemoryErrorDate,               
        CurrentRequestCount,
        LastRequestCount,
        AvgRequestCount,
        -- If activity counters are presents not more than for 7 day, then don't show threshold message
        (CASE WHEN RequestStatus*100 &gt;= @WARNINGTHRESHOLD AND ActivityPCFillFactor &gt;= 7 THEN ClientDate END) AS RequestWarningDate,
        (CASE WHEN RequestStatus*100 &gt;= @ERRORTHRESHOLD AND ActivityPCFillFactor &gt;= 7 THEN ClientDate END) AS RequestErrorDate,             
        CurrentRequestTime,
        LastRequestTime,
        AvgRequestTime,
        -- If activity counters are presents not more than for 7 day, then don't show threshold message
        (CASE WHEN RequestTimeStatus*100 &gt;= @WARNINGTHRESHOLD AND ActivityPCFillFactor &gt;= 7 THEN ClientDate END) AS RequestTimeWarningDate,
        (CASE WHEN RequestTimeStatus*100 &gt;= @ERRORTHRESHOLD AND ActivityPCFillFactor &gt;= 7 THEN ClientDate END) AS RequestTimeErrorDate,             
        CurrentEventsCount,
        LastEventsCount,        
        AvgEventsCount,
        -- If events are presents not more than for 7 day, then don't show threshold message
        (CASE WHEN EventStatus*100 &gt;= @WARNINGTHRESHOLD AND EventFillFactor &gt;= 7 THEN ClientDate END) AS EventWarningDate,
        (CASE WHEN EventStatus*100 &gt;= @ERRORTHRESHOLD AND EventFillFactor &gt;= 7 THEN ClientDate END) AS EventErrorDate,
        EventStatus,
        EventFillFactor,
        ActivityPCFillFactor,
        ResourcePCFillFactor        
    FROM
        CombinedData
    ORDER BY
        RowId,
        IsClient,
        ClientDate  
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusClientFrequentCSMEvents'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.ApplicationStatusClientFrequentCSMEvents AS RETURN 1')
  END
GO
/****************************************************************************************/
/* OBJECT: Stored Procedure                                                             */
/* NAME: ApplicationStatusClientFrequentCSMEvents                                       */
/* USED IN: Application Status Client Report, top 10 Most frequent events               */
/* INPUT PARAMETERS:                                                                    */
/*      @SOURCEID       - Source id                                                    */
/*      @COMPUTERIDS    - List of the computer id, separated by comma. Exp: '1,2,3'     */
/*      @ENDDATE        - End date of the period (in Client timezone)                   */
/*      @PERIOD         - Period type(Day, Week or Month).                              */  
/*                      - Use for the Start Date calculate of the period                */
/*      @TRESHOLD       - Event duration treshold                                       */
/*      @PROBLEM        - Event problem type (all, critical)                            */
/*      @INCLUDESUBNET - List masks, which should be included                           */
/*      @EXCLUDESUBNET - List masks, which should be excluded                           */
/*      @TIMEZONE       - correlate parameter (timezone by min) to return result        */
/*                          in clien timezone                                           */
/****************************************************************************************/
alter PROCEDURE APM.ApplicationStatusClientFrequentCSMEvents
    @SOURCEID INT,
    @COMPUTERS NVARCHAR(MAX),
    @ENDDATE DATETIME,
    @PERIOD INT,
    @THRESHOLD DECIMAL(35,0),
    @PROBLEM NVARCHAR(10),
    @INCLUDESUBNET NVARCHAR(MAX),
    @EXCLUDESUBNET NVARCHAR(MAX),    
    @TIMEZONE INT,
	@PMSTATUS NVARCHAR(50)
WITH RECOMPILE
AS
BEGIN
    SET NOCOUNT ON;    
    
    SELECT
      @INCLUDESUBNET = REPLACE(@INCLUDESUBNET, N'*', N'%'),
      @EXCLUDESUBNET = REPLACE(@EXCLUDESUBNET, N'*', N'%')    
    SET @ENDDATE = DATEADD(minute, -@TIMEZONE, @ENDDATE) 
    DECLARE @STARTDATE DATETIME
    SET @STARTDATE = DATEADD(d, -APM.GetQueryDateCount(@PERIOD, @ENDDATE), @ENDDATE)
    
    DECLARE @LASTPERIODSTARTDATE DateTime
    SET @LASTPERIODSTARTDATE = DATEADD(d, -APM.GetQueryDateCount(@PERIOD, @STARTDATE), @STARTDATE)
    
    CREATE TABLE #APPLICATIONSTATUSCLIENT_MACHINE
    (
        MACHINEID int
    )
    INSERT 
        INTO #APPLICATIONSTATUSCLIENT_MACHINE
            SELECT 
                    p.value
                FROM APM.GetMultiParameters(@COMPUTERS, N'') p
    -- Filter table, which contains PM Statuses of Events
    CREATE TABLE #PMSTATUSFILTERTABLE(
        VALUEID INT
    )
    -- Fill table #PMSTATUSFILTERTABLE
    INSERT 
        INTO #PMSTATUSFILTERTABLE
            SELECT 
                CAST(p.value AS INT) AS VALUEID
            FROM 
                --GetMultiParameters function splits incoming strings. It uses comma as substring delimiter 
                APM.GetMultiParameters(@PMSTATUS, N'') AS p
    -- Filter table for SubnetC values
    CREATE TABLE #SUBNETCFILTERTABLE
    (
        IPID INT,
        SUBNETC NVARCHAR(50) collate database_default
    )
    -- Insert into filter id of the SubnetC to increase performance for event table
    INSERT INTO #SUBNETCFILTERTABLE
    SELECT DISTINCT
        ipid,
        SubNetC
    FROM
        apm.IP AS ip (NOLOCK)
        JOIN APM.GetMultiParameters(CASE WHEN LEN(@INCLUDESUBNET) &gt; 0 THEN @INCLUDESUBNET ELSE N'%' END, N'') AS p1 ON (ip.SubnetC LIKE p1.Value)
        LEFT OUTER JOIN APM.GetMultiParameters(CASE WHEN LEN(@EXCLUDESUBNET) &gt; 0 THEN @EXCLUDESUBNET ELSE N'Fake' END, N'') AS p2 ON (ip.SubnetC LIKE p2.Value)
    WHERE
    --Exclude subnets which have correspondance in @EXCLUDESUBNET parameter
        p2.typeId IS NULL
    ;WITH BaseDataSet AS
    (
        SELECT 
            eg.[Description],
            e.ClassType,
            COUNT(CASE WHEN e.utcdate &gt;= @STARTDATE THEN e.cseventid END) as IssuesCount,
            COUNT(CASE WHEN e.utcdate &lt; @STARTDATE THEN e.cseventid END) AS LastIssuesCount
        FROM
            apm.CSEvent (NOLOCK) AS e
            JOIN apm.CSEventGroup (NOLOCK) AS eg ON e.csEventGroupId = eg.csEventGroupId
            JOIN #APPLICATIONSTATUSCLIENT_MACHINE AS f ON f.MACHINEID = e.MachineId 
            JOIN #SUBNETCFILTERTABLE AS f1 ON e.ipid = f1.IPID 
			JOIN #PMSTATUSFILTERTABLE AS f2 ON (f2.VALUEID = e.PMStatus)                        
        WHERE 
            e.sourceid = @SOURCEID
            AND e.utcdate &gt;= @LASTPERIODSTARTDATE
            AND e.utcdate &lt; @ENDDATE 
            AND e.PageUri IS NOT NULL
            AND (e.ClassType = N'exception' OR e.TotalTime/1000.0 &gt;= @THRESHOLD)                        
        GROUP BY 
            eg.Description,
            e.ClassType
    )
    SELECT TOP(10)
        ROW_NUMBER() OVER (ORDER BY e.IssuesCount DESC, e.description) AS Id,
        e.IssuesCount,
        e.LastIssuesCount,
        e.Description,
        e.ClassType,
        COUNT(CASE WHEN e.IssuesCount &gt; 0 THEN 1 ELSE NULL END) OVER() AS TotalCurrentProblemCount,
        COUNT(CASE WHEN e.LastIssuesCount &gt; 0 THEN 1 ELSE NULL END) OVER() AS TotalLastProblemCount,
        SUM(e.IssuesCount) OVER() AS TotalEventCount,
        SUM(e.LastIssuesCount) OVER() AS LastTotalEventCount
    FROM 
        BaseDataSet AS e
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusClientFrequentFailure'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.ApplicationStatusClientFrequentFailure AS RETURN 1')
  END
GO
/****************************************************************************************/
/* OBJECT: Stored Procedure                                                             */
/* NAME: ApplicationStatusClientFrequentFailure                                                     */
/* USED IN: Application Status Client Report, top 10 Most frequent exception events     */
/* INPUT PARAMETERS:                                                                    */
/*      @SOURCEID       - Source id                                                    */
/*      @COMPUTERIDS    - List of the computer id, separated by comma. Exp: '1,2,3'     */
/*      @ENDDATE        - End date of the period (in Client timezone)                   */
/*      @PERIOD         - Period type(Day, Week or Month).                              */  
/*                      - Use for the Start Date calculate of the period                */
/*      @PROBLEM        - Event problem type (all, critical)                            */
/*      @TIMEZONE       - correlate parameter (timezone by min) to return result        */
/*                          in clien timezone                                           */
/****************************************************************************************/
alter PROCEDURE APM.ApplicationStatusClientFrequentFailure
    @SOURCEID INT,
    @COMPUTERS NVARCHAR(MAX),
    @ENDDATE DATETIME,
    @PERIOD INT,
    @PROBLEM NVARCHAR(10),
    @TIMEZONE INT,
    @PMSTATUS NVARCHAR(50)    
WITH RECOMPILE
AS
BEGIN
    SET NOCOUNT ON;
    SET @ENDDATE = DATEADD(minute, -@TIMEZONE, @ENDDATE) 
    DECLARE @STARTDATE DATETIME
    SET @STARTDATE = DATEADD(d, -APM.GetQueryDateCount(@PERIOD, @ENDDATE), @ENDDATE)
    CREATE TABLE #APPLICATIONSTATUSCLIENT_MACHINE
    (
        MACHINEID int
    )
    INSERT 
        INTO #APPLICATIONSTATUSCLIENT_MACHINE
            SELECT 
                    p.value
                FROM APM.GetMultiParameters(@COMPUTERS, N'') p
    -- Filter table, which contains PM Statuses of Events
    CREATE TABLE #PMSTATUSFILTERTABLE(
        VALUEID INT
    )
    -- Fill table #PMSTATUSFILTERTABLE
    INSERT 
        INTO #PMSTATUSFILTERTABLE
            SELECT 
                CAST(p.value AS INT) AS VALUEID
            FROM 
                --GetMultiParameters function splits incoming strings. It uses comma as substring delimiter 
                APM.GetMultiParameters(@PMSTATUS, N'') AS p
    DECLARE @LASTPERIODSTARTDATE DateTime
    SET @LASTPERIODSTARTDATE = DATEADD(d, -APM.GetQueryDateCount(@PERIOD, @STARTDATE), @STARTDATE)
    DECLARE @CURRENTPERIODENDDATE DateTime
    SET @CURRENTPERIODENDDATE = DATEADD(d, APM.GetQueryDateCount(@PERIOD, @STARTDATE), @STARTDATE)
    ;WITH BaseDataSet AS
    (
        SELECT 
            e.description,
            e.category,
            COUNT(
                    CASE 
                        WHEN e.utceventdate &gt;= @STARTDATE 
                    THEN e.eventid
                    END 
                  ) as EventsCount,  
            COUNT(
                    CASE 
                        WHEN e.utceventdate &lt; @STARTDATE 
                    THEN e.eventid
                    END
                  ) AS LastEventsCount
        FROM
            apm.Event (NOLOCK) AS e
            JOIN apm.EventGroup AS eg ON e.EventGroupId = eg.EventGroupId 
            JOIN #APPLICATIONSTATUSCLIENT_MACHINE AS f1 ON e.machineid = f1.MACHINEID
			JOIN #PMSTATUSFILTERTABLE AS f3 ON (f3.VALUEID = e.PMStatus)             
        WHERE 
            e.EventClassType = N'Exception'
            AND (e.category LIKE @PROBLEM)
            AND (e.sourceId = @SOURCEID)
            AND e.utceventdate &gt;= @LASTPERIODSTARTDATE
            AND e.utceventdate &lt; @CURRENTPERIODENDDATE
        GROUP BY 
            e.description, e.category
    )
SELECT TOP(10)
    ROW_NUMBER() OVER (ORDER BY e.EventsCount DESC, E.description) AS Id,
    e.[Description],
    e.Category,
    e.EventsCount,
    e.LastEventsCount,
    -- This information is selected for event summary table
    SUM(e.EventsCount) OVER() AS TotalEventCount,        
    SUM(e.LastEventsCount) OVER() AS LastTotalEventCount,
    -- Caulculate number of different descriotions (proble, count) in current and last periods
    COUNT(CASE WHEN e.EventsCount &gt; 0 THEN 1 ELSE NULL END) OVER() AS CurrentProblemsCount,
    COUNT(CASE WHEN e.LastEventsCount &gt; 0 THEN 1 ELSE NULL END) OVER() AS LastProblemsCount
FROM
    BaseDataSet AS e
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusClientFrequentPerformance'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.ApplicationStatusClientFrequentPerformance AS RETURN 1')
  END
GO
/****************************************************************************************/
/* OBJECT: Stored Procedure                                                             */
/* NAME: ApplicationStatusClientFrequentPerformance                                                     */
/* USED IN: Application Status Client Report, top 10 Most frequent performance events   */
/* INPUT PARAMETERS:                                                                    */
/*      @SOURCEID       - Source id                                                     */
/*      @COMPUTERIDS    - List of the computer id, separated by comma. Exp: '1,2,3'     */
/*      @ENDDATE        - End date of the period (in Client timezone)                   */
/*      @PERIOD         - Period type(Day, Week or Month).                              */  
/*                      - Use for the Start Date calculate of the period                */
/*      @TRESHOLD       - Event duration treshold                                       */
/*      @PROBLEM        - Event problem type (all, critical)                            */
/*      @TIMEZONE       - correlate parameter (timezone by min) to return result        */
/*                          in clien timezone                                           */
/****************************************************************************************/
alter PROCEDURE [APM].[ApplicationStatusClientFrequentPerformance]
    @SOURCEID INT,
    @COMPUTERS NVARCHAR(MAX),
    @ENDDATE DATETIME,
    @PERIOD INT,
    @THRESHOLD DECIMAL(35,0),
    @PROBLEM NVARCHAR(10),
    @TIMEZONE INT,
	@PMSTATUS NVARCHAR(50)
WITH RECOMPILE
AS
BEGIN
    SET NOCOUNT ON;
    SET @ENDDATE = DATEADD(minute, -@TIMEZONE, @ENDDATE) 
    DECLARE @STARTDATE DATETIME
    SET @STARTDATE = DATEADD(d, -APM.GetQueryDateCount(@PERIOD, @ENDDATE), @ENDDATE)
    CREATE TABLE #APPLICATIONSTATUSCLIENT_MACHINE
    (
        MACHINEID INT
    )
    INSERT 
        INTO #APPLICATIONSTATUSCLIENT_MACHINE
            SELECT 
                    p.value
                FROM APM.GetMultiParameters(@COMPUTERS, N'') p
    -- Filter table, which contains PM Statuses of Events
    CREATE TABLE #PMSTATUSFILTERTABLE(
        VALUEID INT
    )
    -- Fill table #PMSTATUSFILTERTABLE
    INSERT 
        INTO #PMSTATUSFILTERTABLE
            SELECT 
                CAST(p.value AS INT) AS VALUEID
            FROM 
                --GetMultiParameters function splits incoming strings. It uses comma as substring delimiter 
                APM.GetMultiParameters(@PMSTATUS, N'') AS p
    DECLARE @LASTPERIODSTARTDATE DateTime
    SET @LASTPERIODSTARTDATE = DATEADD(d, -APM.GetQueryDateCount(@PERIOD, @STARTDATE), @STARTDATE)
    DECLARE @CURRENTPERIODENDDATE DateTime
    SET @CURRENTPERIODENDDATE = DATEADD(d, APM.GetQueryDateCount(@PERIOD, @STARTDATE), @STARTDATE)
    ;WITH BaseDataSet AS
    (
        SELECT 
            COUNT(CASE WHEN e.utceventdate &gt;= @STARTDATE THEN e.eventid END) as IssuesCount,
            AVG(CASE WHEN e.utceventdate &gt;= @STARTDATE THEN e.eventduration / 1000000 END) AS AvgDuration,
            MAX(CASE WHEN e.utceventdate &gt;= @STARTDATE THEN e.eventduration / 1000000 END) AS MaxDuration,
            COUNT(CASE WHEN e.utceventdate &lt; @STARTDATE THEN e.eventid END) AS LastIssuesCount,
            e.rootnodename,
            (CASE 
                    WHEN pn.description IS NOT NULL THEN RIGHT(pn.description, LEN(pn.description) - CHARINDEX(':', pn.description))
                    ELSE N''
            END) AS PerfNodeDescription
        FROM
            apm.Event (NOLOCK) AS e
            JOIN apm.EventGroup (NOLOCK) AS eg ON e.EventGroupId = eg.EventGroupId
            JOIN apm.PerformanceNode (NOLOCK) AS pn ON pn.EventId = e.EventId
            JOIN #APPLICATIONSTATUSCLIENT_MACHINE AS f ON f.MACHINEID = e.MachineId 
			JOIN #PMSTATUSFILTERTABLE AS f1 ON (f1.VALUEID = e.PMStatus)             
        WHERE 
            e.EventClassType = N'Performance' 
            AND e.eventduration / 1000000.0 &gt;= @THRESHOLD
            AND e.sourceid = @SOURCEID
            AND (e.category LIKE @PROBLEM OR e.category IS NULL)
            AND e.utceventdate &gt;= @LASTPERIODSTARTDATE
            AND e.utceventdate &lt; @CURRENTPERIODENDDATE 
            AND (e.HeavyLight &lt;&gt; 0 OR e.HeavyLight IS NULL)
            AND pn.ISHeaviestNode = 1
        GROUP BY 
            e.rootnodename,
            (CASE 
                    WHEN pn.description IS NOT NULL THEN RIGHT(pn.description, LEN(pn.description) - CHARINDEX(':', pn.description))
                    ELSE N''
            END)
    )
    SELECT TOP(10)
        ROW_NUMBER() OVER (ORDER BY e.IssuesCount DESC, e.rootnodename, PerfNodeDescription) AS Id,
        e.IssuesCount,
        e.AvgDuration,
        e.MaxDuration,
        e.LastIssuesCount,
        e.rootnodename,
        e.PerfNodeDescription,
        e.rootnodename + (CASE 
                            WHEN LEN(e.PerfNodeDescription) &gt; 0 
                            THEN ' slow at ' +  e.PerfNodeDescription 
                        ELSE N'' END) AS description,
        COUNT(CASE WHEN e.IssuesCount &gt; 0 THEN 1 ELSE NULL END) OVER() AS TotalCurrentProblemCount,
        COUNT(CASE WHEN e.LastIssuesCount &gt; 0 THEN 1 ELSE NULL END) OVER() AS TotalLastProblemCount,
        SUM(e.IssuesCount) OVER() AS TotalEventCount,
        SUM(e.LastIssuesCount) OVER() AS TotalLastEventCount
    FROM 
        BaseDataSet AS e
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusClientNewCSMEvents'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.ApplicationStatusClientNewCSMEvents AS RETURN 1')
  END
GO
/****************************************************************************************/
/* OBJECT: Stored Procedure                                                             */
/* NAME: ApplicationStatusClientNewCSMEvents                                                        */
/* USED IN: Application Status Client Report, top 10 New CSM events                     */
/* INPUT PARAMETERS:                                                                    */
/*      @SOURCEID       - Source id                                                    */
/*      @COMPUTERIDS    - List of the computer id, separated by comma. Exp: '1,2,3'     */
/*      @ENDDATE        - End date of the period (in Client timezone)                   */
/*      @PERIOD         - Period type(Day, Week or Month).                              */  
/*                      - Use for the Start Date calculate of the period                */
/*      @TRESHOLD       - Event duration treshold                                       */
/*      @PROBLEM        - Event problem type (all, critical)                            */
/*      @INCLUDESUBNET - List masks, which should be included                           */
/*      @EXCLUDESUBNET - List masks, which should be excluded                           */
/*      @TIMEZONE       - correlate parameter (timezone by min) to return result        */
/*                          in clien timezone                                           */
/****************************************************************************************/
alter PROCEDURE [APM].[ApplicationStatusClientNewCSMEvents]
    @SOURCEID INT,
    @COMPUTERS NVARCHAR(MAX),
    @ENDDATE DATETIME,
    @PERIOD INT,
    @THRESHOLD DECIMAL(35,0),
    @PROBLEM NVARCHAR(10),
    @INCLUDESUBNET NVARCHAR(MAX),
    @EXCLUDESUBNET NVARCHAR(MAX),    
    @TIMEZONE INT
WITH RECOMPILE
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT
      @INCLUDESUBNET = REPLACE(@INCLUDESUBNET, N'*', N'%'),
      @EXCLUDESUBNET = REPLACE(@EXCLUDESUBNET, N'*', N'%')    
    SET @ENDDATE = DATEADD(minute, -@TIMEZONE, @ENDDATE) 
    DECLARE @STARTDATE DATETIME
    SET @STARTDATE = DATEADD(d, -APM.GetQueryDateCount(@PERIOD, @ENDDATE), @ENDDATE)
    CREATE TABLE #APPLICATIONSTATUSCLIENT_MACHINE
    (
        MACHINEID INT
    )
    INSERT 
        INTO #APPLICATIONSTATUSCLIENT_MACHINE
            SELECT 
                    p.value
                FROM APM.GetMultiParameters(@COMPUTERS, N'') p
    -- Filter table for SubnetC values
    CREATE TABLE #SUBNETCFILTERTABLE
    (
        IPID INT,
        SUBNETC NVARCHAR(50) collate database_default
    )
    -- Insert into filter id of the SubnetC to increase performance for event table
    INSERT INTO #SUBNETCFILTERTABLE
    SELECT DISTINCT
        ipid,
        SubNetC
    FROM
        apm.IP AS ip (NOLOCK)
        JOIN APM.GetMultiParameters(CASE WHEN LEN(@INCLUDESUBNET) &gt; 0 THEN @INCLUDESUBNET ELSE N'%' END, N'') AS p1 ON (ip.SubnetC LIKE p1.Value)
        LEFT OUTER JOIN APM.GetMultiParameters(CASE WHEN LEN(@EXCLUDESUBNET) &gt; 0 THEN @EXCLUDESUBNET ELSE N'Fake' END, N'') AS p2 ON (ip.SubnetC LIKE p2.Value)
    WHERE
    --Exclude subnets which have correspondance in @EXCLUDESUBNET parameter
        p2.typeId IS NULL
        
    DECLARE @LASTPERIODSTARTDATE DateTime
    SET @LASTPERIODSTARTDATE = DATEADD(d, -APM.GetQueryDateCount(@PERIOD, @STARTDATE), @STARTDATE)
    DECLARE @CURRENTPERIODENDDATE DateTime
    SET @CURRENTPERIODENDDATE = DATEADD(d, APM.GetQueryDateCount(@PERIOD, @STARTDATE), @STARTDATE)
    SELECT TOP(10)
        ROW_NUMBER() OVER (ORDER BY COUNT(e.CSEventId) DESC, eg.description) AS Id,
        COUNT(e.CSEventId) as EventCount,
        eg.Description,
        e.ClassType,
        SUM(COUNT(e.CSEventId)) OVER() AS TotalEventCount,
        COUNT(*) OVER() AS TotalNewProblemsCount
    FROM
        apm.CSEVENT AS e (NOLOCK)
        JOIN apm.CSEVENTGROUP AS eg ON e.CSEventGroupId = eg.CSEventGroupId
        -- Fileter events by machines
        JOIN #APPLICATIONSTATUSCLIENT_MACHINE AS f ON f.MACHINEID = e.machineid
        JOIN #SUBNETCFILTERTABLE AS f1 ON e.ipid = f1.IPID        
    WHERE 
        ((e.ClassType = N'Performance' AND e.TotalTime/1000.0 &gt;= @THRESHOLD) 
            OR e.ClassType = N'exception')
        AND e.utcdate &gt;= @STARTDATE
        AND e.utcdate &lt; @ENDDATE 
        AND e.SourceId = @SOURCEID
        AND eg.SourceId = @SOURCEID
        AND eg.firsteventdate &gt;= @STARTDATE
        AND eg.firsteventdate &lt; @ENDDATE
        AND e.PMStatus = 0   
        AND e.PageUri IS NOT NULL
    GROUP BY
        eg.Description,
        e.ClassType
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusClientNewFailure'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.ApplicationStatusClientNewFailure AS RETURN 1')
  END
GO
/****************************************************************************************/
/* OBJECT: Stored Procedure                                                             */
/* NAME: ApplicationStatusClientNewFailure                                                      */
/* USED IN: Application Status Client Report, top 10 new exception events              */
/* INPUT PARAMETERS:                                                                    */
/*      @SOURCEID       - Source id                                                     */
/*      @COMPUTERIDS    - List of the computer id, separated by comma. Exp: '1,2,3'     */
/*      @ENDDATE        - End date of the period (in Client timezone)                   */
/*      @PERIOD         - Period type(Day, Week or Month).                              */  
/*                      - Use for the Start Date calculate of the period                */
/*      @PROBLEM        - Event problem type (all, critical)                            */
/*      @TIMEZONE       - correlate parameter (timezone by min) to return result        */
/*                          in clien timezone                                           */
/****************************************************************************************/
alter PROCEDURE [APM].[ApplicationStatusClientNewFailure]
    @SOURCEID INT,
    @COMPUTERS NVARCHAR(MAX),
    @ENDDATE DATETIME,
    @PERIOD INT,
    @PROBLEM NVARCHAR(10),
    @TIMEZONE INT
WITH RECOMPILE
AS
BEGIN
    SET NOCOUNT ON;
    SET @ENDDATE = DATEADD(minute, -@TIMEZONE, @ENDDATE) 
    DECLARE @STARTDATE DATETIME
    SET @STARTDATE = DATEADD(d, -APM.GetQueryDateCount(@PERIOD, @ENDDATE), @ENDDATE)
    CREATE TABLE #APPLICATIONSTATUSCLIENT_MACHINE
    (
        MACHINEID INT
    )
    INSERT 
        INTO #APPLICATIONSTATUSCLIENT_MACHINE
            SELECT 
                    p.value
                FROM APM.GetMultiParameters(@COMPUTERS, N'') p
        SELECT TOP(10)
            ROW_NUMBER() OVER (ORDER BY COUNT(e.eventid) DESC, e.description) AS Id,
            e.description,
            e.category,
            COUNT(e.eventid) as EventsCount,
            SUM(COUNT(e.eventid)) OVER() AS TotalEventCount,
            COUNT(*) OVER() AS TotalNewProblemsCount
        FROM
            apm.Event (NOLOCK) AS e
            JOIN #APPLICATIONSTATUSCLIENT_MACHINE AS f ON f.MACHINEID = e.machineid
            JOIN apm.eventgroup (NOLOCK) AS eg ON e.eventGroupId = eg.EventGroupId
        WHERE 
            e.EventClassType = N'Exception'
            AND e.SourceId = @SOURCEID
            AND eg.SourceId = @SOURCEID
            AND (e.category LIKE @PROBLEM)
            AND e.utceventdate &gt;= @STARTDATE
            AND e.utceventdate &lt; @ENDDATE
            AND eg.firsteventdate &gt;= @STARTDATE
            AND eg.firsteventdate &lt; @ENDDATE
            AND e.PMStatus = 0
        GROUP BY 
            e.description, e.category
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusClientNewPerformance'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.ApplicationStatusClientNewPerformance AS RETURN 1')
  END
GO
/****************************************************************************************/
/* OBJECT: Stored Procedure                                                             */
/* NAME: ApplicationStatusClientNewPerformance                                                      */
/* USED IN: Application Status Client Report, top 10 New performance events             */
/* INPUT PARAMETERS:                                                                    */
/*      @SOURCEID       - Source id                                                     */
/*      @COMPUTERIDS    - List of the computer id, separated by comma. Exp: '1,2,3'     */
/*      @ENDDATE        - End date of the period (in Client timezone)                   */
/*      @PERIOD         - Period type(Day, Week or Month).                              */  
/*                      - Use for the Start Date calculate of the period                */
/*      @TRESHOLD       - Event duration treshold                                       */
/*      @PROBLEM        - Event problem type (all, critical)                            */
/*      @TIMEZONE       - correlate parameter (timezone by min) to return result        */
/*                          in clien timezone                                           */
/****************************************************************************************/
alter PROCEDURE [APM].[ApplicationStatusClientNewPerformance]
    @SOURCEID INT,
    @COMPUTERS NVARCHAR(MAX),
    @ENDDATE DATETIME,
    @PERIOD INT,
    @THRESHOLD DECIMAL(35,0),
    @PROBLEM NVARCHAR(10),
    @TIMEZONE INT
WITH RECOMPILE
AS
BEGIN
    SET NOCOUNT ON;
    SET @ENDDATE = DATEADD(minute, -@TIMEZONE, @ENDDATE) 
    DECLARE @STARTDATE DATETIME
    SET @STARTDATE = DATEADD(d, -APM.GetQueryDateCount(@PERIOD, @ENDDATE), @ENDDATE)
    CREATE TABLE #APPLICATIONSTATUSCLIENT_MACHINE
    (
        MACHINEID INT
    )
    INSERT 
        INTO #APPLICATIONSTATUSCLIENT_MACHINE
            SELECT 
                    p.value
                FROM APM.GetMultiParameters(@COMPUTERS, N'') p
;WITH BaseDatSet AS
(
    SELECT 
        COUNT(e.eventid) as IssuesCount,
        AVG(e.eventduration / 1000000) AS AvgDuration,
        MAX(e.eventduration / 1000000) AS MaxDuration,
        e.rootnodename,
        (CASE 
                WHEN pn.description IS NOT NULL THEN RIGHT(pn.description, LEN(pn.description) - CHARINDEX(':', pn.description))
                ELSE N''
        END) AS PerfNodeDescription
    FROM
        APM.Event (nolock) AS e
        JOIN #APPLICATIONSTATUSCLIENT_MACHINE AS f ON f.MACHINEID = e.machineid
        JOIN APM.PerformanceNode (NOLOCK) AS pn ON pn.EventId = e.EventId
        JOIN APM.eventgroup (NOLOCK) AS eg ON E.EventGroupId = eg.EventGroupId
    WHERE 
        e.EventClassType = N'Performance' AND e.eventduration / 1000000.0  &gt;= @THRESHOLD  
        AND (e.category LIKE @PROBLEM OR e.category IS NULL)
        AND e.utceventdate &gt;= @STARTDATE
        AND e.utceventdate &lt; @ENDDATE 
        AND e.SourceId = @SOURCEID 
        AND eg.SourceId = @SOURCEID
        AND eg.firsteventdate &gt;= @STARTDATE
        AND eg.firsteventdate &lt; @ENDDATE 
        AND pn.IsHeaviestNode = 1        
        AND e.PMStatus = 0
    GROUP BY 
        e.rootnodename,
        (CASE 
                WHEN pn.description IS NOT NULL THEN RIGHT(pn.description, LEN(pn.description) - CHARINDEX(':', pn.description))
                ELSE N''
        END)
)
    SELECT TOP(10)
        ROW_NUMBER() OVER (ORDER BY e.IssuesCount DESC, e.rootnodename, e.PerfNodeDescription) AS Id,
        e.IssuesCount,
        e.AvgDuration,
        e.MaxDuration,
        e.rootnodename, 
        e.PerfNodeDescription,
        e.rootnodename + (CASE 
                            WHEN LEN(e.PerfNodeDescription) &gt; 0 
                            THEN ' slow at ' +  e.PerfNodeDescription 
                        ELSE N'' END) AS description,       
        SUM(IssuesCount) OVER() AS EventsSum,
        COUNT(*) OVER() AS TotalNewProblemsCount
    FROM
        BaseDatSet AS e
    ORDER BY
        IssuesCount DESC
END
GO
-------------------- Rule management --------------------------------
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_EMPTY'), 'IsView') IS NULL) BEGIN
    EXECUTE('CREATE VIEW APM.V_PM_EMPTY
				AS				
				select clmn=1')
END
GO
alter VIEW [APM].[V_PM_EMPTY] AS
   SELECT N'' AS VAL , -1 AS PMSTATUS, -1 AS SEVIEWERDBID, -1 AS EVENTID
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_CSEVENTSTATUS'), 'IsView') IS NULL) BEGIN
    EXECUTE('CREATE VIEW APM.V_PM_CSEVENTSTATUS
				AS				
				select clmn=1')
END
GO
alter VIEW [APM].[V_PM_CSEVENTSTATUS] AS
   SELECT E.CSEVENTID AS EVENTID, E.PMSTATUS, E.ROWGUID, E.SEVIEWERDBID  
	FROM APM.CSEVENT AS E (NOLOCK)
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_HEAVIESTNODE'), 'IsView') IS NULL) BEGIN
    EXECUTE('CREATE VIEW APM.V_PM_HEAVIESTNODE
				AS				
				select clmn=1')
END
GO
alter VIEW [APM].[V_PM_HEAVIESTNODE] AS
SELECT 
  E.EVENTID, 
  E.PMSTATUS, 
  E.SEVIEWERDBID,
  COALESCE(P.DESCRIPTION, N'Internal Execution') AS VAL, 
  COALESCE(P.SELFDURATION, E.EVENTDURATION / 1000.0) AS SELFDURATION  
FROM 
  APM.EVENT (NOLOCK) AS e
  LEFT JOIN APM.PERFORMANCENODE (NOLOCK) p ON p.eventid = e.eventid 
WHERE   
  p.ISHEAVIESTNODE = 1      
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_CSHEAVIESTNODE'), 'IsView') IS NULL) BEGIN
    EXECUTE('CREATE VIEW APM.V_PM_CSHEAVIESTNODE
				AS				
				select clmn=1')
END
GO 
alter VIEW [APM].[V_PM_CSHEAVIESTNODE] AS
SELECT 
   E.CSEVENTID AS EVENTID, 
   E.PMSTATUS, 
   E.SEVIEWERDBID,
   COALESCE(P.NAME, N'Internal Execution') AS VAL, 
   P.DURATION AS SELFDURATION
FROM 
  APM.CSEVENT (NOLOCK) AS e
  LEFT JOIN APM.CSHEAVIESTRESOURCE (NOLOCK) p ON p.cseventid = e.cseventid 
WHERE   
  p.ISHEAVIESTNODE = 1      
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_EVENT'), 'IsView') IS NULL) BEGIN
    EXECUTE('CREATE VIEW APM.V_PM_EVENT
				AS				
				select clmn=1')
END
GO 
alter VIEW APM.V_PM_EVENT AS
SELECT 
    E.EVENTID, 
    S.SOURCE, 
    M.MACHINE AS MACHINENAME, 
    U.NAME AS USERNAME, 
        E.EVENTCLASSTYPE, 
    E.ROOTNODENAME, 
    E.DESCRIPTION, 
    E.EXCEPTIONCLASS, 
    E.EVENTDURATION,
        E.SEVIEWEREGID, 
    E.HEAVYLIGHT, 
    E.ASPECT, 
    E.SEVIEWERDBID,
    E.ROWGUID,
    E.CATEGORY, 
    E.PMSTATUS 
 FROM APM.EVENT (NOLOCK) AS E
   JOIN apm.SOURCE S (NOLOCK) ON S.SOURCEID = E.SOURCEID 
   JOIN apm.MACHINE M (NOLOCK) ON M.MACHINEID = E.MACHINEID       
   LEFT JOIN apm.USERS U (NOLOCK) ON U.USERID = E.USERID
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_EVENTDETAIL'), 'IsView') IS NULL) BEGIN
    EXECUTE('CREATE VIEW APM.V_PM_EVENTDETAIL
				AS				
				select clmn=1')
END
GO 
alter VIEW [APM].[V_PM_EVENTDETAIL] AS
SELECT E.EVENTID, E.PMSTATUS, E.SEVIEWERDBID, D.VALUE, D.NAME 
    FROM APM.EVENT (NOLOCK) AS e
        JOIN APM.EVENTDETAIL (NOLOCK) d ON d.eventid = e.eventid  
    WHERE
       d.ValueType = N'PM'
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_CSEVENTDETAIL'), 'IsView') IS NULL) BEGIN
    EXECUTE('CREATE VIEW APM.V_PM_CSEVENTDETAIL
				AS				
				select clmn=1')
END
GO 
alter VIEW [APM].[V_PM_CSEVENTDETAIL] AS
SELECT E.CSEVENTID AS EVENTID, E.PMSTATUS, E.SEVIEWERDBID, D.VALUE, D.NAME 
    FROM APM.CSEVENT (NOLOCK) AS e
        JOIN APM.CSEVENTDETAIL (NOLOCK) d ON d.cseventid = e.cseventid  
    WHERE
       d.ValueType = N'PM'
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_RESOURCE'), 'IsView') IS NULL) BEGIN
    EXECUTE('CREATE VIEW APM.V_PM_RESOURCE
				AS				
				select clmn=1')
END
GO 
  
alter VIEW [APM].[V_PM_RESOURCE] AS
SELECT P.EVENTID, E.SEVIEWERDBID, E.PMSTATUS, P.RESOURCEMETHOD 
    FROM APM.PERFORMANCENODE p (NOLOCK)
    JOIN apm.EVENT e (NOLOCK) ON e.eventid = p.eventid 
WHERE
    p.ISHEAVIESTNODE = 1
UNION ALL   
SELECT E.EVENTID, E.SEVIEWERDBID, E.PMSTATUS, EX.RESOURCEMETHOD 
    FROM APM.EXCEPTIONNODE ex (NOLOCK)
    JOIN apm.EVENT e (NOLOCK) ON e.eventid = EX.eventid 
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_CSEVENT'), 'IsView') IS NULL) BEGIN
    EXECUTE('CREATE VIEW APM.V_PM_CSEVENT
				AS				
				select clmn=1')
END
GO 
    
alter VIEW APM.V_PM_CSEVENT AS
SELECT 
    E.CSEVENTID AS EVENTID, 
    S.SOURCE, 
    M.MACHINE AS MACHINENAME,
    U.NAME AS USERNAME,
    E.CLASSTYPE AS EVENTCLASSTYPE, 
    E.DESCRIPTION AS [DESCRIPTION],
    E.TOTALTIME * 1000 AS EVENTDURATION,
    SEVIEWEREGID AS EVENTGROUPID, 
    E.SEVIEWERDBID, 
    2 AS HEAVYLIGHT,
    CASE 
        WHEN CLASSTYPE = N'exception' THEN N'Web Page Client Side Exception'
    END AS EXCEPTIONCLASS,
    N'Unknown' AS COMPONENT, 
    CASE 
        WHEN CLASSTYPE = N'performance' THEN N'performance' 
        WHEN CLASSTYPE = N'exception' THEN N'applicationfailure'
    END AS ASPECT,
    E.ROWGUID,
    PMSTATUS,
    SEVIEWEREGID     
  FROM APM.CSEVENT (NOLOCK) AS E
    JOIN apm.SOURCE S (NOLOCK) ON S.SOURCEID = E.SOURCEID 
    JOIN apm.MACHINE M (NOLOCK) ON M.MACHINEID = E.MACHINEID      
    LEFT JOIN apm.USERS U (NOLOCK) ON U.USERID = E.USERID
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMACTIONQUERY'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.PMACTIONQUERY AS RETURN 1')
  END
GO
    
/******************************************************************************************************/
/* OBJECT: Stored Procedure																			  */
/* NAME: PMACTIONQUERY																				  */
/* INPUT PARAMETERS:																				  */
/*      @RULEDESCRIPTION       - rule description													  */
/*      @CLIENT                - client event flag : 0 - server event 1 - client event				  */
/*      @DBID                  - seviewer database id. SEviewerDb primary key 						  */
/*      @LASTPARAMETERINDEX    - last parameter index												  */  
/* OUTPUT PARAMETERS:																				  */
/*      @QUERY_CURSOR          - result cursor														  */
/* DESCRIPTION:																						  */
/* It processed actions and create action parameter description that will be used					  */
/* during call sp_execute. Also database id parameter has been added into the output				  */
/* result cursor @QUERY_CURSOR will be contains paramaters description								  */
/* --------------|------------|-----------------------------------|------------------|-------------|  */
/*  parameter    | field name | action &amp; db paramater descriptions| parameter values | entity name |  */
/* --------------|------------|-----------------------------------|------------------|-------------|  */
/* For example, rule description has following structure:											  */			
/*  &lt;actions&gt;																						  */	
/*    &lt;action alias="EVENT.PMSTATUS" action="Intercept.ActionType.ChangeStatus"&gt;                      */
/*      &lt;params&gt;                                                                                      */
/*        &lt;param name="value" value="3" /&gt;                                                            */
/*      &lt;/params&gt;                                                                                     */
/*    &lt;/action&gt;                                                                                       */
/*  &lt;/actions&gt;                                                                                        */
/*  Output for this action will be following ( @LASTPARAMETERINDEX = 2, @DBID = 1, @CLIENT = 0        */
/* --------------|------------|-----------------------------------|------------------|-------------|  */
/*  @A3          | PMSTATUS   | @A3 tinyint,@DBID int			  | 3,1              | EVENT       |  */
/* --------------|------------|-----------------------------------|------------------|-------------|  */
/******************************************************************************************************/
alter PROCEDURE [APM].[PMACTIONQUERY]
  @RULEDESCRIPTION as NVARCHAR(max)
 ,@CLIENT bit
 ,@DBID int
 ,@LASTPARAMETERINDEX int = 0
 ,@QUERY_CURSOR CURSOR VARYING OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE 
         @ERRORIND        BIT
        ,@ERRORMESSAGE    NVARCHAR(4000)
        ,@ERRORNUMBER     INT
        ,@ERRORSEVERITY   INT
        ,@ERRORSTATE      INT
        ,@ERRORLINE       INT
        ,@ERRORPROCEDURE  SYSNAME
        ,@ERRORMESSAGETEXT NVARCHAR(4000)
    SET @ERRORIND = 0
    BEGIN TRY
    
    DECLARE 
        @RULE AS XML
        
    --convert rule description to untyped xml    
    SET @RULE = CAST(@RULEDESCRIPTION AS XML) 
        
    --declare result query    
    DECLARE
        @QUERYSET TABLE 
        (
           entity SYSNAME -- entity name (stored procedure or table/view)
          ,actionParameter nvarchar(50) -- action parameter name corresponding action field
          ,actionField nvarchar(50) -- action field (now "pmstatus")
          ,params NVARCHAR(MAX) -- list of parameter names  (action parameter + database id parameter) 
          ,paramsValues NVARCHAR(MAX) -- parameter values corresponding list of parameter names
          ,lastParameterIndex int -- last index parameter, for stored procedure is always zero
          ,procParameterList NVARCHAR(max) -- list of stored proc parameter names       
        )   
    --------------- actions query ------------   
    DECLARE 
       actions_cursor CURSOR STATIC FOR
          SELECT actions._action.query('.')
               FROM @RULE.nodes('rule/actions/action') actions(_action)
    DECLARE           
       @ACTION AS XML           
        
    OPEN actions_cursor
    FETCH NEXT FROM actions_cursor 
    INTO @ACTION
    -------------- cycle by actions --------------
    WHILE @@FETCH_STATUS = 0
    BEGIN  
      DECLARE 
         @ALIAS nvarchar(50)
      
      -- Get alias name that using for extract entity name
      SELECT @ALIAS = @ACTION.value('(/action/@alias)[1]', 'nvarchar(50)') 
      
      DECLARE 
         @ENTITY nvarchar(50) -- entity name
        ,@FIELD nvarchar(50)  -- field name    
        ,@FIELDTYPE nvarchar(50) -- field type
             
      DECLARE 
        @PARAMS NVARCHAR(MAX) -- list of parameter names
       ,@PARAMSVALUES NVARCHAR(MAX) -- list of parameter values
       ,@CHARCONDITIONFLAG bit -- char condition flag
       ,@PROCPARAMETERLIST NVARCHAR(max) --reserved (parameter name list for call stored procedure) 
       ,@ISPROCEDURE bit --entity is procedure. 0 - not procedure 1 - procedure
       ,@VALUES_CURSOR CURSOR -- cursor for extracting parameter and corresponding values 
      
      -- lookup for field, field type, entity name, procedure flag   
      SELECT 
         @FIELD = field
        ,@FIELDTYPE = fieldType
        ,@ENTITY = entity
        ,@ISPROCEDURE = isprocedure
      FROM 
         APM.PMENTITYMAPPING (NOLOCK) 
      WHERE 
         alias = @ALIAS AND isclient = @CLIENT
         
      IF @@ROWCOUNT = 0 
      BEGIN
        -- alias is not found. raise error
        RAISERROR(N'Alias "%s" is not registered', 16, 1, @ALIAS)
        RETURN  
      END             
      -- clear previos parameter list and check field type.
      SELECT             
           @PARAMS = N''
          ,@PARAMSVALUES = N''  
          --flag char character field(1- char field 0- not char field)
          ,@CHARCONDITIONFLAG = CASE WHEN CHARINDEX(N'char', @FIELDTYPE) &gt; 0 THEN 1 ELSE 0 END  
          
      -- initialize parameter list    
      SELECT 
         @LASTPARAMETERINDEX = CASE WHEN @ISPROCEDURE = 1 THEN 0 ELSE lastParameterIndex END --last prameter index
        ,@PARAMS = N''
        ,@PARAMSVALUES = N'' 
      FROM 
        @QUERYSET
      WHERE
        entity = @ENTITY              
                    
      --------------- values query ------------
      
      --iteration by parameter. Get parameter name and value
      SET @VALUES_CURSOR = CURSOR STATIC FOR
          SELECT 
             valueSet.value.value('(@value)[1]', 'nvarchar(max)'), -- parameter value
             valueSet.value.value('(@name)[1]', 'nvarchar(max)') -- parameter name
          FROM 
             @ACTION.nodes('/action/params/param') valueSet(value) 
      
      -- open cursor         
      OPEN @VALUES_CURSOR
      
      DECLARE
        @VALUE NVARCHAR(MAX) -- parameter value
       ,@NAME nvarchar(max) -- parameter name
       ,@DECORATOR nvarchar(1) -- decorator for value 
          
      SELECT 
        @PROCPARAMETERLIST = N'' -- clear proc parameter list
       ,@DECORATOR = CASE WHEN @CHARCONDITIONFLAG = 1 THEN '''' ELSE '' END -- define value decorator (for example 'value' or value)
      
      -- fetch parameter name and value
      FETCH NEXT FROM @VALUES_CURSOR 
         INTO @VALUE, @NAME
         
      ---------- cycle by values --------       
      WHILE @@FETCH_STATUS = 0
      BEGIN
        -- increment last parameter index
        SELECT @LASTPARAMETERINDEX = @LASTPARAMETERINDEX + 1
        
        DECLARE 
            @PARAMETERNAME nvarchar(MAX) 
           ,@PARAMETERVALUE nvarchar(max)
        
        SELECT
           -- for procedure parameter name equal @NAME otherwise using format "@A{last parameter index}"
           @PARAMETERNAME = 
            CASE
              WHEN @ISPROCEDURE = 1 
                THEN REPLACE(N'@{0}', N'{0}', @NAME)
                ELSE REPLACE(N'@A{0}', N'{0}', @LASTPARAMETERINDEX)
            END  
          -- create proc parameter list    
          IF @ISPROCEDURE = 1
          BEGIN
            -- parameter list divided by ','
            SELECT @PROCPARAMETERLIST = @PROCPARAMETERLIST + 
                        REPLACE(REPLACE(N'{0}{1}',
                                     N'{0}',CASE WHEN LEN(@PROCPARAMETERLIST) &gt; 0 THEN N',' ELSE '' END),
                                     N'{1}',@PARAMETERNAME)
            -- calculate parameter type                                      
            SELECT @FIELDTYPE = APM.GetProcParameterTypeName(@ENTITY, @PARAMETERNAME)
            IF @FIELDTYPE IS NULL
            BEGIN
              -- parameter type is not divided, raise exception
              RAISERROR(N'Parameter "%s" for stored procedure "%s" is not defined.', 16, 1, @PARAMETERNAME, @ENTITY)
              RETURN        
            END
            -- define char condition flag
            SELECT @CHARCONDITIONFLAG = CASE WHEN CHARINDEX(N'char', @FIELDTYPE) &gt; 0 THEN 1 ELSE 0 END
            -- define value decorator (for example 'value' or value)
            SELECT @DECORATOR = CASE WHEN @CHARCONDITIONFLAG = 1 THEN '''' ELSE '' END  
          END
          --create parameter value using decorator
          SELECT @PARAMETERVALUE = REPLACE(REPLACE(REPLACE(
                                      N'{0}{1}{2}', 
                                      N'{0}',@DECORATOR),
                                      N'{1}',@VALUE),
                                      N'{2}',@DECORATOR)    
        SELECT
           -- create parameter list for table/view entity divided by ',' (format - "parameter name parameter type")                                 
           @PARAMS = @PARAMS + REPLACE(REPLACE(REPLACE(CONVERT(nvarchar(max),
                                      N'{0}{1} {2}'), 
                                      N'{0}',CASE WHEN LEN(@PARAMS) &gt; 0 THEN N',' ELSE N'' END), 
                                      N'{1}',@PARAMETERNAME),
                                      N'{2}',@FIELDTYPE)    
          -- param value list divided by ','                                         
          ,@PARAMSVALUES = @PARAMSVALUES + REPLACE(REPLACE(CONVERT(nvarchar(max),N'{0}{1}'), 
                                      N'{0}',CASE WHEN LEN(@PARAMSVALUES) &gt; 0 THEN N',' ELSE N'' END), 
                                      N'{1}',@PARAMETERVALUE)                                     
          
        FETCH NEXT FROM @VALUES_CURSOR 
         INTO @VALUE, @NAME
      END
      CLOSE @VALUES_CURSOR
      DEALLOCATE @VALUES_CURSOR 
      
      --------------- end values query ------------
      
      SELECT
        --- Add database id parameter name ----      
        @PARAMS = @PARAMS + REPLACE(REPLACE(CONVERT(nvarchar(max),N',{0} {1}'), 
                                  N'{0}',N'@DBID'),
                                  N'{1}',N'int')    
                                    
        --- Add database id parameter value ----      
       ,@PARAMSVALUES = @PARAMSVALUES + REPLACE(CONVERT(nvarchar(max),N',{0}'),N'{0}',@DBID)                                           
                          
      -- insert into result set                                                    
      INSERT @QUERYSET (actionField, actionParameter, entity, lastParameterIndex, params, paramsValues, procParameterList)  
         VALUES(@FIELD, @PARAMETERNAME, @ENTITY, @LASTPARAMETERINDEX, @PARAMS, @PARAMSVALUES, @PROCPARAMETERLIST)       
      
      --- Get next expression ----------
      FETCH NEXT FROM actions_cursor 
      INTO @ACTION
    END 
    CLOSE actions_cursor
    DEALLOCATE actions_cursor   
    -- create result cursor for action parameter, action field, parameter list, parameter values
    SET @QUERY_CURSOR = CURSOR STATIC FORWARD_ONLY FOR
         SELECT
             actionParameter
            ,actionField
            ,params
            ,paramsValues
            ,entity
         FROM 
            @QUERYSET   
            
    OPEN @QUERY_CURSOR
    
    END TRY
    BEGIN CATCH
        IF (@@TRANCOUNT &gt; 0)
            ROLLBACK TRAN
        SELECT 
            @ERRORNUMBER = ERROR_NUMBER()
            ,@ERRORSEVERITY = ERROR_SEVERITY()
            ,@ERRORSTATE = ERROR_STATE()
            ,@ERRORLINE = ERROR_LINE()
            ,@ERRORPROCEDURE = ISNULL(ERROR_PROCEDURE(), '-')
            ,@ERRORMESSAGETEXT = ERROR_MESSAGE()
        
        SET @ERRORIND = 1
    END CATCH
    IF (@ERRORIND = 1)
    BEGIN                 
       IF CURSOR_STATUS('global', 'actions_cursor') IN (0,1)
          CLOSE actions_cursor
       IF CURSOR_STATUS('global', 'actions_cursor') = -1
          DEALLOCATE actions_cursor 
                  
       DECLARE 
            @ADJUSTEDERRORSEVERITY   INT
       SET @ADJUSTEDERRORSEVERITY = CASE
                                        WHEN @ERRORSEVERITY &gt; 18 THEN 18
                                        ELSE @ERRORSEVERITY
                                      END
        
        
       RAISERROR (@ERRORMESSAGETEXT, @ADJUSTEDERRORSEVERITY, 1
          ,@ERRORNUMBER
          ,@ERRORSEVERITY
          ,@ERRORSTATE
          ,@ERRORPROCEDURE
          ,@ERRORLINE
          ,@ERRORMESSAGETEXT
    )
    END
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMEXPRESSIONQUERY'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.PMEXPRESSIONQUERY AS RETURN 1')
  END
GO
/******************************************************************************************************/
/* OBJECT: Stored Procedure																			  */
/* NAME: PMEXPRESSIONQUERY																			  */
/* INPUT PARAMETERS:																				  */
/*      @RULEDESCRIPTION       - rule description													  */
/*      @CLIENT                - client event flag : 0 - server event 1 - client event				  */
/*      @DBID                  - seviewer database id. SEviewerDb primary key 						  */
/* OUTPUT PARAMETERS:																				  */
/*      @QUERY_CURSOR          - result cursor														  */
/* DESCRIPTION:																						  */
/* It processed expressions and create for each entity "where" sql conditions using list of parameters*/
/* Sql condition also contains action and database id parameters.									  */
/* If entity is stored procedure then will be create only proc parameter list.						  */
/* For entity "V_PM_EVENTDETAIL" the column "fieldType" of table PMENTITYMAPPING contains value that  */
/* will be used for additional  sql condition {Name = {value}}.( See example below for expression     */
/* &lt;expression alias="EVENT.COMPONENT"&gt;)															  */
/* Result cursor will be contains next fields														  */
/* --------|---------------|------------|------------------|----------------------|-----------------  */
/*  entity | sql condition | parameters | parameter values | last parameter index | proc parameters   */
/* --------|---------------|------------|------------------|----------------------|-----------------  */
/* For example, rule description has following structure:											  */			
/*&lt;rule name="Event Type" id="1" dbid="7D7A57B2-32C8-4520-9DA8-1A771BBCC7C8"&gt;						  */
/*  &lt;expressions&gt;																					  */
/*    &lt;expression alias="EVENT.EVENTCLASSTYPE" variable="Intercept.Variable.EventClassType"&gt;		  */
/*      &lt;params&gt;																					  */
/*        &lt;param name="operation" value="IN" /&gt;														  */
/*        &lt;param name="value" value="performance" /&gt;												  */
/*      &lt;/params&gt;																					  */
/*    &lt;/expression&gt;																		              */
/*    &lt;expression alias="EVENT.SOURCE" variable="Intercept.Variable.Source"&gt;						  */
/*      &lt;params&gt;																					  */
/*        &lt;param name="operation" value="IN" /&gt;														  */
/*        &lt;param name="value" value="Duwamish7" /&gt;                                                    */
/*        &lt;param name="value" value="Default Web Site/WebService1" /&gt;                                 */
/*      &lt;/params&gt;                                                                                     */
/*    &lt;/expression&gt;																					  */
/*    &lt;expression alias="EVENT.COMPONENT" variable="Intercept.Variable.EventClassType"&gt;               */
/*      &lt;params&gt;                                                                                      */
/*        &lt;param name="operation" value="IN" /&gt;                                                       */
/*        &lt;param name="value" value="performance" /&gt;                                                  */
/*      &lt;/params&gt;                                                                                     */
/*    &lt;/expression&gt;																					  */
/*  &lt;/expressions&gt;																					  */
/*  &lt;actions&gt;																						  */
/*    &lt;action alias="EVENT.PMSTATUS" action="Intercept.ActionType.ChangeStatus"&gt;					  */
/*      &lt;params&gt;																					  */
/*        &lt;param name="value" value="0" /&gt;															  */
/*      &lt;/params&gt;																					  */
/*    &lt;/action&gt;																						  */
/*  &lt;/actions&gt;																						  */
/*&lt;/rule&gt;																							  */
/*  Output for this rule will be following ( @CLIENT = 0, @DBID = 1)								  */
/*  Note: action parameter value and database identifier are not included in parameter value list     */
/* -----------|-------------------------|------------------|-------------------------------|-|--|     */
/* V_PM_EVENT |(EVENTCLASSTYPE like @P1 | @P1 nvarchar(50) |'performance',				   |3|	|	  */	
/*			  |					   	    |,@P2 nvarchar(255)|'Default Web Site/WebService1',| |  |     */
/*            |    ESCAPE N''~''  ) AND |,@P3 nvarchar(255)|'Duwamish7'					   | |	|	  */
/*            |   (SOURCE like @P2	    |				   |							   | |	|     */
/*            |    ESCAPE N''~'' OR		|				   |							   | |	|     */
/*            |    SOURCE like @P3		|				   |	 						   | |	|	  */
/*            |    ESCAPE N''~'') AND   |				   |							   | |	|	  */
/*			  |   (PMSTATUS != @A1 AND  |				   |							   | |	|     */
/*			  |	  SEVIEWERDBID = @DBID)	|				   |						       | |	|	  */
/*			  |							|				   |						       | |	|     */
/* -----------|-------------------------|------------------|-------------------------------|-|--|     */
/* V_PM_EVENT |(VALUE like @P4			|@P4 nvarchar(255) |'performance','COMPONENT'      |5|	|	  */
/*	DETAIL	  |	    ESCAPE N''~''  ) AND|@P5 nvarchar(50)  |							   | |	|	  */
/*			  |  NAME=@P5 AND           |			       |							   | |	|	  */
/*			  |  ( PMSTATUS != @A1 AND  |				   |							   | |	|	  */
/*			  |    SEVIEWERDBID = @DBID |				   |							   | |	|	  */
/*			  |  )                      |				   |							   | |	|	  */
/*            |                         |			       |							   | |	|	  */
/*************|****************************************************************************************/
alter PROCEDURE [APM].[PMEXPRESSIONQUERY]
  @RULEDESCRIPTION as NVARCHAR(max)
 ,@CLIENT bit
 ,@DBID int
 ,@QUERY_CURSOR CURSOR VARYING OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
        
    DECLARE 
         @ERRORIND        BIT
        ,@ERRORMESSAGE    NVARCHAR(4000)
        ,@ERRORNUMBER     INT
        ,@ERRORSEVERITY   INT
        ,@ERRORSTATE      INT
        ,@ERRORLINE       INT
        ,@ERRORPROCEDURE  SYSNAME
        ,@ERRORMESSAGETEXT NVARCHAR(4000)
    SET @ERRORIND = 0
    BEGIN TRY
    
    DECLARE 
        @RULE AS XML
       ,@EVENTDETAILENTITY sysname  
       ,@CSEVENTDETAILENTITY sysname    
        
    SELECT 
        -- convert rule to untyped xml
        @RULE = CAST(@RULEDESCRIPTION AS XML)
        -- server entity name that need processed separate
       ,@EVENTDETAILENTITY = N'V_PM_EVENTDETAIL'  
        -- client entity name that need processed separate
       ,@CSEVENTDETAILENTITY = N'V_PM_CSEVENTDETAIL'
    
    -- Result Set
    DECLARE
      @QUERYSET TABLE 
      (
        id int IDENTITY (1,1) -- identity . Unique identifier
       ,entity SYSNAME -- entity name. For eventdetail entity can be several row with the same entity name. 
       ,condition NVARCHAR(MAX) -- sql condition that will be used for 'where' clause
       ,params NVARCHAR(MAX) -- parameter list that will be used for 'where' clause
       ,paramsValues NVARCHAR(MAX) --parameter value list that will be used for 'where' clause
       ,lastParameterIndex int -- last parameter index that used for paramater list
       ,procParameterList NVARCHAR(max) -- proc parameters if entity is stored proc. Reserved.
      )   
      --------------- expressions query ------------    
      DECLARE 
         expressions_cursor CURSOR STATIC FOR
            SELECT expressions.expression.query('.') AS expr
               FROM @RULE.nodes('rule/expressions/expression') expressions(expression)
      DECLARE           
       @EXPRESSION AS XML           
        
      OPEN expressions_cursor
      FETCH NEXT FROM expressions_cursor INTO @EXPRESSION
      
      DECLARE
         @LASTPARAMETERINDEX int
   
      SELECT @LASTPARAMETERINDEX = 0
      -------------- cycle by expressions --------------
      WHILE @@FETCH_STATUS = 0
      BEGIN  
        DECLARE 
            @ALIAS nvarchar(50)
  
        -- Get alias name
        SELECT @ALIAS = @EXPRESSION.value('(/expression/@alias)[1]', 'nvarchar(50)') 
  
        DECLARE 
          @ENTITY nvarchar(50) -- entity name
         ,@FIELD nvarchar(50) -- field name that used in condition        
         ,@OPERATION NVARCHAR(50) -- operation
         ,@FIELDTYPE nvarchar(50) -- field type
         ,@NOTEXPRESSION bit -- expression contains 'not' ( 0 - not contains 1 - contains)
         ,@ISPROCEDURE bit -- entity is procedure ( 0 - table/view 1-procedure)
    
         -- Get operation  
         SELECT 
           @OPERATION = @EXPRESSION.value('(/expression/params/param[@name=''operation'']/@value)[1]', 'nvarchar(50)')   
         SELECT 
           -- expression contains "not" clause (1-contains, 0-not contains) 
           @NOTEXPRESSION = CASE WHEN CHARINDEX(N'not', @OPERATION) &gt; 0 THEN 1 ELSE 0 END
           -- operation
          ,@OPERATION = REPLACE(@OPERATION, N'not', N'')     
     
         DECLARE 
           @CONDITION NVARCHAR(MAX) -- sql condition
          ,@PARAMS NVARCHAR(MAX) -- parameter list divided by ','
          ,@PARAMSVALUES NVARCHAR(MAX) -- param value list divided by ','
          ,@PARAMTYPE sysname -- parameter type
          ,@CHARCONDITIONFLAG bit -- flag char character field(1- char field 0- not char field) 
          ,@PREFIX nvarchar(10) -- for "not" expression use "NOT" clause otherwise use empty prefix
          ,@PROCPARAMETERLIST NVARCHAR(max) -- proc parameter list
          ,@VALUES_CURSOR CURSOR -- cursor for extracting parameter and corresponding values 
          -- seach mapping for alias     
          SELECT 
             --use 'rowguid' instead 'eventid' field 
             @FIELD = CASE field WHEN N'EVENTID' THEN N'ROWGUID' ELSE field END
             --user nvarchar(50) for rowguid field
            ,@FIELDTYPE = CASE field WHEN N'EVENTID' THEN N'nvarchar(50)' ELSE fieldType END
             --entity name 
            ,@ENTITY = entity
            --stored proc flag
            ,@ISPROCEDURE = isprocedure
          FROM 
             APM.PMENTITYMAPPING (NOLOCK) 
          WHERE 
             alias = @ALIAS AND isclient = @CLIENT
          IF @@ROWCOUNT = 0
          BEGIN
            -- mapping for alias not found, raise exception
            RAISERROR(N'Alias "%s" is not registered', 16, 1, @ALIAS)
            RETURN  
          END    
          
          -- initialize 
          SELECT  @CONDITION = N''
                 ,@PARAMS = N''
                 ,@PARAMSVALUES = N'' 
                 -- use always char condition for eventdetail table or for 'rowguid' field  
                 ,@CHARCONDITIONFLAG = 
                    CASE 
                      WHEN (CHARINDEX(N'char', @FIELDTYPE) &gt; 0) OR (@ENTITY = @CSEVENTDETAILENTITY) OR
                           (@ENTITY = @EVENTDETAILENTITY) OR (@FIELD = N'ROWGUID')
                        THEN 1 
                        ELSE 0 
                    END  
          -- initialize prefix. For not char fields use empty prefix
          SELECT @PREFIX = CASE WHEN @NOTEXPRESSION = 1 AND @CHARCONDITIONFLAG = 1 THEN N'NOT' ELSE N'' END  
          
          -- for not eventdetail entity sql conditions and parameters will be united for the same entity
          -- for eventdetail always use new sql condition and parameters
          IF (@ENTITY != @CSEVENTDETAILENTITY) AND (@ENTITY != @EVENTDETAILENTITY) 
			  SELECT 
				 @CONDITION = CASE WHEN @ISPROCEDURE = 1 THEN N'' ELSE condition END 
				,@PARAMS = CASE WHEN @ISPROCEDURE = 1 THEN N'' ELSE params END 
				,@PARAMSVALUES = CASE WHEN @ISPROCEDURE = 1 THEN N'' ELSE paramsValues END
			  FROM 
				@QUERYSET
			  WHERE
				entity = @ENTITY    
    
          -- begin create sql condition. The first prefix will be added
          SELECT @CONDITION = @CONDITION + 
                CASE WHEN LEN(@CONDITION) &gt; 0 
                    THEN REPLACE(CONVERT(nvarchar(MAX),N' AND {0} ('), N'{0}', @PREFIX) 
                    ELSE REPLACE(CONVERT(nvarchar(MAX),N' {0} ('), N'{0}', @PREFIX) 
                END
        
          --------------- values query ------------
          -- prepare cursor for select parameter names and values
          if @ISPROCEDURE = 1 
             SET @VALUES_CURSOR = CURSOR STATIC FOR
                SELECT valueSet.value.value('(@value)[1]', 'nvarchar(max)'),valueSet.value.value('(@name)[1]', 'nvarchar(max)')
                   FROM @EXPRESSION.nodes('/expression/params/param') valueSet(value)
          ELSE          
             SET @VALUES_CURSOR = CURSOR STATIC FOR    
                SELECT valueSet.value.value('(@value)[1]', 'nvarchar(max)'), N''
                    FROM @EXPRESSION.nodes('/expression/params/param[@name=''value'']') valueSet(value)
             
          -- open values cursor   
          OPEN @VALUES_CURSOR
  
          DECLARE
            @VALUE NVARCHAR(MAX) -- parameter value
           ,@NAME nvarchar(max) -- parameter name
           ,@CHARCONDITION nvarchar(max) -- sql condition for char values
           ,@NUMBERCONDITION nvarchar(max) -- sql condition for non char values 
           ,@DECORATOR nvarchar(1) -- decorator. (Use ''' or empty decorator for values)
           ,@POSTFIX nvarchar(50) -- postfix
      
          -- calculate operation. use "like" operation instead "IN" for "char" field 
          SELECT @OPERATION = CASE WHEN LTRIM(@OPERATION) = N'IN' AND @CHARCONDITIONFLAG = 1 THEN N'like' ELSE @OPERATION END
    
          -- initialize sql conditions and parameters
          SELECT 
            @CHARCONDITION = N'' 
           ,@NUMBERCONDITION = N''
           ,@PROCPARAMETERLIST = N''
           ,@DECORATOR = CASE WHEN @CHARCONDITIONFLAG = 1 THEN '''' ELSE '' END  
           ,@POSTFIX = CASE WHEN CHARINDEX(N'like', @OPERATION) &gt; 0 THEN N' ESCAPE N''''~'''' ' ELSE N'' END                                                                       
  
          FETCH NEXT FROM @VALUES_CURSOR INTO @VALUE, @NAME
     
          ---------- cycle by values --------       
          WHILE @@FETCH_STATUS = 0
          BEGIN
            --increment parameter index
            SELECT @LASTPARAMETERINDEX = @LASTPARAMETERINDEX + 1                        
            
            DECLARE 
                @PARAMETERNAME nvarchar(MAX) -- sql parameter name
               ,@PARAMETERVALUE nvarchar(max) -- parameter value 
               ,@SQ  nvarchar(1) -- char constant 
            
            SELECT
               @PARAMETERNAME = 
                CASE
                  WHEN @ISPROCEDURE = 1 
                    THEN REPLACE(N'@{0}', N'{0}', @NAME)
                    ELSE REPLACE(N'@P{0}', N'{0}', @LASTPARAMETERINDEX)
                END  
              ,@SQ = N''''       
                  
              IF @ISPROCEDURE = 1
              BEGIN
                -- procedure. create parameter list
                SELECT @PROCPARAMETERLIST = @PROCPARAMETERLIST + 
                            REPLACE(REPLACE(N'{0}{1}',
                                         N'{0}',CASE WHEN LEN(@PROCPARAMETERLIST) &gt; 0 THEN N',' ELSE '' END),
                                         N'{1}',@PARAMETERNAME)
				-- get parameter type                                         
                SELECT @FIELDTYPE = APM.GetProcParameterTypeName(@ENTITY, @PARAMETERNAME)                
                IF @FIELDTYPE IS NULL
                BEGIN
                  -- parameter type is not found, raise exception
                  RAISERROR(N'Parameter "%s" for stored procedure "%s" is not defined.', 16, 1, @PARAMETERNAME, @ENTITY)
                  RETURN
                END
                -- setup char condition flag if parameter type is char type
                SELECT @CHARCONDITIONFLAG = CASE WHEN CHARINDEX(N'char', @FIELDTYPE) &gt; 0 THEN 1 ELSE 0 END
                --decorator value
                SELECT @DECORATOR = CASE WHEN @CHARCONDITIONFLAG = 1 THEN '''' ELSE '' END  
              END
              
              -- calcualte parameter value as  decorator + value + decorator
              -- use calculate expression 'dbId-value' as value for 'rowguid' field
              -- for char parameter value use encoding for char '''
              SELECT @PARAMETERVALUE = REPLACE(REPLACE(REPLACE(
                                          N'{0}{1}{2}', 
                                          N'{0}',@DECORATOR),
                                          N'{1}',
                                             CASE @FIELD 
                                                WHEN N'ROWGUID' 
                                                  THEN 
                                                    REPLACE(REPLACE(N'{0}-{1}', 
                                                         N'{0}', @DBID) 
                                                        ,N'{1}', @VALUE) 
                                                  ELSE 
                                                    CASE 
                                                    WHEN @CHARCONDITIONFLAG = 1 
                                                        THEN  replace(@VALUE, @SQ, @SQ + @SQ) 
                                                        ELSE @VALUE 
                                                    END
                                             END     
                                                ),
                                          N'{2}',@DECORATOR)    
                                             
              -- create char sql condition or non char sql condition ([field] operator [parameter]) ('where' clause)
              -- for char condition using 'or' otherwise ','                           
              SELECT 
                   @CHARCONDITION = @CHARCONDITION + REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(nvarchar(MAX),
                                         N' {0} {1} {2} {3} {4}'),
                                         N'{0}',CASE WHEN LEN(@CHARCONDITION) &gt; 0 THEN N' OR ' ELSE N'' END), 
                                         N'{1}',@FIELD),
                                         N'{2}',@OPERATION),
                                         N'{3}',@PARAMETERNAME),
                                         N'{4}',@POSTFIX)
                  ,@NUMBERCONDITION = @NUMBERCONDITION + REPLACE(REPLACE(CONVERT(nvarchar(MAX),
                                         N'{0}{1}'),
                                         N'{0}',CASE WHEN LEN(@NUMBERCONDITION) &gt; 0 THEN N',' ELSE '' END), 
              
                                         N'{1}',@PARAMETERNAME)
              SELECT 
              -- create parameter list ([parameter] [parameter type],[parameter] [parameter type],etc) 
              --use nvarchar(255) for 'eventdetail' entity because field type is not defined for this entity                                        
                  @PARAMS = @PARAMS + REPLACE(REPLACE(REPLACE(CONVERT(nvarchar(MAX),
                                          N'{0}{1} {2}'), 
                                          N'{0}',CASE WHEN LEN(@PARAMS) &gt; 0 THEN N',' ELSE N'' END), 
                                          N'{1}',@PARAMETERNAME),
                                          N'{2}',CASE WHEN @ENTITY=@EVENTDETAILENTITY OR @ENTITY=@CSEVENTDETAILENTITY THEN N'nvarchar(255)' ELSE @FIELDTYPE END)    
                                            
              -- create parameter value list ([parameter value], [parameter value],etc) 
                 ,@PARAMSVALUES = @PARAMSVALUES + REPLACE(REPLACE(CONVERT(nvarchar(MAX),
                                          N'{0}{1}'), 
                                          N'{0}',CASE WHEN LEN(@PARAMSVALUES) &gt; 0 
                                          THEN 
											CASE 
											  WHEN @CHARCONDITIONFLAG = 1 
											    THEN N',N' 
											    ELSE N','
											  END																						 
                                          ELSE 
                                            CASE 
											  WHEN @CHARCONDITIONFLAG = 1 
												THEN N'N' 
												ELSE N'' 
											  END																						 												
                                          END
                                          ), 
                                          N'{1}',@PARAMETERVALUE)                                     
              
            FETCH NEXT FROM @VALUES_CURSOR INTO @VALUE, @NAME
          END
          CLOSE @VALUES_CURSOR
          DEALLOCATE @VALUES_CURSOR 
    
          -- finished create sql condition for non char field
          -- ([field] [NOT] @OPERATION [(number condition)])
          SELECT @NUMBERCONDITION = REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(nvarchar(MAX),
                                        N'{0} {1} {2} ({3})'),
                                        N'{0}', @FIELD),
                                        N'{1}', CASE WHEN @NOTEXPRESSION = 1 THEN N'NOT' ELSE N'' END),
                                        N'{2}', @OPERATION),
                                        N'{3}', @NUMBERCONDITION)
          
          --user numeric or char sql condition or non char condition. it depends on field type
          SELECT @CONDITION = @CONDITION + REPLACE(CONVERT(nvarchar(MAX),N'{0} )'), 
                                        N'{0}', CASE WHEN @CHARCONDITIONFLAG = 1 THEN @CHARCONDITION ELSE @NUMBERCONDITION END)
          --finished processes current expression
          --it is need to joined together the same entity except 'eventdetail' entity and stored proc
          --for each row from @QUERYSET will be create separate query. All these query will be intersected.                            
          IF EXISTS(
            SELECT * FROM @QUERYSET WHERE entity = @ENTITY AND entity != @EVENTDETAILENTITY 
                        AND entity != @CSEVENTDETAILENTITY  
          ) AND (@ISPROCEDURE = 0)
          BEGIN
            UPDATE @QUERYSET
              SET   
               condition = @CONDITION -- sql condition
              ,lastParameterIndex = @LASTPARAMETERINDEX -- last parameter index
              ,params = @PARAMS -- parameter list
              ,paramsValues = @PARAMSVALUES -- parameter value list
            WHERE
              entity = @ENTITY                        
          END         
          ELSE
          BEGIN
             -- additional processing for 'eventdetail' entity
             --The field 'fieldType' of entity mapping table contains filter value 
             --for field 'name' of 'eventdetail' entity. Therefore for this entity sql condition will be shown as 
             -- ['name' = 'fieldType' and 'field' operator 'value']  
             IF @ENTITY = @EVENTDETAILENTITY OR @ENTITY = @CSEVENTDETAILENTITY
             BEGIN
                -- increment last parameter index
                SELECT @LASTPARAMETERINDEX = @LASTPARAMETERINDEX + 1
                --calculate parameter name
                SELECT @PARAMETERNAME = REPLACE(N'@P{0}', N'{0}', @LASTPARAMETERINDEX)
                
                --add additional filter by 'name' field
                SELECT @CONDITION = @CONDITION + 
                        REPLACE(CONVERT(nvarchar(MAX),N' AND NAME={0}'), N'{0}', @PARAMETERNAME)
                --field type is not registered. Use nvarchar(50).        
                SELECT @PARAMS = @PARAMS + 
                        REPLACE(CONVERT(nvarchar(MAX),N',{0} nvarchar(50)'), N'{0}', @PARAMETERNAME)
                -- field type from mapping table contains filter value. It always is char value. Use char decorator.        
                SELECT @PARAMSVALUES = @PARAMSVALUES + 
                        REPLACE(CONVERT(nvarchar(MAX),N',{0}'), N'{0}',QUOTENAME(@FIELDTYPE, ''''))                                     
             END
             -- for 'eventdetail' entity always use new query. 
             INSERT @QUERYSET (entity, condition, lastParameterIndex, params, paramsValues, procParameterList)  
             VALUES(@ENTITY, @CONDITION, @LASTPARAMETERINDEX, @PARAMS, @PARAMSVALUES, @PROCPARAMETERLIST)       
          END                   
          
          --- Get next expression ----
          FETCH NEXT FROM expressions_cursor 
          INTO @EXPRESSION
    END 
    CLOSE expressions_cursor
    DEALLOCATE expressions_cursor
    
    -- It is need to add action filter and seviewer database filter to sql condition for each query
    ---------- added action fields ------
          
      DECLARE 
         @RESULT_CURSOR CURSOR 
        ,@ID int -- unique identifier for current query. It use because entity can be not unique
       
      -- prepare iteration by each query  
      SET @RESULT_CURSOR = CURSOR STATIC FOR
        SELECT id, entity, condition, params, paramsValues FROM @QUERYSET   
        
      OPEN @RESULT_CURSOR
      
      --get current query (unique identifier, entity name, sql condition ('where' clause, parameter list, parameter value list)
      FETCH NEXT FROM @RESULT_CURSOR INTO @ID, @ENTITY, @CONDITION, @PARAMS, @PARAMSVALUES 
      
      WHILE @@FETCH_STATUS = 0 
      BEGIN
          
          DECLARE
            @ACTIONPARAMS nvarchar(max) --action parameters
           ,@ACTIONPARAMSVALUES nvarchar(max) --action parameter value
           ,@ACTIONPARAMETER nvarchar(50) --action parameter name 
           ,@ACTIONFIELD nvarchar(50) -- action field
           ,@ACTIONENTITY nvarchar(max) -- action entity
           ,@ACTIONCONDITION nvarchar(MAX) -- action sql condition
           ,@ACTION_CURSOR CURSOR --It is need for several actions
           
          -- prepare condition for adding action filter                                
          SELECT @ACTIONCONDITION = N'', @CONDITION = @CONDITION + CONVERT(nvarchar(MAX),N' AND (') 
          --Get action filters. Now there is one action filter
          EXEC APM.PMActionQuery @RULEDESCRIPTION, @CLIENT, @DBID, 0, @ACTION_CURSOR OUTPUT
          
          FETCH NEXT FROM @ACTION_CURSOR 
             INTO @ACTIONPARAMETER, @ACTIONFIELD, @ACTIONPARAMS, @ACTIONPARAMSVALUES,@ACTIONENTITY
          
          WHILE @@FETCH_STATUS = 0
          BEGIN
            -- create action sql condition ([actionField] != [actionParameter]) 
            --It is need to add filter by seviewer database (SEVIEWERDBID = [seviewer database identifier])
            SELECT 
              @ACTIONCONDITION = @ACTIONCONDITION + 
                        REPLACE(REPLACE(REPLACE(CONVERT(nvarchar(MAX),N' {0} {1} != {2} AND SEVIEWERDBID = @DBID'),
                            N'{0}', CASE WHEN LEN(@ACTIONCONDITION) &gt; 0 THEN N'OR' ELSE N'' END),               
                            N'{1}', @ACTIONFIELD),              
                            N'{2}', @ACTIONPARAMETER)   
                                  
            --Get next action condition. Now it will be return empty row because use only one action                               
            FETCH NEXT FROM @ACTION_CURSOR 
                INTO @ACTIONPARAMETER, @ACTIONFIELD, @ACTIONPARAMS, @ACTIONPARAMSVALUES, @ACTIONENTITY
          END
          CLOSE @ACTION_CURSOR
          DEALLOCATE @ACTION_CURSOR
          
          -- join expression sql condition and action sql condition
          -- Now action parameter value and database identifier are not included in parameter value list
          -- These parameter values (action value and database identifier) will be added to parameter values during execution 
          -- intersect command 
          SELECT @CONDITION = @CONDITION + @ACTIONCONDITION + CONVERT(nvarchar(MAX),N')')        
        
          --update condition for current query by unique identifier
          UPDATE @QUERYSET 
             SET condition = @CONDITION
          WHERE 
            id = @ID  
        
          -- get next query
          FETCH NEXT FROM @RESULT_CURSOR INTO @ID, @ENTITY, @CONDITION, @PARAMS, @PARAMSVALUES 
      END
        
      -- create result cursor  
      SET @QUERY_CURSOR = CURSOR STATIC FORWARD_ONLY FOR 
      
      SELECT 
         entity -- entity name
        ,condition -- sql condition
        ,params -- parameter list  
        ,paramsValues -- parameter value list
        ,lastParameterIndex -- last parameter index
        ,procParameterList --proc parameter list
      FROM 
        @QUERYSET    
        
      -- open result query   
      OPEN @QUERY_CURSOR      
          
    END TRY
    BEGIN CATCH
        IF (@@TRANCOUNT &gt; 0)
            ROLLBACK TRAN
        SELECT 
            @ERRORNUMBER = ERROR_NUMBER()
            ,@ERRORSEVERITY = ERROR_SEVERITY()
            ,@ERRORSTATE = ERROR_STATE()
            ,@ERRORLINE = ERROR_LINE()
            ,@ERRORPROCEDURE = ISNULL(ERROR_PROCEDURE(), '-')
            ,@ERRORMESSAGETEXT = ERROR_MESSAGE()
        
        SET @ERRORIND = 1
    END CATCH
    IF (@ERRORIND = 1)
    BEGIN
       IF CURSOR_STATUS('global', 'expressions_cursor') IN (0,1)
          CLOSE expressions_cursor
       IF CURSOR_STATUS('global', 'expressions_cursor') = -1
          DEALLOCATE expressions_cursor     
          
       IF CURSOR_STATUS('variable', '@ACTION_CURSOR') IN (0,1)          
          CLOSE @ACTION_CURSOR
       IF CURSOR_STATUS('variable', '@ACTION_CURSOR') = -1
          DEALLOCATE @ACTION_CURSOR     
          
       IF CURSOR_STATUS('global', 'expressions_cursor') IN (0,1)
          CLOSE result_cursor
       IF CURSOR_STATUS('global', 'expressions_cursor') = -1
          DEALLOCATE result_cursor      
          
        DECLARE 
            @ADJUSTEDERRORSEVERITY   INT
        SET @ADJUSTEDERRORSEVERITY = CASE
                                        WHEN @ERRORSEVERITY &gt; 18 THEN 18
                                        ELSE @ERRORSEVERITY
                                      END
        			
        RAISERROR (@ERRORMESSAGETEXT, @ADJUSTEDERRORSEVERITY, 1
          ,@ERRORNUMBER
          ,@ERRORSEVERITY
          ,@ERRORSTATE
          ,@ERRORPROCEDURE
          ,@ERRORLINE
          ,@ERRORMESSAGETEXT
    )
    END
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMIntersectExpressionQuery'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.PMIntersectExpressionQuery AS RETURN 1')
  END
GO
/******************************************************************************************************/
/* OBJECT: Stored Procedure																			  */
/* NAME: PMIntersectExpressionQuery																	  */
/* INPUT PARAMETERS:																				  */
/*      @RULEDESCRIPTION       - rule description													  */
/*      @CLIENT                - client event flag : 0 - server event 1 - client event				  */
/*      @DBID                  - seviewer database id. SEviewerDb primary key 						  */
/* OUTPUT PARAMETERS:																				  */
/*      @QUERY_CURSOR          - result cursor														  */
/* DESCRIPTION:																						  */
/* It create full sql query for rule. This query intersect all rule expression. Stored procedure are  */
/* not supported. It partial implemented.														      */
/* Result cursor will be contains next fields														  */
/* --------|---------------|------------|------------------|----------------------|-----------------  */
/*  entity | sql query     | parameters | parameter values | last parameter index | proc parameters   */
/* --------|---------------|------------|------------------|----------------------|-----------------  */
/* table/  | parameter     |  parameter | parameter value  |					  |	  	reserved      */
/*   view/ | query         |  name		|   list           |					  |					  */
/*   stored|			   |  parameter |				   |					  |                   */
/*   proc  | 			   |  type      |				   |					  |					  */
/* --------|---------------|------------|------------------|----------------------|-----------------  */
/******************************************************************************************************/
alter PROCEDURE [APM].[PMIntersectExpressionQuery]
  @RULEDESCRIPTION nvarchar(max)
 ,@CLIENT bit
 ,@DBID int
 ,@QUERY_CURSOR CURSOR VARYING OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE 
         @ERRORIND        BIT
        ,@ERRORMESSAGE    NVARCHAR(4000)
        ,@ERRORNUMBER     INT
        ,@ERRORSEVERITY   INT
        ,@ERRORSTATE      INT
        ,@ERRORLINE       INT
        ,@ERRORPROCEDURE  SYSNAME
        ,@ERRORMESSAGETEXT NVARCHAR(4000)
    SET @ERRORIND = 0
    BEGIN TRY      
                                                    
    DECLARE
       @ENTITY sysname  -- entity name
      ,@CONDITION nvarchar(MAX) -- current sql condition
      ,@PARAMS nvarchar(MAX) -- parameter list 
      ,@PARAMSVALUES nvarchar(MAX) --parameter value list
      ,@PROCPARAMETERLIST NVARCHAR(MAX) --reserved
      ,@LASTPARAMETERINDEX int -- last parameter index
      ,@QUERY_CUR CURSOR 
    
    -- Get queries that will be intercected    
    EXEC APM.PMExpressionQuery @RULEDESCRIPTION, @CLIENT, @DBID, @QUERY_CUR OUTPUT
    
    --iteration by expression query
    FETCH NEXT FROM @QUERY_CUR INTO 
         @ENTITY, @CONDITION, @PARAMS, @PARAMSVALUES, @LASTPARAMETERINDEX, @PROCPARAMETERLIST
         
    DECLARE
       @SQL nvarchar(MAX) -- intersect sql query
      ,@INTERSECTPARAMS nvarchar(MAX) -- sql parameters for intersect query
      ,@INTERSECTPARAMSVALUES nvarchar(MAX) -- intersect parameter values
       
    --initialize intersect variables
    SELECT @SQL = N'', @INTERSECTPARAMS = N'', @INTERSECTPARAMSVALUES = N'' 
    
    WHILE @@FETCH_STATUS = 0
    BEGIN
   
      IF @CONDITION IS NOT NULL 
      BEGIN
        --create intersect sql query using current expression sql query 
        SELECT @SQL = @SQL +  
            REPLACE(REPLACE(REPLACE(CONVERT(nvarchar(max),N'{0} SELECT EVENTID FROM APM.{1} WHERE {2}'),
                     N'{0}', CASE WHEN LEN(@SQL) &gt; 0 THEN N' INTERSECT' ELSE '' END)
                    ,N'{1}', QUOTENAME(@ENTITY))
                    ,N'{2}', @CONDITION)
        --create intercept parameters using current expression sql parameters                     
        SELECT @INTERSECTPARAMS = @INTERSECTPARAMS +
            REPLACE(REPLACE(CONVERT(nvarchar(max),N'{0}{1}'),
                     N'{0}', CASE WHEN LEN(@INTERSECTPARAMS) &gt; 0 THEN N',' ELSE '' END)
                    ,N'{1}', @PARAMS)
                        
        --create intersect sql parameter values using current expression parameter values                
        SELECT @INTERSECTPARAMSVALUES = @INTERSECTPARAMSVALUES +  
            REPLACE(REPLACE(CONVERT(nvarchar(max),N'{0}{1}'),
                     N'{0}', CASE WHEN LEN(@INTERSECTPARAMSVALUES) &gt; 0 THEN N',' ELSE '' END)
                    ,N'{1}', @PARAMSVALUES)
      END               
      ELSE
      BEGIN
         -- stored proc is used if condition is null, now it is not supported, raise exception   
         RAISERROR (N'The execution of stored procedure is not supported', 16, 1)
         RETURN
      END           
      
      --get next expression query
      FETCH NEXT FROM @QUERY_CUR INTO 
         @ENTITY, @CONDITION, @PARAMS, @PARAMSVALUES, @LASTPARAMETERINDEX, @PROCPARAMETERLIST
    END                 
    CLOSE @QUERY_CUR
    DEALLOCATE @QUERY_CUR 
    
    -- intersect query is created. It is need to add action and database id parameters  
    DECLARE
        @ACTIONPARAMS nvarchar(max) -- action parameters including database id parameter.
       ,@ACTIONPARAMSVALUES nvarchar(max) -- action parameter values including database id parameter
       ,@ACTIONPARAMETER nvarchar(50) -- action parameter name. Use only for fetch operation. Don't remove 
                                      -- from fetch expression   
       ,@ACTIONFIELD nvarchar(50) -- action field. Use only for fetch operation. Don't remove 
									-- from fetch expression   
       ,@ACTIONENTITY nvarchar(max) -- action entity. Use only for fetch operation. Don't remove 
									-- from fetch expression   
       ,@ACTION_CURSOR CURSOR -- action query. It is only one record now.
                            
      -- Get action and database id parameters                            
      EXEC APM.PMActionQuery @RULEDESCRIPTION, @CLIENT, @DBID, 0, @ACTION_CURSOR OUTPUT
      
      -- fetch action and database id parameters                            
      FETCH NEXT FROM @ACTION_CURSOR 
         INTO @ACTIONPARAMETER, @ACTIONFIELD, @ACTIONPARAMS, @ACTIONPARAMSVALUES,@ACTIONENTITY
      
      WHILE @@FETCH_STATUS = 0
      BEGIN
        SELECT 
          -- added to intersect parameters 
          @INTERSECTPARAMS = @INTERSECTPARAMS + REPLACE(CONVERT(nvarchar(max),N',{0}'), N'{0}',@ACTIONPARAMS)  
          -- added to intersect parameter values 
         ,@INTERSECTPARAMSVALUES = @INTERSECTPARAMSVALUES + REPLACE(CONVERT(nvarchar(max),N',{0}'), N'{0}',@ACTIONPARAMSVALUES)    
              
      -- fetch next action and database id parameters.                             
        FETCH NEXT FROM @ACTION_CURSOR 
            INTO @ACTIONPARAMETER, @ACTIONFIELD, @ACTIONPARAMS, @ACTIONPARAMSVALUES, @ACTIONENTITY
      END
      CLOSE @ACTION_CURSOR
      DEALLOCATE @ACTION_CURSOR             
         
    --create result sql query       
    DECLARE
      @QUERYSET TABLE 
      (
        entity SYSNAME --view/table or stored proc. reserved
       ,condition NVARCHAR(MAX) --sql query
       ,params NVARCHAR(MAX) -- sql parameter list
       ,paramsValues NVARCHAR(MAX) -- sql parameter values
       ,lastParameterIndex int -- reserved
       ,procParameterList NVARCHAR(max) -- reserved
      )   
    
    INSERT @QUERYSET
           (
            entity, 
            condition, 
            params, 
            paramsValues, 
            lastParameterIndex, 
            procParameterList
           ) 
    SELECT
        @ENTITY --view/table or stored proc. reserved
       ,@SQL --sql query
       ,@INTERSECTPARAMS -- sql parameter list
       ,@INTERSECTPARAMSVALUES -- sql parameter values
       ,@LASTPARAMETERINDEX -- reserved
       ,@PROCPARAMETERLIST -- reserved
       
    --create result cursor   
    SET @QUERY_CURSOR = CURSOR STATIC FOR SELECT * FROM @QUERYSET   
    --open cursor
    OPEN @QUERY_CURSOR
    
    END TRY
    BEGIN CATCH
        IF (@@TRANCOUNT &gt; 0)
            ROLLBACK TRAN
        SELECT 
          @ERRORNUMBER = ERROR_NUMBER()
         ,@ERRORSEVERITY = ERROR_SEVERITY()
         ,@ERRORSTATE = ERROR_STATE()
         ,@ERRORLINE = ERROR_LINE()
         ,@ERRORPROCEDURE = ISNULL(ERROR_PROCEDURE(), '-')
         ,@ERRORMESSAGETEXT = ERROR_MESSAGE()
        
        SET @ERRORIND = 1
    END CATCH
    IF (@ERRORIND = 1)
    BEGIN        
       IF CURSOR_STATUS('variable', '@QUERY_CUR') IN (0,1)
          CLOSE @QUERY_CUR  
       IF CURSOR_STATUS('variable', '@QUERY_CUR') = -1
          DEALLOCATE @QUERY_CUR 
              
       DECLARE 
            @ADJUSTEDERRORSEVERITY   INT
       SET @ADJUSTEDERRORSEVERITY = CASE
                                        WHEN @ERRORSEVERITY &gt; 18 THEN 18
                                        ELSE @ERRORSEVERITY
                                      END
        
        
       RAISERROR (@ERRORMESSAGETEXT, @ADJUSTEDERRORSEVERITY, 1
          ,@ERRORNUMBER
          ,@ERRORSEVERITY
          ,@ERRORSTATE
          ,@ERRORPROCEDURE
          ,@ERRORLINE
          ,@ERRORMESSAGETEXT
    )
    END
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMQueryForRule'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.PMQueryForRule AS RETURN 1')
  END
GO
/******************************************************************************************************/
/* OBJECT: Stored Procedure																			  */
/* NAME: PMQueryForRule																				  */
/* INPUT PARAMETERS:																				  */
/*      @RULEDESCRIPTION       - rule description													  */
/*      @CLIENT                - client event flag : 0 - server event 1 - client event				  */
/*      @DBID                  - seviewer database id. SEviewerDb primary key 						  */
/*      @CALCULATETOTAL        - calculate total flag (1- it is need to calculate count of records	  */												      
/*														0- it is need to fetch records)				  */												      
/*		@ROWSPERITERATION      - number of records that is need to fetch                              */
/*		@DEBUG				   - 0-trace information will be not print								  */	
/*                                 1-trace information will be print  								  */
/* DESCRIPTION:																						  */
/* Calculate total records or fetch records that will be apply by rule.								  */
/* It is need external temporary tables #QUERYTEXT and #RESULTTABLE for execute.					  */
/* #QUERYTEXT table is used for cache sql query (decrease execution count of xml operations).		  */
/* Total count or records will be inserted into the #RESULT table									  */
/******************************************************************************************************/
alter PROCEDURE [APM].[PMQueryForRule]
   @RULEDESCRIPTION nvarchar(max)
  ,@CLIENT bit
  ,@DBID int
  ,@CALCULATETOTAL bit  
  ,@ROWSPERITERATION int
  ,@DEBUG bit = 0
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE 
         @ERRORIND        BIT
        ,@ERRORMESSAGE    NVARCHAR(4000)
        ,@ERRORNUMBER     INT
        ,@ERRORSEVERITY   INT
        ,@ERRORSTATE      INT
        ,@ERRORLINE       INT
        ,@ERRORPROCEDURE  SYSNAME
        ,@ERRORMESSAGETEXT NVARCHAR(4000)
        
    SET @ERRORIND = 0
    BEGIN TRY      
                                                
    DECLARE
       @ENTITY sysname -- entity name or stored proc name
      ,@CONDITION nvarchar(MAX) -- sql query for execution
      ,@PARAMS nvarchar(MAX) -- sql query parameter list
      ,@PARAMSVALUES nvarchar(MAX) -- sql query parameter values
      ,@PROCPARAMETERLIST NVARCHAR(MAX) -- reserved
      ,@LASTPARAMETERINDEX int -- reserved
      ,@QUERY_CUR CURSOR -- query cursor
    DECLARE
       @SQL nvarchar(MAX)
                 
     -- cache is empty ?    
    IF NOT EXISTS(SELECT * FROM #QUERYTEXT WHERE UPDATESQL = 0) 
    BEGIN        
      ---create intersect query that will be execute    
    EXEC APM.PMIntersectExpressionQuery @RULEDESCRIPTION, @CLIENT, @DBID, @QUERY_CUR OUTPUT
    
      -- get intersect query
    FETCH NEXT FROM @QUERY_CUR INTO 
         @ENTITY, @CONDITION, @PARAMS, @PARAMSVALUES, @LASTPARAMETERINDEX, @PROCPARAMETERLIST
         
    WHILE @@FETCH_STATUS = 0
    BEGIN
      DECLARE
        @COMMAND nvarchar(MAX)
   
      --stored proc ?
      IF @CONDITION IS NOT NULL  
        -- create sql for extract (calculate total) event id corresponding rule 
        SELECT @COMMAND = 
            REPLACE(REPLACE(CONVERT(nvarchar(max),N'SELECT {0} FROM ({1}) AS A'), 
                     N'{0}', CASE 
                               WHEN @CALCULATETOTAL = 0 THEN REPLACE(N'TOP({0}) A.EVENTID', N'{0}', @ROWSPERITERATION) 
                               ELSE N'COUNT(*)' 
                             END)  
                    ,N'{1}', @CONDITION)
      ELSE  -- stored proc
        SELECT @COMMAND = 
            REPLACE(REPLACE(N'EXEC APM.{0} {1}', 
                    N'{0}', @ENTITY), 
                    N'{1}', @PROCPARAMETERLIST)
      -- create sql for call sp_execute that will execute intersect query           
      SELECT @SQL = REPLACE(REPLACE(REPLACE(CONVERT(nvarchar(max),N'sp_executesql N''{0}'', N''{1}'', {2}'),
                        N'{0}',@COMMAND),
                        N'{1}',@PARAMS),
                        N'{2}',@PARAMSVALUES)
      -- save result query to cache                        
      INSERT #QUERYTEXT(SQLTEXT, UPDATESQL) SELECT @SQL, 0
                        
      IF @DEBUG = 1
      BEGIN                     
        PRINT @SQL                      
      END   
      
      --fetch next intersect query             
      FETCH NEXT FROM @QUERY_CUR INTO 
           @ENTITY, @CONDITION, @PARAMS, @PARAMSVALUES, @LASTPARAMETERINDEX, @PROCPARAMETERLIST;
      -- There is additional query only if it contains stored proc. Now stored proc is not supported      
      IF @@FETCH_STATUS = 0         
      BEGIN
         -- query contains stored proc, raise exception
         RAISERROR (N'The execution of stored procedure is not supported', 16, 1)
         RETURN
      END    
         
    END                 
    CLOSE @QUERY_CUR
    DEALLOCATE @QUERY_CUR
    
    END
    
    --get result query from cache
    SELECT TOP (1) @SQL = SQLTEXT FROM #QUERYTEXT WHERE UPDATESQL = 0
    
    --save result of query execution to external temporary table
    INSERT #RESULTTABLE EXEC sp_executesql @SQL         
        
    END TRY
    BEGIN CATCH
        IF (@@TRANCOUNT &gt; 0)
            ROLLBACK TRAN
        SELECT 
            @ERRORNUMBER = ERROR_NUMBER()
            ,@ERRORSEVERITY = ERROR_SEVERITY()
            ,@ERRORSTATE = ERROR_STATE()
            ,@ERRORLINE = ERROR_LINE()
            ,@ERRORPROCEDURE = ISNULL(ERROR_PROCEDURE(), '-')
            ,@ERRORMESSAGETEXT = ERROR_MESSAGE()
        
        SET @ERRORIND = 1
    END CATCH
    IF (@ERRORIND = 1)
    BEGIN        
       IF CURSOR_STATUS('variable', '@QUERY_CUR') IN (0,1)
          CLOSE @QUERY_CUR  
       IF CURSOR_STATUS('variable', '@QUERY_CUR') = -1
          DEALLOCATE @QUERY_CUR 
              
       DECLARE 
            @ADJUSTEDERRORSEVERITY   INT
       SET @ADJUSTEDERRORSEVERITY = CASE
                                        WHEN @ERRORSEVERITY &gt; 18 THEN 18
                                        ELSE @ERRORSEVERITY
                                      END
                                      
        IF @DEBUG = 0
			PRINT @SQL 
        
       RAISERROR (@ERRORMESSAGETEXT, @ADJUSTEDERRORSEVERITY, 1
          ,@ERRORNUMBER
          ,@ERRORSEVERITY
          ,@ERRORSTATE
          ,@ERRORPROCEDURE
          ,@ERRORLINE
          ,@ERRORMESSAGETEXT
    )
    END
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMApplyActionsToDb'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.PMApplyActionsToDb AS RETURN 1')
  END
GO
/******************************************************************************************************/
/* OBJECT: Stored Procedure																			  */
/* NAME: PMApplyActionsToDb																			  */
/* INPUT PARAMETERS:																				  */
/*      @RULEDESCRIPTION       - rule description													  */
/*      @CLIENT                - client event flag : 0 - server event 1 - client event				  */
/*      @DBID                  - seviewer database id. SEviewerDb primary key 						  */
/*		@DEBUG				   - 0-trace information will be not print								  */	
/*                                 1-trace information will be print  								  */
/* OUTPUT PARAMETERS:																				  */
/*      @PROGRESS			   - rows affected														  */
/* DESCRIPTION:																						  */
/* Update records corresponding rule.															      */
/* It is need external temporary tables #QUERYTEXT and #RESULTTABLE for execute.					  */
/* #QUERYTEXT table is used for cache sql query (decrease execution count of xml operations).		  */
/* #RESULT table contains event id of records of event table that will be updated					  */
/******************************************************************************************************/
alter PROCEDURE [APM].[PMApplyActionsToDb]
   @RULEDESCRIPTION nvarchar(max) 
  ,@CLIENT bit  
  ,@DBID int
  ,@DEBUG bit = 0
  ,@PROGRESS int OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE 
         @ERRORIND        BIT
        ,@ERRORMESSAGE    NVARCHAR(4000)
        ,@ERRORNUMBER     INT
        ,@ERRORSEVERITY   INT
        ,@ERRORSTATE      INT
        ,@ERRORLINE       INT
        ,@ERRORPROCEDURE  SYSNAME
        ,@ERRORMESSAGETEXT NVARCHAR(4000)
        
    SET @ERRORIND = 0
    BEGIN TRY
    
     DECLARE
       @SQL nvarchar(max) -- update sql 
    
     -- check cache
     IF NOT EXISTS(SELECT * FROM #QUERYTEXT WHERE UPDATESQL = 1)
     BEGIN
      -- update query not found
      -- create update query
    
      DECLARE
        @ACTIONPARAMS nvarchar(max) -- action parameter and database id parameter
       ,@ACTIONPARAMSVALUES nvarchar(max) -- action parameter value and database id parameter value
       ,@ACTIONPARAMETER nvarchar(50) -- action parameter
       ,@ACTIONFIELD nvarchar(50) -- action field
       ,@ACTIONENTITY nvarchar(max) -- action entity (table/view or stored proc)
       ,@ACTION_CURSOR CURSOR -- action cursor for fetching action parameters, etc
       
      DECLARE 
        @SETEXPRESSION nvarchar(max)       
       ,@PARAMS nvarchar(MAX)
       ,@PARAMSVALUES nvarchar(max)    
                            
      -- get action cursor corresponding rule                             
      EXEC APM.PMActionQuery @RULEDESCRIPTION, @CLIENT, @DBID, 0, @ACTION_CURSOR OUTPUT
      
      -- initialize action parameters
      SELECT @SETEXPRESSION = N'', @PARAMS = N'', @PARAMSVALUES = N''
      
      -- fetch action parameters
      FETCH NEXT FROM @ACTION_CURSOR 
        INTO @ACTIONPARAMETER, @ACTIONFIELD, @ACTIONPARAMS, @ACTIONPARAMSVALUES, @ACTIONENTITY
      
      WHILE @@FETCH_STATUS = 0
      BEGIN
        SELECT 
         
         --create 'set' clause for update sql ([action field] = [action parameter])                                  
          @SETEXPRESSION = @SETEXPRESSION + REPLACE(REPLACE(REPLACE(CONVERT(nvarchar(max),N'{0}e.{1}={2}'), 
                                          N'{0}',CASE WHEN LEN(@SETEXPRESSION) &gt; 0 THEN N',' ELSE N'' END), 
                                          N'{1}',@ACTIONFIELD),                                   
                                          N'{2}',@ACTIONPARAMETER)                                  
                
         --create parameters for update sql                                 
         ,@PARAMS = @PARAMS + 
                    REPLACE(REPLACE(CONVERT(nvarchar(max),N'{0}{1}'),
                        N'{0}',CASE WHEN LEN(@PARAMS) &gt; 0 THEN N',' ELSE N'' END), 
                        N'{1}', @ACTIONPARAMS)              
         --create parameter values for update sql                                 
         ,@PARAMSVALUES = @PARAMSVALUES + REPLACE(REPLACE(CONVERT(nvarchar(max),N'{0}{1}'), 
                                          N'{0}',CASE WHEN LEN(@PARAMSVALUES) &gt; 0 THEN N',' ELSE N'' END), 
                                          N'{1}',@ACTIONPARAMSVALUES)                                     
          --fetch next action parameters. Now should be empty because use only one action.     
          FETCH NEXT FROM @ACTION_CURSOR 
            INTO @ACTIONPARAMETER, @ACTIONFIELD, @ACTIONPARAMS, @ACTIONPARAMSVALUES, @ACTIONENTITY
      END
      CLOSE @ACTION_CURSOR
      DEALLOCATE @ACTION_CURSOR
          
      DECLARE
        @COMMAND nvarchar(max) -- update command 
       ,@ROWSAFFECTED int -- rows affected 
     
      -- create update command using external temporary table
      SELECT @COMMAND = 
         REPLACE(REPLACE(CONVERT(nvarchar(max),
             N'UPDATE  e  
                    SET {0} 
                    OUTPUT INSERTED.EventId, INSERTED.pmstatus INTO #STATUSTABLE
                FROM APM.{1} e   
                JOIN #RESULTTABLE r ON r.EVENTID = e.EVENTID
              SET @ROWSAFFECTED = @@ROWCOUNT        
             '), 
             N'{0}', @SETEXPRESSION),
             N'{1}', @ACTIONENTITY) 
      -- add sp_execute call for execution update command       
      SELECT @SQL = REPLACE(REPLACE(REPLACE(CONVERT(nvarchar(max),N'exec sp_executesql N''{0}'', N''{1}'', {2}'),
                    N'{0}',@COMMAND),
                    N'{1}',@PARAMS + N',@ROWSAFFECTED int OUTPUT'),
                    N'{2}',@PARAMSVALUES + N',@ROWSAFFECTED=@ROWSAFFECTED OUTPUT')
                    
      IF @DEBUG = 1                  
        PRINT @SQL
        
      -- insert sql command into cache
      INSERT #QUERYTEXT(SQLTEXT, UPDATESQL, PMSTATUS) SELECT @SQL, 1, @ACTIONPARAMSVALUES                         
    END  
    
    DECLARE 
	  @PMSTATUS nvarchar(MAX)
    
    -- get query from cache
    SELECT TOP (1) @SQL = SQLTEXT, @PMSTATUS = PMSTATUS FROM #QUERYTEXT WHERE UPDATESQL = 1 
    
    CREATE TABLE #STATUSTABLE (EVENTID int, PMSTATUS tinyint)
    
    -- execute update events corresponding rule      
    EXEC sp_executesql @SQL,N'@ROWSAFFECTED int OUTPUT',@ROWSAFFECTED = @ROWSAFFECTED OUTPUT        
    
    IF @DEBUG = 1                
        PRINT N'Rows affected: ' + CAST(@ROWSAFFECTED AS nvarchar(10))
        
    IF @ROWSAFFECTED &gt; 0 
    BEGIN
      --create event trace
       EXEC APM.PMCREATEEVENTTRACES @CLIENT = @CLIENT, @DATA = @RULEDESCRIPTION
    END    
    --save rows affected    
    SELECT @PROGRESS = @ROWSAFFECTED
    END TRY
    BEGIN CATCH
        IF (@@TRANCOUNT &gt; 0)
            ROLLBACK TRAN
        SELECT 
            @ERRORNUMBER = ERROR_NUMBER()
            ,@ERRORSEVERITY = ERROR_SEVERITY()
            ,@ERRORSTATE = ERROR_STATE()
            ,@ERRORLINE = ERROR_LINE()
            ,@ERRORPROCEDURE = ISNULL(ERROR_PROCEDURE(), '-')
            ,@ERRORMESSAGETEXT = ERROR_MESSAGE()
        
        SET @ERRORIND = 1
    END CATCH   
    IF (@ERRORIND = 1)
    BEGIN                 
       IF CURSOR_STATUS('variable', '@ACTION_CURSOR') IN (0,1)          
          CLOSE @ACTION_CURSOR
       IF CURSOR_STATUS('variable', '@ACTION_CURSOR') = -1
          DEALLOCATE @ACTION_CURSOR     
       DECLARE 
            @ADJUSTEDERRORSEVERITY   INT
       SET @ADJUSTEDERRORSEVERITY = CASE
                                        WHEN @ERRORSEVERITY &gt; 18 THEN 18
                                        ELSE @ERRORSEVERITY
                                      END
        
       IF @DEBUG = 0
			PRINT @SQL 
        
       RAISERROR (@ERRORMESSAGETEXT, @ADJUSTEDERRORSEVERITY, 1
          ,@ERRORNUMBER
          ,@ERRORSEVERITY
          ,@ERRORSTATE
          ,@ERRORPROCEDURE
          ,@ERRORLINE
          ,@ERRORMESSAGETEXT
    )
    END
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMApplyToDbForEventType'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.PMApplyToDbForEventType AS RETURN 1')
  END
GO
/******************************************************************************************************/
/* OBJECT: Stored Procedure																			  */
/* NAME: PMApplyToDbForEventType																	  */
/* INPUT PARAMETERS:																				  */
/*      @CALCULATETOTAL        - calculate total flag (1- it is need to calculate count of records	  */												      
/*														0- it is need to fetch records)				  */												      
/*      @CLIENT                - client event flag : 0 - server event 1 - client event				  */
/*      @DBID                  - seviewer database id. SEviewerDb primary key 						  */
/*      @RULEDESCRIPTION       - rule description													  */
/*		@ROWSPERITERATION      - number of records that is need to fetch                              */
/*		@ROWSPERREQUEST        - number of records that is need to process for one call of stored	  */
/*	                           - procedure															  */
/*		@DEBUG				   - 0-trace information will be not print								  */	
/*                               1-trace information will be print  								  */
/* OUTPUT PARAMETERS:																				  */
/*	    @ROWSAFFECTED          - rows affected if calculate total flag equal zero					  */
/*		@TOTAL                 - calculate row count if calculate total flag equal one				  */
/* DESCRIPTION:																						  */
/* Calculate total records or update records that will be apply by rule.							  */
/******************************************************************************************************/
alter PROCEDURE [APM].[PMApplyToDbForEventType]
   @CALCULATETOTAL bit  
  ,@CLIENT bit
  ,@DBID int
  ,@RULEDESCRIPTION nvarchar(MAX)
  ,@ROWSPERITERATION int
  ,@ROWSPERREQUEST int
  ,@DEBUG  bit
  ,@ROWSAFFECTED int OUTPUT
  ,@TOTAL int OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE 
         @ERRORIND        BIT
        ,@ERRORMESSAGE    NVARCHAR(4000)
        ,@ERRORNUMBER     INT
        ,@ERRORSEVERITY   INT
        ,@ERRORSTATE      INT
        ,@ERRORLINE       INT
        ,@ERRORPROCEDURE  SYSNAME
        ,@ERRORMESSAGETEXT NVARCHAR(4000)               
              
    SET @ERRORIND = 0
    BEGIN TRY
    
     -- Initialize output parameters
     SELECT @TOTAL = 0, @ROWSAFFECTED = 0 
    
     -- It is need external temporary tables for execute.
     --It is need for saving results
     CREATE TABLE #RESULTTABLE  (EVENTID int)
     --It is need for cache sql query
     CREATE TABLE #QUERYTEXT (SQLTEXT nvarchar(max), UPDATESQL bit, PMSTATUS nvarchar(MAX))
                   
     IF @CALCULATETOTAL = 1 
     BEGIN
       --Calculate total
       EXEC APM.PMQueryForRule 
                @RULEDESCRIPTION = @RULEDESCRIPTION 
               ,@CLIENT = @CLIENT
               ,@DBID = @DBID
               ,@CALCULATETOTAL = @CALCULATETOTAL 
               ,@ROWSPERITERATION = @ROWSPERITERATION 
               ,@DEBUG = @DEBUG
       --EventId contains result  
       SELECT @TOTAL = EVENTID FROM #RESULTTABLE  
     END    
     IF @CALCULATETOTAL = 0
     BEGIN
       --Update records
       DECLARE @CURRENTAFFECTED int
       --Iteration by "rows per iteration"
       WHILE @ROWSAFFECTED &lt; @ROWSPERREQUEST
       BEGIN
           --Fill #RESULT table 
           EXEC APM.PMQueryForRule 
                    @RULEDESCRIPTION = @RULEDESCRIPTION 
                   ,@CLIENT = @CLIENT
                   ,@DBID = @DBID
                   ,@CALCULATETOTAL = @CALCULATETOTAL 
                   ,@ROWSPERITERATION = @ROWSPERITERATION 
                   ,@DEBUG = @DEBUG
           -- #RESULT table contains set of eventId referencing to the event records that will be updated 
           EXEC APM.PMApplyActionsToDb 
                @RULEDESCRIPTION = @RULEDESCRIPTION
               ,@CLIENT = @CLIENT
               ,@DBID = @DBID
               ,@DEBUG = @DEBUG
               ,@PROGRESS = @CURRENTAFFECTED OUTPUT
           
           -- update rows affected counter    
           SELECT @ROWSAFFECTED = @ROWSAFFECTED + @CURRENTAFFECTED  
           
           --get out if current rows affected less rows per iteration because rows per iteration records should be updated
           IF @CURRENTAFFECTED &lt; @ROWSPERITERATION
             BREAK  
           -- truncate temporary table for next iteration              
           TRUNCATE TABLE #RESULTTABLE    
       END     
     END    
    END TRY
    BEGIN CATCH
        IF (@@TRANCOUNT &gt; 0)
            ROLLBACK TRAN
        SELECT 
            @ERRORNUMBER = ERROR_NUMBER()
            ,@ERRORSEVERITY = ERROR_SEVERITY()
            ,@ERRORSTATE = ERROR_STATE()
            ,@ERRORLINE = ERROR_LINE()
            ,@ERRORPROCEDURE = ISNULL(ERROR_PROCEDURE(), '-')
            ,@ERRORMESSAGETEXT = ERROR_MESSAGE()
        
        SET @ERRORIND = 1
    END CATCH   
    IF (@ERRORIND = 1)
    BEGIN            
       DECLARE 
            @ADJUSTEDERRORSEVERITY   INT
       SET @ADJUSTEDERRORSEVERITY = CASE
                                        WHEN @ERRORSEVERITY &gt; 18 THEN 18
                                        ELSE @ERRORSEVERITY
                                      END
        
        
       RAISERROR (@ERRORMESSAGETEXT, @ADJUSTEDERRORSEVERITY, 1
          ,@ERRORNUMBER
          ,@ERRORSEVERITY
          ,@ERRORSTATE
          ,@ERRORPROCEDURE
          ,@ERRORLINE
          ,@ERRORMESSAGETEXT
    )
    END
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMApplyToDb'), 'IsProcedure') IS NULL)
  BEGIN
    EXECUTE ('CREATE PROCEDURE APM.PMApplyToDb AS RETURN 1')
  END
GO
/******************************************************************************************************/
/* OBJECT: Stored Procedure																			  */
/* NAME: PMApplyToDb																				  */
/* INPUT PARAMETERS:																				  */
/*      @CALCULATETOTAL        - calculate total flag (1- it is need to calculate count of records	  */												      
/*														0- it is need to fetch records)				  */												      
/*      @RULEDESCRIPTION       - rule description													  */
/*		@ROWSPERITERATION      - number of records that is need to fetch                              */
/*		@ROWSPERREQUEST        - number of records that is need to process for one call of stored	  */
/*      @TRACELEVEL            - trace level (4 - detail trace, other - reserved)					  */
/* OUTPUT PARAMETERS:																				  */
/*	    @ROWSAFFECTED          - rows affected if calculate total flag equal zero					  */
/*		@TOTAL                 - calculate row count if calculate total flag equal one				  */
/* DESCRIPTION:																						  */
/* Calculate total records or update records that will be apply by rule. It call internal stored	  */
/* procedure for server and client events.															  */
/******************************************************************************************************/
alter PROCEDURE [APM].[PMApplyToDb]
   @CALCULATETOTAL bit  
  ,@RULEDESCRIPTION nvarchar(MAX)
  ,@ROWSPERITERATION int
  ,@ROWSPERREQUEST int
  ,@TRACELEVEL  int
  ,@ROWSAFFECTED int OUTPUT
  ,@TOTAL int OUTPUT
AS
BEGIN
    SET NOCOUNT ON
    
    DECLARE 
        @DEBUG bit -- debug flag (1 - debug, 0 - without debug)
       ,@SERVERROWSAFFECTED int -- server event records affected 
       ,@SERVERTOTAL int -- server total events (when calculate flag equal one)
       ,@CLIENTROWSAFFECTED int -- client event records affected
       ,@CLIENTTOTAL int -- client total events (when calculate flag equal one)
       ,@DBID int -- seviewer database primary key (seviewerdb table)
       ,@DBGUID uniqueidentifier -- seviewer database identifier (only records from this seviewer database will be calculated or updated)
       ,@RULE xml -- untype xml contains rule description
    
    -- implicit conversion to xml   
    SET @RULE = @RULEDESCRIPTION
    
    --get seviewer database unique identifier
    SELECT @DBGUID = @RULE.value('(/rule/@dbid)[1]', 'uniqueidentifier')
    --get corresponding seviewer db primary key
    SELECT @DBID = SEVIEWERDBID from APM.SEVIEWERDB (NOLOCK)
        WHERE DATABASEID = @DBGUID
    --database id is exist?   
    IF @@ROWCOUNT = 0
    BEGIN
     --No, raise exception 
     DECLARE       
        @DATABASEGUIDSTR nvarchar(50)
      SELECT @DATABASEGUIDSTR = CAST(@DBGUID as nvarchar(50))   
      RAISERROR (N'DATABASE Id=''%s'' is not found', 16, 1, @DATABASEGUIDSTR)   
      RETURN    
    END 
    
    -- debug mode ? (trace level should be equal 4)
    SELECT @DEBUG = 
        CASE
            WHEN  @TRACELEVEL = 4 THEN 1 ELSE 0
        END
    
    -- calculate or update server events     
    EXECUTE APM.PMApplyToDbForEventType @CALCULATETOTAL = @CALCULATETOTAL, -- bit
        @CLIENT = 0, -- bit
        @DBID = @DBID, -- int
        @RULEDESCRIPTION = @RULEDESCRIPTION, -- nvarchar(max)
        @ROWSPERITERATION = @ROWSPERITERATION, -- int
        @ROWSPERREQUEST = @ROWSPERREQUEST, -- int
        @DEBUG = @DEBUG, -- bit
        @ROWSAFFECTED = @SERVERROWSAFFECTED OUTPUT, -- rows affected
        @TOTAL = @SERVERTOTAL OUTPUT --total count (if calculate total flag equal 1)
       
    -- calculate or update client events        
    EXECUTE APM.PMApplyToDbForEventType @CALCULATETOTAL = @CALCULATETOTAL, -- bit
        @CLIENT = 1, -- bit
        @DBID = @DBID, -- int
        @RULEDESCRIPTION = @RULEDESCRIPTION, -- nvarchar(max)
        @ROWSPERITERATION = @ROWSPERITERATION, -- int
        @ROWSPERREQUEST = @ROWSPERREQUEST, -- int
        @DEBUG = @DEBUG, -- bit
        @ROWSAFFECTED = @CLIENTROWSAFFECTED OUTPUT, -- rows affected
        @TOTAL = @CLIENTTOTAL OUTPUT --total count (if calculate total flag equal 1)
    -- update counters
    SELECT 
        @TOTAL = COALESCE(@CLIENTTOTAL,0) + COALESCE(@SERVERTOTAL,0)       
       ,@ROWSAFFECTED = COALESCE(@CLIENTROWSAFFECTED,0) + COALESCE(@SERVERROWSAFFECTED,0)       
END
GO
</Install><Uninstall>IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_EVENTDET_REFERENCE_EVENT')
	ALTER TABLE APM.EVENTDETAIL DROP CONSTRAINT FK_EVENTDET_REFERENCE_EVENT 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_CSEVENTDET_REFERENCE_CSEVENT')
	ALTER TABLE APM.CSEVENTDETAIL DROP CONSTRAINT FK_CSEVENTDET_REFERENCE_CSEVENT 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_APPLICAT_FK_APPLIC_APPLICAT')
	ALTER TABLE APM.APPLICATIONSOURCEMACHINE DROP CONSTRAINT FK_APPLICAT_FK_APPLIC_APPLICAT 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_APPLICAT_FK_MACHIN_MACHINE')
	ALTER TABLE APM.APPLICATIONSOURCEMACHINE DROP CONSTRAINT FK_APPLICAT_FK_MACHIN_MACHINE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_APPLICAT_FK_SOURCE_SOURCE')
	ALTER TABLE APM.APPLICATIONSOURCEMACHINE DROP CONSTRAINT FK_APPLICAT_FK_SOURCE_SOURCE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_CSAJAX_REFERENCE_CSEVENT')
	ALTER TABLE APM.CSAJAX DROP CONSTRAINT FK_CSAJAX_REFERENCE_CSEVENT 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_CSASYNCA_REFERENCE_CSEVENT')
	ALTER TABLE APM.CSASYNCAJAX DROP CONSTRAINT FK_CSASYNCA_REFERENCE_CSEVENT 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_CSEVENT_REFERENCE_MACHINE')
	ALTER TABLE APM.CSEVENT DROP CONSTRAINT FK_CSEVENT_REFERENCE_MACHINE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_CSEVENT_REFERENCE_SOURCE')
	ALTER TABLE APM.CSEVENT DROP CONSTRAINT FK_CSEVENT_REFERENCE_SOURCE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_CSEVENT_REFERENCE_CSEVENTG')
	ALTER TABLE APM.CSEVENT DROP CONSTRAINT FK_CSEVENT_REFERENCE_CSEVENTG 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_CSEVENT_REFERENCE_IP')
	ALTER TABLE APM.CSEVENT DROP CONSTRAINT FK_CSEVENT_REFERENCE_IP 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_CSEVENT_USERS')
	ALTER TABLE APM.CSEVENT DROP CONSTRAINT FK_CSEVENT_USERS 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_CSEXEVEN_REFERENCE_CSEVENT')
	ALTER TABLE APM.CSEXEVENT DROP CONSTRAINT FK_CSEXEVEN_REFERENCE_CSEVENT 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_CSHEAVIE_REFERENCE_CSEVENT')
	ALTER TABLE APM.CSHEAVIESTRESOURCE DROP CONSTRAINT FK_CSHEAVIE_REFERENCE_CSEVENT 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_CSJSCRIP_REFERENCE_CSEVENT')
	ALTER TABLE APM.CSJSCRIPTEVENT DROP CONSTRAINT FK_CSJSCRIP_REFERENCE_CSEVENT 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_CSPAGEEV_REFERENCE_CSEVENT')
	ALTER TABLE APM.CSPAGEEVENT DROP CONSTRAINT FK_CSPAGEEV_REFERENCE_CSEVENT 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_CSPERIPH_REFERENCE_CSEVENT')
	ALTER TABLE APM.CSPERIPHERAL DROP CONSTRAINT FK_CSPERIPH_REFERENCE_CSEVENT 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_CSPERIPH_REFERENCE_CSPERIPH')
	ALTER TABLE APM.CSPERIPHERALDETAIL DROP CONSTRAINT FK_CSPERIPH_REFERENCE_CSPERIPH 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_DATASET_AGGREGATION')
	ALTER TABLE APM.DATASET DROP CONSTRAINT FK_DATASET_AGGREGATION 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_DATASET_HISTORY')
	ALTER TABLE APM.DATASETAGGREGATIONHISTORY DROP CONSTRAINT FK_DATASET_HISTORY 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_EVENT_FK_EVENTG_EVENTGRO')
	ALTER TABLE APM.EVENT DROP CONSTRAINT FK_EVENT_FK_EVENTG_EVENTGRO 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_EVENT_FK_EVENT__IP')
	ALTER TABLE APM.EVENT DROP CONSTRAINT FK_EVENT_FK_EVENT__IP 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_EVENT_FK_EVENT__SEVIEWER')
	ALTER TABLE APM.EVENT DROP CONSTRAINT FK_EVENT_FK_EVENT__SEVIEWER 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_EVENT_FK_SOURCE_SOURCE')
	ALTER TABLE APM.EVENT DROP CONSTRAINT FK_EVENT_FK_SOURCE_SOURCE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_EVENT_REFERENCE_MACHINE')
	ALTER TABLE APM.EVENT DROP CONSTRAINT FK_EVENT_REFERENCE_MACHINE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_EVENT_REFERENCE_RESOURCE')
	ALTER TABLE APM.EVENT DROP CONSTRAINT FK_EVENT_REFERENCE_RESOURCE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_EVENT_USERS')
	ALTER TABLE APM.EVENT DROP CONSTRAINT FK_EVENT_USERS 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_EXCEPTIO_FK_EXCEPT_EVENT')
	ALTER TABLE APM.EXCEPTIONNODE DROP CONSTRAINT FK_EXCEPTIO_FK_EXCEPT_EVENT 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_EXCEPTIO_REFERENCE_RESOURCE')
	ALTER TABLE APM.EXCEPTIONNODE DROP CONSTRAINT FK_EXCEPTIO_REFERENCE_RESOURCE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_MEMBERAP_FK_APPLIC_APPLICAT')
	ALTER TABLE APM.MEMBERAPPLICATION DROP CONSTRAINT FK_MEMBERAP_FK_APPLIC_APPLICAT 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_MEMBERAP_FK_USER_MEMBER')
	ALTER TABLE APM.MEMBERAPPLICATION DROP CONSTRAINT FK_MEMBERAP_FK_USER_MEMBER 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_PERFDAYLY_TYPE')
	ALTER TABLE APM.PERFDAILY DROP CONSTRAINT FK_PERFDAYLY_TYPE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_PERFDAYLY_MACHINE')
	ALTER TABLE APM.PERFDAILY DROP CONSTRAINT FK_PERFDAYLY_MACHINE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_PERFDAYLY_SOURCE')
	ALTER TABLE APM.PERFDAILY DROP CONSTRAINT FK_PERFDAYLY_SOURCE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_PERFDAIL_REFERENCE_PCPROCES')
	ALTER TABLE APM.PERFDAILY DROP CONSTRAINT FK_PERFDAIL_REFERENCE_PCPROCES 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_PERFHOURLY_PCTYPE')
	ALTER TABLE APM.PERFHOURLY DROP CONSTRAINT FK_PERFHOURLY_PCTYPE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_PERFHOURLY_MACHINE')
	ALTER TABLE APM.PERFHOURLY DROP CONSTRAINT FK_PERFHOURLY_MACHINE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_PERFHOURLY_SOURCE')
	ALTER TABLE APM.PERFHOURLY DROP CONSTRAINT FK_PERFHOURLY_SOURCE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_PERFHOUR_REFERENCE_PCPROCES')
	ALTER TABLE APM.PERFHOURLY DROP CONSTRAINT FK_PERFHOUR_REFERENCE_PCPROCES 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_PERFORMANCENODE_EVENT')
	ALTER TABLE APM.PERFORMANCENODE DROP CONSTRAINT FK_PERFORMANCENODE_EVENT 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_PERFORMA_REFERENCE_RESOURCEGROUP')
	ALTER TABLE APM.PERFORMANCENODE DROP CONSTRAINT FK_PERFORMA_REFERENCE_RESOURCEGROUP 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_PERFORMA_REFERENCE_RESOURCE')
	ALTER TABLE APM.PERFORMANCENODE DROP CONSTRAINT FK_PERFORMA_REFERENCE_RESOURCE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_RESOURCE_REFERENCE_RESOURCE')
	ALTER TABLE APM.RESOURCE DROP CONSTRAINT FK_RESOURCE_REFERENCE_RESOURCE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_RESOURCE_REFERENCE_SOURCE')
	ALTER TABLE APM.RESOURCE DROP CONSTRAINT FK_RESOURCE_REFERENCE_SOURCE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_RESOURCE_REFERENCE_RESOURCENODE')
	ALTER TABLE APM.RESOURCEGROUPNODE DROP CONSTRAINT FK_RESOURCE_REFERENCE_RESOURCENODE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_RESOURCE_REFERENCE_EVENT')
	ALTER TABLE APM.RESOURCEGROUPNODE DROP CONSTRAINT FK_RESOURCE_REFERENCE_EVENT 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_TASKS_TaskMode')
	ALTER TABLE APM.TASKS DROP CONSTRAINT FK_TASKS_TaskMode 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_TASKS_REFERENCE_SEVIEWER')
	ALTER TABLE APM.TASKS DROP CONSTRAINT FK_TASKS_REFERENCE_SEVIEWER 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_PMSERVEREVENTTRACE_PMTRACE')
	ALTER TABLE APM.PMSERVEREVENTTRACE DROP CONSTRAINT FK_PMSERVEREVENTTRACE_PMTRACE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_PMSERVEREVENTTRACE_PMEVENT')
	ALTER TABLE APM.PMSERVEREVENTTRACE DROP CONSTRAINT FK_PMSERVEREVENTTRACE_PMEVENT 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_PMCLIENTEVENTTRACE_PMTRACE')
	ALTER TABLE APM.PMCLIENTEVENTTRACE DROP CONSTRAINT FK_PMCLIENTEVENTTRACE_PMTRACE 
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE
CONSTRAINT_SCHEMA = 'APM' AND CONSTRAINT_NAME = 'FK_PMCLIENTEVENTTRACE_PMEVENT')
	ALTER TABLE APM.PMCLIENTEVENTTRACE DROP CONSTRAINT FK_PMCLIENTEVENTTRACE_PMEVENT 
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMTRACE'), 'IsTable') IS NOT NULL) BEGIN
    DROP TABLE APM.PMTRACE
END
GO          
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMSERVEREVENTTRACE'), 'IsTable') IS NOT NULL) BEGIN
    DROP TABLE APM.PMSERVEREVENTTRACE
END
GO 
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMCLIENTEVENTTRACE'), 'IsTable') IS NOT NULL) BEGIN
    DROP TABLE APM.PMCLIENTEVENTTRACE
END
GO 
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMENTITYMAPPING'), 'IsTable') IS NOT NULL) BEGIN
    DROP TABLE APM.PMENTITYMAPPING
END
GO 
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMEVENTSTATUS'), 'IsTable') IS NOT NULL) BEGIN
    DROP TABLE APM.PMEVENTSTATUS
END
GO   
IF (OBJECTPROPERTY(OBJECT_ID('APM.HourlyTable'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.HourlyTable
END
GO 
IF (OBJECTPROPERTY(OBJECT_ID('APM.AGGREGATIONTYPE'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.AGGREGATIONTYPE
END
GO 
IF (OBJECTPROPERTY(OBJECT_ID('APM.APPLICATION'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.APPLICATION
END
GO 
IF (OBJECTPROPERTY(OBJECT_ID('APM.APPLICATIONSOURCEMACHINE'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.APPLICATIONSOURCEMACHINE
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ASPECT'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.ASPECT
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CONFIG'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.CONFIG
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSAJAX'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.CSAJAX
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSASYNCAJAX'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.CSASYNCAJAX
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSEVENT'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.CSEVENT
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSEVENTGROUP'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.CSEVENTGROUP
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSEXEVENT'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.CSEXEVENT
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSHEAVIESTRESOURCE'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.CSHEAVIESTRESOURCE
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSJSCRIPTEVENT'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.CSJSCRIPTEVENT
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSPAGEEVENT'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.CSPAGEEVENT
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSPERIPHERAL'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.CSPERIPHERAL
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSPERIPHERALDETAIL'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.CSPERIPHERALDETAIL
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.DATASET'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.DATASET
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.DATASETAGGREGATIONHISTORY'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.DATASETAGGREGATIONHISTORY
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.EVENT'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.EVENT
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.EVENTGROUP'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.EVENTGROUP
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.EXCEPTIONNODE'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.EXCEPTIONNODE
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.IP'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.IP
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.MACHINE'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.MACHINE
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.MEMBER'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.MEMBER
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.MEMBERAPPLICATION'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.MEMBERAPPLICATION
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.MESSAGES'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.MESSAGES
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.OPERATION'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.OPERATION
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PCDESCRIPTION'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.PCDESCRIPTION
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PCPROCESS'), 'IsTable') IS NOT NULL)
  BEGIN
    drop table APM.PCPROCESS
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PCTYPE'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.PCTYPE
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PERFDAILY'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.PERFDAILY
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PERFHOURLY'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.PERFHOURLY
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PERFORMANCENODE'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.PERFORMANCENODE
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.RELATIVEDATES'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.RELATIVEDATES
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.RESOURCE'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.RESOURCE
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.RESOURCEGROUP'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.RESOURCEGROUP
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.RESOURCEGROUPNODE'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.RESOURCEGROUPNODE
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.SEVIEWERDB'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.SEVIEWERDB
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.SOURCE'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.SOURCE
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.TASKS'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.TASKS
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.TIMEZONE'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.TIMEZONE
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.USERS'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.USERS
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.EVENTDETAIL'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.EVENTDETAIL
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSEVENTDETAIL'), 'IsTable') IS NOT NULL)
BEGIN
  DROP TABLE APM.CSEVENTDETAIL
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_APPLICATIONSOURCEMACHINE'), 'IsView') IS Not NULL) 
BEGIN
    EXECUTE('DROP VIEW APM.V_APPLICATIONSOURCEMACHINE')
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_EVENTWINDOW'), 'IsView') IS Not NULL) 
BEGIN
    EXECUTE('DROP VIEW APM.V_EVENTWINDOW')
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.FN_ADMINUSER'), 'IsScalarFunction') IS NOT NULL)
  BEGIN
    EXECUTE('DROP FUNCTION APM.FN_ADMINUSER')    
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.FN_ISSECURE'), 'IsScalarFunction') IS NOT NULL)
  BEGIN
    EXECUTE('DROP FUNCTION APM.FN_ISSECURE')    
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.DATASETAGGREGATE'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.DATASETAGGREGATE')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PCOUNTERAGGREGATE'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PCOUNTERAGGREGATE')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.RUNDAILYAGGREGATEOPERATION'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.RUNDAILYAGGREGATEOPERATION')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.HourlyTableInit'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.HourlyTableInit')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.DISABLE_FOREIGN_KEYS'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.DISABLE_FOREIGN_KEYS')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.SHOWMESSAGE'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.SHOWMESSAGE')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.FILLGROUPS'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.FILLGROUPS')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.FillResourceGroupNodes'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.FillResourceGroupNodes')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.FILLRESOURCES'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.FILLRESOURCES')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.UpdateEventsByInternalResource'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.UpdateEventsByInternalResource')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.INSERTINTERNALRESOURCE'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.INSERTINTERNALRESOURCE')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.FILLINTERNALRESOURCES'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.FILLINTERNALRESOURCES')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GetResource'), 'IsScalarFunction') IS NOT NULL)
  BEGIN
    EXECUTE('DROP FUNCTION APM.GetResource')    
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GetResourceType'), 'IsScalarFunction') IS NOT NULL)
  BEGIN
    EXECUTE('DROP FUNCTION APM.GetResourceType')    
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ComputerResourceUtilization'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ComputerResourceUtilization')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.fn_nums'), 'IsTableFunction') IS NOT NULL)
  BEGIN
    EXECUTE('DROP FUNCTION APM.fn_nums')    
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.RemoveProcessIdFromName'), 'IsScalarFunction') IS NOT NULL)
  BEGIN
    EXECUTE('DROP FUNCTION APM.RemoveProcessIdFromName')    
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ComputerResourceUtilizationBySource'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ComputerResourceUtilizationBySource')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GetQueryDateCount'), 'IsScalarFunction') IS NOT NULL)
  BEGIN
    EXECUTE('DROP FUNCTION APM.GetQueryDateCount')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GetDatePart'), 'IsScalarFunction') IS NOT NULL)
  BEGIN
    EXECUTE('DROP FUNCTION APM.GetDatePart')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.DATES'), 'IsTable') IS NOT NULL)
  BEGIN
    DROP TABLE APM.DATES
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationResourceUtilization'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationResourceUtilization')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GetTop10MostFrequentFailureReport'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.GetTop10MostFrequentFailureReport')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GetTop10MostFrequentPerformanceReport'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.GetTop10MostFrequentPerformanceReport')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GetTOP10NewExceptionProblems'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.GetTOP10NewExceptionProblems')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GetTOP10NewPerformanceProblems'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.GetTOP10NewPerformanceProblems')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GetAbsDateByRelative'), 'IsScalarFunction') IS NOT NULL)
  BEGIN
    EXECUTE('DROP FUNCTION APM.GetAbsDateByRelative')    
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GetMultiParameters'), 'IsTableFunction') IS NOT NULL)
  BEGIN
    DROP FUNCTION APM.GetMultiParameters    
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ResourceUtilizationTrend'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ResourceUtilizationTrend')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.Source_sync'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.Source_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.Machine_sync'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.Machine_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PCType_sync'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PCType_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.Aspect_sync'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.Aspect_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.EventGroup_sync'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.EventGroup_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PCProcess_sync'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PCProcess_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PCDescription_sync'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PCDescription_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMCREATEEVENTTRACES'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PMCREATEEVENTTRACES')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ServerEvent_sync'), 'IsProcedure') IS NOT NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ServerEvent_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PerformanceNode_sync'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PerformanceNode_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ExceptionNode_sync'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ExceptionNode_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PerfHourly_sync'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PerfHourly_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CheckDatabaseId'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.CheckDatabaseId')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CheckAndCreateDatabaseId'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.CheckAndCreateDatabaseId')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.Config_sync'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.Config_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PageEvent_sync'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PageEvent_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.AjaxCall_sync'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.AjaxCall_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.JScriptEvent_sync'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.JScriptEvent_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ClientEvent_sync'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ClientEvent_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.Event_sync'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.Event_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CheckConfiguration'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.CheckConfiguration')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CreateOrUpdateTaskStatus'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.CreateOrUpdateTaskStatus')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.SelectAbsDateORRelative'), 'IsScalarFunction') IS NOT NULL)
  BEGIN
    EXECUTE('DROP FUNCTION APM.SelectAbsDateORRelative')    
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.EventDetail_sync'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.EventDetail_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GetDependentComputersList'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.GetDependentComputersList')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusSummaryStatistics'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationStatusSummaryStatistics')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusDrillthrough'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationStatusDrillthrough')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.Application_sync'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.Application_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationSourceMachine_sync'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationSourceMachine_sync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.SummaryQualityAnalysis'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.SummaryQualityAnalysis')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.SummarySizeAnalysisReport'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.SummarySizeAnalysisReport')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.SummarySizeAnalysisTopAJAXSubReport'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.SummarySizeAnalysisTopAJAXSubReport')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.SummarySizeAnalysisTopPagesSubReport'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.SummarySizeAnalysisTopPagesSubReport')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.TopUserPerformanceIssues'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.TopUserPerformanceIssues')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.TopUserExceptionIssues'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.TopUserExceptionIssues')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.SummaryPerformanceAnalysisReport'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.SummaryPerformanceAnalysisReport')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.SummaryPerformanceAnalysisReportMaxScale'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.SummaryPerformanceAnalysisReportMaxScale')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.LoadTimeAnalysisBasedOnSubNet'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.LoadTimeAnalysisBasedOnSubNet')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.LoadTimeAnalysisBasedOnSubNetMaxScale'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.LoadTimeAnalysisBasedOnSubNetMaxScale')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.LoadTimeAnalysisBasedOnSubNetTopJSAndAJAXCalls'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.LoadTimeAnalysisBasedOnSubNetTopJSAndAJAXCalls')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.LoadTimeAnalysisBasedOnSubNetTopPages'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.LoadTimeAnalysisBasedOnSubNetTopPages')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ClientLatencyDistributionBySources'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ClientLatencyDistributionBySources')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ClientLatencyDistributionSubReport'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ClientLatencyDistributionSubReport')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationAnalysisJScriptWithAjaxCalls'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationAnalysisJScriptWithAjaxCalls')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationAnalysisTopPages'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationAnalysisTopPages')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.SummaryPerformanceTopPages'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.SummaryPerformanceTopPages')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationAnalysisExceptionEvents'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationAnalysisExceptionEvents')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationAnalysisOverallStatistics'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationAnalysisOverallStatistics')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.SummaryPerformanceAnalysisReportTopJS'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.SummaryPerformanceAnalysisReportTopJS')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationActivityBreakdownByMonthDate'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationActivityBreakdownByMonthDate')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationActivityBreakdown'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationActivityBreakdown')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.SummaryUserAnalysisCSM'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.SummaryUserAnalysisCSM')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PCType_ConfigSync'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PCType_ConfigSync')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.DeleteEventsOrEventGroups'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.DeleteEventsOrEventGroups')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ExtractEventGroomingRows'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ExtractEventGroomingRows')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GroomingWorkTables'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.GroomingWorkTables')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GetOldComputersOrSources'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.GetOldComputersOrSources')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.CalculateOldComputersOrSources'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.CalculateOldComputersOrSources')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GroomingOldComputersOrSources'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.GroomingOldComputersOrSources')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GetApplicationGroups'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.GetApplicationGroups')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.GroomingOldApplicationGroup'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.GroomingOldApplicationGroup')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusClient'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationStatusClient')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusClientFrequentCSMEvents'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationStatusClientFrequentCSMEvents')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusClientFrequentFailure'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationStatusClientFrequentFailure')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusClientFrequentPerformance'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationStatusClientFrequentPerformance')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusClientNewCSMEvents'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationStatusClientNewCSMEvents')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusClientNewFailure'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationStatusClientNewFailure')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ApplicationStatusClientNewPerformance'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.ApplicationStatusClientNewPerformance')
  END
GO
          
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_EMPTY'), 'IsView') IS NOT NULL) BEGIN
    EXECUTE('DROP VIEW APM.V_PM_EMPTY')
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_CSEVENTSTATUS'), 'IsView') IS NOT NULL) BEGIN
    EXECUTE('DROP VIEW APM.V_PM_CSEVENTSTATUS')
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_HEAVIESTNODE'), 'IsView') IS NOT NULL) BEGIN
    EXECUTE('DROP VIEW APM.V_PM_HEAVIESTNODE')
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_CSHEAVIESTNODE'), 'IsView') IS NOT NULL) BEGIN
    EXECUTE('DROP VIEW APM.V_PM_CSHEAVIESTNODE')
END
GO 
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_EVENT'), 'IsView') IS NOT NULL) BEGIN
    EXECUTE('DROP VIEW APM.V_PM_EVENT')
END
GO 
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_EVENTDETAIL'), 'IsView') IS NOT NULL) BEGIN
    EXECUTE('DROP VIEW APM.V_PM_EVENTDETAIL')
END
GO 
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_CSEVENTDETAIL'), 'IsView') IS NOT NULL) BEGIN
    EXECUTE('DROP VIEW APM.V_PM_CSEVENTDETAIL')
END
GO 
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_RESOURCE'), 'IsView') IS NOT NULL) BEGIN
    EXECUTE('DROP VIEW APM.V_PM_RESOURCE')
END
GO 
  
IF (OBJECTPROPERTY(OBJECT_ID('APM.V_PM_CSEVENT'), 'IsView') IS NOT NULL) BEGIN
    EXECUTE('DROP VIEW APM.V_PM_CSEVENT')
END
GO 
    
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMACTIONQUERY'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PMACTIONQUERY')
  END
GO
    
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMEXPRESSIONQUERY'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PMEXPRESSIONQUERY')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMIntersectExpressionQuery'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PMIntersectExpressionQuery')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMQueryForRule'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PMQueryForRule')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMApplyActionsToDb'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PMApplyActionsToDb')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMApplyToDbForEventType'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PMApplyToDbForEventType')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMApplyToDb'), 'IsProcedure') IS not NULL)
  BEGIN
    EXECUTE ('DROP PROCEDURE APM.PMApplyToDb')
  END
GO
</Uninstall><Upgrade>IF (OBJECTPROPERTY(OBJECT_ID('APM.PMTRACE'), 'IsTable') IS NULL) 
BEGIN
	CREATE TABLE APM.PMTRACE (
	   PMTRACEID             INT                  IDENTITY(1,1) NOT NULL,
	   UTCDATE               DATETIME             NOT NULL,
	   DATA					 NVARCHAR(MAX)		  NULL,
	   PMSTATUS				 tinyint	          NULL 
	   CONSTRAINT PK_PMTRACE PRIMARY KEY (PMTRACEID)
	)
END	
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
		WHERE TABLE_NAME = 'PMTRACE' AND TABLE_SCHEMA = N'apm' AND COLUMN_NAME = 'UTCDATE' AND COLUMN_DEFAULT IS NOT NULL)
BEGIN		
	ALTER TABLE APM.PMTRACE ADD CONSTRAINT DF_PMTRACE_UTCDATE DEFAULT GETUTCDATE() FOR UTCDATE;
END	
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMSERVEREVENTTRACE'), 'IsTable') IS NULL) 
BEGIN
	/* server event trace table */
	CREATE TABLE APM.PMSERVEREVENTTRACE (
	   EVENTID              BIGINT                  NOT NULL,
	   PMTRACEID            INT                  NOT NULL
	)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PMSERVEREVENTTRACE]') AND name = N'IDX_EVENTID'
)
BEGIN
	CREATE INDEX IDX_EVENTID ON APM.PMSERVEREVENTTRACE
	(
		EVENTID
	) 
	INCLUDE(PMTRACEID)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PMSERVEREVENTTRACE]') AND name = N'IX_PMSERVEREVENTTRACE_PMTRACEID'
)
BEGIN
	CREATE INDEX IX_PMSERVEREVENTTRACE_PMTRACEID ON APM.PMSERVEREVENTTRACE 
		(PMTRACEID)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'PMSERVEREVENTTRACE'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ADT_PMSERVEREVENTTRACE'), 'IsTrigger') IS NULL)
BEGIN
	exec(
		'CREATE TRIGGER APM.ADT_PMSERVEREVENTTRACE ON APM.PMSERVEREVENTTRACE	AFTER DELETE
		AS
		BEGIN
			RETURN;
		END')
END		
GO
ALTER TRIGGER APM.ADT_PMSERVEREVENTTRACE ON APM.PMSERVEREVENTTRACE	AFTER DELETE
	AS
BEGIN
	SET NOCOUNT ON
	DELETE a FROM
		APM.PMTRACE a JOIN deleted b ON a.PMTRACEID=b.PMTRACEID
		WHERE NOT EXISTS (SELECT 1 FROM APM.PMSERVEREVENTTRACE WHERE PMTRACEID=a.PMTRACEID)
END
GO		
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMCLIENTEVENTTRACE'), 'IsTable') IS NULL) 
BEGIN
	/* client event trace table */
	CREATE TABLE APM.PMCLIENTEVENTTRACE (
	   CSEVENTID            INT                  NOT NULL,
	   PMTRACEID            INT                  NOT NULL
	)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PMCLIENTEVENTTRACE]') AND name = N'IDX_EVENTID'
)
BEGIN
	CREATE INDEX IDX_EVENTID ON APM.PMCLIENTEVENTTRACE
	(CSEVENTID) 
	INCLUDE(PMTRACEID)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PMCLIENTEVENTTRACE]') AND name = N'IX_PMCLIENTEVENTTRACE_PMTRACEID'
)
BEGIN
	CREATE INDEX IX_PMCLIENTEVENTTRACE_PMTRACEID ON APM.PMCLIENTEVENTTRACE 
		(PMTRACEID)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'PMCLIENTEVENTTRACE'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.ADT_PMCLIENTEVENTTRACE'), 'IsTrigger') IS NULL)
BEGIN
	EXEC('
		CREATE TRIGGER APM.ADT_PMCLIENTEVENTTRACE ON APM.PMCLIENTEVENTTRACE
		AFTER DELETE
		AS
		BEGIN
		  RETURN;
		END')
END		
GO
ALTER TRIGGER APM.ADT_PMCLIENTEVENTTRACE ON APM.PMCLIENTEVENTTRACE
	AFTER DELETE
AS
BEGIN
  SET NOCOUNT ON
  
  DELETE a FROM
	APM.PMTRACE a JOIN deleted b ON a.PMTRACEID=b.PMTRACEID
	WHERE NOT EXISTS (SELECT 1 FROM APM.PMCLIENTEVENTTRACE WHERE PMTRACEID=a.PMTRACEID)
END
go
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMENTITYMAPPING'), 'IsTable') IS NULL) 
BEGIN
	/*==============================================================*/
	/* Table: PMENTITYMAPPING                                       */
	/*==============================================================*/
	CREATE TABLE APM.PMENTITYMAPPING (
	   PMENTITYMAPPINGID    INT                  IDENTITY,
	   ALIAS                NVARCHAR(50)         NOT NULL,
	   ENTITY               NVARCHAR(50)         NOT NULL,
	   FIELD                NVARCHAR(50)         NULL,
	   FIELDTYPE            NVARCHAR(50)         NULL,
	   ISPROCEDURE          BIT                  NOT NULL,
	   ISCLIENT             BIT                  NOT NULL,
	   CONSTRAINT PK_PMENTITYMAPPING PRIMARY KEY (PMENTITYMAPPINGID)
	)
	
	------------------ SERVER EVENT MAPING ------------------------
	INSERT APM.PMENTITYMAPPING
			( 
			  ALIAS,
			  ENTITY,
			  FIELD,
			  FIELDTYPE ,
			  ISPROCEDURE,
			  ISCLIENT
			)
	SELECT N'EVENT.EVENTCLASSTYPE',N'V_PM_EVENT',N'EVENTCLASSTYPE',N'nvarchar(50)',0,0  
	UNION ALL
	SELECT N'EVENT.SOURCE',N'V_PM_EVENT',N'SOURCE',N'nvarchar(255)',0,0 
	UNION ALL
	SELECT N'EVENT.MACHINENAME',N'V_PM_EVENT',N'MACHINENAME',N'nvarchar(255)',0,0 
	UNION ALL
	SELECT N'EVENT.ROOTNODENAME',N'V_PM_EVENT',N'ROOTNODENAME',N'nvarchar(255)',0,0 
	UNION ALL
	SELECT N'EVENT.DESCRIPTION',N'V_PM_EVENT',N'DESCRIPTION',N'nvarchar(255)',0,0 
	UNION ALL
	SELECT N'EVENT.USERNAME',N'V_PM_EVENT',N'USERNAME',N'nvarchar(255)',0,0 
	UNION ALL
	SELECT N'EVENT.EXCEPTIONCLASS',N'V_PM_EVENT',N'EXCEPTIONCLASS',N'nvarchar(255)',0,0 
	UNION ALL
	SELECT N'EVENT.EVENTDURATION',N'V_PM_EVENT',N'EVENTDURATION',N'decimal(35,0)',0,0 
	UNION ALL
	SELECT N'EVENT.EVENTGROUPID',N'V_PM_EVENT',N'SEVIEWEREGID',N'int',0,0 
	UNION ALL
	SELECT N'EVENT.HEAVYLIGHT',N'V_PM_EVENT',N'HEAVYLIGHT',N'int',0,0 
	UNION ALL
	SELECT N'EVENT.ASPECT',N'V_PM_EVENT',N'ASPECT',N'nvarchar(50)',0,0 
	UNION ALL
	SELECT N'EVENT.PMSTATUS',N'EVENT',N'PMSTATUS',N'tinyint',0,0 
	UNION ALL
	SELECT N'EVENT.HEAVIESTEXTERNALRESOURCE',N'V_PM_RESOURCE',N'RESOURCEMETHOD',N'nvarchar(255)',0,0 
	UNION ALL
	SELECT N'EVENT.COMPONENT',N'V_PM_EVENTDETAIL',N'VALUE',N'COMPONENT',0,0
	UNION ALL
	SELECT N'EVENT.EVENTID',N'EVENT',N'EVENTID',N'int',0,0 
	UNION ALL
	SELECT N'EVENT.CATEGORY',N'V_PM_EVENT',N'CATEGORY',N'nvarchar(50)',0,0 
	UNION ALL
	SELECT N'EVENT.HEAVIESTNODE',N'V_PM_HEAVIESTNODE',N'VAL',N'nvarchar(255)',0,0 
	UNION ALL
	SELECT N'EVENT.ROOTFUNCTION',N'V_PM_EVENTDETAIL',N'VALUE',N'ROOTFUNCTION',0,0
	UNION ALL
	SELECT N'EVENT.SLOWCALLDURATION',N'V_PM_HEAVIESTNODE',N'SELFDURATION',N'decimal(35,0)',0,0 
	------------------ CLIENT EVENT MAPING ------------------------
	INSERT APM.PMENTITYMAPPING
			( 
			  ALIAS,
			  ENTITY,
			  FIELD,
			  FIELDTYPE ,
			  ISPROCEDURE,
			  ISCLIENT
			)
	SELECT N'EVENT.EVENTCLASSTYPE',N'V_PM_CSEVENT',N'EVENTCLASSTYPE',N'nvarchar(50)',0,1  
	UNION ALL
	SELECT N'EVENT.SOURCE',N'V_PM_CSEVENT',N'SOURCE',N'nvarchar(255)',0,1 
	UNION ALL
	SELECT N'EVENT.MACHINENAME',N'V_PM_CSEVENT',N'MACHINENAME',N'nvarchar(255)',0,1
	UNION ALL
	SELECT N'EVENT.ROOTNODENAME',N'V_PM_CSEVENTDETAIL',N'VALUE',N'ROOTNODENAME',0,1 
	UNION ALL
	SELECT N'EVENT.DESCRIPTION',N'V_PM_CSEVENT',N'DESCRIPTION',N'nvarchar(255)',0,1 
	UNION ALL
	SELECT N'EVENT.USERNAME',N'V_PM_CSEVENT',N'USERNAME',N'nvarchar(255)',0,1 
	UNION ALL
	SELECT N'EVENT.EXCEPTIONCLASS',N'V_PM_CSEVENT',N'EXCEPTIONCLASS',N'nvarchar(255)',0,1
	UNION ALL
	SELECT N'EVENT.EVENTDURATION',N'V_PM_CSEVENT',N'EVENTDURATION',N'decimal(35,0)',0,1 
	UNION ALL
	SELECT N'EVENT.EVENTGROUPID',N'V_PM_CSEVENT',N'SEVIEWEREGID',N'int',0,1
	UNION ALL
	SELECT N'EVENT.HEAVYLIGHT',N'V_PM_CSEVENT',N'HEAVYLIGHT',N'int',0,1 
	UNION ALL
	SELECT N'EVENT.ASPECT',N'V_PM_CSEVENT',N'ASPECT',N'nvarchar(50)',0,1 
	UNION ALL
	SELECT N'EVENT.PMSTATUS',N'V_PM_CSEVENTSTATUS',N'PMSTATUS',N'tinyint',0,1 
	UNION ALL
	SELECT N'EVENT.HEAVIESTEXTERNALRESOURCE',N'V_PM_EMPTY',N'VAL',N'nvarchar(255)',0,1
	UNION ALL
	SELECT N'EVENT.COMPONENT',N'V_PM_CSEVENT',N'COMPONENT',N'nvarchar(50)',0,1
	UNION ALL
	SELECT N'EVENT.EVENTID',N'V_PM_CSEVENTSTATUS',N'EVENTID',N'int',0,1 
	UNION ALL
	SELECT N'EVENT.CATEGORY',N'V_PM_CSEVENTDETAIL',N'VALUE',N'CATEGORY',0,1
	UNION ALL
	SELECT N'EVENT.HEAVIESTNODE',N'V_PM_CSHEAVIESTNODE',N'VAL',N'nvarchar(255)',0,1 
	UNION ALL
	SELECT N'EVENT.ROOTFUNCTION',N'V_PM_CSEVENTDETAIL',N'VALUE',N'ROOTFUNCTION',0,1
	UNION ALL
	SELECT N'EVENT.SLOWCALLDURATION',N'V_PM_CSHEAVIESTNODE',N'SELFDURATION',N'decimal(35,0)',0,1 
END
GO
IF NOT EXISTS
(
	SELECT * FROM INFORMATION_SCHEMA.table_constraints WHERE TABLE_NAME = N'PMENTITYMAPPING' AND TABLE_SCHEMA = N'apm' AND CONSTRAINT_NAME=N'PMENTITYMAPPING_UNIQUE'
)        
BEGIN
	ALTER TABLE APM.PMENTITYMAPPING ADD CONSTRAINT PMENTITYMAPPING_UNIQUE 
		UNIQUE(ALIAS, ISCLIENT) 
END    
GO
/*==============================================================*/
/* Table: PMEVENTSTATUS                                       */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.PMEVENTSTATUS'), 'IsTable') IS NULL) 
BEGIN
	CREATE TABLE APM.PMEVENTSTATUS (
	   PMSTATUSID	int                  not null,
	   PMSTATUSNAME nvarchar(50)         not null,
	   ISDEFAULT	bit                  not null
	)
	
	INSERT INTO [APM].[PMEVENTSTATUS] ([PMSTATUSID], [PMSTATUSNAME], [ISDEFAULT])
		SELECT 0, N'New',		1
		UNION
		SELECT 1, N'Reviewed',	1
		UNION
		SELECT 2, N'Deleted',	0
		UNION
		SELECT 3, N'By Design', 0	
END
GO
IF NOT EXISTS (
	SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'PMEVENTSTATUS' AND TABLE_SCHEMA = N'apm' AND COLUMN_NAME = 'ISDEFAULT' AND COLUMN_DEFAULT IS NOT NULL
)
BEGIN		
	ALTER TABLE APM.PMEVENTSTATUS ADD CONSTRAINT DF_PMEVENTSTATUS_ISDEFAULT DEFAULT 0 FOR ISDEFAULT	
END	
GO
IF (OBJECTPROPERTY(OBJECT_ID('APM.HourlyTable'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.HourlyTable (value datetime)
END	
GO
/*==============================================================*/
/* Table: AGGREGATIONTYPE                                       */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.AGGREGATIONTYPE'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.AGGREGATIONTYPE (
	   AGGREGATIONTYPEID    int                  not null,
	   AGGREGATIONTYPEDEFAULTNAME nvarchar(50)         not null,
	   AGGREGATIONINTERVALDURATIONMINUTES int                  not null,
	   AGGREGATIONSTARTDELAYMINUTES int                  not null,
	   constraint PK_AGGREGATIONTYPE primary key (AGGREGATIONTYPEID)
	)
	
	INSERT INTO APM.AGGREGATIONTYPE (
		AGGREGATIONTYPEID,
		AGGREGATIONTYPEDEFAULTNAME,
		AGGREGATIONINTERVALDURATIONMINUTES,
		AGGREGATIONSTARTDELAYMINUTES
	)
	values(
		20,
		'Hourly',
		60,
		5
	)
	
	INSERT INTO APM.AGGREGATIONTYPE (
		AGGREGATIONTYPEID,
		AGGREGATIONTYPEDEFAULTNAME,
		AGGREGATIONINTERVALDURATIONMINUTES,
		AGGREGATIONSTARTDELAYMINUTES
	)
	VALUES(
		30,
		'Daily',
		1440,
		20
	)
END
GO
/*==============================================================*/
/* Table: APPLICATION                                           */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.APPLICATION'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.APPLICATION (
	   APPLICATIONID        int                  identity,
	   APPLICATION          nvarchar(255)        null,
	   TYPE                 int                  not null,
	   constraint PK_APPLICATION primary key (APPLICATIONID)
	)
END
GO
/*==============================================================*/
/* Index: IX_APPLICATION                                        */
/*==============================================================*/  
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[APPLICATION]') AND name = N'IX_APPLICATION'
)
BEGIN
	create unique index IX_APPLICATION on APM.APPLICATION (
		APPLICATION ASC
	)
END
GO
/*==============================================================*/
/* Table: APPLICATIONSOURCEMACHINE                              */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.APPLICATIONSOURCEMACHINE'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.APPLICATIONSOURCEMACHINE (
	   APPLICATIONSOURCEID  int                  identity,
	   APPLICATIONID        int                  null,
	   SOURCEID             int                  null,
	   MACHINEID            int                  null,
	   constraint PK_APPLICATIONSOURCEMACHINE primary key (APPLICATIONSOURCEID)
	)
END
GO
/*==============================================================*/
/* Index: FK_SOURCE                                             */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[APPLICATIONSOURCEMACHINE]') AND name = N'FK_SOURCE'
)
BEGIN
	create index FK_SOURCE on APM.APPLICATIONSOURCEMACHINE 
	(
		SOURCEID ASC 
	)
	INCLUDE ( [APPLICATIONID]) WITH (SORT_IN_TEMPDB = ON) ON [PRIMARY]
END
GO
/*==============================================================*/
/* Index: FK_APPLICATION                                        */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[APPLICATIONSOURCEMACHINE]') AND name = N'FK_APPLICATION'
)
BEGIN
	create index FK_APPLICATION on APM.APPLICATIONSOURCEMACHINE (
		APPLICATIONID ASC
	)
END
GO
/*==============================================================*/
/* Index: FK_MACHINE                                            */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[APPLICATIONSOURCEMACHINE]') AND name = N'FK_MACHINE'
)
BEGIN
	create index FK_MACHINE on APM.APPLICATIONSOURCEMACHINE (
		MACHINEID ASC 
	)
	INCLUDE ([APPLICATIONID])
END
GO
/*==============================================================*/
/* Table: ASPECT                                                */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.ASPECT'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.ASPECT (
	   ASPECT               nvarchar(50)         null,
	   DESCRIPTION          nvarchar(255)        null,
	   ASPECTID             int                  identity,
	   constraint PK_ASPECT primary key (ASPECTID)
	)
END
GO
/*==============================================================*/
/* Index: IX_ASPECT                                             */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[ASPECT]') AND name = N'IX_ASPECT'
)
BEGIN
	create unique index IX_ASPECT on APM.ASPECT (
		ASPECT ASC
	)
END
GO
/*==============================================================*/
/* Table: CONFIG                                                */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.CONFIG'), 'IsTable') IS NULL)
BEGIN
	 CREATE TABLE APM.CONFIG (
	   CONFIGID             int                  identity,
	   CONFIGNAME           nvarchar(50)         not null,
	   CONFIGVALUE          ntext                null,
	   constraint PK_CONFIG primary key (CONFIGID)
	)
	
	INSERT INTO APM.CONFIG (configname, configvalue) VALUES ('SECURITYMODE', '0')
	INSERT INTO APM.CONFIG (CONFIGNAME, CONFIGVALUE) VALUES ('DATABASE_VERSION', '5.7')
	INSERT INTO APM.CONFIG (CONFIGNAME, CONFIGVALUE) VALUES ('DATABASE_NAME', 'Reporting')
	INSERT INTO APM.CONFIG (CONFIGNAME, CONFIGVALUE) VALUES ('SCHEMA_VERSION', '1')	
	
	/*Lifetime for events with "Deleted" status (hours)*/
	INSERT INTO APM.CONFIG (CONFIGNAME, CONFIGVALUE) VALUES (N'PMLifeTimeInHoursForDeletedEvents', '24')
          
	/*Lifetime for events with "By Design" status (hours)*/
	INSERT INTO APM.CONFIG (CONFIGNAME, CONFIGVALUE) VALUES (N'PMLifeTimeInHoursForByDesignEvents', '72')
END
GO
/*==============================================================*/
/* Index: IX_CONFIGNAME                                         */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CONFIG]') AND name = N'IX_CONFIGNAME'
)
BEGIN
	CREATE UNIQUE INDEX IX_CONFIGNAME on APM.CONFIG (
		CONFIGNAME ASC
	)
END
GO
/*==============================================================*/
/* Table: CSAJAX                                                */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSAJAX'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.CSAJAX (
	   CSAJAXID             int                  identity,
	   CSEVENTID            int                  not null,
	   URI                  nvarchar(255)        not null,
	   NETWORKTIME          decimal(35)          null,
	   SERVERTIME           decimal(35)          null,
	   TOTALTIME            decimal(35)          null,
	   REQUESTSIZE          bigint               null,
	   RESPONSESIZE         bigint               null,
	   RESPONSETIME         decimal(35)          null,
	   SYNCHRONOUS          bit                  not null,
	   LATENCY              bigint               null,
	   UTCDATE              datetime             null,
	   SOURCEID             int                  null,
	   ISHEAVIESTNODE       bit                  not null,
	   constraint PK_CSAJAX primary key (CSAJAXID)
	)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSAJAX]') AND name = N'idx_W_EventURI'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_W_EventURI] ON [APM].[CSAJAX] 
	(
		[CSEVENTID] ASC,
		[URI] ASC
	)
	INCLUDE ( [TOTALTIME],
	[SYNCHRONOUS]) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSAJAX]') AND name = N'FK_CSEVENTID'
)
BEGIN
	CREATE NONCLUSTERED INDEX [FK_CSEVENTID] ON [APM].[CSAJAX]
	(
		[CSEVENTID] ASC
	) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSAJAX]') AND name = N'idx_EventId'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_EventId] ON [APM].[CSAJAX] 
	(
		[CSEVENTID] ASC
	)
	INCLUDE ( [TOTALTIME],
	[RESPONSESIZE],
	[LATENCY],
	[SYNCHRONOUS],
	[URI],
	[NETWORKTIME],
	[SERVERTIME],
	[REQUESTSIZE]
	) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSAJAX]') AND name = N'idx_EventIdTotalTime1'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_EventIdTotalTime1] ON APM.CSAJAX 
	(
		[CSEVENTID] ASC,
		[TOTALTIME] DESC
	)
	INCLUDE ( [URI],
	[NETWORKTIME],
	[SERVERTIME],
	[RESPONSETIME],
	[RESPONSESIZE],
	[REQUESTSIZE],
	[LATENCY]) WITH (SORT_IN_TEMPDB = ON) ON [PRIMARY]
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'CSAJAX'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: CSASYNCAJAX                                           */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSASYNCAJAX'), 'IsTable') IS NULL)
BEGIN
	 CREATE TABLE APM.CSASYNCAJAX (
	   CSASYNCAJAXID        int                  identity,
	   CSEVENTID            int                  not null,
	   HANDLERTIME          decimal(35)          null,
	   TOTALTIME            decimal(35)          null,
	   constraint PK_CSASYNCAJAX primary key (CSASYNCAJAXID)
	)
END	
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSASYNCAJAX]') AND name = N'idx_EventId'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_EventId] ON APM.CSASYNCAJAX
	(
		[CSEVENTID] ASC
	)
	INCLUDE ([HANDLERTIME]) WITH (SORT_IN_TEMPDB = ON)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'CSASYNCAJAX'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: CSEVENT                                               */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSEVENT'), 'IsTable') IS NULL)
BEGIN
 	CREATE TABLE APM.CSEVENT (
	   CSEVENTID            int                  identity,
	   CSEVENTGROUPID       int                  not null,
	   SOURCEID             int                  not null,
	   MACHINEID            int                  not null,
	   IPID                 int                  null,
	   CLASSTYPE            nvarchar(50)         not null,
	   EVENTCLASS           nvarchar(50)         null,
	   PAGEURI              nvarchar(255)        null,
	   DESCRIPTION          nvarchar(255)        not null,
	   BROWSER              nvarchar(255)        null,
	   UTCDATE              datetime             not null,
	   ROWGUID              nvarchar(15)         null,
	   SEVIEWERDBID         int                  not null,
	   SEVIEWEREGID         int                  not null,
	   USERID               int                  null,
	   PMSTATUS             tinyint              not null,
	   TOTALTIME            decimal(35)          null,
	   TOTALSIZE            bigint               null,
	   LATENCY              bigint               null,
	   constraint PK_CSEVENT primary key (CSEVENTID)
	)
END	
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'FK_USERS'
)
BEGIN
	CREATE NONCLUSTERED INDEX FK_USERS ON APM.CSEVENT
		(USERID)
END
GO
IF NOT EXISTS (
	SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CSEVENT' AND TABLE_SCHEMA = N'apm' AND COLUMN_NAME = 'PMSTATUS' AND COLUMN_DEFAULT IS NOT NULL
)
BEGIN		
	ALTER TABLE [APM].[CSEVENT] ADD  CONSTRAINT [DF_CSEVENT_PMSTATUS]  DEFAULT ((0)) FOR [PMSTATUS]	
END	
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_DateSourceClassTypeMachine'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_DateSourceClassTypeMachine] ON [APM].[CSEVENT] 
	(
		[UTCDATE] ASC,
		[SOURCEID] ASC,
		[CLASSTYPE] ASC,
		[MACHINEID] ASC
	)
	INCLUDE ( [CSEVENTID],
	[PAGEURI]) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_ClassTypeDateMachineSource'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_ClassTypeDateMachineSource] ON [APM].[CSEVENT] 
	(
		[CLASSTYPE] ASC,
		[UTCDATE] ASC,
		[MACHINEID] ASC,
		[SOURCEID] ASC
	) 
	INCLUDE([CSEVENTID],
	PAGEURI) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_SourceClassTypeDateMachine'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_SourceClassTypeDateMachine] ON [APM].[CSEVENT] 
	(
		[SOURCEID] ASC,
		[CLASSTYPE] ASC,
		[UTCDATE] ASC,
		[MACHINEID] ASC
	) 
	INCLUDE([CSEVENTID],
	PAGEURI) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_SourceMachineClassTypeDate'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_SourceMachineClassTypeDate] ON [APM].[CSEVENT] 
	(
		[SOURCEID] ASC,
		[MACHINEID] ASC,
		[CLASSTYPE] ASC,
		[UTCDATE] ASC
	)
	INCLUDE ( [CSEVENTID],
	[PAGEURI]) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_DateSourceClassTypeMachineIpId'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_DateSourceClassTypeMachineIpId] ON [APM].[CSEVENT] 
	(
		[UTCDATE] ASC,
		[SOURCEID] ASC,
		[CLASSTYPE] ASC,
		[MACHINEID] ASC,
		[IPID] ASC
	)
	INCLUDE ( [CSEVENTID],
	[CSEVENTGROUPID],
	[EVENTCLASS],
	[PAGEURI],
	[BROWSER],
	[DESCRIPTION]) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_SourceMachineEventClassDateIpId'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_SourceMachineEventClassDateIpId] ON [APM].[CSEVENT] 
	(
		[SOURCEID] ASC,
		[MACHINEID] ASC,
		[EVENTCLASS] ASC,
		[UTCDATE] ASC,
		[IPID] ASC
	)
	INCLUDE ( [CSEVENTID],
	[CSEVENTGROUPID],
	[PAGEURI]) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_DateSourceMachineEventClassIpId'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_DateSourceMachineEventClassIpId] ON [APM].[CSEVENT] 
	(
		[UTCDATE] ASC,
		[SOURCEID] ASC,
		[MACHINEID] ASC,
		[EVENTCLASS] ASC,
		[IPID] ASC
	)
	INCLUDE ( [CSEVENTID],
	[CSEVENTGROUPID],
	[PAGEURI]) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'FK_IPID'
)
BEGIN
	CREATE NONCLUSTERED INDEX [FK_IPID] ON [APM].[CSEVENT]
	(
		[IPID] ASC
	)WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'FK_SOURCEID'
)
BEGIN
	CREATE NONCLUSTERED INDEX [FK_SOURCEID] ON [APM].[CSEVENT] 
	(
		[SOURCEID] ASC
	) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_SourceEventClassDateMachine'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_SourceEventClassDateMachine] ON [APM].[CSEVENT] 
	(
		[SOURCEID] ASC,
		[EVENTCLASS] ASC,
		[UTCDATE] ASC,
		[MACHINEID] ASC
	)
	INCLUDE ( [CSEVENTID],
	[PAGEURI]) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_DateSourceEventClassMachine'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_DateSourceEventClassMachine] ON [APM].[CSEVENT] 
	(
		[UTCDATE] ASC,
		[SOURCEID] ASC,
		[EVENTCLASS] ASC,
		[MACHINEID] ASC
	)
	INCLUDE ( [CSEVENTID],
	[PAGEURI]) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_ClassTypeSourceMachineDateIpId2'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_ClassTypeSourceMachineDateIpId2] ON [APM].[CSEVENT] 
	(
		[CLASSTYPE] ASC,
		[SOURCEID] ASC,
		[MACHINEID] ASC,
		[UTCDATE] ASC,
		[IPID] ASC
	)
	INCLUDE ( [CSEVENTID],
	[CSEVENTGROUPID],
	[BROWSER],
	[DESCRIPTION]) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_W_PageSourceDate'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_W_PageSourceDate] ON [APM].[CSEVENT] 
	(
		[PAGEURI] ASC,
		[SOURCEID] ASC,
		[UTCDATE] ASC
	)
	INCLUDE ( [CLASSTYPE],
	[DESCRIPTION],
	[ROWGUID],
	[SEVIEWEREGID],
	[MACHINEID],
	[SEVIEWERDBID],
	[IPID]) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_SourceMachineClassTypeDateIpId'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_SourceMachineClassTypeDateIpId] ON [APM].[CSEVENT] 
	(
		[SOURCEID] ASC,
		[MACHINEID] ASC,
		[CLASSTYPE] ASC,
		[UTCDATE] ASC,
		[IPID] ASC
	)
	INCLUDE ( [CSEVENTID],
	[CSEVENTGROUPID],
	[EVENTCLASS],
	[PAGEURI],
	[BROWSER],
	[DESCRIPTION]) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_W_IpIdSourcePageDate'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_W_IpIdSourcePageDate]  ON [APM].[CSEVENT] 
	(
		[IPID] ASC,
		[SOURCEID] ASC,
		[PAGEURI] ASC,
		[UTCDATE] ASC
	)
	INCLUDE ( [CLASSTYPE],
	[DESCRIPTION],
	[ROWGUID],
	[SEVIEWEREGID],
	[MACHINEID],
	[SEVIEWERDBID]
	) WITH (SORT_IN_TEMPDB = ON)
END
GO
------------------------------ Summary User Analysis Indexes ------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_DateSource1'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_DateSource1] ON [APM].[CSEVENT] 
		(
			[UTCDATE] ASC,
			[SOURCEID] ASC
		)
		INCLUDE ( [CSEVENTID],
		[CSEVENTGROUPID],
		[PAGEURI],
		[USERID],
		[CLASSTYPE],
		[EVENTCLASS],
		[MACHINEID],
		[BROWSER],
		[DESCRIPTION],
		[IPID],
		[TOTALTIME]) WITH (SORT_IN_TEMPDB = ON) ON [PRIMARY]
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_SourceDate1'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_SourceDate1] ON [APM].[CSEVENT] 
		(
			[SOURCEID] ASC,
			[UTCDATE] ASC
		)
		INCLUDE ( [CSEVENTID],
		[CSEVENTGROUPID],
		[PAGEURI],
		[USERID],
		[CLASSTYPE],
		[EVENTCLASS],
		[MACHINEID],
		[BROWSER],
		[DESCRIPTION],
		[IPID],
		[TOTALTIME]) WITH (SORT_IN_TEMPDB = ON) ON [PRIMARY]
END
GO
------------------------------ Transfer indexes--------------------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_T_RowGuid'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_T_RowGuid] ON [APM].[CSEVENT] 
	(
		[ROWGUID] ASC
	)WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_T_RowGuid2'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_T_RowGuid2] ON APM.CSEVENT
	(
		[ROWGUID] ASC
	)INCLUDE (UserId) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_T_UtcDate'
)
BEGIN
	CREATE INDEX idx_T_UtcDate ON APM.CSEVENT
		(UTCDATE) 
		INCLUDE(SEVIEWERDBID) WITH (SORT_IN_TEMPDB = ON) 
END
GO
---------------- delete old sources/computers wizard indexes --------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[csevent]') AND name = N'idx_MachineDate'
)
BEGIN
	CREATE INDEX idx_MachineDate ON APM.csevent (MACHINEID, UTCDATE DESC)  
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENT]') AND name = N'idx_SM_PMStatusDate'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_SM_PMStatusDate] ON [APM].[CSEVENT] 
	(
		[PMSTATUS] ASC,
		[UTCDATE] ASC
	)
	INCLUDE ( [SEVIEWERDBID],
	[CSEVENTID])
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'CSEVENT'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: CSEVENTGROUP                                          */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSEVENTGROUP'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.CSEVENTGROUP (
	   CSEVENTGROUPID       int                  identity,
	   FIRSTEVENTDATE       datetime             not null,
	   LASTEVENTDATE        datetime             not null,
	   HASHVALUE            nvarchar(50)         null,
	   DESCRIPTION          nvarchar(255)        null,
	   SOURCEID             int                  null,
	   constraint PK_CSEVENTGROUP primary key (CSEVENTGROUPID)
	)
END
GO
------------------ Transfer indexes -----------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEventGroup]') AND name = N'idx_T_hashvalue'
)
BEGIN
	CREATE INDEX idx_T_hashvalue on APM.CSEventGroup(hashvalue) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENTGROUP]') AND name = N'idx_T_hashvalue2'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_T_hashvalue2] ON APM.CSEVENTGROUP
	(
		[HASHVALUE] ASC
	) include (firsteventdate, lasteventdate, sourceid) WITH (SORT_IN_TEMPDB = ON)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'CSEVENTGROUP'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: CSEXEVENT                                             */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSEXEVENT'), 'IsTable') IS NULL)
BEGIN
	 CREATE TABLE APM.CSEXEVENT (
	   CSEXEVENTID          int                  identity,
	   CSEVENTID            int                  not null,
	   ACTION               nvarchar(255)        not null,
	   EXMESSAGE            nvarchar(255)        not null,
	   EXTYPE               nvarchar(255)        not null,
	   EXFUNCTION           nvarchar(255)        not null,
	   ROWGUID              nvarchar(15)         null,
	   constraint PK_CSEXEVENT primary key (CSEXEVENTID)
	)
END	
GO
/*==============================================================*/
/* Table: CSHEAVIESTRESOURCE                                    */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSHEAVIESTRESOURCE'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.CSHEAVIESTRESOURCE (
	   CSHEAVIESTRESOURCEID int                  identity,
	   CSEVENTID            int                  not null,
	   NAME                 nvarchar(255)        not null,
	   DURATION             decimal(35)          not null,
	   ROWGUID              nvarchar(15)         null,
	   ISHEAVIESTNODE          bit                               not null,
	   constraint PK_CSHEAVIESTRESOURCE primary key (CSHEAVIESTRESOURCEID)
	)
END
GO
IF NOT EXISTS (
	SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CSHEAVIESTRESOURCE' AND TABLE_SCHEMA = N'apm' AND COLUMN_NAME = 'IsHeaviestNode' AND COLUMN_DEFAULT IS NOT NULL
)
BEGIN		
	ALTER TABLE APM.CSHEAVIESTRESOURCE ADD CONSTRAINT DF_CSHEAVIESTRESOURCE_ISHAVIESTNODE DEFAULT 0 FOR IsHeaviestNode	
END	
GO
---------------------Transfer indexes---------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSHEAVIESTRESOURCE]') AND name = N'idx_T_RowGuid'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_T_RowGuid] ON APM.CSHEAVIESTRESOURCE
	(
		[ROWGUID] ASC
	) WITH (SORT_IN_TEMPDB = ON)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'CSHEAVIESTRESOURCE'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: CSJSCRIPTEVENT                                        */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSJSCRIPTEVENT'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.CSJSCRIPTEVENT (
	   CSJSCRIPTEVENTID     int                  identity,
	   CSEVENTID            int                  not null,
	   ACTION               nvarchar(255)        not null,
	   TOTALTIME            decimal(35)          null,
	   UTCDATE              datetime             null,
	   SOURCEID             int                  null,
	   constraint PK_CSJSCRIPTEVENT primary key (CSJSCRIPTEVENTID)
	)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSJSCRIPTEVENT]') AND name = N'idx_W_ActionEvent'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_W_ActionEvent] ON [APM].[CSJSCRIPTEVENT] 
	(
		 [ACTION] ASC,
		 [CSEVENTID] ASC
	    
	) INCLUDE([TOTALTIME])
	 WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSJSCRIPTEVENT]') AND name = N'idx_W_EventAction'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_W_EventAction] ON [APM].[CSJSCRIPTEVENT] 
	(
		 [CSEVENTID] ASC,
		 [ACTION] ASC    
	    
	) INCLUDE([TOTALTIME])
	 WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSJSCRIPTEVENT]') AND name = N'FK_CSEVENTID'
)
BEGIN
	CREATE NONCLUSTERED INDEX [FK_CSEVENTID] ON [APM].[CSJSCRIPTEVENT]
	(
		[CSEVENTID] ASC
	)WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSJSCRIPTEVENT]') AND name = N'idx_CSEvent1'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_CSEvent1] ON APM.CSJSCRIPTEVENT
	(
		[CSEVENTID] ASC
	)
	INCLUDE ( 
	[TOTALTIME], 
	[ACTION]) WITH (SORT_IN_TEMPDB = ON)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'CSJSCRIPTEVENT'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: CSPAGEEVENT                                           */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSPAGEEVENT'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.CSPAGEEVENT (
	   CSPAGEEVENTID        int                  identity,
	   CSEVENTID            int                  not null,
	   NETWORKTIME          decimal(35)          null,
	   SERVERTIME           decimal(35)          null,
	   DOMTIME              decimal(35)          null,
	   PERIPHERALTIME       decimal(35)          null,
	   ONLOADTIME           decimal(35)          null,
	   TOTALTIME            decimal(35)          null,
	   TOTALSIZE            bigint               null,
	   LATENCY              bigint               null,
	   UTCDATE              datetime             null,
	   SOURCEID             int                  null,
	   constraint PK_CSPAGEEVENT primary key (CSPAGEEVENTID)
	)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSPAGEEVENT]') AND name = N'FK_CSEVENTID'
)
BEGIN
	CREATE NONCLUSTERED INDEX [FK_CSEVENTID] ON [APM].[CSPAGEEVENT]
	(
		[CSEVENTID] ASC
	)WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSPAGEEVENT]') AND name = N'idx_EventId1'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_EventId1] ON [APM].[CSPAGEEVENT] 
	(
		[CSEVENTID] ASC
	)
	INCLUDE ( [TOTALTIME],
		[TOTALSIZE],
		[NETWORKTIME],
		[SERVERTIME],
		[DOMTIME],
		[PERIPHERALTIME],
		[ONLOADTIME],
		[LATENCY]
	) WITH (SORT_IN_TEMPDB = ON)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'CSPAGEEVENT'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: CSPERIPHERAL                                          */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSPERIPHERAL'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.CSPERIPHERAL (
	   CSPERIPHERALID       int                  identity,
	   CSEVENTID            int                  not null,
	   TYPE                 nvarchar(50)         not null,
	   TOTALSIZE            bigint               null,
	   TOTALTIME            decimal(35)          null,
	   constraint PK_CSPERIPHERAL primary key (CSPERIPHERALID)
	)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSPERIPHERAL]') AND name = N'FK_CSEVENTID'
)
BEGIN
	CREATE NONCLUSTERED INDEX [FK_CSEVENTID] ON [APM].[CSPERIPHERAL]
	(
		[CSEVENTID] ASC
	)WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSPERIPHERAL]') AND name = N'idx_EventId'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_EventId] ON [APM].[CSPERIPHERAL] 
	(
		[CSEVENTID] ASC
	)
	INCLUDE ( [TYPE],
	[TOTALSIZE]) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSPERIPHERAL]') AND name = N'idx_EventPeripheral'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_EventPeripheral] ON [APM].[CSPERIPHERAL] 
	(
		[CSEVENTID] ASC,
		[CSPERIPHERALID] ASC
	)
	INCLUDE ( [TYPE],
	[TOTALSIZE]) WITH (SORT_IN_TEMPDB = ON)
END
GO
------------------------------ Transfer indexes -------------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSPERIPHERAL]') AND name = N'idx_T_EventIdType'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_T_EventIdType] ON APM.CSPERIPHERAL
	(
		[CSEVENTID] ASC,	
		[TYPE] ASC
	) WITH (SORT_IN_TEMPDB = ON)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'CSPERIPHERAL'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: CSPERIPHERALDETAIL                                    */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.CSPERIPHERALDETAIL'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.CSPERIPHERALDETAIL (
	   CSPERIPHERALDETAILID int                  identity,
	   CSPERIPHERALID       int                  not null,
	   DOMAIN               nvarchar(255)        not null,
	   PATH                 nvarchar(255)        not null,
	   SIZE                 bigint               null,
	   TOTALTIME            decimal(35)          null,
	   constraint PK_CSPERIPHERALDETAIL primary key (CSPERIPHERALDETAILID)
	)
END
GO
/*==============================================================*/
/* Table: DATASET                                               */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.DATASET'), 'IsTable') IS NULL)
BEGIN
	-- Create table
	CREATE TABLE APM.DATASET (
	   DATASETID            int                  identity,
	   AGGREGATIONTYPEID    int                  null,
	   DATASETNAME          nvarchar(50)         not null,
	   DEFAULTAGGREGATIONINTERVALCOUNT tinyint              not null,
	   MAXDATAAGEDAYS       int                  null,
	   AGGREGATIONMETHODNAME nvarchar(50)         null,
	   constraint PK_DATASET primary key (DATASETID)
	)
	
	--Insert default values
	INSERT into APM.dataset (
		DATASETNAME
	   ,DEFAULTAGGREGATIONINTERVALCOUNT
	   ,AGGREGATIONTYPEID
	   ,AGGREGATIONMETHODNAME
	   ,MAXDATAAGEDAYS
	)
	values (
		N'perfHourly',
		40,
		30,
		N'PCounterAggregate',
		91
	)	
END
GO
/*==============================================================*/
/* Table: DATASETAGGREGATIONHISTORY                             */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.DATASETAGGREGATIONHISTORY'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.DATASETAGGREGATIONHISTORY (
	   DATASETAGGREGATIONHISTORYID int                  identity,
	   DATASETID            int                  not null,
	   AGGREGATIONDATETIME  datetime             not null,
	   DIRTYIND             bit                  not null,
	   constraint PK_DATASETAGGREGATIONHISTORY primary key (DATASETAGGREGATIONHISTORYID)
	)
END
GO
IF NOT EXISTS (
	SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'DatasetAggregationHistory' AND TABLE_SCHEMA = N'apm' AND COLUMN_NAME = 'DirtyInd' AND COLUMN_DEFAULT IS NOT NULL
)
BEGIN		
	ALTER TABLE APM.DatasetAggregationHistory ADD CONSTRAINT DatasetAggregationHistoryID_Default DEFAULT 1 FOR DirtyInd	
END	
GO
--------------------------------------- Transfer indexes ----------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[DATASETAGGREGATIONHISTORY]') AND name = N'idx_T_DIRTYIND_datasetid_date'
)
BEGIN
	CREATE INDEX idx_T_DIRTYIND_datasetid_date ON APM.DATASETAGGREGATIONHISTORY
	(
		DIRTYIND, datasetid, AGGREGATIONDATETIME
	)
	WITH (SORT_IN_TEMPDB = ON)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'DATASETAGGREGATIONHISTORY'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: EVENT                                                 */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.EVENT'), 'IsTable') IS NULL)
BEGIN
	 CREATE TABLE APM.EVENT (
	   EVENTID              bigint               identity,
	   EVENTGROUPID         int                  null,
	   RESOURCEID           int                  null,
	   SOURCEID             int                  null,
	   EVENTDURATION        decimal(35)          null,
	   MACHINEID            int                  not null,
	   UTCEVENTDATE         datetime             not null,
	   EVENTCLASSTYPE       nvarchar(50)         null,
	   ROOTNODENAME         nvarchar(255)        null,
	   ASPECT               nvarchar(50)         null,
	   EXCEPTIONCLASS       nvarchar(255)        null,
	   DESCRIPTION          nvarchar(255)        null,
	   CATEGORY             nvarchar(50)         null,
	   HEAVYLIGHT           int                  null,
	   ROWGUID              nvarchar(15)         null,
	   SEVIEWERDBID         int                  null,
	   SEVIEWEREGID         int                  not null,
	   IPID                 int                  null,
	   USERID               int                  null,
	   PMSTATUS             tinyint              not null
	)
	
	ALTER TABLE APM.Event 
		ADD CONSTRAINT PK_EVENT PRIMARY KEY NONCLUSTERED (EVENTID)	
END
GO
/*==============================================================*/
/* Index: IX_CDATE                                              */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[Event]') AND name = N'IX_CDATE'
)
BEGIN
	CREATE CLUSTERED INDEX IX_CDATE ON APM.Event
	(
		UTCEVENTDATE ASC
	) 
END
GO
IF NOT EXISTS (
	SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'EVENT' AND TABLE_SCHEMA = N'apm' AND COLUMN_NAME = 'PMSTATUS' AND COLUMN_DEFAULT IS NOT NULL
)
BEGIN		
	ALTER TABLE [APM].[EVENT] ADD  CONSTRAINT [DF_EVENT_PMSTATUS]  DEFAULT ((0)) FOR [PMSTATUS]	
END	
GO
--------------------- Change foreign key index--------------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENT]') AND name = N'FK_EVENTGROUP'
)
BEGIN
	CREATE NONCLUSTERED INDEX [FK_EVENTGROUP] ON [APM].[EVENT] 
	(
		[EVENTGROUPID] ASC
	)
	INCLUDE ( [EVENTDURATION],
	[MACHINEID],
	[UTCEVENTDATE],
	[EVENTID],
	[SOURCEID],
	[EVENTCLASSTYPE],
	[rootnodename],
	[DESCRIPTION],
	[CATEGORY]) WITH (SORT_IN_TEMPDB = ON)
END
GO
-----------------End Change foreign key index---------------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENT]') AND name = N'idx_DateSourceMachine'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_DateSourceMachine] ON [APM].[EVENT] 
	(
		[UTCEVENTDATE] ASC,
		[SOURCEID] ASC,
		[MACHINEID] ASC
	)
	INCLUDE ( [EVENTGROUPID],
	[EVENTDURATION],
	[CATEGORY],
	[HEAVYLIGHT],
	[ASPECT],
	[RESOURCEID],
	[EVENTCLASSTYPE],
	[USERID],
	[EVENTID],
	[DESCRIPTION],
	[SEVIEWERDBID],
	[ROOTNODENAME]) WITH (SORT_IN_TEMPDB = ON) ON [PRIMARY]
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENT]') AND name = N'idx_MachineDate'
)
BEGIN
	CREATE NONCLUSTERED INDEX idx_MachineDate ON APM.EVENT
	(
		MACHINEID
	   ,UTCEVENTDATE 
	)
	INCLUDE
	(
		 SOURCEID
		,EVENTGROUPID
		,EVENTDURATION
		,CATEGORY
		,HEAVYLIGHT
		,ASPECT
		,RESOURCEID
		,EVENTCLASSTYPE
		,USERID
		,EVENTID
		,DESCRIPTION
		,SEVIEWERDBID
		,ROOTNODENAME
		,[PMSTATUS]
	)
	WITH (SORT_IN_TEMPDB = ON) ON [PRIMARY]
END
GO
--------------------------------- Transfer indexes --------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENT]') AND name = N'idx_T_RowGuid'
)
BEGIN
	CREATE NONCLUSTERED INDEX idx_T_RowGuid ON APM.EVENT
	(
		 ROWGUID 
	)
	INCLUDE
	(
		HEAVYLIGHT
		,IPID
		,EVENTID 
		,USERID
	)
	WITH (SORT_IN_TEMPDB = ON) ON [PRIMARY]
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENT]') AND name = N'idx_T_ResourceIdEventClassTypeDB'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_T_ResourceIdEventClassTypeDB] ON [APM].[EVENT] 
	(
		  [RESOURCEID] ASC,
		  [EVENTCLASSTYPE] ASC,
		  [SEVIEWERDBID] ASC
	)
	INCLUDE ( [HEAVYLIGHT],
	[ROWGUID],
	[EVENTID],
	[SOURCEID],
	[MACHINEID],
	[EVENTDURATION]) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENT]') AND name = N'idx_T_EventId'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_T_EventId] ON [APM].[EVENT] 
	(
		[EVENTID] ASC
	)
	INCLUDE ( [SEVIEWERDBID],
	[HEAVYLIGHT],
	[ROWGUID],
	[EXCEPTIONCLASS],
	[DESCRIPTION],
	[EVENTDURATION],
	[SOURCEID],
	[EVENTCLASSTYPE],
	[RESOURCEID]) WITH (SORT_IN_TEMPDB = ON) ON [PRIMARY]
END
GO
----------------------- Event Window Indexes ----------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[Event]') AND name = N'idx_W_ResourceDate'
)
BEGIN
	CREATE INDEX idx_W_ResourceDate ON APM.Event 
		(ResourceId, UtcEventDate) 
	INCLUDE(
	  [SourceId],
	  [EventId],
	  [EventDuration],
	  [MACHINEID], 
	  [EVENTCLASSTYPE],
	  [RootNodeName], 
	  [DESCRIPTION], 
	  [CATEGORY], 
	  [ROWGUID], 
	  [Aspect],
	  [HeavyLight],
	  [SEVIEWERDBID], 
	  [SEVIEWEREGID],
	  [USERID],
	  [EVENTGROUPID]
	  ) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[Event]') AND name = N'idx_W_SourceDate'
)
BEGIN
	CREATE INDEX idx_W_SourceDate ON APM.Event 
		(SourceId, UtcEventDate) 
	INCLUDE(
		  [RESOURCEID],
		  [EventId],
		  [EventDuration],
		  [MACHINEID], 
		  [EVENTCLASSTYPE],
		  [RootNodeName],   
		  [DESCRIPTION], 
		  [CATEGORY], 
		  [ROWGUID], 
		  [Aspect],
		  [HeavyLight],
		  [SEVIEWERDBID], 
		  [SEVIEWEREGID],
		  [EVENTGROUPID],
		  [USERID]
	  ) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[Event]') AND name = N'idx_W_RootDate'
)
BEGIN
	CREATE INDEX idx_W_RootDate ON APM.Event 
		(RootNodeName, UTCEVENTDATE) 
	INCLUDE(
	  [SourceId],
	  [MachineId],
	  [RESOURCEID],
	  [EVENTID],
	  [EVENTDURATION], 
	  [EVENTCLASSTYPE], 
	  [DESCRIPTION], 
	  [CATEGORY], 
	  [ROWGUID], 
	  [Aspect], 
	  [Heavylight],
	  [SEVIEWERDBID], 
	  [SEVIEWEREGID],
	  [EVENTGROUPID],
	  [USERID]
	  ) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENT]') AND name = N'idx_W_DescriptionDate'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_W_DescriptionDate] ON [APM].[EVENT] 
	(
		  [DESCRIPTION] ASC,
		  [UTCEVENTDATE] ASC
	)
		INCLUDE ( [SOURCEID],
		[MACHINEID],
		[RESOURCEID],
		[ROOTNODENAME],
		[CATEGORY],
		[EVENTID],
		[EVENTCLASSTYPE],
		[ROWGUID],
		[ASPECT],
		[HEAVYLIGHT],
		[SEVIEWERDBID],
		[SEVIEWEREGID],
		[USERID]) WITH (SORT_IN_TEMPDB = ON)
END
GO
/*==============================================================*/
/* Index: FK_EVENTRESOURCEID                                    */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENT]') AND name = N'FK_EVENTRESOURCEID'
)
BEGIN
	CREATE INDEX FK_EVENTRESOURCEID on APM.EVENT (
		RESOURCEID ASC
	)
END
GO
/*==============================================================*/
/* Index: FK_EVENTMACHINEID                                     */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENT]') AND name = N'FK_EVENTMACHINEID'
)
BEGIN
	CREATE INDEX FK_EVENTMACHINEID on APM.EVENT (
		MACHINEID ASC
	)
END
GO
/*==============================================================*/
/* Index: FK_EVENTSOURCEID                                      */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENT]') AND name = N'FK_EVENTSOURCEID'
)
BEGIN
	CREATE INDEX FK_EVENTSOURCEID on APM.EVENT (
		SOURCEID ASC
	)
END
GO
/*==============================================================*/
/* Index: FK_IPID                                               */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENT]') AND name = N'FK_IPID'
)
BEGIN
	CREATE INDEX FK_IPID on APM.EVENT (
		IPID ASC
	)
END
GO
/*==============================================================*/
/* Index: FK_SEVIEWERDBID                                       */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENT]') AND name = N'FK_SEVIEWERDBID'
)
BEGIN
	CREATE INDEX FK_SEVIEWERDBID on APM.EVENT (
		SEVIEWERDBID ASC
	)
END
GO
/*==============================================================*/
/* Index: FK_USERS                                              */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENT]') AND name = N'FK_USERS'
)
BEGIN
	CREATE INDEX FK_USERS on APM.EVENT (
		USERID ASC
	)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENT]') AND name = N'idx_SM_PMStatusDate'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_SM_PMStatusDate] ON [APM].[EVENT] 
	(
		[PMSTATUS] ASC,
		[UTCEVENTDATE] ASC
	)
	INCLUDE ( [SEVIEWERDBID],
	[EVENTID])		
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'EVENT'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: EVENTGROUP                                            */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.EVENTGROUP'), 'IsTable') IS NULL)
BEGIN
	 CREATE TABLE APM.EVENTGROUP (
	   EVENTGROUPID         int                  identity,
	   FIRSTEVENTDATE       datetime             null,
	   LASTEVENTDATE        datetime             null,
	   EVENTCLASSTYPE       nvarchar(50)         null,
	   ROOTNODENAME         nvarchar(255)        null,
	   ASPECT               nvarchar(50)         null,
	   HASHVALUE            nvarchar(50)         null,
	   DESCRIPTION          nvarchar(255)        null,
	   SOURCEID             int                  null,
	   constraint PK_EVENTGROUP primary key (EVENTGROUPID)
	)
END	
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENTGROUP]') AND name = N'idx_EventGroupIdFirstEventDateSource'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_EventGroupIdFirstEventDateSource] ON [APM].[EVENTGROUP] 
	(
		[EVENTGROUPID] ASC,
		[FIRSTEVENTDATE] ASC,
		[SOURCEID] ASC
	) WITH (SORT_IN_TEMPDB = ON)
END
GO
-----------------------Transfer indexed----------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENTGROUP]') AND name = N'idx_EVENTGROUP_LASTEVENTDATE'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_EVENTGROUP_LASTEVENTDATE] ON APM.EVENTGROUP
	(
		[LASTEVENTDATE]
	) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[CSEVENTGROUP]') AND name = N'idx_CSEVENTGROUP_LASTEVENTDATE'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_CSEVENTGROUP_LASTEVENTDATE] ON APM.CSEVENTGROUP
	(
		[LASTEVENTDATE]
	) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENTGROUP]') AND name = N'idx_T_hashvalue'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_T_hashvalue] ON [APM].[EVENTGROUP] 
	(
		[HASHVALUE] ASC
	) INCLUDE (firsteventdate, lasteventdate, sourceid) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENTGROUP]') AND name = N'ix_T_hashvalue2'
)
BEGIN
	CREATE NONCLUSTERED INDEX [ix_T_hashvalue2] ON [APM].[EVENTGROUP] 
	(
		[HASHVALUE] ASC
	) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EVENTGROUP]') AND name = N'idx_EventGroupIdFirstEventDate'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_EventGroupIdFirstEventDate] ON APM.EVENTGROUP
	(
		[EVENTGROUPID] ASC,
		[FIRSTEVENTDATE] ASC
	)
	WITH (SORT_IN_TEMPDB = ON)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'EVENTGROUP'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: EXCEPTIONNODE                                         */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.EXCEPTIONNODE'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.EXCEPTIONNODE (
	   EXCEPTIONNODEID      bigint               identity,
	   EVENTID              bigint               not null,
	   RESOURCEID           int                  null,
	   EXCEPTIONMESSAGE     nvarchar(255)        null,
	   EXCEPTIONCLASS       nvarchar(255)        null,
	   FUNCTIONNAME         nvarchar(255)        null,
	   RESOURCEMETHOD       nvarchar(255)        null,
	   MODULENAME           nvarchar(255)        null,
	   LINENUMBER           bigint               null,
	   DESCRIPTION          nvarchar(255)        null,
	   HASHCODE             nvarchar(255)        null,
	   ENTRYID              int                  null,
	   ROWGUID              nvarchar(15)         null,
	   constraint PK_EXCEPTIONNODE primary key (EXCEPTIONNODEID)
	)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EXCEPTIONNODE]') AND name = N'idx_EVENTID'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_EVENTID] ON [APM].[EXCEPTIONNODE] 
	(
		[EVENTID] ASC
	)
	INCLUDE ( [RESOURCEMETHOD]) WITH (SORT_IN_TEMPDB = ON) 
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EXCEPTIONNODE]') AND name = N'idx_ResourceExceptionEvent'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_ResourceExceptionEvent] ON [APM].[EXCEPTIONNODE] 
	(
		[RESOURCEID] ASC,
		[EXCEPTIONNODEID] ASC,
		[EVENTID] ASC
	)
	INCLUDE ( [RESOURCEMETHOD]) WITH (SORT_IN_TEMPDB = ON) 
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EXCEPTIONNODE]') AND name = N'idx_EventIdResource2'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_EventIdResource2] ON [APM].[EXCEPTIONNODE] 
	(
		[EVENTID] ASC,
		[ResourceId] ASC
	)
	INCLUDE ( [RESOURCEMETHOD]) WITH (SORT_IN_TEMPDB = ON) 
END
GO
----------------------Summary User Analysis Report -------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[ExceptionNode]') AND name = N'idx_EventIdResource'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_EventIdResource] ON [APM].[ExceptionNode] 
	(
		[EVENTID] ASC,
		[RESOURCEID] ASC
	)
	INCLUDE ( [DESCRIPTION]) WITH (SORT_IN_TEMPDB = ON) 
END
GO
----------------------Transfer indexes ------------------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EXCEPTIONNODE]') AND name = N'idx_T_eventIdResourceId'
)
BEGIN
	CREATE INDEX idx_T_eventIdResourceId on APM.exceptionnode(eventid, resourceid) WITH (SORT_IN_TEMPDB = ON) 
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EXCEPTIONNODE]') AND name = N'idx_T_rowguid'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_T_rowguid] ON [APM].[EXCEPTIONNODE] 
	(
		[ROWGUID] ASC
	) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EXCEPTIONNODE]') AND name = N'idx_T_eventId'
)
BEGIN
	CREATE INDEX idx_T_eventId on APM.EXCEPTIONNODE(eventid) 
	INCLUDE(resourceid) WITH (SORT_IN_TEMPDB = ON)
END
GO
----------------------- Event Window indexes ---------------------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[ExceptionNode]') AND name = N'idx_W_ResourceMethod'
)
BEGIN
	CREATE INDEX idx_W_ResourceMethod on APM.ExceptionNode (RESOURCEMETHOD) INCLUDE(Eventid) WITH (SORT_IN_TEMPDB = ON)
END
GO
/*==============================================================*/
/* Index: IX_XDATA_HASHCODE                                     */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EXCEPTIONNODE]') AND name = N'IX_XDATA_HASHCODE'
)
BEGIN
	create index IX_XDATA_HASHCODE on APM.EXCEPTIONNODE (
		HASHCODE ASC
	)
END
GO
/*==============================================================*/
/* Index: FK_EXCEPTIONNODERESOURCEID                            */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EXCEPTIONNODE]') AND name = N'FK_EXCEPTIONNODERESOURCEID'
)
BEGIN
	create index FK_EXCEPTIONNODERESOURCEID on APM.EXCEPTIONNODE (
	RESOURCEID ASC
	)
END
GO
/*==============================================================*/
/* Index: FK_EXCEPTIONNODEEVENTID                               */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EXCEPTIONNODE]') AND name = N'FK_EXCEPTIONNODEEVENTID'
)
BEGIN
	create index FK_EXCEPTIONNODEEVENTID on APM.EXCEPTIONNODE (
		EVENTID ASC
	)
END
GO
/*==============================================================*/
/* Index: FK_EXCEPTIONNODEEVENTIDRESOURCEID                     */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[EXCEPTIONNODE]') AND name = N'FK_EXCEPTIONNODEEVENTIDRESOURCEID'
)
BEGIN
	create index FK_EXCEPTIONNODEEVENTIDRESOURCEID on APM.EXCEPTIONNODE (
	EVENTID ASC,
	RESOURCEID ASC
	)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'EXCEPTIONNODE'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: IP                                                    */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.IP'), 'IsTable') IS NULL)
BEGIN
	 CREATE TABLE APM.IP (
	   IPID                 int                  identity,
	   IP                   nvarchar(50)         not null,
	   SUBNETC              nvarchar(50)         not null,
	   constraint PK_IP primary key (IPID)
	)
END	
GO
IF NOT EXISTS
(
	SELECT * FROM INFORMATION_SCHEMA.table_constraints WHERE TABLE_NAME = N'IP' AND TABLE_SCHEMA = N'apm' AND CONSTRAINT_NAME=N'uniq_ip'
)
BEGIN
	ALTER TABLE APM.ip ADD CONSTRAINT uniq_ip UNIQUE (ip)
END	
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[IP]') AND name = N'idx_IP'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_IP] ON [APM].[IP] 
	(
		[IPID] ASC
	)
	INCLUDE ([SUBNETC]) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[IP]') AND name = N'idx_IPSubnetC'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_IPSubnetC] ON [APM].[IP] 
	(
		[IPID] ASC,
		[SUBNETC] ASC
	)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'IP'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: MACHINE                                               */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.MACHINE'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.MACHINE (
	   MACHINEID            int                  identity,
	   MACHINE              nvarchar(255)        NOT NULL,
	   WINDOWSVERSION       nvarchar(50)         NULL,
	   AGENTVERSION         nvarchar(50)         NULL,
	   CPUCOUNT             int                  NULL,
	   CONSTRAINT PK_MACHINE primary key (MACHINEID),
	   CONSTRAINT UC_MACHINE_MACHINE UNIQUE (MACHINE)
	)
END	
GO
/*==============================================================*/
/* Index: IX_MACHINE                                            */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[MACHINE]') AND name = N'IX_MACHINE'
)
BEGIN
	create unique index IX_MACHINE on APM.MACHINE (
		MACHINE ASC
	)
END
GO
/*==============================================================*/
/* Table: MEMBER                                                */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.MEMBER'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.MEMBER (
	   MEMBERID             int                  not null,
	   LOGINNAME            nvarchar(50)         not null,
	   MEMBERPASSWORD       nvarchar(255)        null,
	   FIRSTNAME            nvarchar(50)         null,
	   LASTNAME             nvarchar(50)         null,
	   EMAIL                nvarchar(255)        null,
	   USERDATA             ntext                null,
	   USERTYPE             char(1)              null,
	   constraint PK_MEMBER primary key nonclustered (MEMBERID)
	)
END
GO
/*==============================================================*/
/* Index: IX_LOGINNAME                                          */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[MEMBER]') AND name = N'IX_LOGINNAME'
)
BEGIN
	create unique index IX_LOGINNAME on APM.MEMBER (
		LOGINNAME ASC
	)
END
GO
/*==============================================================*/
/* Table: MEMBERAPPLICATION                                     */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.MEMBERAPPLICATION'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.MEMBERAPPLICATION (
	   MEMBERAPPLICATIONID  int                  not null,
	   APPLICATIONID        int                  null,
	   MEMBERID             int                  null,
	   constraint PK_MEMBERAPPLICATION primary key nonclustered (MEMBERAPPLICATIONID)
	)
END
GO
/*==============================================================*/
/* Index: FK_FK_APPLICATION                                     */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[MEMBERAPPLICATION]') AND name = N'FK_FK_APPLICATION'
)
BEGIN
	create index FK_FK_APPLICATION on APM.MEMBERAPPLICATION (
		APPLICATIONID ASC
	)
END
GO
/*==============================================================*/
/* Index: FK_FK_USER                                            */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[MEMBERAPPLICATION]') AND name = N'FK_FK_USER'
)
BEGIN
	create index FK_FK_USER on APM.MEMBERAPPLICATION (
		MEMBERID ASC
	)
END
GO
/*==============================================================*/
/* Table: MESSAGES                                              */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.MESSAGES'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.MESSAGES (
	   ID                   int                  not null,
	   MESSAGE              nvarchar(max)        not null,
	   constraint PK_MESSAGES primary key (ID)
	)
	insert APM.messages values(50002, N'stored procedure %s: sp_xml_preparedocument has returned error code %d ')
	insert APM.messages values(50004, N'There was an error %d. Severity level: %d  Error state: %d Procedure: %s Line: %d Message: %s ')
	INSERT APM.MESSAGES VALUES(50006, N'stored procedure %s: Event with RowGuid %s was not found.')
	INSERT APM.MESSAGES VALUES(50007, N'FillGroups: document is empty.')
	INSERT APM.MESSAGES VALUES(50008, N'FillGroups: Inserted %d resource group.')
	INSERT APM.MESSAGES VALUES(50010, N'FillGroups: Inserted %d resource group node.')
	INSERT APM.MESSAGES VALUES(50011, N'FILLINTERNALRESOURCES: performance events exist without performance nodes.')
	INSERT APM.MESSAGES VALUES(50012, N'FILLINTERNALRESOURCES: exception events exist without exception nodes.')
	INSERT APM.MESSAGES VALUES(50013, N'FILLRESOURCES: #DETAILS is empty.')
	INSERT APM.MESSAGES VALUES(50014, N'FILLRESOURCES: INSERTED INTO RESOURCE %d record(s).')
	INSERT APM.MESSAGES VALUES(50015, N'FILLRESOURCES: heaviest nodes exist.')
	INSERT APM.MESSAGES VALUES(50016, N'FILLRESOURCES: Performance node is missing for the heaviest resource.')
	INSERT APM.MESSAGES VALUES(50017, N'FILLRESOURCES: Created %d performancenode record(s) for missing heaviest nodes.')
	INSERT APM.MESSAGES VALUES(50018, N'FILLRESOURCES: Updated %d performancenode record(s) for resources that contain references to the resource group node.')
	INSERT APM.MESSAGES VALUES(50019, N'FILLRESOURCES: Updated %d performancenode record(s) for resources that do not contains references to the resource group node.')
	INSERT APM.MESSAGES VALUES(50020, N'FILLRESOURCES: Updated %d event record(s). Save references to the top heaviest resource.')
	INSERT APM.MESSAGES VALUES(50021, N'FILLRESOURCES: Updated %d exceptionnode record(s). Save references to the exception method.')
	INSERT APM.MESSAGES VALUES(50022, N'FILLRESOURCES: Updated %d event record(s). Save references to the exception method.')
	INSERT APM.MESSAGES VALUES(50023, N'GROOMINGWORKTABLES: Deleted %d record(s) from %s table.')
	INSERT APM.MESSAGES VALUES(50024, N'CLIENTEVENT_SYNC: Inserted %d record(s) into %s table.')
	INSERT APM.MESSAGES VALUES(50025, N'CLIENTEVENT_SYNC: performance events exist.')
	INSERT APM.MESSAGES VALUES(50026, N'CLIENTEVENT_SYNC: AJAX events exist.')
	INSERT APM.MESSAGES VALUES(50027, N'FILLINTERNALRESOURCES: Resource group nodes were not found.')
	INSERT APM.MESSAGES VALUES(50028, N'FILLINTERNALRESOURCES: Processed %d record(s). Inserted %d record(s) into the performance node table.')
	INSERT APM.MESSAGES VALUES(50029, N'FILLINTERNALRESOURCES: Inserted %d record(s) into the exception node table.')
	INSERT APM.MESSAGES VALUES(50030, N'stored procedure %s: Event with RowGuid %s was not found.')
	INSERT APM.MESSAGES VALUES(50031, N'FILLRESOURCEGROUPNODES: Resource group node is missing.')
	INSERT APM.MESSAGES VALUES(50032, N'%s: Inserted %d record(s) into %s table.')
	INSERT APM.MESSAGES VALUES(50033, N'GroomingWorkTables: package size %d, period(days) %d, reporting grooming date %s.') 
	INSERT APM.MESSAGES VALUES(50034, N'GROOMINGWORKTABLES: pmstatus - %d  lifetime - %d (hours) last keep date - %s.')
	INSERT APM.MESSAGES VALUES(50035, N'FILLINTERNALRESOURCES: rowguid(s) "%s" or "%s" have not been found.')
END
GO
/*==============================================================*/
/* Table: OPERATION                                             */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.OPERATION'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.OPERATION (
	   OPERATIONID          int                  not null,
	   OPERATIONNAME        nvarchar(50)         not null,
	   REPEATCOUNTONFAILED  int                  not null,
	   constraint PK_OPERATION primary key (OPERATIONID)
	)
	
	insert into APM.operation values(1, 'extraction', 0)
	insert into APM.operation values(2, 'transform', 0)
	insert into APM.operation values(3, 'insert', 0)
	insert into APM.operation values(4, 'update', 0)
	insert into APM.operation values(5, 'aggregate', 0)
	insert into APM.operation values(6, 'grooming', 0)
	insert into APM.operation values(7, 'constraints', 0)
	insert into APM.operation values(8, 'resource', 0)	
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[OPERATION]') AND name = N'OperationName_IX'
)
BEGIN
	CREATE UNIQUE INDEX OperationName_IX ON APM.OPERATION (OperationName)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'OPERATION'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: PCDESCRIPTION                                         */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.PCDESCRIPTION'), 'IsTable') IS NULL)
BEGIN
	 CREATE TABLE APM.PCDESCRIPTION (
	   PCDESCRIPTIONID      int                  identity,
	   NAME                 nvarchar(255)        not null,
	   DESCRIPTION          ntext                null,
	   constraint PK_PCDESCRIPTION primary key (PCDESCRIPTIONID)
	)
END
GO
/*==============================================================*/
/* Index: IX_NAME                                               */
/*==============================================================*/
IF NOT EXISTS
(
	SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PCDESCRIPTION]') AND name = N'IX_NAME'
)
BEGIN
	create unique index IX_NAME on APM.PCDESCRIPTION (
	NAME ASC
	)
END
GO
/*==============================================================*/
/* Table: PCPROCESS                                             */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.PCPROCESS'), 'IsTable') IS NULL)
  BEGIN
	CREATE TABLE APM.PCPROCESS (
	   PCPROCESSID          int                  identity,
	   PROCESS              nvarchar(255)        NULL,
	   EXTRATYPE            int                  NULL,
	   EXTRAINFO            nvarchar(255)        NULL,
	   HASHVALUE            nvarchar(50)         NULL,
	   CONSTRAINT PK_PCPROCESS primary key (PCPROCESSID),
	   CONSTRAINT UC_PCPROCESS_HASHVALUE UNIQUE (HASHVALUE)
	)
  END
GO
------------------------------ Transfer indexes -------------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[pcprocess]') AND name = N'idx_T_hashvalue'
)
BEGIN
	CREATE index idx_T_hashvalue on APM.pcprocess(hashvalue) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PCPROCESS]') AND name = N'idx_PCProcessId'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_PCProcessId] ON [APM].[PCPROCESS] 
	(
		[PCPROCESSID]
	)
	INCLUDE
	(
		[EXTRAINFO],
		[PROCESS]
	) 
	WITH (SORT_IN_TEMPDB = OFF)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'PCPROCESS'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: PCTYPE                                                */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.PCTYPE'), 'IsTable') IS NULL)
BEGIN
	 CREATE TABLE APM.PCTYPE (
	   PCTYPEID             int                  identity,
	   TYPE                 nvarchar(255)        NOT NULL,
	   MEASURE              nvarchar(50)         NULL,
	   INSTANCEFUNCTION     nvarchar(50)         NULL,
	   DATEFUNCTION         nvarchar(50)         NULL,
	   CONSTRAINT PK_PCTYPE primary key (PCTYPEID),
	   CONSTRAINT UC_PCTYPE_TYPE UNIQUE (TYPE)
	)
END	
GO
/*==============================================================*/
/* Index: IX_TYPE                                               */
/*==============================================================*/
IF NOT EXISTS
(
	SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PCTYPE]') AND name = N'IX_TYPE'
)
BEGIN
	create unique index IX_TYPE on APM.PCTYPE (
		TYPE ASC
	)
END	
GO
/*==============================================================*/
/* Table: PERFDAILY                                             */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.PERFDAILY'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.PERFDAILY (
	   PERFDAILYID          bigint               identity,
	   PCTYPEID             int                  not null,
	   MACHINEID            int                  not null,
	   SOURCEID             int                  null,
	   PCPROCESSID          int                  null,
	   IS_STATE             int                  null,
	   UTCDATE              datetime             not null,
	   SUMVALUE             decimal(18,4)        not null,
	   AVERAGEVALUE         decimal(18,4)        not null,
	   SAMPLECOUNT          int                  not null,
	   MINVALUE             decimal(18,4)        not null,
	   MAXVALUE             decimal(18,4)        not null,
	   PACKAGECOUNTER       int                  not null
	)
END
GO
/*==============================================================*/
/* Index: IX_CDATE                                              */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PerfDaily]') AND name = N'IX_CDATE'
)
BEGIN
	CREATE CLUSTERED INDEX IX_CDATE ON APM.PerfDaily
	(
		UTCDATE ASC
	) 
END
GO
IF NOT EXISTS
(
	SELECT * FROM INFORMATION_SCHEMA.table_constraints WHERE TABLE_NAME = N'PERFDAILY' AND TABLE_SCHEMA = N'apm' AND CONSTRAINT_NAME=N'PK_PERFDAILY'
)        
BEGIN
	ALTER TABLE APM.PERFDAILY  ADD CONSTRAINT PK_PERFDAILY PRIMARY KEY (PERFDAILYID)
END    
GO
/*==============================================================*/
/* Index: FK_PERFDAILYMACHINEID                                 */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFDAILY]') AND name = N'FK_PERFDAILYMACHINEID'
)
BEGIN
	create index FK_PERFDAILYMACHINEID on APM.PERFDAILY (
	MACHINEID ASC
	)
END
GO
/*==============================================================*/
/* Index: FK_PERFDAILYSOURCEID                                  */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFDAILY]') AND name = N'FK_PERFDAILYSOURCEID'
)
BEGIN
	create index FK_PERFDAILYSOURCEID on APM.PERFDAILY (
	SOURCEID ASC
	)
END
GO
/*==============================================================*/
/* Index: FK_PERFDAILYPROCESSID                                 */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFDAILY]') AND name = N'FK_PERFDAILYPROCESSID'
)
BEGIN
	create index FK_PERFDAILYPROCESSID on APM.PERFDAILY (
		PCPROCESSID ASC
	)
END
GO
/*==============================================================*/
/* Index: FK_PERFDAILYTYPEID                                    */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFDAILY]') AND name = N'FK_PERFDAILYTYPEID'
)
BEGIN
	create index FK_PERFDAILYTYPEID on APM.PERFDAILY (
	PCTYPEID ASC
	)
END
GO
EXEC DomainTableRegisterIndexOptimization
       @TableName = 'PERFDAILY'
      ,@SchemaName = 'APM'
      ,@DatasetId = '$Config/DatasetId$'
GO
/*==============================================================*/
/* Table: PERFHOURLY                                            */
/*==============================================================*/
IF (OBJECTPROPERTY(OBJECT_ID('APM.PERFHOURLY'), 'IsTable') IS NULL)
BEGIN
	CREATE TABLE APM.PERFHOURLY (
	   PERFHOURLYID         bigint               identity,
	   PCTYPEID             int                  not null,
	   MACHINEID            int                  not null,
	   SOURCEID             int                  null,
	   PCPROCESSID          int                  null,
	   IS_STATE             int                  null,
	   UTCDATE              datetime             not null,
	   AVERAGEVALUE         float(53)            not null,
	   MINVALUE             float(53)            not null,
	   MAXVALUE             float(53)            not null,
	   SAMPLECOUNT          bigint               not null,
	   SUMVALUE             float(53)            not null,
	   PACKAGECOUNTER       bigint               not null,
	   HASHVALUE            nvarchar(50)         null
	)
END	
GO
/*==============================================================*/
/* Index: IX_CDATE                                              */
/*==============================================================*/
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFHOURLY]') AND name = N'IX_CDATE'
)
BEGIN
	CREATE CLUSTERED INDEX IX_CDATE ON APM.PERFHOURLY
	(
		UTCDATE ASC
	) 
END
GO
IF NOT EXISTS
(
	SELECT * FROM INFORMATION_SCHEMA.table_constraints WHERE TABLE_NAME = N'PERFHOURLY' AND TABLE_SCHEMA = N'apm' AND CONSTRAINT_NAME=N'PK_PERFHOURLY'
)        
BEGIN
	ALTER TABLE APM.PERFHOURLY  ADD CONSTRAINT PK_PERFHOURLY PRIMARY KEY (PERFHOURLYID) 
END    
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFHOURLY]') AND name = N'IX_AGGREGATE'
)
BEGIN
	CREATE NONCLUSTERED INDEX IX_AGGREGATE ON APM.PERFHOURLY 
	(
		[PCTYPEID] ASC,
		[MACHINEID] ASC,
		[SOURCEID] ASC,
		[PCPROCESSID] ASC,
		[IS_STATE] ASC,
		[UTCDATE] ASC,
		[SUMVALUE] ASC
	)
END
GO
--------------------- Summary Performance &amp; Summary Failure &amp; Problem Distribution ----------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFHOURLY]') AND name = N'idx_TypeSourceMachineDate'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_TypeSourceMachineDate] ON [APM].[PERFHOURLY] 
	(
		  [PCTYPEID] ASC,
		  [SOURCEID] ASC,
		  [MACHINEID] ASC,
		  [UTCDATE] ASC
	)
	INCLUDE ([SUMVALUE], [MAXVALUE], [SAMPLECOUNT], [PACKAGECOUNTER], [PCPROCESSID]) 
	WITH (SORT_IN_TEMPDB = ON) 
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFHOURLY]') AND name = N'idx_DateTypeSourceMachine'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_DateTypeSourceMachine] ON [APM].[PERFHOURLY] 
	(
		  [UTCDATE] ASC,
		  [PCTYPEID] ASC,
		  [SOURCEID] ASC,
		  [MACHINEID] ASC
	)
	INCLUDE ([SUMVALUE], [MAXVALUE], [SAMPLECOUNT], [PACKAGECOUNTER], [PCPROCESSID]) 
	WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFHOURLY]') AND name = N'idx_MachineSourceDateType'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_MachineSourceDateType] ON [APM].[PERFHOURLY] 
	(
		[MACHINEID] ASC,
		[SOURCEID] ASC,
		[UTCDATE] ASC,
		[PCTYPEID] ASC
	)
	INCLUDE ( [SAMPLECOUNT],
	[SUMVALUE],
	[MAXVALUE],
	[PACKAGECOUNTER], 
	[PCPROCESSID]) WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFHOURLY]') AND name = N'idx_SourceMachineDateType'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_SourceMachineDateType] ON [APM].[PERFHOURLY] 
	(
		[SOURCEID] ASC,
		[MACHINEID] ASC,
		[UTCDATE] ASC,
		[PCTYPEID] ASC
	)
	INCLUDE ( [SAMPLECOUNT],
	[SUMVALUE],
	[MAXVALUE],
	[PACKAGECOUNTER],
	[PCPROCESSID]) 
	WITH (SORT_IN_TEMPDB = ON) 
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFHOURLY]') AND name = N'idx_TypeDateSourceMachine'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_TypeDateSourceMachine] ON [APM].[PERFHOURLY] 
	(
		[PCTYPEID] ASC,
		[UTCDATE] ASC,
		[SOURCEID] ASC,
		[MACHINEID] ASC
	)
	INCLUDE ( [SAMPLECOUNT],
	[SUMVALUE],
	[MAXVALUE],
	[PACKAGECOUNTER], 
	[PCPROCESSID]) 
	WITH (SORT_IN_TEMPDB = ON)
END
GO
--------------------- Application Status -------------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFHOURLY]') AND name = N'idx_SourceId'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_SourceId] ON [APM].[PERFHOURLY] 
	(
		[SOURCEID] ASC
	)
	INCLUDE ([PCPROCESSID]) 
	WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFHOURLY]') AND name = N'idx_ProcessId'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_ProcessId] ON [APM].[PERFHOURLY] 
	(
		[PCPROCESSID]ASC
	)
	INCLUDE ([SOURCEID]) 
	WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFHOURLY]') AND name = N'idx_SourceProcessMachine'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_SourceProcessMachine] ON [APM].[PERFHOURLY] 
	(
		[SOURCEID] ASC,
		[PCPROCESSID] ASC,
		[MACHINEID] ASC
	)
	WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFHOURLY]') AND name = N'idx_ProcessSourceMachine'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_ProcessSourceMachine] ON [APM].[PERFHOURLY] 
	(
		[PCPROCESSID] ASC,
		[SOURCEID] ASC,
		[MACHINEID] ASC
	)
	WITH (SORT_IN_TEMPDB = ON)
END
GO
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFHOURLY]') AND name = N'idx_MachineProcessSource'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_MachineProcessSource] ON [APM].[PERFHOURLY] 
	(
		[MACHINEID] ASC,
		[PCPROCESSID] ASC,
		[SOURCEID] ASC
	)
	WITH (SORT_IN_TEMPDB = ON)
END
GO
--------------------- Transfer indexes -----------------------------
IF NOT EXISTS 
(
    SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[apm].[PERFHOURLY]') AND name = N'idx_T_hashvalue'
)
BEGIN
	CREATE NONCLUSTERED INDEX [idx_T_hashvalue] ON [APM].[PERFHOURLY] 
	(
		[HASHVALUE] ASC
	)
	INCLUDE ( 
	[MINVALUE],
	[MAXVALUE],
	[SAMPLECOUNT],
	[SUMVALUE],
	[PACKAGECOUNTER]) 
