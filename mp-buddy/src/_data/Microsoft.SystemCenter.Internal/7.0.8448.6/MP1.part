<ManagementPack xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.0"><Manifest><Identity><ID>Microsoft.SystemCenter.Internal</ID><Version>7.0.8448.6</Version></Identity><Name>Microsoft System Center Internal MP</Name><References><Reference Alias="SCLibrary"><ID>Microsoft.SystemCenter.Library</ID><Version>7.0.8443.6</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="Windows"><ID>Microsoft.Windows.Library</ID><Version>7.5.8500.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="Health"><ID>System.Health.Library</ID><Version>7.0.8443.6</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference Alias="System"><ID>System.Library</ID><Version>7.5.8500.0</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference><Reference
Alias="Performance"><ID>System.Performance.Library</ID><Version>7.0.8443.6</Version><PublicKeyToken>31bf3856ad364e35</PublicKeyToken></Reference></References></Manifest><TypeDefinitions><DataTypes><DataType ID="Microsoft.SystemCenter.OperationsManager.Availability.ContainerData" Accessibility="Public" Base="System!System.BaseData"><Implementation><Assembly>Res.Microsoft.SystemCenter.OperationsManager.Availability.ContainerData</Assembly><Type>NotImplemented</Type></Implementation></DataType><DataType ID="Microsoft.SystemCenter.OperationsManager.RoutingData" Accessibility="Public" Base="System!System.BaseData"><Implementation><Assembly>Res.Microsoft.SystemCenter.OperationsManager.RoutingData</Assembly><Type>NotImplemented</Type></Implementation></DataType></DataTypes><SecureReferences><SecureReference ID="Microsoft.SystemCenter.ActionAccount" Comment="Used internally by MOM SDK" Accessibility="Internal" Context="System!System.Entity" /><SecureReference
ID="Microsoft.SystemCenter.MPUpdateActionAccount" Comment="Used by MPUpdate feature" Accessibility="Internal" Context="System!System.Entity" /></SecureReferences><ModuleTypes><DataSourceModuleType ID="Microsoft.SystemCenter.ADIntegrationRelationshipDiscovery" Accessibility="Internal" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DataSource"
TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><SyncTime /><ScriptName>DiscoverHealthServiceCommunicationRelationships.ps1</ScriptName><ScriptBody>
                  param($SourceType, $SourceId, $ManagedEntityId, $ComputerIdentity, $ManagementGroupName)
                 
                  function SafeRegRead($registryPath, $regkeyName)
                  {
                  try
                  {
                  if($regkeyName -eq "" -or $regkeyName -eq $null)
                  {
                    return $oReg = Get-ItemProperty $registryPath -ErrorAction stop;
                  }else{
                    return $oReg = Get-ItemProperty $registryPath | select $regkeyName -ErrorAction stop;
                  }
                  }
                  catch
                  {
                  switch ($Error[0].Exception.GetType().FullName)
                  {
                  # HRESULT 0x80070002: ERROR_FILE_NOT_FOUND - Severity: FAILURE (1), FACILITY_WIN32 (0x7), Code 0x2
                  # If UseActiveDirectory RegValue DOES NOT EXIST the agent for this Management Group IS AD Integrated
                  'System.Management.Automation.ItemNotFoundException' {
                  CheckADRegKeyType($registryPath);
                  break;
                  }
                  default {
                  Write ("\nSourceType:         " + $SourceType);
                  PrintError($Error);
                  }
                  }
                  }
                  }
                  function CheckADRegKeyType($registryPath)
                  {
                  Write-Host("\nRegistry Path:        " + $registryPath);
                  $regExCriteria = '(Primary|Secondary) SCP Info\s{0,1}\d*';
                  Write-Host ("Registry Criteria:    " + $regExCriteria);
                  $matchResults = $registryPath -imatch $regExCriteria;
                  Write-Host ("RegEx Results:        " + $matchResults);
                  if ($matchResults -ne $null)
                  {
                  switch ($matchResults)
                  {
                  "Primary SCP Info" {
                  $ENU_MESSAGE = $ENU_MESSAGE_BASE;
                  $ENU_MESSAGE += "Could not find " + "\" + $registryPath + "\" + "\n";
                  $ENU_MESSAGE += "The HealthService needs at least a primary management server to communicate.\n";
                  $ENU_MESSAGE += "This may indicate that the following:\n";
                  $ENU_MESSAGE += "\t* HealthService has not queried and cached the AD SCPs yet\n";
                  $ENU_MESSAGE += "\t* HealthService doesn't have access to any SCPs, yet is configured for AD Integration\n";
                  $ENU_MESSAGE += "Match results: " + $matchResults[1];
                  $oAPI.LogScriptEvent($SCRIPT_NAME, 6028, $EVENTLOG_WARNING_TYPE, $ENU_MESSAGE);
                  Exit 1;
                  break;
                  }
                  "Secondary SCP Info " {
                  Write ("\nCould not find \ $matchResults[1] \ Service DNS Name\ under \ $SecondarySCPInfoRootRegKey \");
                  Write ("\nThis is not a fatal error as the HealthService may not have any failovers.");
                  Write ("\nMatch results: " + $matchResults[1]);
                  break;
                  }
                  default {
                  throw("Unknown RegKey Type");
                  }
                  }
                  }
                  }
                  function PrintError($error)
                  {
                  Write ("============================= BEGIN ERROR =================================\n");
                  Write ("Error Type        : " + $error);
                  Write ("Error Number      : " + $Error[0].Exception.GetType().FullName);
                  #Write ("Error Code        : " + ($error.Count -band 0xFFFF));
                  #Write ("Win32 Facility    : " + ($error.number -shr 16 -band 0x1FFF));
                  Write ("Error Source      : " + $error.Source);
                  Write ("Error Description : " + $error.description);
                  Write ("============================== END ERROR ==================================\n");
                  }
                  
                  Write ("`nSourceType:         " + $SourceType);
                  Write ("SourceId              " + $SourceId);
                  Write ("ManagedEntityId:      " + $ManagedEntityId);
                  Write ("ComputerIdentity:     " + $ComputerIdentity);
                  Write ("ManagementGroupName:  " + $ManagementGroupName);
                  $oAPI = new-object -comobject "MOM.ScriptAPI"
                  $SCRIPT_NAME         = "DiscoverHealthServiceCommunicationRelationships.ps1";
                  $ENU_MESSAGE_BASE    = "HealthServiceCommuncation relationship discovery for HealthServices configured via AD Integration\n\r";
                  $MAX_FAILOVERS       = 10;
                  $EVENTLOG_SUCCESS                = 0x0000;     #  Information event    */
                  $EVENTLOG_AUDIT_FAILURE          = 0x0010;     #  Failure Audit event  */
                  $EVENTLOG_AUDIT_SUCCESS          = 0x0008;     #  Success Audit event  */
                  $EVENTLOG_ERROR_TYPE             = 0x0001;     #  Error event          */
                  $EVENTLOG_INFORMATION_TYPE       = 0x0004;     #  Information event    */
                  $EVENTLOG_WARNING_TYPE           = 0x0002;     #  Warning event        */
                  # Checking for the EnableADIntegration and UseActiveDirectory keys are also done in the DiscoverAgentRelationships.ps1 discovery
                  # That script actually updates the HealthService.ActiveDirectoryManaged property as well as submits discovery data for
                  # the AgentRelationshipSettings object. These checks are duplicated here just for error checking in case the RegKeys were
                  # manually removed and we have not run discovery yet.
				  $MOMCONNECTOR_CLSID              = "{534E71F9-7970-42D6-921F-59CFB873855F}";    # MomConnecotr CLSID */
                  $EnableADIntegrationRegValue     = "HKLM:\SYSTEM\CurrentControlSet\Services\HealthService\Parameters\ConnectorManager";
                  $UseActiveDirectoryRegValue      = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Agent Management Groups\" + $ManagementGroupName;
                  $PrimarySCPInfoRegValue          = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Agent Management Groups\" + $ManagementGroupName + "\AD Cache\Primary SCP Info";
                  $SecondarySCPInfoRootRegKey      = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Agent Management Groups\" + $ManagementGroupName + "\AD Cache\Secondary SCP Info Root\";
				          $ConnectorCLSIDRegValue          = "HKLM:\SYSTEM\CurrentControlSet\services\HealthService\Parameters\Management Groups\" + $ManagementGroupName
                  $ADCacheDirectory               = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Agent Management Groups\" + $ManagementGroupName + "\AD Cache\"
          
				   try
					{
						$ConnectorCLSID = Get-ItemProperty $ConnectorCLSIDRegValue -ErrorAction stop
						$ConnectorCLSID = $ConnectorCLSID.'Connector CLSID'
					}
					catch 
					{
					switch ($Error[0].Exception.GetType().FullName)
					{
							# HRESULT 0x80070002: ERROR_FILE_NOT_FOUND - Severity: FAILURE (1), FACILITY_WIN32 (0x7), Code 0x2
							# If ConnectorCLSID RegValue DOES NOT EXIST, the agent for this Management Group IS NOT AD Integrated
							'System.Management.Automation.ItemNotFoundException' {
									$ConnectorCLSID = "";
									break;
							}
							default {
									PrintError($Error);
									throw($Error);
							}
						}
					}
					if ($ConnectorCLSID -ne $MOMCONNECTOR_CLSID)
					{
						$oDiscovery = $oAPI.CreateDiscoveryData($SourceType, $SourceId, $ManagedEntityId);
						$oDiscovery.IsSnapshot = $false;
						return $oDiscovery
					}
                  $EnableADIntegration = SafeRegRead $EnableADIntegrationRegValue "EnableADIntegration"
                  $EnableADIntegration = $EnableADIntegration.EnableADIntegration    
                  Try
                  {
                    $UseActiveDirectory = Get-ItemProperty $UseActiveDirectoryRegValue -ErrorAction stop;
                    $UseActiveDirectory = $UseActiveDirectory."UseActiveDirectory" 
                    if($UseActiveDirectory -eq $null)
                    {
                      $UseActiveDirectory = Test-Path $ADCacheDirectory
                    }
                  }
                  Catch
                  {
                  switch ($Error[0].Exception.GetType().FullName)
                  {
                  # HRESULT 0x80070002: ERROR_FILE_NOT_FOUND - Severity: FAILURE (1), FACILITY_WIN32 (0x7), Code 0x2
                  # If UseActiveDirectory RegValue DOES NOT EXIST the agent for this Management Group IS AD Integrated
                  'System.Management.Automation.ItemNotFoundException' {
                  $UseActiveDirectory = "TRUE";
                  break;
                  }
                  default {
                  Write ("\nSourceType:         " + $SourceType);
                  PrintError($Error);
                  throw($Error);
                  }
                  }
                  }
                  Write ("`nEnableADIntegration value:  " + $EnableADIntegration);
                  Write ("UseActiveDirectory value:     " + $UseActiveDirectory);
                  if ((-not $EnableADIntegration) -or (-not $UseActiveDirectory))
                  {
                      $oDiscovery = $oAPI.CreateDiscoveryData($SourceType, $SourceId, $ManagedEntityId);
                      $oDiscovery.IsSnapshot = $false;
                      return $oDiscovery
                  }
                  if (($EnableADIntegration) -and ($UseActiveDirectory))
                  {
                    $PrimarySCPInfo = SafeRegRead $PrimarySCPInfoRegValue "Service DNS Name"
                    $PrimarySCPInfo = $PrimarySCPInfo."Service DNS Name"
                    Write ("\nPrimary SCP Info value:     " + $PrimarySCPInfo);
                  }
                  if (($EnableADIntegration) -and ($UseActiveDirectory))
                  {
                  # There can be many Secondary SCP Info reg keys. For RC1, just going to do 10
                  # In RC2 may change this to WMI StdRegProv so we can enumerate through the Secondary SCP Info Root key
                  # WshShell.RegRead() doesn't return objects.
                  $SecondarySCPInfoPrefix  = "Secondary SCP Info ";
                  $SecondarySCPInfoRegKeys = new-object string[] ($MAX_FAILOVERS -1);
                  for ($i = 0; $i -lt $MAX_FAILOVERS; $i++)
                  {
                  if ($PrimarySCPInfo -ne $null)
                  {
                  $regPath = $SecondarySCPInfoRootRegKey + $SecondarySCPInfoPrefix + ($i+1).toString();
                  $regValue = SafeRegRead $regPath "Service DNS Name"
                  $regValue = $regValue."Service DNS Name"
                  if ($regValue -ne $null)
                  {
                  # Verify Topology
                  # -- Bad Topo #1: 2 Primary relationships.
                  #                  This one can't happen since I only read one specific RegValue and create only 1 relationship instance
                  #                  Note that if there are ever any 2 Secondary TARGETs pointing to the same server, its already handled on the server side
                  # -- Bad Topo #2: Both Primary and Secondary TARGETs point to same DNS Name
                  if ($PrimarySCPInfo.toString().ToLower() -eq $regValue.toString().ToLower())
                  {
                  $ENU_MESSAGE = $ENU_MESSAGE_BASE
                  $ENU_MESSAGE += "Invalid topology detected.\n";
                  $ENU_MESSAGE += "\tRelationship Source (Agent)    : " + $ComputerIdentity + "\n";
                  $ENU_MESSAGE += "\tRelationship Target (Primary SCP Info)  : " + $PrimarySCPInfo.toString() + "\n";
                  $ENU_MESSAGE += "\tRelationship Target (Secondary SCP Info): " + $regValue.toString() + "\n\n";
                  $ENU_MESSAGE += "Ignoring cached Secondary SCP Info from: " + $regPath + "\n";
                  $oAPI.LogScriptEvent($SCRIPT_NAME, 6029, $EVENTLOG_WARNING_TYPE, $ENU_MESSAGE);
                  Write ($PrimarySCPInfo.toString().ToLower());
                  Write ($regValue.toString().ToLower());
                  Write ($ENU_MESSAGE);
                  }
                  else
                  {
                  $SecondarySCPInfoRegKeys[$i] = $regValue;
                  }
                  }                 
                  }
                  }
                  $SecondarySCPInfoRegKeys = $SecondarySCPInfoRegKeys | Sort-Object
                  }
                  if (($PrimarySCPInfo -ne $null) -or ($SecondarySCPInfoRegKeys -ne $null))
                  {
                  $oDiscovery = $oAPI.CreateDiscoveryData($SourceType, $SourceId, $ManagedEntityId);
                  # Discovery data for Primary communication - Microsoft.SystemCenter.HealthServiceCommunication
                  # Source of HealthServiceCommunication relationship
                  $oHSCommunicationSource = $oDiscovery.CreateClassInstance("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.HealthService']$");
                  $oHSCommunicationSource.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $ComputerIdentity);
                  # Target of HealthServiceCommunication relationship
                  $oHSCommunicationTarget = $oDiscovery.CreateClassInstance("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.HealthService']$");
                  $oHSCommunicationTarget.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $PrimarySCPInfo.toString());
                  $oHealthServiceCommunication = $oDiscovery.CreateRelationshipInstance("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.HealthServiceCommunication']$");
                  $oHealthServiceCommunication.Source = $oHSCommunicationSource;
                  $oHealthServiceCommunication.Target = $oHSCommunicationTarget;
                  $oDiscovery.AddInstance($oHealthServiceCommunication);
                  # Discovery data for Secondary failover communcation instances - Microsoft.SystemCenter.HealthServiceSecondaryCommunication
                  # Can be null since there may be no failovers configured at all
                  if ($SecondarySCPInfoRootRegKey -ne $null)
                  {
                  # Source of HealthServiceSecondaryCommunication relationship
                  $oHSSecondaryCommunicationSource = $oDiscovery.CreateClassInstance("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.HealthService']$");
                  $oHSSecondaryCommunicationSource.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $ComputerIdentity);
                  # Target of HealthServiceSecondaryCommunication relationship
                  $oHSSecondaryCommunicationTarget;
                  foreach ($key in $SecondarySCPInfoRegKeys)
                  {
                  if ($key -ne $null)
                  {
                  $oHSSecondaryCommunicationTarget = $oDiscovery.CreateClassInstance("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.HealthService']$");
                  $oHSSecondaryCommunicationTarget.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $key.toString());
                  $oHealthServiceSecondaryCommunication = $oDiscovery.CreateRelationshipInstance("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.HealthServiceSecondaryCommunication']$");
                  $oHealthServiceSecondaryCommunication.Source = $oHSSecondaryCommunicationSource;
                  $oHealthServiceSecondaryCommunication.Target = $oHSSecondaryCommunicationTarget;
                  $oDiscovery.AddInstance($oHealthServiceSecondaryCommunication);
                  }
                  }
                  }
                    return $oDiscovery
                  }
                                </ScriptBody><Parameters><Parameter><Name>SourceType</Name><Value>0</Value></Parameter><Parameter><Name>SourceId</Name><Value>$MPElement$</Value></Parameter><Parameter><Name>ManagedEntityId</Name><Value>$Target/Id$</Value></Parameter><Parameter><Name>ComputerIdentity</Name><Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value></Parameter><Parameter><Name>ManagementGroupName</Name><Value>$Target/ManagementGroup/Name$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></DataSource></MemberModules><Composition><Node ID="DataSource" /></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.ADManagedComputerDiscovery" Accessibility="Internal" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DataSource" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><SyncTime /><ScriptName>DiscoverAgentRelationshipSettings.ps1</ScriptName><ScriptBody>
param($SourceType, $SourceId , $ManagedEntityId ,$ComputerIdentity ,$ManagementGroupName)
function PrintError($error) 
{ 
    Write ("============================= BEGIN ERROR =================================\n"); 
    Write ("Error Type        : " + $error); 
    Write ("Error Number      : " + $Error[0].Exception.GetType().FullName); 
    #Write ("Error Code        : " + ($error.number	-band 0xFFFF)); 
    #Write ("Win32 Facility    : " + ($error.number -shr 16 -band 0x1FFF)); 
    Write ("Error Source      : " + $error.Source); 
    Write ("Error Description : " + $error.description); 
    Write ("============================== END ERROR ==================================\n"); 
} 
function SafeRegRead($registryPath) 
{ 
    try 
    { 
        $oReg = Get-ItemProperty $registryPath -ErrorAction stop; 
        return $oReg.EnableADIntegration
    } 
    catch
    {
        switch ($Error[0].Exception.GetType().FullName) 
        { 
            # HRESULT 0x80070002: ERROR_FILE_NOT_FOUND - Severity: FAILURE (1), FACILITY_WIN32 (0x7), Code 0x2 
            # If UseActiveDirectory RegValue DOES NOT EXIST the agent for this Management Group IS AD Integrated 
            'System.Management.Automation.ItemNotFoundException' 
            { 
                Write("Could not find \$registryPath \n"); 
                Exit 1; 
                break;
            }
            default { 
                PrintError($error); 
                }
        } 
    } 
} 
Write("SourceId              " + $SourceId); 
Write("ManagedEntityId:      " + $ManagedEntityId); 
Write("ComputerIdentity:     " + $ComputerIdentity); 
Write("ManagementGroupName:  " + $ManagementGroupName); 
$oAPI = new-object -comobject 'MOM.ScriptAPI' 
$SCRIPT_NAME         = "DiscoverAgentRelationshipSettings.ps1"; 
$ENU_MESSAGE_BASE    = "This script discovers AgentRelationshipSettings objects\n\r"; 
$EVENTLOG_SUCCESS                = 0x0000;     #  Information event    */ 
$EVENTLOG_AUDIT_FAILURE          = 0x0010;     #  Failure Audit event  */ 
$EVENTLOG_AUDIT_SUCCESS          = 0x0008;     #  Success Audit event  */ 
$EVENTLOG_ERROR_TYPE             = 0x0001;     #  Error event          */ 
$EVENTLOG_INFORMATION_TYPE       = 0x0004;     #  Information event    */ 
$EVENTLOG_WARNING_TYPE           = 0x0002;     #  Warning event        */ 
$MOMCONNECTOR_CLSID              = "{534E71F9-7970-42D6-921F-59CFB873855F}";    # MomConnecotr CLSID */
$ConnectorCLSIDRegValue          = "HKLM:\SYSTEM\CurrentControlSet\services\HealthService\Parameters\Management Groups\" + $ManagementGroupName
$EnableADIntegrationRegValue     = "HKLM:\SYSTEM\CurrentControlSet\Services\HealthService\Parameters\ConnectorManager"; 
$UseActiveDirectoryRegValue      = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Agent Management Groups\" + $ManagementGroupName
try
{
	  $ConnectorCLSID = Get-ItemProperty $ConnectorCLSIDRegValue -ErrorAction stop
    $ConnectorCLSID = $ConnectorCLSID.'Connector CLSID'
}
catch 
{
switch ($Error[0].Exception.GetType().FullName)
{
		# HRESULT 0x80070002: ERROR_FILE_NOT_FOUND - Severity: FAILURE (1), FACILITY_WIN32 (0x7), Code 0x2
		# If ConnectorCLSID RegValue DOES NOT EXIST, the agent for this Management Group IS NOT AD Integrated
		'System.Management.Automation.ItemNotFoundException' {
				$ConnectorCLSID = "";
				break;
		}
		default {
				PrintError($Error);
				throw($Error);
		}
	}
}
Write-Host "`nConnectorCLSID value:  " + $ConnectorCLSID
if ($ConnectorCLSID -eq $MOMCONNECTOR_CLSID)
{
	$EnableADIntegration = SafeRegRead($EnableADIntegrationRegValue);
	try 
	{ 
		$UseActiveDirectory = Get-ItemProperty $UseActiveDirectoryRegValue -ErrorAction stop;
        $UseActiveDirectory = $UseActiveDirectory."UseActiveDirectory"
	}
	catch
	{
			switch ($Error[0].Exception.GetType().FullName) 
			{
				# HRESULT 0x80070002: ERROR_FILE_NOT_FOUND - Severity: FAILURE (1), FACILITY_WIN32 (0x7), Code 0x2 
				# If UseActiveDirectory RegValue DOES NOT EXIST the agent for this Management Group IS AD Integrated 
				'System.Management.Automation.ItemNotFoundException' 
                { 
					$UseActiveDirectory = "TRUE"
					break;
				}
				default { 
					PrintError($error); 
					throw($error); 
				}
		} 
	} 
  if($UseActiveDirectory -eq "0")
    {
        $UseActiveDirectory = "FALSE"
    }else{
       $UseActiveDirectory = "TRUE"
    }
    
    if($EnableADIntegration -eq "0")
    {
        $EnableADIntegration = "FALSE"
    }else{
       $EnableADIntegration = "TRUE"
    }
    
	Write-Host ("`nEnableADIntegration value:  " + $EnableADIntegration); 
	Write-Host ("UseActiveDirectory value:     " + $UseActiveDirectory); 
	if (($EnableADIntegration -ne $null) -and ($UseActiveDirectory -ne $null)) 
	{ 
		$oDiscovery = $oAPI.CreateDiscoveryData($SourceType, $SourceId, $ManagedEntityId); 
		 
		$oHealthService = $oDiscovery.CreateClassInstance("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.HealthService']$"); 
		$oHealthService.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $ComputerIdentity); 
		$oHealthService.AddProperty("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.HealthService']/ActiveDirectoryManaged$", $UseActiveDirectory); 
		 
		$oDiscovery.AddInstance($oHealthService); 
		return $oDiscovery
	} 
}
                                </ScriptBody><Parameters><Parameter><Name>SourceType</Name><Value>0</Value></Parameter><Parameter><Name>SourceId</Name><Value>$MPElement$</Value></Parameter><Parameter><Name>ManagedEntityId</Name><Value>$Target/Id$</Value></Parameter><Parameter><Name>ComputerIdentity</Name><Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value></Parameter><Parameter><Name>ManagementGroupName</Name><Value>$Target/ManagementGroup/Name$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></DataSource></MemberModules><Composition><Node ID="DataSource" /></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.Agent.PatchDiscoveryProvider" Accessibility="Internal" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SyncTime" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DiscoveryDataSource"
TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><SyncTime>$Config/SyncTime$</SyncTime><ScriptName>DiscoverAgentPatches.ps1</ScriptName><ScriptBody>
                 #Connect to Windows Installer object
                 param($SourceId, $ManagedEntityId, $TargetComputerID)
                 
                 function CheckIfNano() #As Boolean
                 { 
                    #$isNano = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Server\ServerLevels"
                    #$isNano = $isNano.NanoServer
                    #if($isNano -ne $null)
                    #{
                    #  return $true;
                    #}
                    #
                    #Nano is deprecated
                    return $false;
                  }
                  function DoPatchDiscovery($oDisc)
                  {
                    $installer = $null
                    $momAgentComponentID        = "{60ADDA03-1710-4954-B299-A9F42DD889A6}"
                    try
                    {
                      $installer = new-object -comobject "WindowsInstaller.Installer"           
                    }
                    catch
                    {
                      CheckError $Error $installer
                    }
                    $product, $productList, $count, $path, $patch, $patchList, $patchListString, $oHealthServiceinstance
                    try
                    {
                      $productList = @($installer.GetType().InvokeMember("ProductsEx", "GetProperty", $null, $installer,('', '', 4)))  
                    }
                    catch
                    {
                      CheckError $Error $installer
                    }
               
                  
            
                    $patchListString = ""
                    for($count = 0;$count -lt $productList.Count; $count++)
                    {
                       $product = $productList[$count];
                       $ProductCode=$product.GetType().InvokeMember("ProductCode", "GetProperty", $null, $product, 1)
                       $path=$installer.GetType().InvokeMember("ComponentPath", "GetProperty", $null, $installer,($ProductCode, $momAgentComponentID))
  
                       If($path -ne "" -and $path -ne $null)
                       {
                          $patchList=$installer.GetType().InvokeMember("PatchesEx", "GetProperty", $null, $installer,($productCode, "", 7, 1))
                          foreach($patch in $patchList)
                          {                 
                            $patchListString = $patchListString + $patch.GetType().InvokeMember("PatchProperty", "GetProperty", $null, $patch,("DisplayName")) + "; ";
                          }
                       }
                    }
                    $productList = $null
                    $oHealthServiceinstance = $oDisc.CreateClassInstance("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.HealthService']$");
                    $oHealthServiceinstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $TargetComputerID);
                    $oHealthServiceinstance.AddProperty("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.HealthService']/PatchList$", $patchListString);
                    $oDisc.AddInstance($oHealthServiceinstance);
                  }
                  function CheckError($Error, $installer)
                  {
                  $message
                  $errRec = $null
                  $message = $Error.Source + " : " + $Error[0].Exception.GetType().FullName + ": " + $Error.Description;
                  If($installer -ne $null){
                  $errRec = $installer.LastErrorRecord
                  }
                  If($errRec -ne $null) {
                  $message = $message + "\n" + $errRec;
                  }
                  Write-Host message
                  Exit 2;
                  }
                  #A script that enumerates Software Updates for MOM Agent (not MOM 2005 but higher versions)
                  #For use with Windows Scripting Host, CScript.exe or WScript.exe
                  #Copyright (c) Microsoft Corporation. All rights reserved.
                  #does NOT work agentlessly
                  Set-Variable msiInstallStateNotUsed       -7 –option Constant
                  Set-Variable msiInstallStateBadConfig     -6 –option Constant
                  Set-Variable msiInstallStateIncomplete    -5 –option Constant
                  Set-Variable msiInstallStateSourceAbsent  -4 –option Constant
                  Set-Variable msiInstallStateInvalidArg    -2 –option Constant
                  Set-Variable msiInstallStateUnknown       -1 –option Constant
                  Set-Variable msiInstallStateBroken         0 –option Constant
                  Set-Variable msiInstallStateAdvertised     1 –option Constant
                  Set-Variable msiInstallStateRemoved        1 –option Constant
                  Set-Variable msiInstallStateAbsent         2 –option Constant
                  Set-Variable msiInstallStateLocal          3 –option Constant
                  Set-Variable msiInstallStateSource         4 –option Constant
                  Set-Variable msiInstallStateDefault        5 –option Constant
                  Set-Variable momAgentComponentID         "{60ADDA03-1710-4954-B299-A9F42DD889A6}"  –option Constant
                  $oAPI = new-object -comobject "MOM.ScriptAPI"
                  $oAgentPatchDiscoveryData = $oAPI.CreateDiscoveryData(0, $SourceId, $ManagedEntityId);
                  $isNano = CheckIfNano
                  if($isNano)
                  {
                    Write-Host "Write this method when patching is enabled on Nano."
                  }else{
                    DoPatchDiscovery $oAgentPatchDiscoveryData
                    $oAgentPatchDiscoveryData
                  }
								</ScriptBody><Parameters><Parameter><Name>SourceId</Name><Value>$MPElement$</Value></Parameter><Parameter><Name>ManagedEntityId</Name><Value>$Target/Id$</Value></Parameter><Parameter><Name>TargetComputerID</Name><Value>$Config/ComputerName$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></DataSource></MemberModules><Composition><Node ID="DiscoveryDataSource" /></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.DependencyMonitor.RemoteContributorReceiverDataSource" Accessibility="Internal" Batching="true"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatabasePollingInterval" type="xsd:duration" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="BatchSize" type="xsd:unsignedInt" /></Configuration><OverrideableParameters><OverrideableParameter ID="DatabasePollingInterval"
Selector="$Config/DatabasePollingInterval$" ParameterType="string" /><OverrideableParameter ID="BatchSize" Selector="$Config/BatchSize$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Managed><Assembly>Res.Microsoft.SystemCenter.DependencyMonitor.RemoteContributorReceiverDataSource</Assembly><Type>Microsoft.EnterpriseManagement.Modules.StateChangeDataSource</Type></Managed></ModuleImplementation><OutputType>System!System.BaseData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.DiscoveryDataReader" Comment="Reads discovery information from JET table for Discovery Manager" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroup" type="xsd:string" /></Configuration><ModuleImplementation
Isolation="Any"><Native><ClassID>41DF4214-1161-42BE-8711-9FC9B5D076FF</ClassID></Native></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.DistributedAcknowledgement.DependencyMonitorStateChangeProcessed" Accessibility="Internal" Batching="true"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>C873BD0E-C8B2-4AA9-B7BA-A49ACFA33CAE</ClassID></Native></ModuleImplementation><OutputType>System!System.BaseData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.DistributedAcknowledgement.ResendDataSource" Accessibility="Internal" Batching="true"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema"
name="ChannelId" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>FBA4CF10-556D-4096-8CF3-A0884257E4C0</ClassID></Native></ModuleImplementation><OutputType>System!System.BaseData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.EntityStateResendDataSource" Accessibility="Internal" Batching="true"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DataSource" TypeID="Microsoft.SystemCenter.DistributedAcknowledgement.ResendDataSource"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>$Config/ChannelId$</ChannelId></DataSource><ProbeAction ID="ProbeAction"
TypeID="Microsoft.SystemCenter.ResendHealthStateChange"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><Identification>$Data/ItemId$</Identification></ProbeAction></MemberModules><Composition><Node ID="ProbeAction"><Node ID="DataSource" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.BaseData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.ManagementGroup.DiscoveryDataReader" Comment="Reads discovery information for a given management group" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DataSource" TypeID="Microsoft.SystemCenter.DiscoveryDataReader"><ManagementGroup>$Target/ManagementGroup/Id$</ManagementGroup></DataSource></MemberModules><Composition><Node ID="DataSource"
/></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.HealthServicePropertyDiscovery" Comment="Gets information out of Registry for HealthService properties. Can't use the Registry Provider since we can't cast REG_DWORD's to bool types (e.g. 1 == true), so we do it in this DS " Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation
Isolation="Any"><Composite><MemberModules><DataSource ID="DataSource" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><SyncTime /><ScriptName>DiscoverHealthServiceProperties.ps1</ScriptName><ScriptBody>
                  
                  param($SourceType, $SourceId, $ManagedEntityId, $ComputerIdentity, $ManagementGroupName, $IsAgent)
                  $oAPI = new-object -comobject "MOM.ScriptAPI"
                  If (($IsAgent -eq $null) -or ($IsAgent -eq "1") -or ($IsAgent -eq "") -or ($IsAgent -eq $true) -or ($IsAgent -eq "True")){
                    $IsAgent = $True
                  }Else{
                    $IsAgent = $False
                  }
                  $oDisc = $oAPI.CreateDiscoveryData($SourceType, $SourceId, $ManagedEntityId)
                  $oDisc.IsSnapshot = $True
                  $Version = $null
                  $ActionAccount = $null
                   
                  try{
                  $ComponentName=""
                  $products = Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, InstallDate, PSChildName | Where-Object {$_.DisplayName -like '*Operations Manager*' -or $_.DisplayName -eq 'Microsoft Monitoring Agent'}
                  foreach($OMproduct in $products) {
                  switch -wildcard ($OMproduct.DisplayName) {
                  "*Agent" {
                  $ComponentName = "Agent"
                  break;
                  }
                  "*Operations Manager Server" {
                  $ComponentName = "Server"
                  break;
                  }
                  "*Gateway" {
                  $ComponentName = "Gateway"
                  }
                  }
                  if ($ComponentName.Equals("")) {
                  # Not a valid component
                  continue
                  }
                  If(Test-Path -Path "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\$ComponentName") {
                  $ProductVersionRegistryKey = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\$ComponentName" | Select-Object "RTM_UR Version"
                  If($ProductVersionRegistryKey.'RTM_UR Version') {
                  $Version = $ProductVersionRegistryKey.'RTM_UR Version';
                  } Else {
                  $Version = $OMproduct.DisplayVersion;
                  }
                  } Else {
                  $Version = $OMproduct.DisplayVersion;
                  }
                  break
                  }
                  } catch{
                  If ($Version -eq $null)
                  {
                  $oAPI.LogScriptEvent("Microsoft.SystemCenter.DiscoverHealthServiceProperties", 11, 1, "The Health Service Version registry key could not be found, error: ", $error.Description)
                  Exit -1;
                  }
                  }
                  
                  $isNano = $false
                  
                  # Nano is deprecated
                  # $isNano = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Server\ServerLevels"
                  # $isNano = $isNano.NanoServer
                  # if($isNano -ne $null)
                  # {	
                  #   $isNano = $true
                  # }else{
                  #  $isNano = $false
                  #  }
                     
                   try{
                    $user =  ""
                    $domain =  ""
                    if($isNano){
                          $user = $env:username
                          $domain = $env:userdnsdomain
                      }else{
                             $oNetwork = new-object -comobject "WScript.Network"
                             $user = $oNetwork.UserName
                             $domain = $oNetwork.UserDomain
                      }
                        If(($user.Length -eq 0) -or ($user -eq "SYSTEM")){
                            $ActionAccount = $user
                        }Else{
                            $ActionAccount = $domain + "\" + $user
                        }
                        }catch{
                            $oAPI.LogScriptEvent("Microsoft.SystemCenter.DiscoverHealthServiceProperties", 11, 1, "Failed to retrieve the User name and domain for the action account, error: ", $error.Description)
                            Exit -1;
                        }
                        
                  $oInst = $oDisc.CreateClassInstance("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.HealthService']$")
                  $oInst.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $ComputerIdentity)
                  $oInst.AddProperty("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.HealthService']/Version$", $Version)
                  $oInst.AddProperty("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.HealthService']/ActionAccountIdentity$", $ActionAccount)
                  $oDisc.AddInstance($oInst)
                  $oDisc
                                </ScriptBody><Parameters><Parameter><Name>SourceType</Name><Value>0</Value></Parameter><Parameter><Name>SourceId</Name><Value>$MPElement$</Value></Parameter><Parameter><Name>ManagedEntityId</Name><Value>$Target/Id$</Value></Parameter><Parameter><Name>ComputerIdentity</Name><Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value></Parameter><Parameter><Name>ManagementGroupName</Name><Value>$Target/ManagementGroup/Name$</Value></Parameter><Parameter><Name>IsAgent</Name><Value>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.HealthService"]/IsAgent$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></DataSource></MemberModules><Composition><Node ID="DataSource" /></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType
ID="Microsoft.SystemCenter.ManagementServicePoolWatcher.Discovery.DataSource" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="Scheduler" TypeID="System!System.Discovery.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/IntervalSeconds$</Interval><SyncTime /></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ConditionDetection ID="Mapper"
TypeID="System!System.Discovery.ClassSnapshotDataMapper"><ClassId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementServicePoolWatcher"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementServicePoolWatcher"]/PoolId$</Name><Value>$Target/Id$</Value></Setting><Setting><Name>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementServicePoolWatcher"]/PoolName$</Name><Value>$Target/Property[Type="System!System.Entity"]/DisplayName$</Value></Setting><Setting><Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name><Value>$Target/Property[Type="System!System.Entity"]/DisplayName$ Watcher</Value></Setting></Settings></InstanceSettings></ConditionDetection></MemberModules><Composition><Node ID="Mapper"><Node ID="Scheduler" /></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType
ID="Microsoft.SystemCenter.PublishedAlertProvider" Comment="provides the alerts published on the agent" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1" TypeID="Microsoft.SystemCenter.PublishedAlertProviderInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>5BD75C47-95C4-4c33-99B4-BFF75A1C0764</ChannelId></DataSource></MemberModules><Composition><Node ID="DS1" /></Composition></Composite></ModuleImplementation><OutputType>Health!System.Health.AlertUpdateData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.PublishedAlertProviderInternal" Comment="provides the alerts published on the agent" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId"
type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>8DB8C3B0-3AB0-494a-A09B-5F3643CC27A7</ClassID></Native></ModuleImplementation><OutputType>Health!System.Health.AlertUpdateData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.PublishedDiscoveryDataProvider" Comment="provides the discovery data published on the agent" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1" TypeID="Microsoft.SystemCenter.PublishedDiscoveryDataProviderInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>880F70D2-0E7A-4e55-9D9A-0A581049B756</ChannelId></DataSource></MemberModules><Composition><Node ID="DS1" /></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType
ID="Microsoft.SystemCenter.PublishedDiscoveryDataProviderInternal" Comment="provides the data published on a certain channel for discovery data" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>8DB8C3B0-3AB0-494a-A09B-5F3643CC27A7</ClassID></Native></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.PublishedEntityHealthStateChangeNotification" Comment="notifies about successful insertion of the entity health state change data published on the agent" Accessibility="Internal" Batching="true"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1"
TypeID="Microsoft.SystemCenter.PublishedEntityHealthStateChangeNotificationInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>4506DE47-806E-447f-90BB-20FAEBB7E87E</ChannelId></DataSource></MemberModules><Composition><Node ID="DS1" /></Composition></Composite></ModuleImplementation><OutputType>Health!System.Health.EntityStateChangeData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.PublishedEntityHealthStateChangeNotificationInternal" Comment="notifies about successful insertion of the entity health state change data published on the agent" Accessibility="Internal" Batching="true"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" /></Configuration><ModuleImplementation
Isolation="Any"><Managed><Assembly>Res.Microsoft.SystemCenter.PublishedEntityHealthStateChangeNotificationInternal</Assembly><Type>Microsoft.EnterpriseManagement.Mom.DatabaseWriteModules.StateChangeDataSource</Type></Managed></ModuleImplementation><OutputType>Health!System.Health.EntityStateChangeData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.PublishedEntityHealthStateChangeProvider" Comment="provides the entity health state change data published on the agent" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1" TypeID="Microsoft.SystemCenter.PublishedEntityHealthStateChangeProviderInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>4506DE47-806E-447f-90BB-20FAEBB7E87E</ChannelId></DataSource></MemberModules><Composition><Node ID="DS1"
/></Composition></Composite></ModuleImplementation><OutputType>Health!System.Health.EntityStateChangeData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.PublishedEntityHealthStateChangeProviderInternal" Comment="provides the entity health state change data published on the agent" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>8DB8C3B0-3AB0-494a-A09B-5F3643CC27A7</ClassID></Native></ModuleImplementation><OutputType>Health!System.Health.EntityStateChangeData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.PublishedEventProvider" Comment="provides the events published on the agent" Accessibility="Internal" Batching="false"><Configuration
/><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1" TypeID="Microsoft.SystemCenter.PublishedEventProviderInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>B6593AC8-EDC5-47ba-B0E0-EEE7D9DEB9AA</ChannelId></DataSource></MemberModules><Composition><Node ID="DS1" /></Composition></Composite></ModuleImplementation><OutputType>SCLibrary!Microsoft.SystemCenter.Event.LinkedData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.PublishedEventProviderInternal" Comment="provides the data published on a certain channel for event data" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" /></Configuration><ModuleImplementation
Isolation="Any"><Native><ClassID>8DB8C3B0-3AB0-494a-A09B-5F3643CC27A7</ClassID></Native></ModuleImplementation><OutputType>SCLibrary!Microsoft.SystemCenter.Event.LinkedData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.PublishedPerformanceDataProvider" Comment="provides the performance data published on the agent" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1" TypeID="Microsoft.SystemCenter.PublishedPerformanceDataProviderInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>7EB72AED-8069-4289-B9EB-00A29230B4D0</ChannelId></DataSource></MemberModules><Composition><Node ID="DS1" /></Composition></Composite></ModuleImplementation><OutputType>SCLibrary!Microsoft.SystemCenter.Performance.LinkedData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.PublishedPerformanceDataProviderInternal"
Comment="provides the performance data published on the agent" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>8DB8C3B0-3AB0-494a-A09B-5F3643CC27A7</ClassID></Native></ModuleImplementation><OutputType>SCLibrary!Microsoft.SystemCenter.Performance.LinkedData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.PublishedSignatureProvider" Comment="provides the signatures published on the agent" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS1"
TypeID="Microsoft.SystemCenter.PublishedSignatureProviderInternal"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>B41B38BA-5FED-4FBF-9AA8-22C38F607CAC</ChannelId></DataSource></MemberModules><Composition><Node ID="DS1" /></Composition></Composite></ModuleImplementation><OutputType>Performance!System.Performance.SignatureData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.PublishedSignatureProviderInternal" Comment="provides the data published on a certain channel as signature data" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" /></Configuration><ModuleImplementation
Isolation="Any"><Native><ClassID>8DB8C3B0-3AB0-494a-A09B-5F3643CC27A7</ClassID></Native></ModuleImplementation><OutputType>Performance!System.Performance.SignatureData</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.WindowsOSLogicalProcessorsPropertyDiscovery" Accessibility="Internal" RunAs="System!System.PrivilegedMonitoringAccount" Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>System!System.Discovery.MapperSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS" TypeID="System!System.Discovery.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval>$Config/IntervalSeconds$</Interval><SyncTime
/></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource><ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter"><Expression><SimpleExpression><ValueExpression><Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/LogicalProcessors$</Value></ValueExpression><Operator>NotEqual</Operator><ValueExpression><Value /></ValueExpression></SimpleExpression></Expression></ConditionDetection><ConditionDetection ID="CD"
TypeID="System!System.Discovery.ClassSnapshotDataMapper"><ClassId>$MPElement[Name="Windows!Microsoft.Windows.OperatingSystem"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name><Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value></Setting><Setting><Name>$MPElement[Name="Windows!Microsoft.Windows.OperatingSystem"]/LogicalProcessors$</Name><Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/LogicalProcessors$</Value></Setting></Settings></InstanceSettings></ConditionDetection></MemberModules><Composition><Node ID="CD"><Node ID="Filter"><Node ID="DS" /></Node></Node></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.WindowsComputerPropertyDiscovery" Accessibility="Internal" RunAs="System!System.PrivilegedMonitoringAccount"
Batching="false"><Configuration><IncludeSchemaTypes><SchemaType>System!System.Discovery.MapperSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DataSource" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><SyncTime /><ScriptName>DiscoverWindowsComputerProperties.ps1</ScriptName><ScriptBody>
#-------------------------------------------------------------------------------
# DiscoverWindowsComputerProperties.ps1
#
# Script discovers the extended properties from AD/WMI given the 
#  DNS name of the computer.
#-------------------------------------------------------------------------------
param($SourceType, $SourceId, $ManagedEntityId, $ComputerIdentity)
    $strDNSComputerName     = $ComputerIdentity
    $strNetBIOSDomain       = $null 
    $strNetBIOSComputerName = $null
    $strNetBIOSHostName     = $null
    $strDomainDNsName       = $null
    $strForestDnsName       = $null
    $strSite                = $null
    $strComputerOU          = $null
    $strIPAddresses         = $null
    $strLogicalProcessors   = $null
    $strPhysicalProcessors  = $null
    $strHostServerName      = $null
    $strVirtualMachineName  = $null
$strDomainDN = $null;
$WIN_OS_2012_Ver = "6.2"
$marshalConv = @"
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
public static class NetApi32 {
    private class unmanaged {
        [DllImport("NetApi32.dll", CharSet=CharSet.Auto, SetLastError=true)]
        internal static extern UInt32 DsGetSiteName([MarshalAs(UnmanagedType.LPTStr)]string ComputerName, out IntPtr SiteNameBuffer);
        [DllImport("Netapi32.dll", SetLastError=true)]
        internal static extern int NetApiBufferFree(IntPtr Buffer);
    }
    public static string DsGetSiteName(string ComputerName) {
        IntPtr siteNameBuffer = IntPtr.Zero;
        UInt32 hResult = unmanaged.DsGetSiteName(ComputerName, out siteNameBuffer);
        string siteName = Marshal.PtrToStringAuto(siteNameBuffer);
        unmanaged.NetApiBufferFree(siteNameBuffer);
        if(hResult == 0x6ba) { throw new Exception("ComputerName not found"); }
        return siteName;
    }
}
"@
Add-Type -TypeDefinition $marshalConv
#Checks if the OS Version is more than 6.2 i.e. Server 2012
function CheckByOSCurrentVersion($strComputerDNS) #As Boolean
{ 
    $reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $strComputerDNS)
    $regKey = $reg.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion")
    $strCurrentOSVer = $regKey.GetValue("CurrentVersion")
    if($strCurrentOSVer -ge $WIN_OS_2012_Ver)
	{	
		return $true;
	}
    return $false;
}
$Is_OS_More_Than_2012 = CheckByOSCurrentVersion $strDNSComputerName
#--------------------------------------------------------------
# Tests for NULL or Empty
#--------------------------------------------------------------
function IsNullOrEmpty($str)
{
  return (($null -eq $str) -or (0 -eq $str.length))
}
#-----------------------------------------------------------
# Returns the DN domain name from DNS
#-----------------------------------------------------------
function DNDomainFromDNS($strDomainDNsName)
{
    # Determine DN domain name from RootDSE object.
    $query = "LDAP://$strDomainDNsName/RootDSE"
    $objRootDSE = [System.DirectoryServices.DirectoryEntry]([ADSI]$query)
    return $objRootDSE.Get("defaultNamingContext");
}
#-----------------------------------------------------------
# Returns the forest for the domain
#-----------------------------------------------------------
function ForestFromDomainDNS($strDNSDomain)
{
    $strForestDNS = $null;
    try
    {
        $query = "LDAP://$strDNSDomain/RootDSE"
        $objRootDSE = [System.DirectoryServices.DirectoryEntry]([ADSI]$query);
        $strForestDN = $objRootDSE.Get("rootdomainNamingContext");
        
        # We got the DN (DC=corp,DC=microsoft,DC=com), translate to DNS (corp.microsoft.com)
        $arrParseDN = $strForestDN.split(",");
        for ($i = 0; $i -lt $arrParseDN.length; $i++)
        {
            $arrParseDC = $arrParseDN[$i].split("=");
            if ($null -eq $strForestDNS)
            {
                $strForestDNS = $arrParseDC[1];
            }
            else
            {
                $strForestDNS = $strForestDNS + "." + $arrParseDC[1];
            }
        }
    }
    catch
    {
        ;  # Nothing to be done
    }
    return $strForestDNS
}
Function Load-CimModules
{
	$error.Clear()
	$CimModule = Get-Module CimCmdlets
	if ($null -eq $CimModule)
	{
			Import-Module CimCmdlets
			$error.Clear()
	}
}
#-----------------------------------------------------------
# Returns the NetBIOS domain name from the DNS domain name
#-----------------------------------------------------------
function NetBIOSDomainFromDN($strDNSComputerName,$strDNDomain)
{
  if($Is_OS_More_Than_2012)
		{
        
        
         try
          {
           # Constants for the NameTranslate object.
   
            $ADS_NAME_INITTYPE_GC = 3
            $ADS_NAME_TYPE_NT4 = 3
            $ADS_NAME_TYPE_1779 = 1
            $NameTranslate = New-Object -ComObject "NameTranslate"
            # Use the NameTranslate object to find the NetBIOS domain name from the
            # DNS domain name
            $NameTranslate.GetType().InvokeMember("Init", "InvokeMethod", $NULL, $NameTranslate, ($ADS_NAME_INITTYPE_GC, "")) | Out-Null
            $NameTranslate.GetType().InvokeMember("Set", "InvokeMethod", $NULL, $NameTranslate, ($ADS_NAME_TYPE_1779, $strDNDomain)) | Out-Null
            $strNetBIOSDomain = $NameTranslate.GetType().InvokeMember("Get","InvokeMethod", $NULL, $NameTranslate, $ADS_NAME_TYPE_NT4)
            # Remove trailing backslash.
             $name = $strNetBIOSDomain.Substring(0,$strNetBIOSDomain.Length-1)
           }
           catch {
                  $DnsObject = Get-WmiObject Win32_ComputerSystem -ComputerName $strDNSComputerName
                   $name = $DnsObject.Domain
           }
           Finally {
           if($NameTranslate)
           {
              [System.Runtime.Interopservices.Marshal]::ReleaseComObject($NameTranslate)  | Out-Null
           }
	    }
    }
    else
    {
      $DnsObject = Get-WmiObject Win32_ComputerSystem -ComputerName $strDNSComputerName
      $name = $DnsObject.Domain
    }
      return $name
}
#-------------------------------------------------------------
# Gets the IP addresses for the given computer name
#-------------------------------------------------------------
function GetIPAddresses($strDNSComputerName)
{
    $strIPs =""
    if($Is_OS_More_Than_2012)
		{
        Load-CimModules
        
        try{
		        $cimSessionOption = New-CimSessionOption -Protocol DCOM
		        $cimsession = New-CimSession -ComputerName $strDNSComputerName -SessionOption $cimSessionOption 
		        $arrItems = Get-CimInstance -CimSession $cimsession Win32_NetworkAdapterConfiguration -ErrorAction Stop
            
        }
        catch
        {
		        $arrItems = Get-WmiObject  Win32_NetworkAdapterConfiguration -ComputerName $strDNSComputerName -ErrorAction Stop 
        }
        Finally{
		        Get-CimSession | Remove-CimSession
		        $cimsession =$null
		        $cimSessionOption = $null 
        }
    }
    else
    {
      $arrItems = Get-WmiObject  Win32_NetworkAdapterConfiguration -ComputerName $strDNSComputerName
    }
    foreach($arrItem in $arrItems)
    {
        $IPValue = $arrItem.IPAddress;
        if ($null -ne $IPValue)
        {
            $arrIPs = $IPValue
            for ($i =0; $i -lt $arrIPs.length; $i++)
            {
                $strIP = $arrIPs[$i];
                if ($null -ne $strIP)
                {
                    if (($null -eq $strIPs)  -or ($strIPs -eq ""))
                    {
                        $strIPs = $strIP;
                    }
                    else
                    {
                        $matchIP = $strIPs.IndexOf($strIP);                        
                        if($matchIP -eq -1)
                        {
                            $strIPs = $strIPs + ", " + $strIP;
                        }
                    }
                }
            }
        }
    }
    if(($strIPs -ne "") -and ($strIPs -ne $null))
    {
        return $strIPs
    }
    $cimSession = New-CimSession -ComputerName $strDNSComputerName
    $ipItems = Get-NetIPAddress -CimSession $cimSession
    foreach($ipItem in $ipItems)
    {
        $ip = $ipItem.IPAddress
        if(($ip -ne "::1") -and ($ip -ne "127.0.0.1"))
        {
           if (($null -eq $strIPs) -or ($strIPs -eq ""))
            {
                $strIPs = $ip
            }else{
                $strIPs = $strIPs + ', ' +$ip
            }
        }
    }
    return $strIPs
}
#-----------------------------------------------------------
# Get the site name from the Computer DNS
#-----------------------------------------------------------
function GetSiteFromComputerDNS($strComputerDNS)
{
    $strSiteName = $null;
     
    #Registry key will throw exception if the Remote Registry service is not enabled
    #This is applicable even for domain joined machines.
    #DynamicSiteName is only maintained on non-domain-controllers. This will contain the site name that the DC was in prior to it being promoted to a DC
    
    #So opting DSGetSiteName as common solution which retrieves the ADSiteName irrespective of the domain/non-domain controllers/DC migration
    
    try
    {
      $strSiteName = [NetApi32]::DsGetSiteName($ComputerIdentity)  
    }
    catch
    {
        ;  # Nothing to be done
    }
    return $strSiteName;
    
}
#-----------------------------------------------------------
# Adds the property to the instance if the value is non-$null
#-----------------------------------------------------------
function AddClassProperty($oInstance, $strProperty, $strValue)
{
    if ($null -ne $strValue) {
        $oInstance.AddProperty($strProperty, $strValue);
    }
}
# Need to retrieve these properties
	
$oAPI = new-object -comobject "MOM.ScriptAPI"
$SCRIPT_NAME = "DiscoverWindowsComputerProperties.ps1";
$ENU_MESSAGE_BASE = "Windows Property Discovery. ";
$oDiscovery = $oAPI.CreateDiscoveryData($SourceType, $SourceId, $ManagedEntityId);
# Get the virtual machine information
try
    {
        $reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $strDNSComputerName)
        $regKey = $reg.OpenSubKey("SOFTWARE\\Microsoft\\Virtual Machine\\Guest\\Parameters")
        $strHostServerName = $regKey.GetValue("HostName")
        $reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $strDNSComputerName)
        $regKey = $reg.OpenSubKey("SOFTWARE\\Microsoft\\Virtual Machine\\Guest\\Parameters")
        $strVirtualMachineName = $regKey.GetValue("VirtualMachineName")
    }
    catch
    {
        ;  # Nothing to be done
    }
# Attempt to do things the 'right' way
try
{
    
    $E_CLUSTER_RESOURCE_NOT_FOUND = -2146823281;
    # Get the computer from the system
    $astrSplit = ""
    $objComputer = $null
    $colSettings = $null
    $astrSplit = $strDNSComputerName.split(".")
    $strNetBIOSComputerName = $astrSplit[0]
    try
    {	
        $query = "Select Domain, Name, NumberOfLogicalProcessors, NumberOfProcessors from Win32_ComputerSystem WHERE Name = ""$strNetBIOSComputerName"""
        if($Is_OS_More_Than_2012)
				{   
            Load-CimModules
            
            try{
		            $cimSessionOption = New-CimSessionOption -Protocol DCOM
		            $cimsession = New-CimSession -ComputerName $strDNSComputerName -SessionOption $cimSessionOption 
		            $objComputer = Get-CimInstance -CimSession $cimsession -Namespace "root\cimv2" -Query $query -ErrorVariable ProcessError -ErrorAction Stop
                
            }
            catch
            {
		            $objComputer = Get-WmiObject -ComputerName $strDNSComputerName -Namespace "root\cimv2" -Query $query -ErrorVariable ProcessError -ErrorAction Stop
            }
            Finally{
		            Get-CimSession | Remove-CimSession
		            $cimsession =$null
		            $cimSessionOption = $null 
            }
        }
        else
				{
						$objComputer = Get-WmiObject -ComputerName $strDNSComputerName -Namespace "root\cimv2" -Query $query -ErrorVariable ProcessError -ErrorAction Stop
				}
        
        $strDomainDNsName = $objComputer.Domain;
        $strNetBIOSHostName = $objComputer.Name;
        $strLogicalProcessors = $objComputer.NumberOfLogicalProcessors;
        $strPhysicalProcessors = $objComputer.NumberOfProcessors;
        if ($null -eq $strLogicalProcessors)
        {
          $strLogicalProcessors = $objComputer.NumberOfProcessors;
          $strPhysicalProcessors = $null;
        }
    }
    catch
    {
		    $e = $_.Exception.Message
            $message = $_.Exception.Message
            $oAPI.LogScriptEvent("DiscoverWindowsComputerProperties", 100, 1, $message)
        if ($e -ne $E_CLUSTER_RESOURCE_NOT_FOUND)
        {
            throw $e;
        }
		    $query = "Select Domain, Name, NumberOfLogicalProcessors, NumberOfProcessors from Win32_ComputerSystem"
        if($Is_OS_More_Than_2012)
				{
            Load-CimModules
            
            try{
		            $cimSessionOption = New-CimSessionOption -Protocol DCOM
		            $cimsession = New-CimSession -ComputerName $strDNSComputerName -SessionOption $cimSessionOption 
		            $colSettings = Get-CimInstance -CimSession $cimsession -Namespace "root\cimv2" -Query $query -ErrorVariable ProcessError -ErrorAction Stop
                
            }
            catch
            {
		            $colSettings = Get-WmiObject -ComputerName $strDNSComputerName -Namespace "root\cimv2" -Query $query -ErrorVariable ProcessError -ErrorAction Stop
            }
            Finally{
		            Get-CimSession | Remove-CimSession
		            $cimsession =$null
		            $cimSessionOption = $null 
            }
        }
        else
        {
          $colSettings = Get-WmiObject -ComputerName $strDNSComputerName -Namespace "root\cimv2" -Query $query -ErrorVariable ProcessError -ErrorAction Stop
        }
        $objComputer = $colSettings.item();
        $strDomainDNsName = $objComputer.Domain;
        $strNetBIOSHostName = $objComputer.Name;
        $strLogicalProcessors = $objComputer.NumberOfLogicalProcessors;
        $strPhysicalProcessors = $objComputer.NumberOfProcessors;
        if ($null -eq $strLogicalProcessors)
        {
          $strLogicalProcessors = $objComputer.NumberOfProcessors;
          $strPhysicalProcessors = $null;
        }
    }
    
    try
    {
      # Get the domain data. If computer is in a workgroup, it will catch exception.
      $strDomainDN = DNDomainFromDNS $strDomainDNsName
    }
    catch
    {
      Write-Host "Domain Data Exception caught for " + $strDomainDNsName
    }
    
    if ($strDomainDN -ne $null)
    {
      $strNetBIOSDomain = NetBIOSDomainFromDN $strDNSComputerName $strDomainDN
    }
    
    $strIPAddresses = GetIPAddresses $strDNSComputerName
    $ADSISearcher = New-Object System.DirectoryServices.DirectorySearcher
    $ADSISearcher.Filter = '(&amp;(dnshostname=' + $strDNSComputerName + ')(name=' + $strNetBIOSComputerName + ')(objectClass=computer))';
    $ADSISearcher.SearchScope = 'Subtree'
    $Computer = $ADSISearcher.FindOne()
    $strComputerOU = $($Computer.Properties.Item('distinguishedName'))
    $ADS_SETTYPE_DN = 4          
    $ADS_FORMAT_X500_PARENT = 8    
    $Pathname = New-Object -ComObject "Pathname"    
    [void]$Pathname.GetType().InvokeMember("Set","InvokeMethod",$NULL,$Pathname,@($strComputerOU,$ADS_SETTYPE_DN))    
    $strComputerOU=$Pathname.GetType().InvokeMember("Retrieve","InvokeMethod",$NULL,$Pathname,@($ADS_FORMAT_X500_PARENT))
}
# Unable to contact the machine, (mis)use the DNS name
catch
{
  $e = $_.Exception.Message
  $message = "Exception retrieving properties '" + $e + "', using failsafe method" # Do nothing
  Write-Host  $message
}
if((IsNullOrEmpty $strNetBIOSComputerName) -or (IsNullOrEmpty $strNetBIOSDomain))
{
    # Try to parse the DNS name of the system
    $arrNameSplit       = $strDNSComputerName.split(".");
    if (IsNullOrEmpty $strNetBIOSComputerName -and ($arrNameSplit.length -gt 0))
    {
      $strNetBIOSComputerName = $arrNameSplit[0];
    }
    if ((IsNullOrEmpty $strNetBIOSDomain) -and ($arrNameSplit.length -gt 1))
    {
      $strNetBIOSDomain = $arrNameSplit[1];
    }
    
    # If there is no DNS name (no '.') then this is a workgroup, so use the domain name from WMI as NetBIOS Domain
    if ((IsNullOrEmpty $strNetBIOSDomain)  -and (-not (IsNullOrEmpty $strDomainDnsName)))
    {
      $strNetBIOSDomain = $strDomainDNsName;
    }
}
if (IsNullOrEmpty $strDomainDnsName)
{
    for($i = 1; $i -lt $arrNameSplit.length; $i++)
    {
        if (-not (IsNullOrEmpty $strDomainDnsName))
        {
            $strDomainDNsName = $strDomainDNsName + ".";
            $strDomainDNsName = $strDomainDNsName + $arrNameSplit[$i];
        }
        else
        {
            $strDomainDNsName = $arrNameSplit[$i];
        }
    }
}
# Get the forest if we have the Domain DNS name
if((IsNullOrEmpty $strForestDnsName) -and (-not (IsNullOrEmpty $strDomainDNsName)))
{
    $strForestDnsName = ForestFromDomainDNS $strDomainDNsName
}
# Get the site name
if (IsNullOrEmpty $strSite)
{
    $strSite = GetSiteFromComputerDNS $strDNSComputerName
}
Write-Host "NetBIOS Computer Name:    " $strNetBIOSComputerName
Write-Host "NetBIOS Domain Name:      " $strNetBIOSDomain
Write-Host "Forest DNS Name:          " $strForestDnsName
Write-Host "Domain DNS Name:          " $strDomainDNsName
Write-Host "AD Site:                  " $strSite
Write-Host "OU:                       " $strComputerOU
Write-Host "IP Addresses:             " $strIPAddresses
Write-Host "Logical Processors:       " $strLogicalProcessors
Write-Host "Physical Processors:      " $strPhysicalProcessors
Write-Host "Host Server Name:         " $strHostServerName
Write-Host "Virtual Machine Name:     " $strVirtualMachineName
$oInstance = $oDiscovery.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$");
AddClassProperty $oInstance "$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$" $ComputerIdentity
AddClassProperty $oInstance "$MPElement[Name='Windows!Microsoft.Windows.Computer']/NetbiosComputerName$" $strNetBIOSComputerName
AddClassProperty $oInstance "$MPElement[Name='Windows!Microsoft.Windows.Computer']/NetbiosDomainName$" $strNetBIOSDomain
AddClassProperty $oInstance "$MPElement[Name='Windows!Microsoft.Windows.Computer']/ForestDnsName$" $strForestDnsName
AddClassProperty $oInstance "$MPElement[Name='Windows!Microsoft.Windows.Computer']/DomainDnsName$" $strDomainDNsName
AddClassProperty $oInstance "$MPElement[Name='Windows!Microsoft.Windows.Computer']/ActiveDirectorySite$" $strSite
AddClassProperty $oInstance "$MPElement[Name='Windows!Microsoft.Windows.Computer']/OrganizationalUnit$" $strComputerOU
AddClassProperty $oInstance "$MPElement[Name='Windows!Microsoft.Windows.Computer']/IPAddress$" $strIPAddresses
AddClassProperty $oInstance "$MPElement[Name='Windows!Microsoft.Windows.Computer']/LogicalProcessors$" $strLogicalProcessors
AddClassProperty $oInstance "$MPElement[Name='Windows!Microsoft.Windows.Computer']/PhysicalProcessors$" $strPhysicalProcessors
AddClassProperty $oInstance "$MPElement[Name='Windows!Microsoft.Windows.Computer']/HostServerName$" $strHostServerName
AddClassProperty $oInstance "$MPElement[Name='Windows!Microsoft.Windows.Computer']/VirtualMachineName$" $strVirtualMachineName
$oDiscovery.AddInstance($oInstance);
$oDiscovery
</ScriptBody><Parameters><Parameter><Name>SourceType</Name><Value>0</Value></Parameter><Parameter><Name>SourceId</Name><Value>$MPElement$</Value></Parameter><Parameter><Name>ManagedEntityId</Name><Value>$Target/Id$</Value></Parameter><Parameter><Name>ComputerIdentity</Name><Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></DataSource></MemberModules><Composition><Node ID="DataSource" /></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><DataSourceModuleType ID="Microsoft.SystemCenter.OpsMgrDBWatcherProvider" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="IntervalSeconds" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetDisplayName" type="xsd:string" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:int" /></Configuration><OverrideableParameters><OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider"><IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds><SyncTime /><ScriptName>GetOpsMgrDBWatcherDiscovery.ps1</ScriptName><ScriptBody>
param($targetDisplayName)
Set-StrictMode -Version 2
$SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
$SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory “OperationsManager”
Import-module $SCOMModulePath
Set-Variable SCRIPTNAME -Option Constant -Value "GetOpsMgrDBWatcherDiscovery.ps1"
Set-Variable SCOM_EVENTNUMBER -Option Constant -Value 1199
Set-Variable SCOM_ERROR -Option Constant -Value 1
$Error.Clear()
$api = New-Object -ComObject "MOM.ScriptAPI"
$discoveryData = $api.CreateDiscoveryData(0, "$MPElement$", "$Target/Id$")
function ThrowErrorAndExit($message)
{
  $Error.Clear()
  $api.LogScriptEvent($SCRIPTNAME, $SCOM_EVENTNUMBER, $SCOM_ERROR, $message)
  exit
}
function GetComputerName()
{
  $type = Add-Type -MemberDefinition $signature -Name Win32Utils -Namespace GetComputerNameEx -Using System.Text -PassThru
  $computerNameDnsFullyQualified = 3
  $nameLength = 0
  $type::GetComputerNameEx($computerNameDnsFullyQualified, $null, [ref]$nameLength)
  $builder = New-Object System.Text.StringBuilder $nameLength
  $type::GetComputerNameEx($computerNameDnsFullyQualified, $builder, [ref]$nameLength)
  $builder.ToString()
}
function GetWatcherProperty($value)
{
  $key = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup\"
  (Get-ItemProperty $key $value).$value
}
# use WinApi to get computer name
$signature = @'
[DllImport("kernel32.dll")]
public static extern int GetComputerNameEx(
int nameType,
StringBuilder nameBuffer,
ref uint nameBufferSize);
'@
$type = Add-Type -MemberDefinition $signature -Name Win32Utils -Namespace GetComputerNameEx -Using System.Text -PassThru
$computerNameDnsFullyQualified = 3
$nameLength = 0
$type::GetComputerNameEx($computerNameDnsFullyQualified, $null, [ref]$nameLength)
$sbLength = [int]$nameLength  #Type casting to int, string builder class accepts only numeric datatypes.
$builder = New-Object System.Text.StringBuilder $sbLength
$type::GetComputerNameEx($computerNameDnsFullyQualified, $builder, [ref]$nameLength)
$computerName = $builder.ToString()
$dbServerName = GetWatcherProperty("DatabaseServerName")
if ($Error.Count -gt 0)
{
  ThrowErrorAndExit("Error returning Database Server Name.")
}
$databaseName = GetWatcherProperty("DatabaseName")
if ($Error.Count -gt 0)
{
  ThrowErrorAndExit("Error returning Database Name.")
}
$dbWatcherName = $targetDisplayName + " DB Watcher"
$instance = $discoveryData.CreateClassInstance("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.OpsMgrDBWatcher']$")
if ($Error.Count -gt 0)
{
  ThrowErrorAndExit("Unable to Create Instance.")
}
$instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $computerName)
$instance.AddProperty("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.OpsMgrDBWatcher']/DatabaseServerName$", $dbServerName)
$instance.AddProperty("$MPElement[Name='SCLibrary!Microsoft.SystemCenter.OpsMgrDBWatcher']/DatabaseName$", $databaseName)
$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $dbWatcherName)
$discoveryData.AddInstance($instance)
$discoveryData
            </ScriptBody><Parameters><Parameter><Name>targetDisplayName</Name><Value>$Config/TargetDisplayName$</Value></Parameter></Parameters><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds></DataSource></MemberModules><Composition><Node ID="DS" /></Composition></Composite></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType></DataSourceModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.GetWorkflowsReportProbe" Comment="requests list of running or failed workflows for management group/instance" Accessibility="Public" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagedEntityId" type="xsd:string" minOccurs="0" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Status"><xsd:simpleType><xsd:restriction base="xsd:string"><xsd:enumeration
value="Failed" /><xsd:enumeration value="Running" /></xsd:restriction></xsd:simpleType></xsd:element></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>A580661D-6314-4FB5-AD54-6ECBAFD83230</ClassID></Native></ModuleImplementation><OutputType>System!System.BaseData</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.LDAPComputerDiscoveryProbe" Comment="DO NOT USE - Deprecated public ModuleType" Accessibility="Public" Batching="false" PassThrough="false"><Configuration><IncludeSchemaTypes><SchemaType>System!System.Discovery.MapperSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Domain" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Query" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Verify" type="xsd:boolean" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ComputerType" type="xsd:integer" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="UserAndDomain" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Password" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Managed><Assembly>Res.Microsoft.SystemCenter.LDAPComputerDiscoveryProbe</Assembly><Type>NotImplemented</Type></Managed></ModuleImplementation><OutputType>System!System.Discovery.Data</OutputType><InputType>System!System.PropertyBagData</InputType></ProbeActionModuleType><ProbeActionModuleType ID="Microsoft.SystemCenter.ResendHealthStateChange" Accessibility="Internal" Batching="false" PassThrough="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Identification" type="xsd:string" /></Configuration><ModuleImplementation
Isolation="Any"><Native><ClassID>6711CF86-F30F-4684-831C-A77AFB1772BE</ClassID></Native></ModuleImplementation><OutputType>System!System.BaseData</OutputType><InputType>System!System.BaseData</InputType></ProbeActionModuleType><ConditionDetectionModuleType ID="Microsoft.SystemCenter.DiscoveryFilter" Comment="Filters the discovery data " Accessibility="Internal" Batching="true" Stateful="false" PassThrough="true"><Configuration /><ModuleImplementation Isolation="Any"><Native><ClassID>CBC8BBD6-3D6F-4f68-9157-D8F01BD029D7</ClassID></Native></ModuleImplementation><OutputType>System!System.BaseData</OutputType><InputTypes><InputType>System!System.BaseData</InputType></InputTypes></ConditionDetectionModuleType><ConditionDetectionModuleType ID="Microsoft.SystemCenter.DistributedAcknowledgement.PostFilter" Accessibility="Internal" Batching="true" Stateful="false" PassThrough="true"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId"
type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ItemId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ItemValid" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Cookie" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>036E5BFD-173B-489A-8A09-ED1C8BB8BFF8</ClassID></Native></ModuleImplementation><OutputType>System!System.BaseData</OutputType><InputTypes><InputType>System!System.BaseData</InputType></InputTypes></ConditionDetectionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.AgentManagement.PushInstallAction" Comment="Push install write action" Accessibility="Public" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SDKServerName" type="xsd:string" minOccurs="1" maxOccurs="1"
/><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementServerHostId" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TaskTimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" /></Configuration><ModuleImplementation Isolation="Any"><Managed><Assembly>Res.Microsoft.SystemCenter.AgentManagement.PushInstallAction</Assembly><Type>Microsoft.EnterpriseManagement.Mom.AgentManagementModules.AgentPushInstallWriteActionModule</Type></Managed></ModuleImplementation><InputType>System!System.Discovery.Data</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DependencyMonitor.UpdateDependencyMonitor" Accessibility="Internal" Batching="true"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MonitorId" type="xsd:string" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagedEntityId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="HealthState" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeChanged" type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>13FC4233-1DED-4807-BE90-62B0101425C8</ClassID></Native></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.DistributedAcknowledgement.DeleteAction" Accessibility="Internal" Batching="true"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ItemId" type="xsd:string" /></Configuration><ModuleImplementation
Isolation="Any"><Native><ClassID>AB82E4F3-6DDE-4E65-BFB6-D62656950E41</ClassID></Native></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.HealthServiceStoreMaintenanceAction" Comment="requests that the Health Service do ESE store maintenance" Accessibility="Public" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Native><ClassID>F180211E-59BE-4740-B50E-1E709A5DB6CC</ClassID></Native></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.MPUpdate.CheckForMPUpdate" Accessibility="Internal" RunAs="Microsoft.SystemCenter.MPUpdateActionAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="MPVersionFileUrl" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatabaseServerName" type="xsd:string" /><xsd:element
xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DatabaseName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TimeoutSeconds" type="xsd:integer" /></Configuration><OverrideableParameters><OverrideableParameter ID="MPVersionFileUrl" Selector="$Config/MPVersionFileUrl$" ParameterType="string" /><OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="PerformCheckForMPUpdates" TypeID="System!System.CommandExecuter"><ApplicationName>%windir%\system32\cscript.exe</ApplicationName><WorkingDirectory /><CommandLine>//nologo $file/MPUpdate.js$ $Config/MPVersionFileUrl$ $Config/DatabaseServerName$ $Config/DatabaseName$</CommandLine><TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds><RequireOutput>true</RequireOutput><Files><File><Name>MPUpdate.js</Name><Contents>
//Copyright (c) Microsoft Corporation. All rights reserved.
//*************************************************************************
// $ScriptName: MPUpdate $
//
// Purpose - Check for new versions of Management Packs
//
// Parameters -  0 - Management Pack Catalog File URL
//               1 - OpsMgr Database Server Name
//               2 - OpsMgr Database Name
//
//*************************************************************************
var msgSource = "MPUpdate";
// Event Messages
// Download failure
var E_NO_INTERNET_CONNECTION = 1000;
var E_NO_INTERNET_CONNECTION_MSG = "Could not retrieve Management Pack Catalog file: ";
// XML Parsing failure
var E_NO_PARSE_FAILED = 1001;
var E_NO_PARSE_FAILED_MSG = "Could not parse Management Pack Catalog file: ";
// XML Parsing failure
var E_NO_GENERAL_FAILURE = 1002;
var E_NO_GENERAL_FAILURE_MSG = "General failure: ";
// Later version of MP found
var LATER_VERSION_MP_FOUND = 2000;
var EVENT_TYPE_SUCCESS = 0;
var EVENT_TYPE_ERROR = 1;
var EVENT_TYPE_WARNING = 2;
var EVENT_TYPE_INFORMATION = 4;
var adStateOpen = 1;
var oAPI = new ActiveXObject("MOM.ScriptAPI"); 
//Check the input arguments
var oArgs = WScript.Arguments;
if (oArgs.Length != 3)
{
    WScript.Quit(-1);
}
var mpCatalogFileUrl = oArgs(0);
var opsMgrDBServerName = oArgs(1);
var opsMgrDBName = oArgs(2);
// Check if we have access to the Internet
// Log an error if we do not have access to the internet
// Download the MP Catalog file url
var mpCatalogFile = GetMPCatalogFile(oArgs(0));
var mpDoc = new ActiveXObject("Msxml2.DOMDocument.3.0");
// Load the MP Catalog file
LoadCatalogFile(mpCatalogFile)
// Connect to the database and the list and versions of the MPs
GetMPInfo(opsMgrDBServerName, opsMgrDBName);
function GetMPCatalogFile(mpCatalogFileUrl)
{
    // Connect to the internet and get the MP Catalog file    
    var xmlHttp = new ActiveXObject("Microsoft.XmlHttp");
    
    xmlHttp.open("GET", mpCatalogFileUrl, false);
    xmlHttp.send();
    
    if (xmlHttp.Status != 200)
    {
        // Log an error indicating that we could not connect to the internet
        CreateEvent(msgSource, E_NO_INTERNET_CONNECTION, EVENT_TYPE_ERROR, E_NO_INTERNET_CONNECTION_MSG + mpCatalogFileUrl);
        WScript.Quit(-1);
    }
    
    return xmlHttp.responseText;
}
function LoadCatalogFile(fileName)
{
    try
    {
        mpDoc.loadXML(fileName);
        if (mpDoc.parseError.errorCode != 0) 
        {
            var myErr = mpDoc.parseError;
            
            // Log an error - parsing failed
            CreateEvent(msgSource, E_NO_PARSE_FAILED, EVENT_TYPE_ERROR, E_NO_PARSE_FAILED_MSG + mpCatalogFileUrl + " : " + myErr.reason);
            WScript.Quit(-1);               
        } 
        if (mpDoc.documentElement.nodeName != "ManagementPacks")
        {
            // Log an error - parsing failed
            CreateEvent(msgSource, E_NO_PARSE_FAILED, EVENT_TYPE_ERROR, E_NO_PARSE_FAILED_MSG + mpCatalogFileUrl);
            WScript.Quit(-1);               
        }
    }
    catch(err)
    {
        CreateEvent(msgSource, E_NO_GENERAL_FAILURE, EVENT_TYPE_ERROR, E_NO_GENERAL_FAILURE_MSG + err.message);
        WScript.Quit(-1);               
    }	 
}
function GetLatestSqlNativeClientDriver() 
{
    var strDriverName = "SQLOLEDB";
    var keyPath = "HKEY_CLASSES_ROOT\\CLSID\\{5A23DE84-1D7B-4A16-8DED-B29C09CB648D}\\";
    var objShell = new ActiveXObject("WScript.Shell");
    var strRegistryValue;
    var isMSOLEDBFound = false;
    try {
        strRegistryValue = objShell.RegRead(keyPath);
    }
    catch (e) {
    }
    if (strRegistryValue == "MSOLEDBSQL") {
        strDriverName = strRegistryValue;
        isMSOLEDBFound = true;
    }
    if (!isMSOLEDBFound) {
        var objExec = objShell.Exec("REG QUERY HKEY_LOCAL_MACHINE\\Software\\ODBC\\ODBCINST.INI");
        var subKeysStr = objExec.StdOut.ReadAll();
        var subKeys = subKeysStr.split("\n");
        for (var i = 1; i &lt; subKeys.length; ++i) 
        {
            if(subKeys[i].indexOf("SQL Server Native Client") &gt; 0) 
            {
                var strRegistryPath = subKeys[i].substring(0,subKeys[i].length-1)+ "\\Driver";
                var strRegistryValue = objShell.RegRead(strRegistryPath);
                strRegistryValue = strRegistryValue.substring(strRegistryValue.lastIndexOf("\\")+1);
                var indexOfDot = strRegistryValue.indexOf(".");
                strDriverName = strRegistryValue.substring(0,indexOfDot);
            }
        }
    }
    return strDriverName;
}
function GetMPInfo(opsMgrDBServerName, opsMgrDBName)
{	  
    // Create the ADO connection object
    var cnADOConnection = new ActiveXObject("ADODB.Connection")
    // Create a recordset Object
    var rst = WScript.CreateObject("ADODB.Recordset");
    // Array of Newer MPs
    var newerMPs = "";
    
    try
    {	
        var connectionString;
        var strSqlDriver;
        strSqlDriver = GetLatestSqlNativeClientDriver();
        connectionString = "Provider=" + strSqlDriver + ";Server=" + opsMgrDBServerName + ";" +
                   "Integrated Security=SSPI;Initial Catalog=" + opsMgrDBName;
     
	    cnADOConnection.Open(connectionString);
        cnADOConnection.CommandTimeout = 300;
    		    
	    rst = cnADOConnection.Execute("select * from ManagementPack")
        // Compare each MP against the MP Catalog
        while (!rst.EOF)
        {
            var mpName = rst.fields("MPName");
            var currentVersion = rst.Fields("MPVersion");
            
            var latestVersion;
            
            latestVersion = GetMPVersionFromCatalogFile(mpName);
        
            if (latestVersion != null)
            {
                var latestVersionParts = latestVersion.split(".");
                var currentVersionParts = currentVersion.Value.split(".");
                
                // Now compare the versions
                if (latestVersionParts.length == currentVersionParts.length)
                {
                    // compare the respective parts
                    for (versionPartIndex = 0; versionPartIndex &lt; latestVersionParts.length; versionPartIndex++)
                    {
                        var strlatestVersionPart = latestVersionParts[versionPartIndex];
                        var strcurrentVersionPart = currentVersionParts[versionPartIndex];
                        
                        var latestVersionPart = parseInt(strlatestVersionPart);
                        var currentVersionPart = parseInt(strcurrentVersionPart);
                        
                        if (latestVersionPart &lt; currentVersionPart)
                        {
                            break;
                        }
                        else if (latestVersionPart &gt; currentVersionPart)
                        {
                            // log event indicating the name of the newer MP and the version
                            CreateEvent(msgSource, LATER_VERSION_MP_FOUND, EVENT_TYPE_INFORMATION, mpName + " " + latestVersion);
                            break;
                        }
                    }
                }                
            }                
            rst.MoveNext();
        }        
    }
    catch(err)
    {
        CreateEvent(msgSource, E_NO_GENERAL_FAILURE, EVENT_TYPE_ERROR, E_NO_GENERAL_FAILURE_MSG + err.message);
    }	 
    finally
    {
        if (rst.State == adStateOpen)
        { 
            rst.Close();
            rst = null;
        }
        if (cnADOConnection.State == adStateOpen)
        {
            cnADOConnection.Close();
            cnADOConnection = null;
        }
    }       
}
function GetMPVersionFromCatalogFile(mpName)
{
    var latestVersion = null;
    
    // Parse the catalog file and find the MP version corresponding to the MP name
    var xPathQuery = "//ManagementPacks//MPDownload//MP//ID[.='" + mpName + "']";
    
    var mpIdNode = mpDoc.selectSingleNode(xPathQuery);
    
    if (mpIdNode != null)
    {    
        var mpElementNode = mpIdNode.parentNode;
        var nodeList = mpElementNode.selectNodes("./Version");
        
        if (nodeList.length == 1)
        {
            latestVersion = nodeList.item(0).text;
        }
    }
    
    return latestVersion;
}
function CreateEvent(strSource, lngEventID, lngEventType, strMsg)
{
	oAPI.LogScriptEvent(strSource, lngEventID, lngEventType, strMsg);    
}
										</Contents><Unicode>false</Unicode></File></Files></WriteAction></MemberModules><Composition><Node ID="PerformCheckForMPUpdates" /></Composition></Composite></ModuleImplementation><InputType>System!System.TriggerData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.OnDemandDiscoveryTriggerAction" Comment="On demand discovery trigger write action" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DiscoveryId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetInstanceId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TaskTimeoutSeconds" type="xsd:int" /></Configuration><OverrideableParameters><OverrideableParameter ID="DiscoveryId" Selector="$Config/DiscoveryId$" ParameterType="string"
/><OverrideableParameter ID="TargetInstanceId" Selector="$Config/TargetInstanceId$" ParameterType="string" /><OverrideableParameter ID="TaskTimeoutSeconds" Selector="$Config/TaskTimeoutSeconds$" ParameterType="string" /></OverrideableParameters><ModuleImplementation Isolation="Any"><Native><ClassID>31742191-31A5-4C93-9D9B-92E6CD2FA665</ClassID></Native></ModuleImplementation><OutputType>System!System.BaseData</OutputType><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.PerformanceDataWriter" Comment="stores performance into the OpsMgr DB" Accessibility="Internal" RunAs="SCLibrary!Microsoft.SystemCenter.DatabaseWriteActionAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="UpdateLastSampledValue" type="xsd:boolean" minOccurs="0" maxOccurs="1" /></Configuration><ModuleImplementation
Isolation="Any"><Managed><Assembly>Res.Microsoft.SystemCenter.PerformanceDataWriter</Assembly><Type>Microsoft.EnterpriseManagement.Mom.DatabaseWriteModules.PerformanceWriteModule</Type></Managed></ModuleImplementation><InputType>SCLibrary!Microsoft.SystemCenter.Performance.LinkedData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.PostDistributedAck" Accessibility="Internal" Batching="true"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ChannelId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ItemId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Cookie" type="xsd:string" /></Configuration><ModuleImplementation
Isolation="Any"><Native><ClassID>68c5682e-6462-4887-90cb-2361f6e3a621</ClassID></Native></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.PostDistributedAck.DependencyMonitor" Accessibility="Internal" Batching="true"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.PostDistributedAck"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>A6B178D4-B753-4D6E-BA48-A8384D471C10</ChannelId><ItemId>ContribMEID=$Data/ManagedEntityId$ ContribMonId=$Data/MonitorId$ DepMEID=$Data/@DependencyInstanceId$ DepMonId=$Data/@DependencyMonitorId$</ItemId><Cookie>$Data/EventOriginId$</Cookie></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType
ID="Microsoft.SystemCenter.PostDistributedAck.PublishedEntityHealthStateChange" Accessibility="Internal" Batching="true"><Configuration /><ModuleImplementation Isolation="Any"><Composite><MemberModules><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.PostDistributedAck"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>4506DE47-806E-447f-90BB-20FAEBB7E87E</ChannelId><ItemId>ManagedEntityId=$Data/ManagedEntity$ MonitorId=$Data/Changes/Change/MonitorId$</ItemId><Cookie>$Data/Changes/Change/EventOriginId$</Cookie></WriteAction></MemberModules><Composition><Node ID="WA" /></Composition></Composite></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.ReloadConfigAction" Comment="requests reload configuration for management group" Accessibility="Internal" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementGroupId"
type="xsd:string" /></Configuration><ModuleImplementation Isolation="Any"><Native><ClassID>AB91517A-F4EE-42FB-BB02-9662518D1EFC</ClassID></Native></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.ResetServiceStoreAction" Comment="requests that a health service instance reset its store" Accessibility="Internal" Batching="false"><Configuration /><ModuleImplementation Isolation="Any"><Native><ClassID>B253A4FA-71BE-4F5D-94D5-A46B0D2505AA</ClassID></Native></ModuleImplementation><InputType>System!System.BaseData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.SignatureWriter" Comment="writes the signature passed to the OpsMgr DB" Accessibility="Internal" RunAs="SCLibrary!Microsoft.SystemCenter.DatabaseWriteActionAccount" Batching="false"><Configuration /><ModuleImplementation
Isolation="Any"><Managed><Assembly>Res.Microsoft.SystemCenter.SignatureWriter</Assembly><Type>Microsoft.EnterpriseManagement.Mom.DatabaseWriteModules.PerformanceSignatureWriteModule</Type></Managed></ModuleImplementation><InputType>Performance!System.Performance.SignatureData</InputType></WriteActionModuleType><WriteActionModuleType ID="Microsoft.SystemCenter.SqlJobExecuter" Comment="Executes Sql Jobs." Accessibility="Internal" RunAs="SCLibrary!Microsoft.SystemCenter.DatabaseWriteActionAccount" Batching="false"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="JobName" type="xsd:string" minOccurs="1" maxOccurs="1" /></Configuration><ModuleImplementation
Isolation="Any"><Managed><Assembly>Res.Microsoft.SystemCenter.SqlJobExecuter</Assembly><Type>Microsoft.EnterpriseManagement.Mom.DatabaseWriteModules.SqlJobWriteModule</Type></Managed></ModuleImplementation><InputType>System!System.TriggerData</InputType></WriteActionModuleType></ModuleTypes></TypeDefinitions><Monitoring><Discoveries><Discovery ID="Microsoft.SystemCenter.Agent.PatchDiscovery" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="false" Remotable="false" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SCLibrary!Microsoft.SystemCenter.HealthService"><Property TypeID="SCLibrary!Microsoft.SystemCenter.HealthService" PropertyID="PatchList" /></DiscoveryClass></DiscoveryTypes><DataSource ID="DiscoveryDataSource" TypeID="Microsoft.SystemCenter.Agent.PatchDiscoveryProvider"><IntervalSeconds>21600</IntervalSeconds><SyncTime
/><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName><TimeoutSeconds>300</TimeoutSeconds></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.DiscoverADManagedComputer" Comment="This discovers the values from the AD Cache on each agent" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.Agent" ConfirmDelivery="false" Remotable="false" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SCLibrary!Microsoft.SystemCenter.HealthService"><Property PropertyID="ActiveDirectoryManaged" /></DiscoveryClass></DiscoveryTypes><DataSource ID="RelationshipDiscovery" TypeID="Microsoft.SystemCenter.ADManagedComputerDiscovery"><IntervalSeconds>900</IntervalSeconds><TimeoutSeconds>300</TimeoutSeconds></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.DiscoverHealthServiceProperties" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="false"
Remotable="false" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SCLibrary!Microsoft.SystemCenter.HealthService"><Property PropertyID="Version" /><Property PropertyID="ActionAccountIdentity" /></DiscoveryClass></DiscoveryTypes><DataSource ID="DiscoveryDataSource" TypeID="Microsoft.SystemCenter.HealthServicePropertyDiscovery"><IntervalSeconds>3600</IntervalSeconds><TimeoutSeconds>300</TimeoutSeconds></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.DiscoverIsVirtualMachineTrue" Enabled="true" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="Windows!Microsoft.Windows.Computer"><Property PropertyID="IsVirtualMachine" /></DiscoveryClass></DiscoveryTypes><DataSource ID="DS"
TypeID="Windows!Microsoft.Windows.WmiProviderWithClassSnapshotDataMapper"><NameSpace>\\$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$\ROOT\CIMV2</NameSpace><Query>SELECT Name FROM Win32_BaseBoard WHERE Manufacturer = "Microsoft Corporation"</Query><Frequency>86400</Frequency><ClassId>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name><Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value></Setting><Setting><Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/IsVirtualMachine$</Name><Value>true</Value></Setting></Settings></InstanceSettings></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.DiscoverLogicalProcessors" Enabled="true" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="true"
Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="Windows!Microsoft.Windows.OperatingSystem"><Property PropertyID="LogicalProcessors" /></DiscoveryClass></DiscoveryTypes><DataSource ID="DiscoveryDataSource" TypeID="Microsoft.SystemCenter.WindowsOSLogicalProcessorsPropertyDiscovery"><IntervalSeconds>86400</IntervalSeconds></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.DiscoverOpsMgrDBWatchersGroupContainsOpsMgrDBWatcherRelationship" Comment="OpsMgrDB Watcher related Discoveries" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.OpsMgrDBWatchersGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SCLibrary!Microsoft.SystemCenter.OpsMgrDBWatchersGroup" /></DiscoveryTypes><DataSource ID="GroupDiscoveryDS"
TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.OpsMgrDBWatcher"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.OpsMgrDBWatchersGroupContainsOpsMgrDBWatcher"]$</RelationshipClass></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.DiscoverWindowsClientComputer" Comment="Discover Windows Client Computers" Enabled="true" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="Windows!Microsoft.Windows.Client.Computer" /></DiscoveryTypes><DataSource ID="DS"
TypeID="Windows!Microsoft.Windows.WmiProviderWithClassSnapshotDataMapper"><NameSpace>\\$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$\ROOT\CIMV2</NameSpace><Query>SELECT NumberOfProcessors FROM Win32_ComputerSystem WHERE DomainRole &lt;=1</Query><Frequency>86400</Frequency><ClassId>$MPElement[Name="Windows!Microsoft.Windows.Client.Computer"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name><Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value></Setting></Settings></InstanceSettings></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.DiscoverWindowsComputerProperties" Comment="Discover Windows Computer Properties" Enabled="true" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass
TypeID="Windows!Microsoft.Windows.Computer"><Property PropertyID="NetbiosComputerName" /><Property PropertyID="NetbiosDomainName" /><Property PropertyID="IPAddress" /><Property PropertyID="DomainDnsName" /><Property PropertyID="OrganizationalUnit" /><Property PropertyID="ForestDnsName" /><Property PropertyID="ActiveDirectorySite" /><Property PropertyID="LogicalProcessors" /></DiscoveryClass></DiscoveryTypes><DataSource ID="PropertyDiscovery" TypeID="Microsoft.SystemCenter.WindowsComputerPropertyDiscovery"><IntervalSeconds>86400</IntervalSeconds><TimeoutSeconds>300</TimeoutSeconds></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.DiscoverWindowsOSProperties" Comment="Discover OS properties using WMI" Enabled="true" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="Windows!Microsoft.Windows.OperatingSystem"><Property TypeID="System!System.Entity"
PropertyID="DisplayName" /><Property PropertyID="OSVersion" /><Property PropertyID="OSVersionDisplayName" /><Property PropertyID="BuildNumber" /><Property PropertyID="CSDVersion" /><Property PropertyID="ServicePackVersion" /><Property PropertyID="SerialNumber" /><Property PropertyID="InstallDate" /><Property PropertyID="SystemDrive" /><Property PropertyID="WindowsDirectory" /><Property PropertyID="PhysicalMemory" /></DiscoveryClass></DiscoveryTypes><DataSource ID="DiscoveryDataSource" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider"><IntervalSeconds>86400</IntervalSeconds><SyncTime /><ScriptName>DiscoverWindowsOSProperties.ps1</ScriptName><ScriptBody>
Param($SourceType, $SourceId, $ManagedEntityId, $ComputerIdentity, $NetworkName)
#OS version for Win 2012
$WIN_OS_2012_Ver = "6.2"
$OSRegistryKey = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\"
#******************************************************************************
#   FUNCTION:       CheckMinOSVer
#   DESCRIPTION:    Returns True if the Registry Key for CurrentVersion
#                   is equal or Higher than the Minimum OS Versions Number.
#   PARAMETER:      DblMinVer Minimum Version Number to use
#   RETURNS:        Boolean: True, if build is greater or equal than the given number
#******************************************************************************
function CheckByOSCurrentVersion() #As Boolean
{ 
    $strCurrentOSVer = Get-ItemProperty $OSRegistryKey
    $strCurrentOSVer = $strCurrentOSVer.CurrentVersion
    if($strCurrentOSVer -ge $WIN_OS_2012_Ver)
	{	
		return $true;
	}
    return $false;
}
    
$api = new-object -comObject "MOM.ScriptAPI"
$properties = "Version","Caption","BuildNumber","CSDVersion","ServicePackMajorVersion","ServicePackMinorVersion","SerialNumber","InstallDate","WindowsDirectory","TotalVisibleMemorySize"
$isHigherThanWin08 = CheckByOSCurrentVersion
if($isHigherThanWin08 -eq $true)
{
        Load-CimModules
        
        try{
		        $cimSessionOption = New-CimSessionOption -Protocol DCOM
		        $cimsession = New-CimSession -ComputerName $NetworkName -SessionOption $cimSessionOption 
		        $items = Get-CimInstance -CimSession $cimsession -Namespace "root\cimv2" -Class "Win32_OperatingSystem" -Property $properties -ErrorAction Stop
            
        }
        catch
        {
		        $items = Get-WMIObject -Namespace "root\cimv2" -Class "Win32_OperatingSystem" -ComputerName $NetworkName -Property $properties -ErrorAction Stop 
        }
        Finally{
		        Get-CimSession | Remove-CimSession
		        $cimsession =$null
		        $cimSessionOption = $null 
        }
 }
else
{
  $items = Get-WMIObject -Namespace "root\cimv2" -Class "Win32_OperatingSystem" -ComputerName $NetworkName -Property $properties
}
if($items -ne $null)
{
    $discoveryData = $api.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
    $windowsOS = $discoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']$")
    $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $ComputerIdentity)
    foreach ($item in $items)
    {
        if($item -ne $null)
        {
            if($item.Version -ne $null)
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/OSVersion$", $item.Version)
            }
          else
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/OSVersion$", "")
            }
          
            if($item.Caption -ne $null)
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/OSVersionDisplayName$", $item.Caption)
                $windowsOS.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $item.Caption)
            }
          else
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/OSVersionDisplayName$", "")
                $windowsOS.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", "")
            }
          
            if($item.BuildNumber -ne $null)
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/BuildNumber$", $item.BuildNumber)
            }
          else
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/BuildNumber$", "")
            }
          
            if($item.CSDVersion -ne $null)
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/CSDVersion$", $item.CSDVersion)
            }
          else
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/CSDVersion$", "")
            }
          
            if($item.ServicePackMajorVersion -ne $null)
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/ServicePackVersion$", $($item.ServicePackMajorVersion.ToString() + "." + $item.ServicePackMinorVersion.ToString()))
            }
          else
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/ServicePackVersion$", "")
            }
          
            if($item.SerialNumber -ne $null)
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/SerialNumber$", $item.SerialNumber)
            }
          else
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/SerialNumber$", "")
            }
          
            if($item.InstallDate -ne $null)
            {
                $dateTime = $item.InstallDate.ToString().Split(" ")
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/InstallDate$", $($dateTime[0] + " " + $dateTime[1]))
            }
          else
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/InstallDate$", "")
            }
          
            if($item.WindowsDirectory -ne $null)
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/SystemDrive$", $item.WindowsDirectory.substring(0,2))
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/WindowsDirectory$", $item.WindowsDirectory)
            }
          else
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/SystemDrive$", "")
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/WindowsDirectory$", "")
            }
          
            if($item.TotalVisibleMemorySize -ne $null)
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/PhysicalMemory$", $item.TotalVisibleMemorySize)
            }
          else
            {
                $windowsOS.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.OperatingSystem']/PhysicalMemory$", "")
            }
        }
    }
    $discoveryData.AddInstance($windowsOS)
    $discoveryData
}
Function Load-CimModules
{
	$error.Clear()
	$CimModule = Get-Module CimCmdlets
	if ($null -eq $CimModule)
	{
			Import-Module CimCmdlets
			$error.Clear()
	}
}
                                </ScriptBody><Parameters><Parameter><Name>SourceType</Name><Value>0</Value></Parameter><Parameter><Name>SourceId</Name><Value>$MPElement$</Value></Parameter><Parameter><Name>ManagedEntityId</Name><Value>$Target/Id$</Value></Parameter><Parameter><Name>ComputerIdentity</Name><Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value></Parameter><Parameter><Name>NetworkName</Name><Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</Value></Parameter></Parameters><TimeoutSeconds>300</TimeoutSeconds></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.DiscoverWindowsProductType" Comment="Discover Operating System - ProductType property" Enabled="true" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="Windows!Microsoft.Windows.OperatingSystem"><Property
PropertyID="ProductType" /></DiscoveryClass></DiscoveryTypes><DataSource ID="DS"
TypeID="Windows!Microsoft.Windows.RegistryDiscoveryProvider"><ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><RegistryAttributeDefinitions><RegistryAttributeDefinition><AttributeName>ProductType</AttributeName><Path>SYSTEM\CurrentControlSet\Control\ProductOptions\ProductType</Path><PathType>1</PathType><AttributeType>1</AttributeType></RegistryAttributeDefinition></RegistryAttributeDefinitions><Frequency>86400</Frequency><ClassId>$MPElement[Name="Windows!Microsoft.Windows.OperatingSystem"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name><Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value></Setting><Setting><Name>$MPElement[Name="Windows!Microsoft.Windows.OperatingSystem"]/ProductType$</Name><Value>$Data/Values/ProductType$</Value></Setting></Settings></InstanceSettings></DataSource></Discovery><Discovery
ID="Microsoft.SystemCenter.DiscoverWindowsServerComputer" Comment="Discover Windows Server Computers" Enabled="true" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="Windows!Microsoft.Windows.Server.Computer" /></DiscoveryTypes><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.WmiProviderWithClassSnapshotDataMapper"><NameSpace>\\$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$\ROOT\CIMV2</NameSpace><Query>SELECT NumberOfProcessors FROM Win32_ComputerSystem WHERE DomainRole &gt;1 and DomainRole
&lt;4</Query><Frequency>86400</Frequency><ClassId>$MPElement[Name="Windows!Microsoft.Windows.Server.Computer"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name><Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value></Setting></Settings></InstanceSettings></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.DiscoverWindowsServerDCComputer" Comment="Discover Windows Domain Controller Computers" Enabled="true" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="Windows!Microsoft.Windows.Server.DC.Computer" /></DiscoveryTypes><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.WmiProviderWithClassSnapshotDataMapper"><NameSpace>\\$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$\ROOT\CIMV2</NameSpace><Query>SELECT
NumberOfProcessors FROM Win32_ComputerSystem WHERE DomainRole &gt;3</Query><Frequency>86400</Frequency><ClassId>$MPElement[Name="Windows!Microsoft.Windows.Server.DC.Computer"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name><Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value></Setting></Settings></InstanceSettings></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.DiscoveryHealthServiceCommunication" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="false" Remotable="false" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes /><DataSource ID="DiscoverFromADCache" TypeID="Microsoft.SystemCenter.ADIntegrationRelationshipDiscovery"><IntervalSeconds>900</IntervalSeconds><TimeoutSeconds>300</TimeoutSeconds></DataSource></Discovery><Discovery
ID="Microsoft.SystemCenter.ManagementServicePoolWatcher.AllManagementServersPool.Discovery" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SCLibrary!Microsoft.SystemCenter.ManagementServicePoolWatcher"><Property TypeID="System!System.Entity" PropertyID="DisplayName" /><Property PropertyID="PoolId" /><Property PropertyID="PoolName" /></DiscoveryClass></DiscoveryTypes><DataSource ID="DS" TypeID="Microsoft.SystemCenter.ManagementServicePoolWatcher.Discovery.DataSource"><IntervalSeconds>86400</IntervalSeconds></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.ManagementServicePoolWatcher.ADAssignmentResourcePool.Discovery" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ADAssignmentResourcePool" ConfirmDelivery="false" Remotable="true"
Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SCLibrary!Microsoft.SystemCenter.ManagementServicePoolWatcher"><Property TypeID="System!System.Entity" PropertyID="DisplayName" /><Property PropertyID="PoolId" /><Property PropertyID="PoolName" /></DiscoveryClass></DiscoveryTypes><DataSource ID="DS" TypeID="Microsoft.SystemCenter.ManagementServicePoolWatcher.Discovery.DataSource"><IntervalSeconds>86400</IntervalSeconds></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.OpsMgrDBWatcher.Discovery" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SCLibrary!Microsoft.SystemCenter.OpsMgrDBWatcher"><Property TypeID="System!System.Entity" PropertyID="DisplayName" /><Property PropertyID="DatabaseServerName" /><Property PropertyID="DatabaseName"
/></DiscoveryClass></DiscoveryTypes><DataSource ID="DS" RunAs="System!System.PrivilegedMonitoringAccount" TypeID="Microsoft.SystemCenter.OpsMgrDBWatcherProvider"><IntervalSeconds>86400</IntervalSeconds><TargetDisplayName>$Target/Property[Type="System!System.Entity"]/DisplayName$</TargetDisplayName><TimeoutSeconds>300</TimeoutSeconds></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.PopulateAllComputersGroup" Comment="Populates the All Windows Computers Group with all Windows computers" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.AllComputersGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.ComputerGroupContainsComputer" /></DiscoveryTypes><DataSource ID="GroupPopulator"
TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagedComputer"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ComputerGroupContainsComputer"]$</RelationshipClass></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.PopulateCollectionManagementServerComputerGroup" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.CollectionManagementServerComputersGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.ComputerGroupContainsComputer" /></DiscoveryTypes><DataSource ID="DiscoveryDataSource"
TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagedComputer"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ComputerGroupContainsComputer"]$</RelationshipClass><Expression><Contains><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.CollectionManagementServer"]$</MonitoringClass><Expression><SimpleExpression><ValueExpression><Property>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthService"]/IsManagementServer$</Property></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>True</Value></ValueExpression></SimpleExpression></Expression></Contains></Expression></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.PopulateGatewayManagementServerComputerGroup" Enabled="true"
Target="SCLibrary!Microsoft.SystemCenter.GatewayManagementServerComputersGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.ComputerGroupContainsComputer" /></DiscoveryTypes><DataSource ID="DiscoveryDataSource" TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagedComputer"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ComputerGroupContainsComputer"]$</RelationshipClass><Expression><Contains><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.GatewayManagementServer"]$</MonitoringClass></Contains></Expression></MembershipRule></MembershipRules></DataSource></Discovery><Discovery
ID="Microsoft.SystemCenter.PopulateManagementServerComputerGroup" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ManagementServerComputersGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.ComputerGroupContainsComputer" /></DiscoveryTypes><DataSource ID="DiscoveryDataSource"
TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagedComputer"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ComputerGroupContainsComputer"]$</RelationshipClass><Expression><Contains><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementServer"]$</MonitoringClass><Expression><And><Expression><SimpleExpression><ValueExpression><Property>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthService"]/IsManagementServer$</Property></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>True</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Property>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthService"]/IsGateway$</Property></ValueExpression><Operator>Equal</Operato
r><ValueExpression><Value>False</Value></ValueExpression></SimpleExpression></Expression></And></Expression></Contains></Expression></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.PopulateRootManagementServerComputerGroup" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.RootManagementServerComputersGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.ComputerGroupContainsComputer" /></DiscoveryTypes><DataSource ID="DiscoveryDataSource"
TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagedComputer"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ComputerGroupContainsComputer"]$</RelationshipClass><Expression><Contains><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.RootManagementServer"]$</MonitoringClass></Contains></Expression></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.PopulateSCAgentlessManagedComputerGroup" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.AgentlessManagedComputerGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.ComputerGroupContainsComputer" /></DiscoveryTypes><DataSource
ID="GroupPopulator" TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagedComputer"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ComputerGroupContainsComputer"]$</RelationshipClass><Expression><NotContains><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthService"]$</MonitoringClass></NotContains></Expression></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.PopulateSCAgentManagedComputerGroup" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.AgentManagedComputerGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.ComputerGroupContainsComputer"
/></DiscoveryTypes><DataSource ID="GroupPopulator" TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagedComputer"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ComputerGroupContainsComputer"]$</RelationshipClass><Expression><Contains><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.Agent"]$</MonitoringClass></Contains></Expression></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.SCManagedComputerPropertyDiscovery" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="false" Remotable="false" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SCLibrary!Microsoft.SystemCenter.ManagedComputer"><Property
PropertyID="InstallDirectory" /></DiscoveryClass></DiscoveryTypes><DataSource ID="RegistryProbe" TypeID="Windows!Microsoft.Windows.RegistryDiscoverySingleProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName><AttributeName>InstallDirectory</AttributeName><Path>SOFTWARE\Microsoft\Microsoft Operations
Manager\3.0\Setup\InstallDirectory</Path><PathType>1</PathType><AttributeType>1</AttributeType><Frequency>86400</Frequency><ClassId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagedComputer"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name><Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value></Setting><Setting><Name>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagedComputer"]/InstallDirectory$</Name><Value>$Data/Values/InstallDirectory$</Value></Setting></Settings></InstanceSettings></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.PopulateManagementServerGroup" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ManagementServersGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship
TypeID="SCLibrary!Microsoft.SystemCenter.ManagementServersGroup.ContainsManagementServers" /></DiscoveryTypes><DataSource ID="DiscoveryDataSource"
TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementServer"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementServersGroup.ContainsManagementServers"]$</RelationshipClass><Expression><And><Expression><SimpleExpression><ValueExpression><Property>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthService"]/IsManagementServer$</Property></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>True</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><Property>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthService"]/IsGateway$</Property></ValueExpression><Operator>Equal</Operator><ValueExpression><Value>False</Value></ValueExpression></SimpleExpression></Expression></And></Expressio
n></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.PopulateGatewayServerGroup" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.GatewayServerGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.ManagementGatewayServerGroup.ContainsGatewayServers" /></DiscoveryTypes><DataSource ID="GroupPopulator" TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.GatewayManagementServer"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementGatewayServerGroup.ContainsGatewayServers"]$</RelationshipClass></MembershipRule></MembershipRules></DataSource></Discovery><Discovery
ID="Microsoft.SystemCenter.PopulateAgentManagedGroup" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.AgentManagedGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.AgentManagedGroup.ContainsAgents" /></DiscoveryTypes><DataSource ID="GroupPopulator" TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.Agent"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.AgentManagedGroup.ContainsAgents"]$</RelationshipClass></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.PopulateHealthServicesGroup" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthServicesGroup" ConfirmDelivery="false"
Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.HealthServiceGroup.ContainsAgentManagedGroup" /><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.HealthServiceGroup.ContainsManagementServerGroups" /><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.HealthServiceGroup.ContainsGatewayManagementServerGroups" /></DiscoveryTypes><DataSource ID="GroupPopulator"
TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.AgentManagedGroup"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthServiceGroup.ContainsAgentManagedGroup"]$</RelationshipClass></MembershipRule><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementServersGroup"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthServiceGroup.ContainsManagementServerGroups"]$</RelationshipClass></MembershipRule><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.GatewayServerGroup"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.HealthServiceGroup.ContainsGatewayManagementServerGroups"]$</RelationshipClass></MembershipRule></Membe
rshipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.OpsMgrDWWatchersGroupPopulator" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.OpsMgrDWWatchersGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.OpsMgrDWWatchersGroup.ContainsOpsMgrDWWatchers" /></DiscoveryTypes><DataSource ID="GroupPopulator" TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.OpsMgrDWWatcher"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.OpsMgrDWWatchersGroup.ContainsOpsMgrDWWatchers"]$</RelationshipClass></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.PopulateDataBaseGroup" Enabled="true"
Target="SCLibrary!Microsoft.SystemCenter.DataBaseGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.DataBaseGroup.ContainsOpsMgrDBWatchersGroup" /><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.DataBaseGroup.ContainsOpsMgrDWWatchersGroup" /></DiscoveryTypes><DataSource ID="GroupPopulator"
TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.OpsMgrDBWatchersGroup"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.DataBaseGroup.ContainsOpsMgrDBWatchersGroup"]$</RelationshipClass></MembershipRule><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.OpsMgrDWWatchersGroup"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.DataBaseGroup.ContainsOpsMgrDWWatchersGroup"]$</RelationshipClass></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.InfrastructureGroupContainsManagementServerGroupRelationshipDiscovery" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.Infrastructure.Group" ConfirmDelivery="false" Remotable="true"
Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.InfrastructureGroup.ContainsManagementServerGroups" /></DiscoveryTypes><DataSource ID="GroupPopulator" TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementServersGroup"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.InfrastructureGroup.ContainsManagementServerGroups"]$</RelationshipClass></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.InfrastructureGroupContainsGatewayManagementServerGroupRelationshipDiscovery" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.Infrastructure.Group" ConfirmDelivery="false" Remotable="true"
Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.InfrastructureGroup.ContainsGatewayManagementServerGroups" /></DiscoveryTypes><DataSource ID="GroupPopulator" TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.GatewayServerGroup"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.InfrastructureGroup.ContainsGatewayManagementServerGroups"]$</RelationshipClass></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.WebConsoleWatcherDiscovery" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="false" Remotable="false" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass
TypeID="SCLibrary!Microsoft.SystemCenter.WebConsoleWatcher"><Property TypeID="System!System.Entity" PropertyID="DisplayName" /><Property PropertyID="WebConsoleUrl" /></DiscoveryClass></DiscoveryTypes><DataSource ID="DS" RunAs="System!System.PrivilegedMonitoringAccount" TypeID="Windows!Microsoft.Windows.FilteredRegistryDiscoveryProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><RegistryAttributeDefinitions><RegistryAttributeDefinition><AttributeName>WebConsoleUrl</AttributeName><Path>SOFTWARE\Microsoft\System Center Operations
Manager\12\Setup\WebConsole\WEB_CONSOLE_URL</Path><PathType>1</PathType><AttributeType>1</AttributeType></RegistryAttributeDefinition></RegistryAttributeDefinitions><Frequency>86400</Frequency><ClassId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.WebConsoleWatcher"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name><Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value></Setting><Setting><Name>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.WebConsoleWatcher"]/WebConsoleUrl$</Name><Value>$Data/Values/WebConsoleUrl$</Value></Setting><Setting><Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name><Value>Web Console
Watcher($Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$)</Value></Setting></Settings></InstanceSettings><Expression><SimpleExpression><ValueExpression><XPathQuery>Values/WebConsoleUrl</XPathQuery></ValueExpression><Operator>NotEqual</Operator><ValueExpression><Value /></ValueExpression></SimpleExpression></Expression></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.ReportConsoleWatcherDiscovery" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="false" Remotable="false" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryClass TypeID="SCLibrary!Microsoft.SystemCenter.ReportConsoleWatcher"><Property TypeID="System!System.Entity" PropertyID="DisplayName" /><Property PropertyID="ReportConsoleUrl" /></DiscoveryClass></DiscoveryTypes><DataSource ID="DS" RunAs="System!System.PrivilegedMonitoringAccount"
TypeID="Windows!Microsoft.Windows.FilteredRegistryDiscoveryProvider"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><RegistryAttributeDefinitions><RegistryAttributeDefinition><AttributeName>ReportConsoleUrl</AttributeName><Path>SOFTWARE\Microsoft\Microsoft Operations
Manager\3.0\Reporting\ReportingServerUrl</Path><PathType>1</PathType><AttributeType>1</AttributeType></RegistryAttributeDefinition></RegistryAttributeDefinitions><Frequency>86400</Frequency><ClassId>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ReportConsoleWatcher"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name><Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value></Setting><Setting><Name>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ReportConsoleWatcher"]/ReportConsoleUrl$</Name><Value>$Data/Values/ReportConsoleUrl$</Value></Setting><Setting><Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name><Value>Report Console
Watcher($Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$)</Value></Setting></Settings></InstanceSettings><Expression><SimpleExpression><ValueExpression><XPathQuery>Values/ReportConsoleUrl</XPathQuery></ValueExpression><Operator>NotEqual</Operator><ValueExpression><Value /></ValueExpression></SimpleExpression></Expression></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.WebInterfacesGroupPopulator" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.WebUserInterfaces.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.WebUserInterfacesGroup.ContainsWebConsoleWatcher" /><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.WebUserInterfacesGroup.ContainsReportConsoleWatcher" /></DiscoveryTypes><DataSource ID="GroupPopulator"
TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.WebConsoleWatcher"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.WebUserInterfacesGroup.ContainsWebConsoleWatcher"]$</RelationshipClass></MembershipRule><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ReportConsoleWatcher"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.WebUserInterfacesGroup.ContainsReportConsoleWatcher"]$</RelationshipClass></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.ManagementGroup.ContainsDatabaseGroupRelationship" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ManagementGroup" ConfirmDelivery="false" Remotable="true"
Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.ManagementGroup.ContainsDatabaseGroup" /></DiscoveryTypes><DataSource ID="GroupPopulator" TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.DataBaseGroup"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementGroup.ContainsDatabaseGroup"]$</RelationshipClass></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.ManagementGroup.ContainsInfrastructureGroupRelationship" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ManagementGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship
TypeID="SCLibrary!Microsoft.SystemCenter.ManagementGroup.ContainsInfrastructureGroup" /></DiscoveryTypes><DataSource ID="GroupPopulator" TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.Infrastructure.Group"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementGroup.ContainsInfrastructureGroup"]$</RelationshipClass></MembershipRule></MembershipRules></DataSource></Discovery><Discovery ID="Microsoft.SystemCenter.ManagementGroup.ContainsWebInterfacesGroupRelationship" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ManagementGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal"><Category>Discovery</Category><DiscoveryTypes><DiscoveryRelationship TypeID="SCLibrary!Microsoft.SystemCenter.ManagementGroup.ContainsWebUserInterfacesGroup"
/></DiscoveryTypes><DataSource ID="GroupPopulator" TypeID="SCLibrary!Microsoft.SystemCenter.GroupPopulator"><RuleId>$MPElement$</RuleId><GroupInstanceId>$Target/Id$</GroupInstanceId><MembershipRules><MembershipRule><MonitoringClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.WebUserInterfaces.Group"]$</MonitoringClass><RelationshipClass>$MPElement[Name="SCLibrary!Microsoft.SystemCenter.ManagementGroup.ContainsWebUserInterfacesGroup"]$</RelationshipClass></MembershipRule></MembershipRules></DataSource></Discovery></Discoveries><Rules><Rule ID="Microsoft.SystemCenter.CheckForManagementPackUpdates" Enabled="false" Target="SCLibrary!Microsoft.SystemCenter.ManagementGroup" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Custom</Category><DataSources><DataSource ID="Scheduler" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Minutes">1440</Interval></SimpleReccuringSchedule><ExcludeDates
/></Scheduler></DataSource></DataSources><WriteActions><WriteAction ID="CheckForMPUpdate" TypeID="Microsoft.SystemCenter.MPUpdate.CheckForMPUpdate"><MPVersionFileUrl>http://www.microsoft.com/systemcenter/opsmgr/mpupdate/mpupdate.xml</MPVersionFileUrl><DatabaseServerName>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.ManagementGroup"]/SQLServerName$</DatabaseServerName><DatabaseName>$Target/Property[Type="SCLibrary!Microsoft.SystemCenter.ManagementGroup"]/OperationalDatabaseName$</DatabaseName><TimeoutSeconds>300</TimeoutSeconds></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.CollectAlerts" Comment="this rule collects all alerts from the agent" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="High" DiscardLevel="10"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.SystemCenter.PublishedAlertProvider" /></DataSources><WriteActions><WriteAction ID="WA"
TypeID="SCLibrary!Microsoft.SystemCenter.AlertUpdateWriter" Target="SCLibrary!Microsoft.SystemCenter.CollectionManagementServer" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.CollectDiscoveryData" Comment="this rule collects all discovery data from the agent" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="1"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.SystemCenter.PublishedDiscoveryDataProvider" /></DataSources><WriteActions><WriteAction ID="WA" TypeID="SCLibrary!Microsoft.SystemCenter.DiscoveryDataWriter" Target="SCLibrary!Microsoft.SystemCenter.CollectionManagementServer" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.CollectEntityState" Comment="this rule collects states of all entities" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal"
DiscardLevel="40"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Health!System.Health.TargetGroupEntityStateChangeProvider" /></DataSources><WriteActions><WriteAction ID="WA" TypeID="SCLibrary!Microsoft.SystemCenter.CollectEntityHealthStateChange" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.CollectEventData" Comment="this rule collects all event data from the agent" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="60"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.SystemCenter.PublishedEventProvider" /></DataSources><WriteActions><WriteAction ID="WA" TypeID="SCLibrary!Microsoft.SystemCenter.EventWriter" Target="SCLibrary!Microsoft.SystemCenter.CollectionManagementServer" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.CollectMonitorAlert" Comment="this rule collects alerts of all monitors" Enabled="true"
Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="10"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Health!System.Health.TargetGroupMonitorAlertProvider" /></DataSources><WriteActions><WriteAction ID="WA" TypeID="SCLibrary!Microsoft.SystemCenter.CollectAlert" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.CollectPerformanceData" Comment="this rule collects all performance data from the agent" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="90"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.SystemCenter.PublishedPerformanceDataProvider" /></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.PerformanceDataWriter" Target="SCLibrary!Microsoft.SystemCenter.CollectionManagementServer" /></WriteActions></Rule><Rule
ID="Microsoft.SystemCenter.CollectPublishedEntityState" Comment="this rule collects all monitor states from an agent" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="40"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.SystemCenter.PublishedEntityHealthStateChangeProvider" /></DataSources><ConditionDetection ID="PostFilter" TypeID="Microsoft.SystemCenter.DistributedAcknowledgement.PostFilter"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>4506DE47-806E-447f-90BB-20FAEBB7E87E</ChannelId><ItemId>ManagedEntityId=$Data/ManagedEntity$ MonitorId=$Data/Changes/Change/MonitorId$</ItemId><ItemValid>$Data/@InstanceExists$</ItemValid><Cookie>$Data/Changes/Change/EventOriginId$</Cookie></ConditionDetection><WriteActions><WriteAction ID="WA" TypeID="SCLibrary!Microsoft.SystemCenter.EntityHealthStateChangeWriter"
Target="SCLibrary!Microsoft.SystemCenter.CollectionManagementServer" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.CollectPublishedEntityState.Resend" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.SystemCenter.EntityStateResendDataSource"><ChannelId>4506DE47-806E-447f-90BB-20FAEBB7E87E</ChannelId></DataSource></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.DistributedAcknowledgement.DeleteAction"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><ChannelId>4506DE47-806E-447f-90BB-20FAEBB7E87E</ChannelId><ItemId>ManagedEntityId=$Data/ManagedEntity$ MonitorId=$Data/Changes/Change/MonitorId$</ItemId></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.CollectSignatureData" Comment="this rule collects all event data from the agent"
Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="50"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.SystemCenter.PublishedSignatureProvider" /></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.SignatureWriter" Target="SCLibrary!Microsoft.SystemCenter.CollectionManagementServer" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.DependencyMonitor.RemoteContributorReceiver" Comment="this rule handles receiving remote data for dependency monitors" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.CollectionManagementServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="50"><Category>System</Category><DataSources><DataSource ID="DS"
TypeID="Microsoft.SystemCenter.DependencyMonitor.RemoteContributorReceiverDataSource"><DatabasePollingInterval>PT5S</DatabasePollingInterval><BatchSize>100</BatchSize></DataSource></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.DependencyMonitor.UpdateDependencyMonitor"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><MonitorId>$Data/Property[@Name='MonitorId']$</MonitorId><ManagedEntityId>$Data/Property[@Name='ManagedEntityId']$</ManagedEntityId><HealthState>$Data/Property[@Name='State']$</HealthState><TimeChanged>$Data/Property[@Name='LastModified']$</TimeChanged></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.NotifyDependencyMonitorUpdate" Comment="this rule notifies about successful insertion of dependency monitor updates" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.CollectionManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal"
DiscardLevel="50"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.SystemCenter.DistributedAcknowledgement.DependencyMonitorStateChangeProcessed"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId></DataSource></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.PostDistributedAck.DependencyMonitor" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.NotifyPublishedEntityState" Comment="this rule notifies about successful insertion of all state changes" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.CollectionManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="50"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.SystemCenter.PublishedEntityHealthStateChangeNotification" /></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.PostDistributedAck.PublishedEntityHealthStateChange" /></WriteActions></Rule><Rule
ID="Microsoft.SystemCenter.ReadDiscoveryManagerData" Comment="this rule reads discovery data from the discovery manager" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="false" Priority="Normal" DiscardLevel="50"><Category>System</Category><DataSources><DataSource ID="DS" TypeID="Microsoft.SystemCenter.ManagementGroup.DiscoveryDataReader" /></DataSources><WriteActions><WriteAction ID="WA" TypeID="System!System.Discovery.PublishData" /></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.SqlJobs.AlertAutoResolveExecuteAll" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Maintenance</Category><DataSources><DataSource ID="DS" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Days">1</Interval><SyncTime>04:00</SyncTime></SimpleReccuringSchedule><ExcludeDates
/></Scheduler></DataSource></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.SqlJobExecuter"><JobName>p_AlertAutoResolveExecuteAll</JobName></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.SqlJobs.DetectAndFixInstanceSpaceInconsistencies" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Maintenance</Category><DataSources><DataSource ID="DS" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Minutes">30</Interval></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.SqlJobExecuter"><JobName>p_DetectAndFixInstanceSpaceInconsistencies</JobName></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.SqlJobs.DiscoveryDataPurging" Enabled="true"
Target="SCLibrary!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Maintenance</Category><DataSources><DataSource ID="DS" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Days">1</Interval><SyncTime>02:00</SyncTime></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.SqlJobExecuter"><JobName>p_DataPurging</JobName></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.SqlJobs.MaintenanceMode" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Maintenance</Category><DataSources><DataSource ID="DS" TypeID="System!System.SimpleScheduler"><IntervalSeconds>300</IntervalSeconds><SyncTime /></DataSource></DataSources><WriteActions><WriteAction
ID="WA" TypeID="Microsoft.SystemCenter.SqlJobExecuter"><JobName>p_ScheduledJobsEveryFiveMinutes</JobName></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.SqlJobs.OptimizeIndexes" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Maintenance</Category><DataSources><DataSource ID="DS" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Days">1</Interval><SyncTime>02:30</SyncTime></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.SqlJobExecuter"><JobName>p_OptimizeIndexes</JobName></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.SqlJobs.PartitioningAndGrooming" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="false" Remotable="true" Priority="Normal"
DiscardLevel="100"><Category>Maintenance</Category><DataSources><DataSource ID="DS" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Days">1</Interval><SyncTime>00:00</SyncTime></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource></DataSources><WriteActions><WriteAction ID="WA" TypeID="Microsoft.SystemCenter.SqlJobExecuter"><JobName>p_PartitioningAndGrooming</JobName></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.SqlJobs.TransferEvents" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Maintenance</Category><DataSources><DataSource ID="DS" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Minutes">5</Interval></SimpleReccuringSchedule><ExcludeDates /></Scheduler></DataSource></DataSources><WriteActions><WriteAction ID="WA"
TypeID="Microsoft.SystemCenter.SqlJobExecuter"><JobName>p_EventTransfer</JobName></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.UpdatesForInstalledManagementPacksAvailable" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Custom</Category><DataSources><DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider"><ComputerName>.</ComputerName><LogName>Operations Manager</LogName><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">2000</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value
Type="String">Health Service Script</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">MPUpdate</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource></DataSources><WriteActions><WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert"><Priority>1</Priority><Severity>0</Severity><AlertName /><AlertDescription /><AlertMessageId>$MPElement[Name="Microsoft.SystemCenter.UpdatesForInstalledManagementPacksAvailable.AlertMessage"]$</AlertMessageId><AlertParameters><AlertParameter1>$Data/EventDescription$</AlertParameter1></AlertParameters><Suppression><SuppressionValue>$Data/EventDescription$</SuppressionValue></Suppression></WriteAction></WriteActions></Rule><Rule ID="Microsoft.SystemCenter.ValidateAlertSubscription" Enabled="false"
Target="SCLibrary!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100"><Category>Discovery</Category><DataSources><DataSource ID="DS" TypeID="SCLibrary!Microsoft.SystemCenter.ValidateSubscribedAlertProvider"><PollingIntervalMinutes>30</PollingIntervalMinutes></DataSource></DataSources><WriteActions><WriteAction ID="WA" TypeID="System!System.CommandExecuter"><ApplicationName /><WorkingDirectory /><CommandLine /><TimeoutSeconds>100</TimeoutSeconds><RequireOutput>true</RequireOutput><Files /></WriteAction></WriteActions></Rule></Rules><Tasks><Task ID="Microsoft.SystemCenter.GetAllFailedWorkflows" Comment="Request list of all failed workflows" Accessibility="Internal" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" Timeout="300" Remotable="true"><Category>Maintenance</Category><ProbeAction ID="FailedWorkflows"
TypeID="Microsoft.SystemCenter.GetWorkflowsReportProbe"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><Status>Failed</Status></ProbeAction></Task><Task ID="Microsoft.SystemCenter.GetAllRunningWorkflows" Comment="Request list of all running workflows" Accessibility="Internal" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" Timeout="300" Remotable="true"><Category>Maintenance</Category><ProbeAction ID="RunningWorkflows" TypeID="Microsoft.SystemCenter.GetWorkflowsReportProbe"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><Status>Running</Status></ProbeAction></Task><Task ID="Microsoft.SystemCenter.HealthServiceStoreMaintenance" Comment="Request that the Health Service do ESE store maintenance" Accessibility="Internal" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" Timeout="300" Remotable="true"><Category>Maintenance</Category><WriteAction ID="HealthServiceStoreMaintenanceAction"
TypeID="Microsoft.SystemCenter.HealthServiceStoreMaintenanceAction" /></Task><Task ID="Microsoft.SystemCenter.ReloadConfig" Comment="Request Configuration Reload" Accessibility="Internal" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" Timeout="300" Remotable="true"><Category>Maintenance</Category><WriteAction ID="ReloadConfig" TypeID="Microsoft.SystemCenter.ReloadConfigAction"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId></WriteAction></Task><Task ID="Microsoft.SystemCenter.ResetHealthServiceStore" Comment="Request Health Service Store Reset" Accessibility="Internal" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.HealthService" Timeout="300" Remotable="true"><Category>Maintenance</Category><WriteAction ID="ResetServiceStore" TypeID="Microsoft.SystemCenter.ResetServiceStoreAction" /></Task><Task ID="Microsoft.SystemCenter.TriggerOnDemandDiscovery" Comment="Trigger On Demand Discovery" Accessibility="Public" Enabled="true"
Target="SCLibrary!Microsoft.SystemCenter.HealthService" Timeout="300" Remotable="false"><Category>Maintenance</Category><WriteAction ID="TriggerOnDemandDiscovery" TypeID="Microsoft.SystemCenter.OnDemandDiscoveryTriggerAction"><ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId><DiscoveryId /><TargetInstanceId>$Target/Id$</TargetInstanceId><TaskTimeoutSeconds>300</TaskTimeoutSeconds></WriteAction></Task></Tasks><Monitors><UnitMonitor ID="Microsoft.SystemCenter.SDKService.DatabaseConnectivity" Accessibility="Internal" Enabled="false" Target="SCLibrary!Microsoft.SystemCenter.RootManagementServer" ParentMonitorID="SCLibrary!Microsoft.SystemCenter.SDKService.AvailabilityHealthRollup" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.2SingleEventLog2StateMonitorType" ConfirmDelivery="true"><Category>StateCollection</Category><AlertSettings
AlertMessage="Microsoft.SystemCenter.SDKService.DatabaseConnectivity.AlertMessage"><AlertOnState>Error</AlertOnState><AutoResolve>true</AutoResolve><AlertPriority>High</AlertPriority><AlertSeverity>Error</AlertSeverity></AlertSettings><OperationalStates><OperationalState ID="DatabaseConnectivityLost" MonitorTypeStateID="FirstEventRaised" HealthState="Error" /><OperationalState ID="DatabaseConnectivityEstablished" MonitorTypeStateID="SecondEventRaised" HealthState="Success" /></OperationalStates><Configuration><FirstComputerName>.</FirstComputerName><FirstLogName>Operations Manager</FirstLogName><FirstExpression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">26330</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">OpsMgr SDK Service</Value></ValueExpression></SimpleExpression></Expression></And></FirstExpression><SecondComputerName>.</SecondComputerName><SecondLogName>Operations Manager</SecondLogName><SecondExpression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">26331</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">OpsMgr SDK Service</Value></ValueExpression></SimpleExpression></Expression></And></SecondExpression></Configuration></UnitMonitor><UnitMonitor ID="Microsoft.SystemCenter.SDKService.PortAvailability" Accessibility="Internal"
Enabled="false" Target="SCLibrary!Microsoft.SystemCenter.RootManagementServer" ParentMonitorID="SCLibrary!Microsoft.SystemCenter.SDKService.AvailabilityHealthRollup" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.2SingleEventLog2StateMonitorType" ConfirmDelivery="true"><Category>StateCollection</Category><AlertSettings AlertMessage="Microsoft.SystemCenter.SDKService.PortAvailability.AlertMessage"><AlertOnState>Error</AlertOnState><AutoResolve>true</AutoResolve><AlertPriority>High</AlertPriority><AlertSeverity>Error</AlertSeverity></AlertSettings><OperationalStates><OperationalState ID="PortUnavailable" MonitorTypeStateID="FirstEventRaised" HealthState="Error" /><OperationalState ID="PortAvailable" MonitorTypeStateID="SecondEventRaised" HealthState="Success" /></OperationalStates><Configuration><FirstComputerName>.</FirstComputerName><FirstLogName>Operations Manager</FirstLogName><FirstExpression><And><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">26368</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">OpsMgr SDK Service</Value></ValueExpression></SimpleExpression></Expression></And></FirstExpression><SecondComputerName>.</SecondComputerName><SecondLogName>Operations Manager</SecondLogName><SecondExpression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="Integer">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="Integer">26369</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery
Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">OpsMgr SDK Service</Value></ValueExpression></SimpleExpression></Expression></And></SecondExpression></Configuration></UnitMonitor><UnitMonitor ID="Microsoft.SystemCenter.SDKService.ServiceMonitor" Accessibility="Internal" Enabled="false" Target="SCLibrary!Microsoft.SystemCenter.RootManagementServer" ParentMonitorID="SCLibrary!Microsoft.SystemCenter.SDKService.AvailabilityHealthRollup" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.CheckNTServiceStateMonitorType" ConfirmDelivery="true"><Category>StateCollection</Category><AlertSettings AlertMessage="Microsoft.SystemCenter.SDKService.ServiceMonitor.AlertMessage"><AlertOnState>Error</AlertOnState><AutoResolve>true</AutoResolve><AlertPriority>High</AlertPriority><AlertSeverity>Error</AlertSeverity></AlertSettings><OperationalStates><OperationalState ID="Running" MonitorTypeStateID="Running"
HealthState="Success" /><OperationalState ID="NotRunning" MonitorTypeStateID="NotRunning" HealthState="Error" /></OperationalStates><Configuration><ComputerName>.</ComputerName><ServiceName>OMSDK</ServiceName></Configuration></UnitMonitor><DependencyMonitor ID="Microsoft.SystemCenter.DataBaseGroup.DependOnOpsMgrDBWatchersGroup.AvailabilityRollup" Accessibility="Public" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.DataBaseGroup" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" RelationshipType="SCLibrary!Microsoft.SystemCenter.DataBaseGroup.ContainsOpsMgrDBWatchersGroup" MemberMonitor="Health!System.Health.AvailabilityState"><Category>AvailabilityHealth</Category><Algorithm>WorstOf</Algorithm><MemberUnAvailable>Error</MemberUnAvailable></DependencyMonitor><DependencyMonitor ID="Microsoft.SystemCenter.DataBaseGroup.DependOnOpsMgrDWWatchersGroup.AvailabilityRollup" Accessibility="Public" Enabled="true"
Target="SCLibrary!Microsoft.SystemCenter.DataBaseGroup" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" RelationshipType="SCLibrary!Microsoft.SystemCenter.DataBaseGroup.ContainsOpsMgrDWWatchersGroup" MemberMonitor="Health!System.Health.AvailabilityState"><Category>AvailabilityHealth</Category><Algorithm>WorstOf</Algorithm><MemberUnAvailable>Error</MemberUnAvailable></DependencyMonitor><DependencyMonitor ID="Microsoft.SystemCenter.OpsMgrDWWatchersGroup.DependOnOpsMgrDWWatchers.AvailabilityRollup" Accessibility="Public" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.OpsMgrDWWatchersGroup" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" RelationshipType="SCLibrary!Microsoft.SystemCenter.OpsMgrDWWatchersGroup.ContainsOpsMgrDWWatchers"
MemberMonitor="Health!System.Health.AvailabilityState"><Category>AvailabilityHealth</Category><Algorithm>WorstOf</Algorithm><MemberUnAvailable>Error</MemberUnAvailable></DependencyMonitor><DependencyMonitor ID="Microsoft.SystemCenter.InfrastructureGroup.DependOnManagementServerGroups.AvailabilityRollup" Accessibility="Public" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.Infrastructure.Group" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" RelationshipType="SCLibrary!Microsoft.SystemCenter.InfrastructureGroup.ContainsManagementServerGroups" MemberMonitor="Health!System.Health.AvailabilityState"><Category>AvailabilityHealth</Category><Algorithm>WorstOf</Algorithm></DependencyMonitor><DependencyMonitor ID="Microsoft.SystemCenter.InfrastructureGroup.DependOnGatewayManagementServerGroups.AvailabilityRollup" Accessibility="Public" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.Infrastructure.Group"
ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" RelationshipType="SCLibrary!Microsoft.SystemCenter.InfrastructureGroup.ContainsGatewayManagementServerGroups" MemberMonitor="Health!System.Health.AvailabilityState"><Category>AvailabilityHealth</Category><Algorithm>WorstOf</Algorithm></DependencyMonitor><DependencyMonitor ID="Microsoft.SystemCenter.ManagementGroup.Group.DependOnDatabaseGroup.AvailabilityRollup" Accessibility="Public" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ManagementGroup" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" RelationshipType="SCLibrary!Microsoft.SystemCenter.ManagementGroup.ContainsDatabaseGroup" MemberMonitor="Health!System.Health.AvailabilityState"><Category>AvailabilityHealth</Category><Algorithm>WorstOf</Algorithm><MemberUnAvailable>Error</MemberUnAvailable></DependencyMonitor><DependencyMonitor
ID="Microsoft.SystemCenter.ManagementGroup.Group.DependOnInfrastructureGroup.AvailabilityRollup" Accessibility="Public" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ManagementGroup" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" RelationshipType="SCLibrary!Microsoft.SystemCenter.ManagementGroup.ContainsInfrastructureGroup" MemberMonitor="Health!System.Health.AvailabilityState"><Category>AvailabilityHealth</Category><Algorithm>WorstOf</Algorithm><MemberUnAvailable>Error</MemberUnAvailable></DependencyMonitor><DependencyMonitor ID="Microsoft.SystemCenter.ManagementGroup.Group.DependOnWebUserInterfacesGroup.AvailabilityRollup" Accessibility="Public" Enabled="true" Target="SCLibrary!Microsoft.SystemCenter.ManagementGroup" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" RelationshipType="SCLibrary!Microsoft.SystemCenter.ManagementGroup.ContainsWebUserInterfacesGroup"
MemberMonitor="Health!System.Health.AvailabilityState"><Category>AvailabilityHealth</Category><Algorithm>WorstOf</Algorithm><MemberUnAvailable>Error</MemberUnAvailable></DependencyMonitor></Monitors><Recoveries><Recovery ID="Microsoft.SystemCenter.SDKService.AutomaticallyRestart" Accessibility="Internal" Enabled="false" Target="SCLibrary!Microsoft.SystemCenter.RootManagementServer" Monitor="Microsoft.SystemCenter.SDKService.ServiceMonitor" ResetMonitor="false" ExecuteOnState="Error" Remotable="true" Timeout="300"><Category>Maintenance</Category><WriteAction ID="RestartService" TypeID="System!System.CommandExecuter"><ApplicationName>%Windir%\System32\net.exe</ApplicationName><WorkingDirectory /><CommandLine>start OMSDK</CommandLine><TimeoutSeconds>300</TimeoutSeconds><RequireOutput>true</RequireOutput></WriteAction></Recovery></Recoveries></Monitoring><PresentationTypes><ViewTypes><ViewType ID="Microsoft.SystemCenter.AttributesViewType"
Accessibility="Public"><Configuration><IncludeSchemaTypes><SchemaType>SCLibrary!Microsoft.SystemCenter.ViewCriteriaSchema</SchemaType></IncludeSchemaTypes></Configuration><ViewImplementation><Assembly>Res.Microsoft.SystemCenter.AttributesViewType</Assembly><Type>Microsoft.EnterpriseManagement.Internal.UI.Authoring.Views.AttributesFlatView</Type></ViewImplementation></ViewType><ViewType ID="Microsoft.SystemCenter.DiscoveriesViewType" Accessibility="Public"><Configuration><IncludeSchemaTypes><SchemaType>SCLibrary!Microsoft.SystemCenter.ViewCriteriaSchema</SchemaType></IncludeSchemaTypes></Configuration><ViewImplementation><Assembly>Res.Microsoft.SystemCenter.DiscoveriesViewType</Assembly><Type>Microsoft.EnterpriseManagement.Internal.UI.Authoring.Views.DiscoveriesView</Type></ViewImplementation></ViewType><ViewType ID="Microsoft.SystemCenter.FavoriteViewType" Accessibility="Public"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ViewId" type="xsd:string"
minOccurs="1" maxOccurs="1" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="TargetId" type="xsd:string" minOccurs="1" maxOccurs="1" /></Configuration><ViewImplementation><Assembly>Res.Microsoft.SystemCenter.FavoriteViewType</Assembly><Type>NotUsed</Type></ViewImplementation></ViewType><ViewType ID="Microsoft.SystemCenter.HTMLDashboardViewType" Comment="HTML5 Dashboard View" Accessibility="Public"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="DashboardConfiguration" minOccurs="1" maxOccurs="1"><xsd:complexType><xsd:sequence><xsd:element name="Configuration" type="xsd:string" minOccurs="1" maxOccurs="1" /><xsd:element name="Type" minOccurs="1" maxOccurs="1" type="xsd:string" /><xsd:element name="Widgets" minOccurs="1" maxOccurs="1"><xsd:complexType><xsd:sequence><xsd:element name="Widget" type="xsd:string" minOccurs="0" maxOccurs="unbounded"
/></xsd:sequence></xsd:complexType></xsd:element></xsd:sequence></xsd:complexType></xsd:element></Configuration><ViewImplementation><Assembly>Res.Microsoft.SystemCenter.HTMLDashboardViewType</Assembly><Type>NotUsed</Type></ViewImplementation></ViewType><ViewType ID="Microsoft.SystemCenter.HTMLWidgetType" Comment="HTML5 Widget" Accessibility="Public"><Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="WidgetConfiguration" minOccurs="1" maxOccurs="1"><xsd:complexType><xsd:sequence><xsd:element name="Configuration" minOccurs="1" maxOccurs="1" type="xsd:string" /><xsd:element name="Type" minOccurs="1" maxOccurs="1" type="xsd:string" /></xsd:sequence></xsd:complexType></xsd:element></Configuration><ViewImplementation><Assembly>Res.Microsoft.SystemCenter.HTMLWidgetType</Assembly><Type>NotUsed</Type></ViewImplementation></ViewType><ViewType ID="Microsoft.SystemCenter.HealthViewType"
Accessibility="Public"><Configuration><IncludeSchemaTypes><SchemaType>SCLibrary!Microsoft.SystemCenter.ViewCriteriaSchema</SchemaType></IncludeSchemaTypes></Configuration><ViewImplementation><Assembly>Res.Microsoft.SystemCenter.HealthViewType</Assembly><Type>Microsoft.EnterpriseManagement.Internal.UI.Authoring.Views.HealthView</Type></ViewImplementation></ViewType><ViewType ID="Microsoft.SystemCenter.MonitoringNavigationType" Accessibility="Public"><Configuration><IncludeSchemaTypes><SchemaType>SCLibrary!Microsoft.SystemCenter.MonitoringViewNavigationSchema</SchemaType></IncludeSchemaTypes><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Folder" type="FolderType" minOccurs="0" maxOccurs="unbounded" /></Configuration><ViewImplementation><Assembly>Res.Microsoft.SystemCenter.MonitoringNavigationType</Assembly><Type>Microsoft.EnterpriseManagement.Mom.Internal.UI.Console.MonitoringPage</Type></ViewImplementation></ViewType><ViewType ID="Microsoft.SystemCenter.RulesViewType"
Accessibility="Public"><Configuration><IncludeSchemaTypes><SchemaType>SCLibrary!Microsoft.SystemCenter.ViewCriteriaSchema</SchemaType></IncludeSchemaTypes></Configuration><ViewImplementation><Assembly>Res.Microsoft.SystemCenter.RulesViewType</Assembly><Type>Microsoft.EnterpriseManagement.Internal.UI.Authoring.Views.RulesView</Type></ViewImplementation></ViewType><ViewType ID="Microsoft.SystemCenter.SlaViewType" Accessibility="Public"><Configuration><IncludeSchemaTypes><SchemaType>SCLibrary!Microsoft.SystemCenter.ViewCriteriaSchema</SchemaType></IncludeSchemaTypes></Configuration><ViewImplementation><Assembly>Res.Microsoft.SystemCenter.SlaViewType</Assembly><Type>Microsoft.EnterpriseManagement.Internal.UI.Authoring.Views.SlaView</Type></ViewImplementation></ViewType><ViewType ID="Microsoft.SystemCenter.TasksViewType"
Accessibility="Public"><Configuration><IncludeSchemaTypes><SchemaType>SCLibrary!Microsoft.SystemCenter.ViewCriteriaSchema</SchemaType></IncludeSchemaTypes></Configuration><ViewImplementation><Assembly>Res.Microsoft.SystemCenter.TasksViewType</Assembly><Type>Microsoft.EnterpriseManagement.Internal.UI.Authoring.Views.TasksView</Type></ViewImplementation></ViewType><ViewType ID="Microsoft.SystemCenter.OverridesViewType" Accessibility="Public"><Configuration><IncludeSchemaTypes><SchemaType>SCLibrary!Microsoft.SystemCenter.ViewCriteriaSchema</SchemaType></IncludeSchemaTypes></Configuration><ViewImplementation><Assembly>Res.Microsoft.SystemCenter.OverridesViewType</Assembly><Type>Microsoft.EnterpriseManagement.Internal.UI.Authoring.Views.OverridesView</Type></ViewImplementation></ViewType><ViewType ID="Microsoft.SystemCenter.ViewDefinitionsViewType"
Accessibility="Public"><Configuration><IncludeSchemaTypes><SchemaType>SCLibrary!Microsoft.SystemCenter.ViewCriteriaSchema</SchemaType></IncludeSchemaTypes></Configuration><ViewImplementation><Assembly>Res.Microsoft.SystemCenter.ViewDefinitionsViewType</Assembly><Type>Microsoft.EnterpriseManagement.Internal.UI.Authoring.Views.ViewDefinitionsView</Type></ViewImplementation></ViewType></ViewTypes></PresentationTypes><Presentation><Views><View ID="Microsoft.SystemCenter.AlertView" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SCLibrary!Microsoft.SystemCenter.AlertViewType" Visible="true"><Category>Operations</Category><Criteria><ResolutionState><State>0</State></ResolutionState></Criteria><Presentation /></View><View ID="Microsoft.SystemCenter.AttributesView" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="Microsoft.SystemCenter.AttributesViewType" Visible="true"><Category>MonitoringConfiguration</Category></View><View
ID="Microsoft.SystemCenter.DiagramView" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SCLibrary!Microsoft.SystemCenter.DiagramViewType" Visible="true"><Category>Operations</Category></View><View ID="Microsoft.SystemCenter.DiscoveriesView" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="Microsoft.SystemCenter.DiscoveriesViewType" Visible="true"><Category>MonitoringConfiguration</Category></View><View ID="Microsoft.SystemCenter.EventView" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SCLibrary!Microsoft.SystemCenter.EventViewType" Visible="true"><Category>Operations</Category><Presentation /></View><View ID="Microsoft.SystemCenter.HealthView" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="Microsoft.SystemCenter.HealthViewType" Visible="true"><Category>MonitoringConfiguration</Category></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.AllHighSeverityAlerts"
Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SCLibrary!Microsoft.SystemCenter.AlertViewType" Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Error</Severity></SeverityList></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.ComputerAlerts" Comment="these are views that are launch from the control MonitoringSplashView" Accessibility="Public" Enabled="true" Target="System!System.Computer" TypeID="SCLibrary!Microsoft.SystemCenter.AlertViewType" Visible="true"><Category>Operations</Category><Criteria><TimeCreated><WithinLast Unit="Day">1</WithinLast></TimeCreated></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.ComputerHighSeverityAlerts" Accessibility="Public" Enabled="true" Target="System!System.Computer" TypeID="SCLibrary!Microsoft.SystemCenter.AlertViewType"
Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Error</Severity></SeverityList><TimeCreated><WithinLast Unit="Day">1</WithinLast></TimeCreated></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.ComputerLowSeverityAlerts" Accessibility="Public" Enabled="true" Target="System!System.Computer" TypeID="SCLibrary!Microsoft.SystemCenter.AlertViewType" Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Success</Severity></SeverityList><TimeCreated><WithinLast Unit="Day">1</WithinLast></TimeCreated></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.ComputerMediumSeverityAlerts" Accessibility="Public" Enabled="true" Target="System!System.Computer" TypeID="SCLibrary!Microsoft.SystemCenter.AlertViewType" Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Warning</Severity></SeverityList><TimeCreated><WithinLast
Unit="Day">1</WithinLast></TimeCreated></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.ComputersErrorStateView" Accessibility="Public" Enabled="true" Target="System!System.Computer" TypeID="SCLibrary!Microsoft.SystemCenter.StateViewType" Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Red</Severity></SeverityList></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.ComputersMaintenanceStateView" Accessibility="Public" Enabled="true" Target="System!System.Computer" TypeID="SCLibrary!Microsoft.SystemCenter.StateViewType" Visible="true"><Category>Operations</Category><Criteria><InMaintenanceMode>true</InMaintenanceMode></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.ComputersSuccessStateView" Accessibility="Public" Enabled="true" Target="System!System.Computer" TypeID="SCLibrary!Microsoft.SystemCenter.StateViewType"
Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Green</Severity></SeverityList></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.ComputersUnknownStateView" Accessibility="Public" Enabled="true" Target="System!System.Computer" TypeID="SCLibrary!Microsoft.SystemCenter.StateViewType" Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Unknown</Severity></SeverityList></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.ComputersWarningStateView" Accessibility="Public" Enabled="true" Target="System!System.Computer" TypeID="SCLibrary!Microsoft.SystemCenter.StateViewType" Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Yellow</Severity></SeverityList></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.DistAppErrorStateView" Accessibility="Public" Enabled="true" Target="System!System.Service"
TypeID="SCLibrary!Microsoft.SystemCenter.StateViewType" Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Red</Severity></SeverityList></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.DistAppMaintenanceStateView" Accessibility="Public" Enabled="true" Target="System!System.Service" TypeID="SCLibrary!Microsoft.SystemCenter.StateViewType" Visible="true"><Category>Operations</Category><Criteria><InMaintenanceMode>true</InMaintenanceMode></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.DistAppSuccessStateView" Accessibility="Public" Enabled="true" Target="System!System.Service" TypeID="SCLibrary!Microsoft.SystemCenter.StateViewType" Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Green</Severity></SeverityList></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.DistAppUnknownStateView" Accessibility="Public" Enabled="true" Target="System!System.Service"
TypeID="SCLibrary!Microsoft.SystemCenter.StateViewType" Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Unknown</Severity></SeverityList></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.DistAppWarningStateView" Accessibility="Public" Enabled="true" Target="System!System.Service" TypeID="SCLibrary!Microsoft.SystemCenter.StateViewType" Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Yellow</Severity></SeverityList></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.HighSeverityAlerts" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SCLibrary!Microsoft.SystemCenter.AlertViewType" Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Error</Severity></SeverityList><TimeCreated><WithinLast Unit="Day">1</WithinLast></TimeCreated></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.LowSeverityAlerts"
Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SCLibrary!Microsoft.SystemCenter.AlertViewType" Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Success</Severity></SeverityList><TimeCreated><WithinLast Unit="Day">1</WithinLast></TimeCreated></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.MediumSeverityAlerts" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SCLibrary!Microsoft.SystemCenter.AlertViewType" Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Warning</Severity></SeverityList><TimeCreated><WithinLast Unit="Day">1</WithinLast></TimeCreated></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.OtherAlerts" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SCLibrary!Microsoft.SystemCenter.AlertViewType" Visible="true"><Category>Operations</Category><Criteria><TimeCreated><WithinLast
Unit="Day">1</WithinLast></TimeCreated></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.ServiceAlerts" Accessibility="Public" Enabled="true" Target="System!System.Service" TypeID="SCLibrary!Microsoft.SystemCenter.AlertViewType" Visible="true"><Category>Operations</Category><Criteria><TimeCreated><WithinLast Unit="Day">1</WithinLast></TimeCreated></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.ServiceHighSeverityAlerts" Accessibility="Public" Enabled="true" Target="System!System.Service" TypeID="SCLibrary!Microsoft.SystemCenter.AlertViewType" Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Error</Severity></SeverityList><TimeCreated><WithinLast Unit="Day">1</WithinLast></TimeCreated></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.ServiceLowSeverityAlerts" Accessibility="Public" Enabled="true" Target="System!System.Service" TypeID="SCLibrary!Microsoft.SystemCenter.AlertViewType"
Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Success</Severity></SeverityList><TimeCreated><WithinLast Unit="Day">1</WithinLast></TimeCreated></Criteria></View><View ID="Microsoft.SystemCenter.MonitoringSplashView.ServiceMediumSeverityAlerts" Accessibility="Public" Enabled="true" Target="System!System.Service" TypeID="SCLibrary!Microsoft.SystemCenter.AlertViewType" Visible="true"><Category>Operations</Category><Criteria><SeverityList><Severity>Warning</Severity></SeverityList><TimeCreated><WithinLast Unit="Day">1</WithinLast></TimeCreated></Criteria></View><View ID="Microsoft.SystemCenter.PerformanceView" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SCLibrary!Microsoft.SystemCenter.PerformanceViewType" Visible="true"><Category>Operations</Category><Presentation /></View><View ID="Microsoft.SystemCenter.RulesView" Accessibility="Public" Enabled="true" Target="System!System.Entity"
TypeID="Microsoft.SystemCenter.RulesViewType" Visible="true"><Category>MonitoringConfiguration</Category></View><View ID="Microsoft.SystemCenter.OverridesView" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="Microsoft.SystemCenter.OverridesViewType" Visible="true"><Category>MonitoringConfiguration</Category></View><View ID="Microsoft.SystemCenter.SlaView" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="Microsoft.SystemCenter.SlaViewType" Visible="true"><Category>MonitoringConfiguration</Category></View><View ID="Microsoft.SystemCenter.StateView" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SCLibrary!Microsoft.SystemCenter.StateViewType" Visible="true"><Category>Operations</Category><Presentation /></View><View ID="Microsoft.SystemCenter.SystemEntityClassDefinitionView" Accessibility="Public" Enabled="true" Target="System!System.Entity"
TypeID="SCLibrary!Microsoft.SystemCenter.StateDetailDefinitionViewType" Visible="true"><Category>Operations</Category><Monitors><Monitor>$MPElement[Name='Health!System.Health.AvailabilityState']$</Monitor><Monitor>$MPElement[Name='Health!System.Health.ConfigurationState']$</Monitor><Monitor>$MPElement[Name='Health!System.Health.PerformanceState']$</Monitor><Monitor>$MPElement[Name='Health!System.Health.SecurityState']$</Monitor></Monitors></View><View ID="Microsoft.SystemCenter.TasksView" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="Microsoft.SystemCenter.TasksViewType" Visible="true"><Category>MonitoringConfiguration</Category></View><View ID="Microsoft.SystemCenter.ViewDefinitionsView" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="Microsoft.SystemCenter.ViewDefinitionsViewType" Visible="true"><Category>MonitoringConfiguration</Category></View></Views><StringResources><StringResource
ID="Microsoft.SystemCenter.OperationsManager.Availability.ContainerData.DateAndTime" /><StringResource ID="Microsoft.SystemCenter.OperationsManager.Availability.ContainerData.States" /><StringResource ID="Microsoft.SystemCenter.OperationsManager.RoutingData.Cost" /><StringResource ID="Microsoft.SystemCenter.OperationsManager.RoutingData.DateAndTime" /><StringResource ID="Microsoft.SystemCenter.OperationsManager.RoutingData.DefaultRoute" /><StringResource ID="Microsoft.SystemCenter.OperationsManager.RoutingData.HealthServiceId" /><StringResource ID="Microsoft.SystemCenter.OperationsManager.RoutingData.NextDestinations" /><StringResource ID="Microsoft.SystemCenter.OperationsManager.RoutingData.ParkHoldString" /><StringResource ID="Microsoft.SystemCenter.OperationsManager.RoutingData.RootConnector" /><StringResource ID="Microsoft.SystemCenter.OperationsManager.RoutingData.ShowHideString" /><StringResource ID="Microsoft.SystemCenter.OperationsManager.RoutingData.TargetID"
/><StringResource ID="Microsoft.SystemCenter.OperationsManager.RoutingData.TargetName" /><StringResource ID="Microsoft.SystemCenter.SDKService.DatabaseConnectivity.AlertMessage" /><StringResource ID="Microsoft.SystemCenter.SDKService.PortAvailability.AlertMessage" /><StringResource ID="Microsoft.SystemCenter.SDKService.ServiceMonitor.AlertMessage" /><StringResource ID="Microsoft.SystemCenter.UpdatesForInstalledManagementPacksAvailable.AlertMessage" /></StringResources></Presentation><LanguagePacks><LanguagePack ID="ENU" IsDefault="true"><DisplayStrings><DisplayString ElementID="Microsoft.SystemCenter.ActionAccount"><Name>Default Action Account</Name><Description>The default Health Service Action Account</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ADIntegrationRelationshipDiscovery"><Name>Agent Relationship Discovery Data Source</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ADIntegrationRelationshipDiscovery"
SubElementID="IntervalSeconds"><Name>Interval Seconds</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ADIntegrationRelationshipDiscovery" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ADManagedComputerDiscovery"><Name>Agent Relationship Discovery Data Source</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ADManagedComputerDiscovery" SubElementID="IntervalSeconds"><Name>Interval Seconds</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ADManagedComputerDiscovery" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.Agent.PatchDiscovery"><Name>Discovers the list of patches installed on Agents</Name><Description>This script runs on HealthService instances and finds a list of Operations Manager Patches that are currently applied to an
Agent.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.Agent.PatchDiscoveryProvider"><Name>This ModuleType uses VBScript to discover the list of patches installed on Agents</Name><Description>This moduletype runs as a part of a Discovery and finds the list of all Operations Manager patches installed on Agents.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.Agent.PatchDiscoveryProvider" SubElementID="IntervalSeconds"><Name>Interval Seconds</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.Agent.PatchDiscoveryProvider" SubElementID="SyncTime"><Name>Synchronization Time</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.Agent.PatchDiscoveryProvider" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.AgentManagement.PushInstallAction"><Name>Agent Manager Push Installer Action</Name></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.AlertView"><Name>Alerts</Name><Description>Displays all alerts</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.AttributesView"><Name>Attributes</Name><Description>View/Add/Edit attributes for types defined in management packs</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.CheckForManagementPackUpdates"><Name>Check for Updated Management Packs</Name><Description>Periodically checks the internet for new updated Microsoft Management Packs.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.CollectAlerts"><Name>Collect Alerts</Name><Description>System rule that collects alert data from any object.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.CollectDiscoveryData"><Name>Collect Discovery Data</Name><Description>System rule that collects discovery data from any object.</Description></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.CollectEntityState"><Name>Collect state change events of all monitors in the system</Name><Description>This rule collects all state change events in the system</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.CollectEventData"><Name>Collect Events</Name><Description>System rule that collects events from any object.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.CollectMonitorAlert"><Name>Collect Monitor Generated Alerts</Name><Description>System rule that collects alerts generated from monitors.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.CollectPerformanceData"><Name>Collect Performance Data</Name><Description>System rule that collects performance data from any object.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.CollectPublishedEntityState"><Name>Collect Object State</Name><Description>System rule that collects state change
events from any object.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.CollectPublishedEntityState.Resend"><Name>Collect Object State - Resend</Name><Description>Support rule for the Collect Object State to resend items not received by the database on the first try.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.CollectSignatureData"><Name>Collect Performance Signatures</Name><Description>System rule that collects performance signature data from any object.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DependencyMonitor.RemoteContributorReceiver"><Name>Dependency Monitor Remote Contributor Receiver</Name><Description>System rule for receiving data for dependency monitors with contributors on other systems.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DependencyMonitor.RemoteContributorReceiverDataSource"><Name>Dependency Monitor Remote Contributor Receiver
Data Source</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DependencyMonitor.UpdateDependencyMonitor"><Name>Dependency Monitor Update Write Action</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DiagramView"><Name>Diagram View</Name><Description>Displays diagram view of a managed entity</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DiscoverADManagedComputer"><Name>Discover Agent Relationship Settings object</Name><Description>Discovers and creates Agent Relationship Settings objects. This object is used in conjunction with Active Directory Integration</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DiscoverHealthServiceProperties"><Name>Discover Health Service Properties</Name><Description>Discover properties on the Health Service type.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DiscoveriesView"><Name>Object
Discoveries</Name><Description>View/edit object discoveries for classes defined in management packs</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DiscoverIsVirtualMachineTrue"><Name>Discover if Windows Computer is a Virtual Machine</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DiscoverLogicalProcessors"><Name>Discover number of logical processors</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DiscoverOpsMgrDBWatchersGroupContainsOpsMgrDBWatcherRelationship"><Name>Discover Operational Database Watchers Group</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DiscoverWindowsClientComputer"><Name>Discover Windows Client Computers</Name><Description>Discovers Windows client computers</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DiscoverWindowsComputerProperties"><Name>Discover Windows Computer Properties</Name><Description>Discovers properties on the
Windows computer class</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DiscoverWindowsOSProperties"><Name>Discovery Operating System Properties</Name><Description>Discovers properties on the Operating System class</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DiscoverWindowsProductType"><Name>Discover Windows Product Type</Name><Description>Discover a what type of windows computer the Health Service is installed on.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DiscoverWindowsServerComputer"><Name>Discover Windows Server Computers</Name><Description>Discovers Windows Server computers</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DiscoverWindowsServerDCComputer"><Name>Discover Windows Domain Controllers</Name><Description>Discovers Windows Server domain controllers</Description></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.DiscoveryDataReader"><Name>Discovery Data Reader</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DiscoveryFilter"><Name>Discovery Cache Filter</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DiscoveryHealthServiceCommunication"><Name>Discovery Health Service Primary and Failover relationships</Name><Description>Discover the primary relationships and failover relationships for an agent that is configured for AD Integration.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DistributedAcknowledgement.DependencyMonitorStateChangeProcessed"><Name>Dependency Monitor State Changed Processed Data Source</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.EventView"><Name>Events</Name><Description>Displays all events</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.GetAllFailedWorkflows"><Name>Show Failed Rules and Monitors for this Health
Service</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.GetAllRunningWorkflows"><Name>Show Running Rules and Monitors for this Health Service</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.GetWorkflowsReportProbe"><Name>Get Workflows Probe</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthServicePropertyDiscovery"><Name>Health Service Property Discovery Data Source</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthServicePropertyDiscovery" SubElementID="IntervalSeconds"><Name>Interval Seconds</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthServicePropertyDiscovery" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthServiceStoreMaintenance"><Name>Start Online Store Maintenance</Name><Description>This task will start online store maintenance for the Health Service ESE store. 
Normally store maintenance will run periodically as part of a rule but this task allows store maintenance to be initiated on demand.  Store maintenance will perform an online defragmentation of the Health Service ESE store.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthServiceStoreMaintenanceAction"><Name>Health Service Store Maintenance Action</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.HealthView"><Name>Monitors</Name><Description>View/Add/Edit monitors for types defined in management packs</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.Internal"><Name>System Center Internal Library</Name><Description>System Center Internal Library: This Management Pack contains definitions and components internal to System Center.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.LDAPComputerDiscoveryProbe"><Name>LDAP Computer Discovery
Probe</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ManagementGroup.DiscoveryDataReader"><Name>Discovery Data Reader Scoped To Management Group</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.AllHighSeverityAlerts"><Name>All critical alerts</Name><Description>All critical alerts</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.ComputerAlerts"><Name>Computer alerts in the last 24 hours</Name><Description>Computer alerts in the last 24 hours</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.ComputerHighSeverityAlerts"><Name>High severity computer alerts in the last 24 hours</Name><Description>High severity computer alerts in the last 24 hours</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.ComputerLowSeverityAlerts"><Name>Low severity computer alerts in the last 24
hours</Name><Description>Low severity computer alerts in the last 24 hours</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.ComputerMediumSeverityAlerts"><Name>Medium severity computer alerts in the last 24 hours</Name><Description>Medium severity computer alerts in the last 24 hours</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.ComputersErrorStateView"><Name>All computers in a critical state</Name><Description>All computers in a critical state</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.ComputersMaintenanceStateView"><Name>All computers in maintenance</Name><Description>All computers in maintenance</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.ComputersSuccessStateView"><Name>All computers in a success state</Name><Description>All computers in a success
state</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.ComputersUnknownStateView"><Name>All computers in a unknown state</Name><Description>All computers in a unknown state</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.ComputersWarningStateView"><Name>All computers in a warning state</Name><Description>All computers in a warning state</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.DistAppErrorStateView"><Name>All distributed applications in a critical state</Name><Description>All distributed applications in a critical state</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.DistAppMaintenanceStateView"><Name>All distributed applications in maintenance</Name><Description>All distributed applications in maintenance</Description></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.MonitoringSplashView.DistAppSuccessStateView"><Name>All distributed applications in a success state</Name><Description>All distributed applications in a success state</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.DistAppUnknownStateView"><Name>All distributed applications in a unknown state</Name><Description>All distributed applications in a unknown state</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.DistAppWarningStateView"><Name>All distributed applications in a warning state</Name><Description>All distributed applications in a warning state</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.HighSeverityAlerts"><Name>High severity alerts in the last 24 hours</Name><Description>High severity alerts in the last 24 hours</Description></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.MonitoringSplashView.LowSeverityAlerts"><Name>Low severity alerts in the last 24 hours</Name><Description>Low severity alerts in the last 24 hours</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.MediumSeverityAlerts"><Name>Medium severity alerts in the last 24 hours</Name><Description>Medium severity alerts in the last 24 hours</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.OtherAlerts"><Name>All alerts in the last 24 hours</Name><Description>All alerts in the last 24 hours</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.ServiceAlerts"><Name>Service alerts in the last 24 hours</Name><Description>Service alerts in the last 24 hours</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.ServiceHighSeverityAlerts"><Name>High severity service alerts in the last
24 hours</Name><Description>High severity service alerts in the last 24 hours</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.ServiceLowSeverityAlerts"><Name>Low severity service alerts in the last 24 hours</Name><Description>Low severity service alerts in the last 24 hours</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MonitoringSplashView.ServiceMediumSeverityAlerts"><Name>Medium severity service alerts in the last 24 hours</Name><Description>Medium severity service alerts in the last 24 hours</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MPUpdate.CheckForMPUpdate"><Name>Check for new MPs Action</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MPUpdate.CheckForMPUpdate" SubElementID="MPVersionFileUrl"><Name>MP Version File Url</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MPUpdate.CheckForMPUpdate"
SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.MPUpdateActionAccount"><Name>MPUpdate Action Account</Name><Description>This account is used by the MPUpdate notifier</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.NotifyDependencyMonitorUpdate"><Name>Notify Dependency Monitor Update</Name><Description>System rule that notifies the sender when dependency monitor updates have been processed.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.NotifyPublishedEntityState"><Name>Notify Object State Insertion</Name><Description>System rule that notifies that state change events from any object has inserted into database.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OnDemandDiscoveryTriggerAction"><Name>On Demand Discovery Trigger Write Action</Name></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.OperationsManager.Availability.ContainerData.DateAndTime"><Name>Creation Date And Time</Name><Description>This string is used in UI transforms.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OperationsManager.Availability.ContainerData.States"><Name>Availability state data</Name><Description>This string is used in UI transforms.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OperationsManager.RoutingData.Cost"><Name>Route cost (weight)</Name><Description>This string is used in UI transforms.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OperationsManager.RoutingData.DateAndTime"><Name>Creation Date And Time</Name><Description>This string is used in UI transforms.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OperationsManager.RoutingData.DefaultRoute"><Name>Upload queue destination</Name><Description>This string is used in UI
transforms.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OperationsManager.RoutingData.HealthServiceId"><Name>Local Health Service</Name><Description>This string is used in UI transforms.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OperationsManager.RoutingData.NextDestinations"><Name>Available destinations</Name><Description>This string is used in UI transforms.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OperationsManager.RoutingData.ParkHoldString"><Name>Parked destination</Name><Description>This string is used in UI transforms.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OperationsManager.RoutingData.RootConnector"><Name>Message queue destination</Name><Description>This string is used in UI transforms.</Description></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.OperationsManager.RoutingData.ShowHideString"><Name>show/hide</Name><Description>This string is used in UI transforms.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OperationsManager.RoutingData.TargetID"><Name>Target identification</Name><Description>This string is used in UI transforms.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OperationsManager.RoutingData.TargetName"><Name>Target name</Name><Description>This string is used in UI transforms.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ManagementServicePoolWatcher.AllManagementServersPool.Discovery"><Name>Discover All Management Servers Pool Watcher</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ManagementServicePoolWatcher.Discovery.DataSource"><Name>Resource Pool Watcher Discovery Data Source</Name></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.ManagementServicePoolWatcher.Discovery.DataSource" SubElementID="IntervalSeconds"><Name>Interval Seconds</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OpsMgrDBWatcher.Discovery"><Name>Discover Operational Database Watchers</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PerformanceDataWriter"><Name>PerformanceData Action</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PerformanceView"><Name>Performance</Name><Description>Displays performance charts</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PostDistributedAck"><Name>Distributed Ack Action</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PostDistributedAck.DependencyMonitor"><Name>Dependency Monitor Distributed Ack Action</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PostDistributedAck.PublishedEntityHealthStateChange"><Name>Entity Health State Change
Distributed Ack Action</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PopulateAllComputersGroup"><Name>Populate All Windows Computers Group</Name><Description>Populates the All Windows Computers Group.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PopulateCollectionManagementServerComputerGroup"><Name>Populate Collection Management Server Computer Group</Name><Description>Populates this group with all Collection Management Servers.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PopulateGatewayManagementServerComputerGroup"><Name>Populate Gateway Management Server Computer Group</Name><Description>Populates this group with all Gateway Management Servers.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PopulateManagementServerComputerGroup"><Name>Populate Management Server Computer Group</Name><Description>Populates this group with all Management Servers -- Root,
Collection, Gateway.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PopulateRootManagementServerComputerGroup"><Name>Populate Root Management Server Emulator Computer Group</Name><Description>Populates this group with the Root Management Server Emulator.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PopulateSCAgentlessManagedComputerGroup"><Name>Populate Agentless Managed Computer Group</Name><Description>Populates this group with Managed Computer objects that are being monitored remotely.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PopulateSCAgentManagedComputerGroup"><Name>Populate Agent Managed Computer Group</Name><Description>Populates this group with Managed Computer objects that have a Health Service installed.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PublishedAlertProvider"><Name>Published Alert Data Source</Name></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.PublishedAlertProviderInternal"><Name>Published Alert Data Source (Internal)</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PublishedDiscoveryDataProvider"><Name>Published DiscoveryData Data Source</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PublishedDiscoveryDataProviderInternal"><Name>Published DiscoveryData Data Source (Internal)</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PublishedEntityHealthStateChangeNotification"><Name>Published Entity Health State Change Notification Data Source</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PublishedEntityHealthStateChangeNotificationInternal"><Name>Published Entity Health State Change Notification Data Source (Internal)</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PublishedEntityHealthStateChangeProvider"><Name>Published Entity Health State Change Data
Source</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PublishedEntityHealthStateChangeProviderInternal"><Name>Published Entity Health State Change Data Source (Internal)</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PublishedEventProvider"><Name>Published Event Data Source</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PublishedEventProviderInternal"><Name>Published Event Data Source (Internal)</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PublishedPerformanceDataProvider"><Name>Published PerformanceData Data Source</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PublishedPerformanceDataProviderInternal"><Name>Published PerformanceData Data Source (Internal)</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PublishedSignatureProvider"><Name>Published Signature Provider</Name></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.PublishedSignatureProviderInternal"><Name>Published Signature Provider (Internal)</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ReadDiscoveryManagerData"><Name>Read Discovery Data</Name><Description>This rule reads and publishes discovery data created by scheduled discoveries</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ReloadConfig"><Name>Reload Configuration</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ReloadConfigAction"><Name>Reload Config Action</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ResetHealthServiceStore"><Name>Flush Health Service State and Cache</Name><Description>This task will reset all state in the Health Service.  This includes the state of rules, monitors, outgoing data, and cached management packs.  Since this task will reset the service, status of this task will not be delivered since outgoing task status is part of what
is reset by this task.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ResetServiceStoreAction"><Name>Reset Service Store Action</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.RulesView"><Name>Rules</Name><Description>View/Add/Edit rules for types defined in management packs</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OverridesView"><Name>Overrides</Name><Description>View/Add/Edit overrides for types defined in management packs</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SlaView"><Name>Service Level Tracking</Name><Description>View/Add/Edit service levels for types defined in management packs</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SCManagedComputerPropertyDiscovery"><Name>Discover Managed Computer Properties</Name><Description>Discovers properties on the System Center Managed Computer
object.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SDKService.AutomaticallyRestart"><Name>Restart Data Access Service deprecated</Name><Description>Restarts the Data Access service if we detect that it is not running.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SDKService.DatabaseConnectivity"><Name>Data Access Service - Database Connectivity deprecated</Name><Description>Monitors the database connectivity of the Data Access service.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SDKService.DatabaseConnectivity" SubElementID="DatabaseConnectivityEstablished"><Name>Database connectivity is regained</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SDKService.DatabaseConnectivity" SubElementID="DatabaseConnectivityLost"><Name>Database connectivity is lost</Name></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.SDKService.DatabaseConnectivity.AlertMessage"><Name>Database connectivity is lost deprecated</Name><Description>The Data Access service has lost connectivity to the database.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SDKService.PortAvailability"><Name>Data Access Service - Port Availability deprecated</Name><Description>Monitors the port availability of the Data Access service.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SDKService.PortAvailability" SubElementID="PortAvailable"><Name>The Data Access service port is available</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SDKService.PortAvailability" SubElementID="PortUnavailable"><Name>The Data Access service port is unavailable</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SDKService.PortAvailability.AlertMessage"><Name>Data Access service unable to acquire port
deprecated</Name><Description>The System Center Data Access service has not initialized since port 5724 is in use. Service will keep retrying to acquire the port.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SDKService.ServiceMonitor"><Name>Data Access Service - Windows Service deprecated</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SDKService.ServiceMonitor" SubElementID="NotRunning"><Name>Service Not Running</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SDKService.ServiceMonitor" SubElementID="Running"><Name>Service Running</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SDKService.ServiceMonitor.AlertMessage"><Name>Data Access Service - Windows Service deprecated</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SignatureWriter"><Name>Signature Writer Action</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SqlJobExecuter"><Name>SQL
Job Executer Action</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SqlJobs.AlertAutoResolveExecuteAll"><Name>Alert Auto Resolve Execute All</Name><Description>System rule that auto resolves alerts.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SqlJobs.DetectAndFixInstanceSpaceInconsistencies"><Name>Detect and Fix Object Space Inconsistencies</Name><Description>System rule that detects and fixes object space inconsistencies in the operational database.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SqlJobs.DiscoveryDataPurging"><Name>Discovery Data Grooming</Name><Description>System rule that grooms discovery data.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SqlJobs.MaintenanceMode"><Name>Maintenance Mode</Name><Description>System rule that updates maintenance mode data.</Description></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.SqlJobs.OptimizeIndexes"><Name>Optimize Indexes</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SqlJobs.PartitioningAndGrooming"><Name>Partitioning and Grooming</Name><Description>System rule that runs a workflow to partition and groom the operational database.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SqlJobs.TransferEvents"><Name>Transfer Events</Name><Description>System rule that runs a workflow to transfer data.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.StateView"><Name>State</Name><Description>Displays instance state</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.SystemEntityClassDefinitionView"><Name>Type Definition View</Name><Description>Type Definition View</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.TriggerOnDemandDiscovery"><Name>Trigger On Demand Discovery</Name><Description>This
task is used to trigger an on demand discovery</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.TasksView"><Name>Tasks</Name><Description>View/Add/Edit tasks for types defined in management packs</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.UpdatesForInstalledManagementPacksAvailable"><Name>New Management Pack Available</Name><Description>Alert generating rule for when newer versions of installed management packs are available.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.UpdatesForInstalledManagementPacksAvailable.AlertMessage"><Name>Updates to installed management packs are available</Name><Description>{0}</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ViewDefinitionsView"><Name>Views</Name><Description>Displays views defined in management packs</Description></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.WindowsComputerPropertyDiscovery"><Name>Windows Computer Property Discovery Data Source</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.WindowsComputerPropertyDiscovery" SubElementID="IntervalSeconds"><Name>Interval Seconds</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.WindowsComputerPropertyDiscovery" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PopulateHealthServicesGroup"><Name>Discovery rule that populates Health Service Group</Name><Description>Discovery rule that populates Health Service Group</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PopulateAgentManagedGroup"><Name>Discovery rule that populates Agent Managed Group</Name><Description>Discovery rule that populates Agent Managed Group</Description></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.PopulateManagementServerGroup"><Name>Discovery rule that populates Management Server Group</Name><Description>Discovery rule that populates Management Server Group</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PopulateGatewayServerGroup"><Name>Discovery rule that populates Gateway Server Group</Name><Description>Discovery rule that populates Gateway Server Group</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OpsMgrDWWatchersGroupPopulator"><Name>Discovery rule that populates OpsMgr Data Warehouse Watchers Group</Name><Description>Discovery rule that populates OpsMgr Data Warehouse Watchers Group</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.PopulateDataBaseGroup"><Name>Discovery rule that populates Database Group</Name><Description>Discovery rule that populates Database Group</Description></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.InfrastructureGroupContainsManagementServerGroupRelationshipDiscovery"><Name>Discovery rule that populates relationship between Infrastructure Group and Management Server Group</Name><Description>Discovery rule that populates Database Group</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.InfrastructureGroupContainsGatewayManagementServerGroupRelationshipDiscovery"><Name>Discovery rule that populates relationship between Infrastructure Group and Gateway Management Server Group</Name><Description>Discovery rule that populates relationship between Infrastructure Group and Gateway Management Server Group</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.WebConsoleWatcherDiscovery"><Name>Discovery rule that populates Web console watchers</Name><Description>Discovery rule that populate web console watchers instances.</Description></DisplayString><DisplayString
ElementID="Microsoft.SystemCenter.ReportConsoleWatcherDiscovery"><Name>Discovery rule that populates Report console watchers</Name><Description>Discovery rule that populate Report console watchers instances.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.WebInterfacesGroupPopulator"><Name>Discovery rule that populates Web Interfaces Group</Name><Description>Discovery rule that populate Web Interfaces Group</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ManagementGroup.ContainsDatabaseGroupRelationship"><Name>Discovery rule that populates relationship between MG and Database Group</Name><Description>Discovery rule that populates relationship between MG and Database Group</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ManagementGroup.ContainsInfrastructureGroupRelationship"><Name>Discovery rule that populates relationship between MG and Infrastructure Group</Name><Description>Discovery rule that
populates relationship between MG and Infrastructure Group</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ManagementGroup.ContainsWebInterfacesGroupRelationship"><Name>Discovery rule that populates relationship between MG and WebInterfaces Group</Name><Description>Discovery rule that populates relationship between MG and WebInterfaces Group</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DataBaseGroup.DependOnOpsMgrDBWatchersGroup.AvailabilityRollup"><Name>Dependency Monitor for Data base Group depends on Ops Manager DB Watcher Group</Name><Description>This monitor roll ups health from Ops DB Watcher Group to Database Group.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.DataBaseGroup.DependOnOpsMgrDWWatchersGroup.AvailabilityRollup"><Name>Dependency Monitor for Data base Group depends on Ops Manager DW Watcher Group</Name><Description>This monitor roll ups health from Ops DW Watcher Group to
Database Group.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OpsMgrDWWatchersGroup.DependOnOpsMgrDWWatchers.AvailabilityRollup"><Name>Dependency Monitor for Ops Manager DB Watcher Group depends on Ops Manager DB Watcher</Name><Description>This monitor roll ups health from Ops Manager DB Watcher to Ops Manager DB Watcher Group.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.InfrastructureGroup.DependOnManagementServerGroups.AvailabilityRollup"><Name>Dependency Monitor for Infrastructure Group depends on Management Server Group</Name><Description>This monitor roll ups health from Management Server Group to Infrastructure Group.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.InfrastructureGroup.DependOnGatewayManagementServerGroups.AvailabilityRollup"><Name>Dependency Monitor for Infrastructure Group depends on Gateway Management Server Group</Name><Description>This monitor roll ups health from
Gateway Management Server Group to Infrastructure Group.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ManagementGroup.Group.DependOnDatabaseGroup.AvailabilityRollup"><Name>Dependency Monitor for Management Group depends on Database Group</Name><Description>This monitor roll ups health from Database Group to Management Group.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ManagementGroup.Group.DependOnInfrastructureGroup.AvailabilityRollup"><Name>Dependency Monitor for Management Group depends on Infrastructure Group</Name><Description>This monitor roll ups health from Infrastructure Group to Management Group.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ManagementGroup.Group.DependOnWebUserInterfacesGroup.AvailabilityRollup"><Name>Dependency Monitor for Management Group depends on Web User Interfaces Group</Name><Description>This monitor roll ups health from Web User Interfaces Group to
Management Group.</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ValidateAlertSubscription"><Name>Deprecated Validate Alert Subscription</Name><Description>Deprecated Validate Alert Subscription</Description></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.ManagementServicePoolWatcher.ADAssignmentResourcePool.Discovery"><Name>Discover AD Assigment Resource Pool Watcher</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OpsMgrDBWatcherProvider"><Name>Operations Manager Database Watcher Discovery Provider</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OpsMgrDBWatcherProvider" SubElementID="IntervalSeconds"><Name>Interval Seconds</Name></DisplayString><DisplayString ElementID="Microsoft.SystemCenter.OpsMgrDBWatcherProvider" SubElementID="TimeoutSeconds"><Name>Timeout Seconds</Name></DisplayString></DisplayStrings><KnowledgeArticles><KnowledgeArticle
ElementID="Microsoft.SystemCenter.CheckForManagementPackUpdates" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule periodically checks for new Management Packs. If there is a new Management Pack available, and alert is generated.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.CollectAlerts" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used
internally to collect all alerts for the whole Management Group. This rule should not be overridden as it will have an adverse negative impact on monitoring.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.CollectDiscoveryData" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used internally to collect all discovery data for the whole Management Group. This rule should not be overridden as it will have an adverse negative impact on
monitoring.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.CollectEntityState" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used internally to collect all state for a given object for the whole Management Group. This rule should not be overridden as it will have an adverse negative impact on monitoring.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This
section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.CollectEventData" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used internally to collect all events for the whole Management Group. This rule should not be overridden as it will have an adverse negative impact on monitoring.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section
xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.CollectMonitorAlert" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used internally to collect all alerts generated by monitors for the whole Management Group. This rule should not be overridden as it will have an adverse negative impact on monitoring.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of
rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.CollectPerformanceData" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used internally to collect all performance data for the whole Management Group. This rule should not be overridden as it will have an adverse negative impact on monitoring.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.CollectPublishedEntityState"
Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used internally to collect all state change events on all objects for the whole Management Group. This rule should not be overridden as it will have an adverse negative impact on monitoring.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.CollectSignatureData" Visible="true"><MamlContent><maml:section
xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used internally to collect all self tuning threshold signatures for the whole Management Group. This rule should not be overridden as it will have an adverse negative impact on monitoring.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.Internal" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Microsoft System Center Internal Library: This Management
Pack contains definitions and components internal to System Center.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.NotifyPublishedEntityState" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used internally to notify about all state change events on all objects for the whole Management Group that inserted into database successfully. This rule should not be overridden as it will have an adverse negative impact on monitoring.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of
rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.ReadDiscoveryManagerData" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used internally to publish discovery data created by the discovery manager for scheduled and on demand discoveries.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.SDKService.DatabaseConnectivity" Visible="true"><MamlContent><maml:section
xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>The Data Access service is unable to connect to the Operations Manager database. When the Data Access service is not running, users will not be able to use the Operations Console, Web Console, or Command Shell. Any connectors to 3rd party management systems will not work as well.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Configuration</maml:title><maml:list class="unordered"><maml:listItem><maml:para> The Operations Manager database server is offline or unreachable.</maml:para></maml:listItem><maml:listItem><maml:para>The Operations Manager database is offline or detached.</maml:para></maml:listItem><maml:listItem><maml:para>The Data Access service does not sufficient privileges to connect to the database.</maml:para></maml:listItem></maml:list><maml:para /></maml:section><maml:section
xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para /><maml:list class="unordered"><maml:listItem><maml:para>Check the database server on which the Operations Manager database is installed to make sure its online and the Operations Manager database is online.</maml:para></maml:listItem><maml:listItem><maml:para>Make sure the database server is reachable from the server where the Data Access service is installed.</maml:para></maml:listItem><maml:listItem><maml:para>Make sure the SQL server accepts remote connections using SQL Server Configuration Manager.</maml:para></maml:listItem><maml:listItem><maml:para>Make sure the account used by the Data Access service has sufficient privileges to access the Operations Manager database.</maml:para></maml:listItem></maml:list><maml:para /></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.SDKService.PortAvailability"
Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>The Data Access service is unable to initialize because port 5724 is in use. The Data Access service must be able to use 5724 as this is the port used by the consoles as well as other Operations Manager components to communicate with the Data Access service. When the Data Access service is not running, users will not be able to use the Operations Console, Web Console, or Command Shell. Any connectors to 3rd party management systems will not work as well.</maml:para><maml:para /></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>Another application is using port 5724.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>Run netstat.exe –a to see what process is using port
5724.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.SDKService.ServiceMonitor" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>When the Data Access service is not running, no User Interface connections can be made.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>The Data Access service is not running.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>Check the Operations Manager and System event logs to determine why the Data Access service has entered a stopped state.</maml:para><maml:para>Open the Services MMC or use another Service Control Manager utility to start the "System Center Data Access" service.</maml:para><maml:para
/></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.SqlJobs.AlertAutoResolveExecuteAll" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used internally to execute database maintenance tasks and jobs. This rule should not be overridden as it will have an adverse negative impact the overall health, functionality, and consistency of the operational database.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle
ElementID="Microsoft.SystemCenter.SqlJobs.DetectAndFixInstanceSpaceInconsistencies" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used internally to execute database maintenance tasks and jobs. This rule should not be overridden as it will have an adverse negative impact the overall health, functionality, and consistency of the operational database.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.SqlJobs.DiscoveryDataPurging"
Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used internally to execute database maintenance tasks and jobs. This rule should not be overridden as it will have an adverse negative impact the overall health, functionality, and consistency of the operational database.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.SqlJobs.MaintenanceMode" Visible="true"><MamlContent><maml:section
xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used internally to execute database maintenance tasks and jobs. This rule should not be overridden as it will have an adverse negative impact the overall health, functionality, and consistency of the operational database.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.SqlJobs.OptimizeIndexes" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule
is used internally to execute database maintenance tasks and jobs. This rule should not be overridden as it will have an adverse negative impact the overall health, functionality, and consistency of the operational database.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.SqlJobs.PartitioningAndGrooming" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used internally to execute database maintenance tasks and jobs. This rule should not be
overridden as it will have an adverse negative impact the overall health, functionality, and consistency of the operational database.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.TriggerOnDemandDiscovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This task is used internally to execute on demand discoveries.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This
section is not applicable for this type of task.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of task.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.SqlJobs.TransferEvents" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>This rule is used internally to execute database maintenance tasks and jobs. This rule should not be overridden as it will have an adverse negative impact the overall health, functionality, and consistency of the operational database.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section
xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.UpdatesForInstalledManagementPacksAvailable" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>There are one or more newer management packs available for download.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>A new Microsoft management pack has been released for an MP that you have installed.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>The link below will bring you to the management pack catalog where you can download
MPs</maml:para><maml:para><maml:navigationLink targetVerification="false"><maml:linkText>http://www.microsoft.com/mom/managementpacks</maml:linkText><maml:uri href="http://www.microsoft.com/mom/managementpacks" /></maml:navigationLink></maml:para><maml:para>Open the Services MMC or use another Service Control Manager utility to start the "System Center Data Access" service.</maml:para><maml:para /></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.PopulateManagementServerGroup" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Populates the Management Server group.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section
xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.PopulateHealthServicesGroup" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Populates the health services group.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.PopulateAgentManagedGroup"
Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Populates the agent managed group.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.PopulateGatewayServerGroup" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Populates the Gateway Server group.</maml:para></maml:section><maml:section
xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.OpsMgrDWWatchersGroupPopulator" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Populates the OpsMgr Data Warehouse Watchers group.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section
xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.PopulateDataBaseGroup" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Populates the OpsMgr Database group.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle
ElementID="Microsoft.SystemCenter.InfrastructureGroupContainsManagementServerGroupRelationshipDiscovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Discovers the Infrastructure Group Contains Management Servers group relationship.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.InfrastructureGroupContainsGatewayManagementServerGroupRelationshipDiscovery" Visible="true"><MamlContent><maml:section
xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Discovers the Infrastructure Group Contains Gateway Management Servers group relationship.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.WebConsoleWatcherDiscovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Discovers the Web Console Watcher.</maml:para></maml:section><maml:section
xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.ReportConsoleWatcherDiscovery" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Discovers the Report Console Watcher.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There
is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.WebInterfacesGroupPopulator" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Populates the Web Interfaces Group.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.ManagementGroup.ContainsDatabaseGroupRelationship" Visible="true"><MamlContent><maml:section
xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Discovers the Management Group contains Database Group relationship.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.ManagementGroup.ContainsInfrastructureGroupRelationship" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Discovers the Management Group contains Infrastructure Group relationship.</maml:para></maml:section><maml:section
xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.ManagementGroup.ContainsWebInterfacesGroupRelationship" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Discovers the Management Group contains Web Interfaces Group relationship.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>This section is not applicable for this type of rule.</maml:para></maml:section><maml:section
xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>There is no user action for this type of rule.</maml:para></maml:section></MamlContent></KnowledgeArticle><KnowledgeArticle ElementID="Microsoft.SystemCenter.ValidateAlertSubscription" Visible="true"><MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Generation of notification is delayed due to overloaded resources causing acknowledgements for Notifications to take longer than expected</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Causes</maml:title><maml:para>Notifications Server has slowed down and is unable to keep up with the generation of notifications for the alerts raised. The acknowledgements on the sending of notifications through the channels have slowed down. This may happen due to </maml:para><maml:para /><maml:para>1. Alert storms - too
many alerts have been generated than can be handled by the Notification server in reasonable time period. </maml:para><maml:para /><maml:para>2. Operations DB is overloaded and has caused overall system slow down.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Resolutions</maml:title><maml:para>1. Check the Alerts view for newly created Alerts. If there are too many alerts being generated, identify the root cause of the alerts and fix it.</maml:para><maml:para /><maml:para>2. If the Alerts cannot be stopped, disable the Alert generation on the monitor until the rate of Alerts can be controlled</maml:para><maml:para /><maml:para>3. If all the notifications about the same Alert, identify the subscription that is causing the Notification and disable it. The Subscription ID of the subscription behind the notification can usually be found in the body of the notification message.</maml:para><maml:para /><maml:para>4. The Operations
DB or the machine hosting it may be overloaded. Please use Operations Database diagnostic steps to verify if these problems can be fixed.</maml:para></maml:section></MamlContent></KnowledgeArticle></KnowledgeArticles></LanguagePack></LanguagePacks><Resources><Assembly ID="Res.Microsoft.SystemCenter.OperationsManager.Availability.ContainerData" Accessibility="Public" FileName="Microsoft.SystemCenter.OperationsManager.Availability.ContainerData" HasNullStream="true" QualifiedName="NotImplemented" /><Assembly ID="Res.Microsoft.SystemCenter.OperationsManager.RoutingData" Accessibility="Public" FileName="Microsoft.SystemCenter.OperationsManager.RoutingData" HasNullStream="true" QualifiedName="NotImplemented" /><Assembly ID="Res.Microsoft.SystemCenter.DependencyMonitor.RemoteContributorReceiverDataSource" Accessibility="Public" FileName="Microsoft.SystemCenter.DependencyMonitor.RemoteContributorReceiverDataSource" HasNullStream="true"
QualifiedName="Microsoft.EnterpriseManagement.Modules.StateChangeDataSource, Culture=&quot;&quot;, PublicKeyToken=&quot;31bf3856ad364e35&quot;, Version=&quot;7.0.5000.0&quot;" /><Assembly ID="Res.Microsoft.SystemCenter.PublishedEntityHealthStateChangeNotificationInternal" Accessibility="Public" FileName="Microsoft.SystemCenter.PublishedEntityHealthStateChangeNotificationInternal" HasNullStream="true" QualifiedName="Microsoft.Mom.DatabaseWriteModules, Culture=&quot;&quot;, PublicKeyToken=&quot;31bf3856ad364e35&quot;, Version=&quot;7.0.5000.0&quot;" /><Assembly ID="Res.Microsoft.SystemCenter.LDAPComputerDiscoveryProbe" Accessibility="Public" FileName="Microsoft.SystemCenter.LDAPComputerDiscoveryProbe" HasNullStream="true" QualifiedName="NotImplemented" /><Assembly ID="Res.Microsoft.SystemCenter.AgentManagement.PushInstallAction" Accessibility="Public" FileName="Microsoft.SystemCenter.AgentManagement.PushInstallAction" HasNullStream="true"
QualifiedName="Microsoft.Mom.AgentManagementModules" /><Assembly ID="Res.Microsoft.SystemCenter.PerformanceDataWriter" Accessibility="Public" FileName="Microsoft.SystemCenter.PerformanceDataWriter" HasNullStream="true" QualifiedName="Microsoft.Mom.DatabaseWriteModules, Culture=&quot;&quot;, PublicKeyToken=&quot;31bf3856ad364e35&quot;, Version=&quot;7.0.5000.0&quot;" /><Assembly ID="Res.Microsoft.SystemCenter.SignatureWriter" Accessibility="Public" FileName="Microsoft.SystemCenter.SignatureWriter" HasNullStream="true" QualifiedName="Microsoft.Mom.DatabaseWriteModules, Culture=&quot;&quot;, PublicKeyToken=&quot;31bf3856ad364e35&quot;, Version=&quot;7.0.5000.0&quot;" /><Assembly ID="Res.Microsoft.SystemCenter.SqlJobExecuter" Accessibility="Public" FileName="Microsoft.SystemCenter.SqlJobExecuter" HasNullStream="true" QualifiedName="Microsoft.Mom.DatabaseWriteModules, Culture=&quot;&quot;, PublicKeyToken=&quot;31bf3856ad364e35&quot;, Version=&quot;7.0.5000.0&quot;" /><Assembly
ID="Res.Microsoft.SystemCenter.AttributesViewType" Accessibility="Public" FileName="Microsoft.SystemCenter.AttributesViewType" HasNullStream="true" QualifiedName="Microsoft.EnterpriseManagement.UI.Authoring, Culture=&quot;&quot;, PublicKeyToken=&quot;31bf3856ad364e35&quot;, Version=&quot;7.0.5000.0&quot;" /><Assembly ID="Res.Microsoft.SystemCenter.DiscoveriesViewType" Accessibility="Public" FileName="Microsoft.SystemCenter.DiscoveriesViewType" HasNullStream="true" QualifiedName="Microsoft.EnterpriseManagement.UI.Authoring, Culture=&quot;&quot;, PublicKeyToken=&quot;31bf3856ad364e35&quot;, Version=&quot;7.0.5000.0&quot;" /><Assembly ID="Res.Microsoft.SystemCenter.FavoriteViewType" Accessibility="Public" FileName="Microsoft.SystemCenter.FavoriteViewType" HasNullStream="true" QualifiedName="NotUsed" /><Assembly ID="Res.Microsoft.SystemCenter.HTMLDashboardViewType" Accessibility="Public" FileName="Microsoft.SystemCenter.HTMLDashboardViewType" HasNullStream="true" QualifiedName="NotUsed"
/><Assembly ID="Res.Microsoft.SystemCenter.HTMLWidgetType" Accessibility="Public" FileName="Microsoft.SystemCenter.HTMLWidgetType" HasNullStream="true" QualifiedName="NotUsed" /><Assembly ID="Res.Microsoft.SystemCenter.HealthViewType" Accessibility="Public" FileName="Microsoft.SystemCenter.HealthViewType" HasNullStream="true" QualifiedName="Microsoft.EnterpriseManagement.UI.Authoring, Culture=&quot;&quot;, PublicKeyToken=&quot;31bf3856ad364e35&quot;, Version=&quot;7.0.5000.0&quot;" /><Assembly ID="Res.Microsoft.SystemCenter.MonitoringNavigationType" Accessibility="Public" FileName="Microsoft.SystemCenter.MonitoringNavigationType" HasNullStream="true" QualifiedName="Microsoft.Mom.Ui.Components, Culture=&quot;&quot;, PublicKeyToken=&quot;31bf3856ad364e35&quot;, Version=&quot;7.0.5000.0&quot;" /><Assembly ID="Res.Microsoft.SystemCenter.RulesViewType" Accessibility="Public" FileName="Microsoft.SystemCenter.RulesViewType" HasNullStream="true"
QualifiedName="Microsoft.EnterpriseManagement.UI.Authoring, Culture=&quot;&quot;, PublicKeyToken=&quot;31bf3856ad364e35&quot;, Version=&quot;7.0.5000.0&quot;" /><Assembly ID="Res.Microsoft.SystemCenter.SlaViewType" Accessibility="Public" FileName="Microsoft.SystemCenter.SlaViewType" HasNullStream="true" QualifiedName="Microsoft.EnterpriseManagement.UI.Authoring, Culture=&quot;&quot;, PublicKeyToken=&quot;31bf3856ad364e35&quot;, Version=&quot;7.0.5000.0&quot;" /><Assembly ID="Res.Microsoft.SystemCenter.TasksViewType" Accessibility="Public" FileName="Microsoft.SystemCenter.TasksViewType" HasNullStream="true" QualifiedName="Microsoft.EnterpriseManagement.UI.Authoring, Culture=&quot;&quot;, PublicKeyToken=&quot;31bf3856ad364e35&quot;, Version=&quot;7.0.5000.0&quot;" /><Assembly ID="Res.Microsoft.SystemCenter.OverridesViewType" Accessibility="Public" FileName="Microsoft.SystemCenter.OverridesViewType" HasNullStream="true" QualifiedName="Microsoft.EnterpriseManagement.UI.Authoring,
Culture=&quot;&quot;, PublicKeyToken=&quot;31bf3856ad364e35&quot;, Version=&quot;7.0.5000.0&quot;" /><Assembly ID="Res.Microsoft.SystemCenter.ViewDefinitionsViewType" Accessibility="Public" FileName="Microsoft.SystemCenter.ViewDefinitionsViewType" HasNullStream="true" QualifiedName="Microsoft.EnterpriseManagement.UI.Authoring, Culture=&quot;&quot;, PublicKeyToken=&quot;31bf3856ad364e35&quot;, Version=&quot;7.0.5000.0&quot;" /></Resources></ManagementPack>
